using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata;
using CSCPA.Data.Entities;

#nullable disable

namespace CSCPA.Data
{
    public partial class AppDbContext : DbContext
    {
        public AppDbContext()
        {
        }

        public AppDbContext(DbContextOptions<AppDbContext> options)
            : base(options)
        {
        }

        public virtual DbSet<ApplicationLog> ApplicationLogs { get; set; }
        public virtual DbSet<Attachment> Attachments { get; set; }
        public virtual DbSet<AttachmentType> AttachmentTypes { get; set; }
        public virtual DbSet<AttachmentTypeGrid> AttachmentTypeGrids { get; set; }
        public virtual DbSet<BdgaccountGroup> BdgaccountGroups { get; set; }
        public virtual DbSet<BdgaccountGroupGrid> BdgaccountGroupGrids { get; set; }
        public virtual DbSet<BdgaccountGroupSubGroup> BdgaccountGroupSubGroups { get; set; }
        public virtual DbSet<BdgaccountGroupSubGroupGrid> BdgaccountGroupSubGroupGrids { get; set; }
        public virtual DbSet<BdgaccountGroupSubGroupSubGroup> BdgaccountGroupSubGroupSubGroups { get; set; }
        public virtual DbSet<BdgaccountGroupSubGroupSubGroupGrid> BdgaccountGroupSubGroupSubGroupGrids { get; set; }
        public virtual DbSet<BdgaccountGroupSubGroupSubGroupSubGroup> BdgaccountGroupSubGroupSubGroupSubGroups { get; set; }
        public virtual DbSet<BdgaccountGroupSubGroupSubGroupSubGroupGrid> BdgaccountGroupSubGroupSubGroupSubGroupGrids { get; set; }
        public virtual DbSet<BdgaccountGroupTempTjt> BdgaccountGroupTempTjts { get; set; }
        public virtual DbSet<BdgaccountGroupType> BdgaccountGroupTypes { get; set; }
        public virtual DbSet<BdgaccountGroupTypeGrid> BdgaccountGroupTypeGrids { get; set; }
        public virtual DbSet<BdgbudetinfoDetailDelete> BdgbudetinfoDetailDeletes { get; set; }
        public virtual DbSet<BdgbudetinfoDetailZero> BdgbudetinfoDetailZeros { get; set; }
        public virtual DbSet<BdgbudgetCopyOption> BdgbudgetCopyOptions { get; set; }
        public virtual DbSet<BdgbudgetCopyOptionGrid> BdgbudgetCopyOptionGrids { get; set; }
        public virtual DbSet<BdgbudgetGroupType> BdgbudgetGroupTypes { get; set; }
        public virtual DbSet<BdgbudgetGroupTypeGrid> BdgbudgetGroupTypeGrids { get; set; }
        public virtual DbSet<BdgbudgetInfo> BdgbudgetInfos { get; set; }
        public virtual DbSet<BdgbudgetInfoActualsGrid> BdgbudgetInfoActualsGrids { get; set; }
        public virtual DbSet<BdgbudgetInfoDetail> BdgbudgetInfoDetails { get; set; }
        public virtual DbSet<BdgbudgetInfoDetailChange> BdgbudgetInfoDetailChanges { get; set; }
        public virtual DbSet<BdgbudgetInfoDetailDetail> BdgbudgetInfoDetailDetails { get; set; }
        public virtual DbSet<BdgbudgetInfoDetailDetailDetail> BdgbudgetInfoDetailDetailDetails { get; set; }
        public virtual DbSet<BdgbudgetInfoDetailDetailDetailDetail> BdgbudgetInfoDetailDetailDetailDetails { get; set; }
        public virtual DbSet<BdgbudgetInfoDetailDetailDetailDetailDetail> BdgbudgetInfoDetailDetailDetailDetailDetails { get; set; }
        public virtual DbSet<BdgbudgetInfoDetailDetailDetailDetailDetailGrid> BdgbudgetInfoDetailDetailDetailDetailDetailGrids { get; set; }
        public virtual DbSet<BdgbudgetInfoDetailDetailDetailDetailGrid> BdgbudgetInfoDetailDetailDetailDetailGrids { get; set; }
        public virtual DbSet<BdgbudgetInfoDetailDetailDetailGrid> BdgbudgetInfoDetailDetailDetailGrids { get; set; }
        public virtual DbSet<BdgbudgetInfoDetailDetailGrid> BdgbudgetInfoDetailDetailGrids { get; set; }
        public virtual DbSet<BdgbudgetInfoDetailGrid> BdgbudgetInfoDetailGrids { get; set; }
        public virtual DbSet<BdgbudgetInfoDetailLog> BdgbudgetInfoDetailLogs { get; set; }
        public virtual DbSet<BdgbudgetInfoDetailLog2> BdgbudgetInfoDetailLog2s { get; set; }
        public virtual DbSet<BdgbudgetInfoDetailSum> BdgbudgetInfoDetailSums { get; set; }
        public virtual DbSet<BdgbudgetInfoDetailTemp> BdgbudgetInfoDetailTemps { get; set; }
        public virtual DbSet<BdgbudgetInfoDetailView> BdgbudgetInfoDetailViews { get; set; }
        public virtual DbSet<BdgbudgetInfoDetailview1> BdgbudgetInfoDetailviews1 { get; set; }
        public virtual DbSet<BdgbudgetInfoGrid> BdgbudgetInfoGrids { get; set; }
        public virtual DbSet<BdgbudgetInfoLog> BdgbudgetInfoLogs { get; set; }
        public virtual DbSet<BdgbudgetInfoTemp> BdgbudgetInfoTemps { get; set; }
        public virtual DbSet<BdgbudgetInfoToBeAdded> BdgbudgetInfoToBeAddeds { get; set; }
        public virtual DbSet<BdgbudgetInfoView> BdgbudgetInfoViews { get; set; }
        public virtual DbSet<BdgbudgetinfoChange> BdgbudgetinfoChanges { get; set; }
        public virtual DbSet<BdgbudgetinfoCurrentyearamountTemp> BdgbudgetinfoCurrentyearamountTemps { get; set; }
        public virtual DbSet<BdgbudgetinfoCurrentyearamountTemponemonth> BdgbudgetinfoCurrentyearamountTemponemonths { get; set; }
        public virtual DbSet<BdgbudgetinfoDetailCombineAll> BdgbudgetinfoDetailCombineAlls { get; set; }
        public virtual DbSet<BdgbudgetinfoDetailCurrentyearamountTemp> BdgbudgetinfoDetailCurrentyearamountTemps { get; set; }
        public virtual DbSet<BdgbudgetinfoDetaill> BdgbudgetinfoDetaills { get; set; }
        public virtual DbSet<BdgbudgetinfoMonth01> BdgbudgetinfoMonth01s { get; set; }
        public virtual DbSet<BdgbudgetinfoMonth02> BdgbudgetinfoMonth02s { get; set; }
        public virtual DbSet<BdgbudgetinfoMonth03> BdgbudgetinfoMonth03s { get; set; }
        public virtual DbSet<BdgbudgetinfoMonth04> BdgbudgetinfoMonth04s { get; set; }
        public virtual DbSet<BdgbudgetinfoMonth05> BdgbudgetinfoMonth05s { get; set; }
        public virtual DbSet<BdgbudgetinfoMonth06> BdgbudgetinfoMonth06s { get; set; }
        public virtual DbSet<BdgbudgetinfoMonth07> BdgbudgetinfoMonth07s { get; set; }
        public virtual DbSet<BdgbudgetinfoMonth08> BdgbudgetinfoMonth08s { get; set; }
        public virtual DbSet<BdgbudgetinfoMonth09> BdgbudgetinfoMonth09s { get; set; }
        public virtual DbSet<BdgbudgetinfoMonth10> BdgbudgetinfoMonth10s { get; set; }
        public virtual DbSet<BdgbudgetinfoMonth11> BdgbudgetinfoMonth11s { get; set; }
        public virtual DbSet<BdgbudgetinfoMonth12> BdgbudgetinfoMonth12s { get; set; }
        public virtual DbSet<BdgcommitteeType> BdgcommitteeTypes { get; set; }
        public virtual DbSet<BdgcommitteeTypeGrid> BdgcommitteeTypeGrids { get; set; }
        public virtual DbSet<Bdgcompany> Bdgcompanies { get; set; }
        public virtual DbSet<BdgcompanyGrid> BdgcompanyGrids { get; set; }
        public virtual DbSet<Bdgdepartment> Bdgdepartments { get; set; }
        public virtual DbSet<BdgdepartmentBdgaccountGroup> BdgdepartmentBdgaccountGroups { get; set; }
        public virtual DbSet<BdgdepartmentBdgaccountGroupGrid> BdgdepartmentBdgaccountGroupGrids { get; set; }
        public virtual DbSet<BdgdepartmentGrid> BdgdepartmentGrids { get; set; }
        public virtual DbSet<BdgdepartmentGroup> BdgdepartmentGroups { get; set; }
        public virtual DbSet<BdgdepartmentGroupGrid> BdgdepartmentGroupGrids { get; set; }
        public virtual DbSet<BdgdepartmentHistoricDataGrid> BdgdepartmentHistoricDataGrids { get; set; }
        public virtual DbSet<BdgdepartmentHistoricDatum> BdgdepartmentHistoricData { get; set; }
        public virtual DbSet<Bdgemployee> Bdgemployees { get; set; }
        public virtual DbSet<BdgemployeeCategory> BdgemployeeCategories { get; set; }
        public virtual DbSet<BdgemployeeCategoryGrid> BdgemployeeCategoryGrids { get; set; }
        public virtual DbSet<BdgemployeeEmployeeHistory> BdgemployeeEmployeeHistories { get; set; }
        public virtual DbSet<BdgemployeeEmployeeHistoryGrid> BdgemployeeEmployeeHistoryGrids { get; set; }
        public virtual DbSet<BdgemployeeGrid> BdgemployeeGrids { get; set; }
        public virtual DbSet<BdgemployeeMissingBdgbdugetinfoDetailTemp> BdgemployeeMissingBdgbdugetinfoDetailTemps { get; set; }
        public virtual DbSet<BdgemployeePosition> BdgemployeePositions { get; set; }
        public virtual DbSet<BdgemployeePositionGrid> BdgemployeePositionGrids { get; set; }
        public virtual DbSet<BdgemployeeStatus> BdgemployeeStatuses { get; set; }
        public virtual DbSet<BdgemployeeStatusGrid> BdgemployeeStatusGrids { get; set; }
        public virtual DbSet<BdgemployeeTemp> BdgemployeeTemps { get; set; }
        public virtual DbSet<BdgemployeeType> BdgemployeeTypes { get; set; }
        public virtual DbSet<BdgemployeeTypeGrid> BdgemployeeTypeGrids { get; set; }
        public virtual DbSet<BdgemployeeUnit> BdgemployeeUnits { get; set; }
        public virtual DbSet<BdgemployeeUnitGrid> BdgemployeeUnitGrids { get; set; }
        public virtual DbSet<BdgemployeeUnitPosition> BdgemployeeUnitPositions { get; set; }
        public virtual DbSet<BdgemployeeUnitPositionGrid> BdgemployeeUnitPositionGrids { get; set; }
        public virtual DbSet<BdgemployeeUnitPositionStep> BdgemployeeUnitPositionSteps { get; set; }
        public virtual DbSet<BdgemployeeUnitPositionStepEditableGrid> BdgemployeeUnitPositionStepEditableGrids { get; set; }
        public virtual DbSet<BdgemployeeUnitPositionStepGrid> BdgemployeeUnitPositionStepGrids { get; set; }
        public virtual DbSet<BdgglaccountMapping> BdgglaccountMappings { get; set; }
        public virtual DbSet<Bdggltransaction> Bdggltransactions { get; set; }
        public virtual DbSet<BdggltransactionGrid> BdggltransactionGrids { get; set; }
        public virtual DbSet<BdgmeetingStatus> BdgmeetingStatuses { get; set; }
        public virtual DbSet<BdgmeetingStatusGrid> BdgmeetingStatusGrids { get; set; }
        public virtual DbSet<BdgpositionType> BdgpositionTypes { get; set; }
        public virtual DbSet<BdgpositionTypeGrid> BdgpositionTypeGrids { get; set; }
        public virtual DbSet<BdgprojectType> BdgprojectTypes { get; set; }
        public virtual DbSet<BdgprojectTypeGrid> BdgprojectTypeGrids { get; set; }
        public virtual DbSet<Bdgreport> Bdgreports { get; set; }
        public virtual DbSet<BdgreportGrid> BdgreportGrids { get; set; }
        public virtual DbSet<BdgreportGroup> BdgreportGroups { get; set; }
        public virtual DbSet<BdgreportGroupBdgglaccountMapping> BdgreportGroupBdgglaccountMappings { get; set; }
        public virtual DbSet<BdgreportGroupBdgglaccountMappingGrid> BdgreportGroupBdgglaccountMappingGrids { get; set; }
        public virtual DbSet<BdgreportGroupBdgreport> BdgreportGroupBdgreports { get; set; }
        public virtual DbSet<BdgreportGroupBdgreportGrid> BdgreportGroupBdgreportGrids { get; set; }
        public virtual DbSet<BdgreportGroupDuplicateMasking> BdgreportGroupDuplicateMaskings { get; set; }
        public virtual DbSet<BdgreportGroupDuplicateMaskingGrid> BdgreportGroupDuplicateMaskingGrids { get; set; }
        public virtual DbSet<BdgreportGroupGrid> BdgreportGroupGrids { get; set; }
        public virtual DbSet<BdgreportGroupMissingMasking> BdgreportGroupMissingMaskings { get; set; }
        public virtual DbSet<BdgreportGroupMissingMaskingGrid> BdgreportGroupMissingMaskingGrids { get; set; }
        public virtual DbSet<BdgreportGroupType> BdgreportGroupTypes { get; set; }
        public virtual DbSet<BdgreportGroupTypeGrid> BdgreportGroupTypeGrids { get; set; }
        public virtual DbSet<BdgreportParameter> BdgreportParameters { get; set; }
        public virtual DbSet<BdgreportParameterGrid> BdgreportParameterGrids { get; set; }
        public virtual DbSet<BdgreportParameterType> BdgreportParameterTypes { get; set; }
        public virtual DbSet<BdgreportParameterTypeGrid> BdgreportParameterTypeGrids { get; set; }
        public virtual DbSet<BdgreportType> BdgreportTypes { get; set; }
        public virtual DbSet<BdgreportTypeGrid> BdgreportTypeGrids { get; set; }
        public virtual DbSet<BdgreportUserAccountGrid> BdgreportUserAccountGrids { get; set; }
        public virtual DbSet<BudgetAmountTemp> BudgetAmountTemps { get; set; }
        public virtual DbSet<BudgetAmountTempBackup> BudgetAmountTempBackups { get; set; }
        public virtual DbSet<BudgetAmountTempGrid> BudgetAmountTempGrids { get; set; }
        public virtual DbSet<BudgetAmountTempHistory> BudgetAmountTempHistories { get; set; }
        public virtual DbSet<BudgetInfoExpenditureReport> BudgetInfoExpenditureReports { get; set; }
        public virtual DbSet<BudgetInfoMpcdetailReport> BudgetInfoMpcdetailReports { get; set; }
        public virtual DbSet<BudgetInfoMpcsummaryReport> BudgetInfoMpcsummaryReports { get; set; }
        public virtual DbSet<BudgetInfoReport> BudgetInfoReports { get; set; }
        public virtual DbSet<BudgetInfoReportPermonth> BudgetInfoReportPermonths { get; set; }
        public virtual DbSet<BudgetInfoReportapwuhp> BudgetInfoReportapwuhps { get; set; }
        public virtual DbSet<BudgetInfoReportsp> BudgetInfoReportsps { get; set; }
        public virtual DbSet<BudgetInfoReportv2> BudgetInfoReportv2s { get; set; }
        public virtual DbSet<BudgetInfoRollupReport> BudgetInfoRollupReports { get; set; }
        public virtual DbSet<BudgetInfoRollupReportBdgbudgetInfoV2> BudgetInfoRollupReportBdgbudgetInfoV2s { get; set; }
        public virtual DbSet<CommitteeBdgbudgetInfoDetailGrid> CommitteeBdgbudgetInfoDetailGrids { get; set; }
        public virtual DbSet<Country> Countries { get; set; }
        public virtual DbSet<CountryGrid> CountryGrids { get; set; }
        public virtual DbSet<CountryState> CountryStates { get; set; }
        public virtual DbSet<CountryStateGrid> CountryStateGrids { get; set; }
        public virtual DbSet<CsActualsPerMonthPerAcct> CsActualsPerMonthPerAccts { get; set; }
        public virtual DbSet<CsActualslinkGp> CsActualslinkGps { get; set; }
        public virtual DbSet<CsAllocationPerMonth> CsAllocationPerMonths { get; set; }
        public virtual DbSet<CsBdgaccountgroupSubgroupAccountcode> CsBdgaccountgroupSubgroupAccountcodes { get; set; }
        public virtual DbSet<CsBdgbudgetCount> CsBdgbudgetCounts { get; set; }
        public virtual DbSet<CsBdgbudgetInfoGrantotalUpdateView> CsBdgbudgetInfoGrantotalUpdateViews { get; set; }
        public virtual DbSet<CsBdgbudgetInfoSum> CsBdgbudgetInfoSums { get; set; }
        public virtual DbSet<CsBdgbudgetSumdetail> CsBdgbudgetSumdetails { get; set; }
        public virtual DbSet<CsBdgbudgetinfoCompareBdgbudgetinfozDetail> CsBdgbudgetinfoCompareBdgbudgetinfozDetails { get; set; }
        public virtual DbSet<CsBdgbudgetinfoDetailMonthlyProof> CsBdgbudgetinfoDetailMonthlyProofs { get; set; }
        public virtual DbSet<CsBdgbudgetinfoDetailSummary> CsBdgbudgetinfoDetailSummaries { get; set; }
        public virtual DbSet<CsBdgbudgetinfoDetailView> CsBdgbudgetinfoDetailViews { get; set; }
        public virtual DbSet<CsBdgbudgetinfoTotalsUpdate> CsBdgbudgetinfoTotalsUpdates { get; set; }
        public virtual DbSet<CsBdgbudgetinfoTotalsUpdateLevel2> CsBdgbudgetinfoTotalsUpdateLevel2s { get; set; }
        public virtual DbSet<CsBdgbudgetinfoTotalsUpdateLevel3> CsBdgbudgetinfoTotalsUpdateLevel3s { get; set; }
        public virtual DbSet<CsBudgetInfoReportsp> CsBudgetInfoReportsps { get; set; }
        public virtual DbSet<CsBudgetInfoReportspDept> CsBudgetInfoReportspDepts { get; set; }
        public virtual DbSet<CsBudgetInfoReview> CsBudgetInfoReviews { get; set; }
        public virtual DbSet<CsBudgetInfoReviewChange> CsBudgetInfoReviewChanges { get; set; }
        public virtual DbSet<CsBudgetPerMonth> CsBudgetPerMonths { get; set; }
        public virtual DbSet<CsBudgetall> CsBudgetalls { get; set; }
        public virtual DbSet<CsBudgetallHeader> CsBudgetallHeaders { get; set; }
        public virtual DbSet<CsBudgetlinkGp> CsBudgetlinkGps { get; set; }
        public virtual DbSet<CsBudgetlinkProjectedGp> CsBudgetlinkProjectedGps { get; set; }
        public virtual DbSet<CsBudgetsummary> CsBudgetsummaries { get; set; }
        public virtual DbSet<CsBudgetsummaryMonth> CsBudgetsummaryMonths { get; set; }
        public virtual DbSet<CsBudgetsummaryYtd> CsBudgetsummaryYtds { get; set; }
        public virtual DbSet<CsBudgetupdate> CsBudgetupdates { get; set; }
        public virtual DbSet<CsDuplicateEmployee> CsDuplicateEmployees { get; set; }
        public virtual DbSet<CsDuplicateEmployee2> CsDuplicateEmployee2s { get; set; }
        public virtual DbSet<CsGlAccount> CsGlAccounts { get; set; }
        public virtual DbSet<CsGlBalance> CsGlBalances { get; set; }
        public virtual DbSet<CsGpBudgetSummary> CsGpBudgetSummaries { get; set; }
        public virtual DbSet<CsGpYtdSummary> CsGpYtdSummaries { get; set; }
        public virtual DbSet<CsGrandtotalFix> CsGrandtotalFixes { get; set; }
        public virtual DbSet<CsGrandtotalFix2> CsGrandtotalFix2s { get; set; }
        public virtual DbSet<CsLrpgltransaction> CsLrpgltransactions { get; set; }
        public virtual DbSet<CsLrpgltransactionTemp> CsLrpgltransactionTemps { get; set; }
        public virtual DbSet<CsLrpgltransactionTempStep2> CsLrpgltransactionTempStep2s { get; set; }
        public virtual DbSet<CsSalaryFringeStep1> CsSalaryFringeStep1s { get; set; }
        public virtual DbSet<CsSalaryFringeStep2> CsSalaryFringeStep2s { get; set; }
        public virtual DbSet<CsSummaryMonthlybudgetActual> CsSummaryMonthlybudgetActuals { get; set; }
        public virtual DbSet<CsTotalBudgetamountByBudgetinfoid> CsTotalBudgetamountByBudgetinfoids { get; set; }
        public virtual DbSet<Css1099Amount> Css1099Amounts { get; set; }
        public virtual DbSet<Css1099AmountDetail> Css1099AmountDetails { get; set; }
        public virtual DbSet<Css1099TempStep1a> Css1099TempStep1as { get; set; }
        public virtual DbSet<Css1099TempStep1aTemp> Css1099TempStep1aTemps { get; set; }
        public virtual DbSet<Css1099TempStep1b> Css1099TempStep1bs { get; set; }
        public virtual DbSet<Css1099TempStepa> Css1099TempStepas { get; set; }
        public virtual DbSet<Css1099TempStepb> Css1099TempStepbs { get; set; }
        public virtual DbSet<Css1099TempStepbTemp> Css1099TempStepbTemps { get; set; }
        public virtual DbSet<Css1099VendorExport> Css1099VendorExports { get; set; }
        public virtual DbSet<Css1099VendorExportTemp> Css1099VendorExportTemps { get; set; }
        public virtual DbSet<CssAddglyearcodeTemp> CssAddglyearcodeTemps { get; set; }
        public virtual DbSet<CssAftMain> CssAftMains { get; set; }
        public virtual DbSet<CssAp1099Temp> CssAp1099Temps { get; set; }
        public virtual DbSet<CssApAgingTemp> CssApAgingTemps { get; set; }
        public virtual DbSet<CssBdgaccountGroupSubGroup> CssBdgaccountGroupSubGroups { get; set; }
        public virtual DbSet<CssBdgaccountGroupSubGroupSubGroupTemp> CssBdgaccountGroupSubGroupSubGroupTemps { get; set; }
        public virtual DbSet<CssBdgaccountGroupSubGroupSugroupView> CssBdgaccountGroupSubGroupSugroupViews { get; set; }
        public virtual DbSet<CssBdgaccountGroupSubGroupTemp> CssBdgaccountGroupSubGroupTemps { get; set; }
        public virtual DbSet<CssBdgaccountGroupSubGroupView> CssBdgaccountGroupSubGroupViews { get; set; }
        public virtual DbSet<CssBdgbudgetInfoDetailMinRecordidDuplicate> CssBdgbudgetInfoDetailMinRecordidDuplicates { get; set; }
        public virtual DbSet<CssBdgbudgetInfoDetailSummaryView> CssBdgbudgetInfoDetailSummaryViews { get; set; }
        public virtual DbSet<CssBdgbudgetInfoDetailView> CssBdgbudgetInfoDetailViews { get; set; }
        public virtual DbSet<CssBdgbudgetInfoGrandtotal> CssBdgbudgetInfoGrandtotals { get; set; }
        public virtual DbSet<CssBdgbudgetInfoSubtotal> CssBdgbudgetInfoSubtotals { get; set; }
        public virtual DbSet<CssBdgbudgetInfoSummary> CssBdgbudgetInfoSummaries { get; set; }
        public virtual DbSet<CssBdgbudgetInfoSummary2> CssBdgbudgetInfoSummary2s { get; set; }
        public virtual DbSet<CssBdgbudgetInfoSummary2Var> CssBdgbudgetInfoSummary2Vars { get; set; }
        public virtual DbSet<CssBdgbudgetInfoSummaryvar> CssBdgbudgetInfoSummaryvars { get; set; }
        public virtual DbSet<CssBdgbudgetinfoDetail> CssBdgbudgetinfoDetails { get; set; }
        public virtual DbSet<CssBdgbudgetinfoDetailTempMissingItem> CssBdgbudgetinfoDetailTempMissingItems { get; set; }
        public virtual DbSet<CssBdgbudgetinfodetailTotal> CssBdgbudgetinfodetailTotals { get; set; }
        public virtual DbSet<CssBdgbudgetinfodetailamountsPm> CssBdgbudgetinfodetailamountsPms { get; set; }
        public virtual DbSet<CssBdgemployeeAmount> CssBdgemployeeAmounts { get; set; }
        public virtual DbSet<CssBdgemployeeDuplicate> CssBdgemployeeDuplicates { get; set; }
        public virtual DbSet<CssBdgemployeeMissing> CssBdgemployeeMissings { get; set; }
        public virtual DbSet<CssBdgreportGroupBdgglaccountMapping> CssBdgreportGroupBdgglaccountMappings { get; set; }
        public virtual DbSet<CssBdgreportGroupBdgglaccountMappingSummary> CssBdgreportGroupBdgglaccountMappingSummaries { get; set; }
        public virtual DbSet<CssBdgreportGroupBdgglaccountMappingSummaryView> CssBdgreportGroupBdgglaccountMappingSummaryViews { get; set; }
        public virtual DbSet<CssBudgetMoveFor2013> CssBudgetMoveFor2013s { get; set; }
        public virtual DbSet<CssBudgetSalaries2012Temp> CssBudgetSalaries2012Temps { get; set; }
        public virtual DbSet<CssBudgetTemp> CssBudgetTemps { get; set; }
        public virtual DbSet<CssBudgetinfoMove> CssBudgetinfoMoves { get; set; }
        public virtual DbSet<CssBudgetsetupTemp> CssBudgetsetupTemps { get; set; }
        public virtual DbSet<CssChecknoApplied> CssChecknoApplieds { get; set; }
        public virtual DbSet<CssContributionPlusDeatil> CssContributionPlusDeatils { get; set; }
        public virtual DbSet<CssCountLrpvendorVoucher> CssCountLrpvendorVouchers { get; set; }
        public virtual DbSet<CssCssBdgaccountGroupSubGroupView> CssCssBdgaccountGroupSubGroupViews { get; set; }
        public virtual DbSet<CssDistinctMaskingAccount> CssDistinctMaskingAccounts { get; set; }
        public virtual DbSet<CssDistinctMaskingAccountTemp> CssDistinctMaskingAccountTemps { get; set; }
        public virtual DbSet<CssDuplciateMapping> CssDuplciateMappings { get; set; }
        public virtual DbSet<CssEmployeeMoveFrom> CssEmployeeMoveFroms { get; set; }
        public virtual DbSet<CssEmployeeMoveTo> CssEmployeeMoveToes { get; set; }
        public virtual DbSet<CssFecdistributionDetailError> CssFecdistributionDetailErrors { get; set; }
        public virtual DbSet<CssFecdistributionDetailErrorHold> CssFecdistributionDetailErrorHolds { get; set; }
        public virtual DbSet<CssFecdistributionDetailErrorInvalidsegment> CssFecdistributionDetailErrorInvalidsegments { get; set; }
        public virtual DbSet<CssFecdistributionProofamount> CssFecdistributionProofamounts { get; set; }
        public virtual DbSet<CssFecdistributionProofamountStep2> CssFecdistributionProofamountStep2s { get; set; }
        public virtual DbSet<CssFecdistributionReport> CssFecdistributionReports { get; set; }
        public virtual DbSet<CssFeclocalUnionView> CssFeclocalUnionViews { get; set; }
        public virtual DbSet<CssFecmemberTemp> CssFecmemberTemps { get; set; }
        public virtual DbSet<CssFecvendorTemp> CssFecvendorTemps { get; set; }
        public virtual DbSet<CssFsMissingLine> CssFsMissingLines { get; set; }
        public virtual DbSet<CssFsSummaryForBudget> CssFsSummaryForBudgets { get; set; }
        public virtual DbSet<CssGltransactionLine> CssGltransactionLines { get; set; }
        public virtual DbSet<CssGlyearcodeSum> CssGlyearcodeSums { get; set; }
        public virtual DbSet<CssListofcorrect> CssListofcorrects { get; set; }
        public virtual DbSet<CssListofcorrectv2> CssListofcorrectv2s { get; set; }
        public virtual DbSet<CssLm2MatchingBasedOnWebportal> CssLm2MatchingBasedOnWebportals { get; set; }
        public virtual DbSet<CssLm2MatchingBasedOnWebportalDiff> CssLm2MatchingBasedOnWebportalDiffs { get; set; }
        public virtual DbSet<CssLrpglMappingpm> CssLrpglMappingpms { get; set; }
        public virtual DbSet<CssLrpgltransaction30> CssLrpgltransaction30s { get; set; }
        public virtual DbSet<CssLrpgltransaction30Check> CssLrpgltransaction30Checks { get; set; }
        public virtual DbSet<CssLrpgltransaction99> CssLrpgltransaction99s { get; set; }
        public virtual DbSet<CssLrpgltransaction99A> CssLrpgltransaction99As { get; set; }
        public virtual DbSet<CssLrpgltransactionA0002> CssLrpgltransactionA0002s { get; set; }
        public virtual DbSet<CssLrpgltransactionActualForBudget> CssLrpgltransactionActualForBudgets { get; set; }
        public virtual DbSet<CssLrpgltransactionActualForBudgetTemp> CssLrpgltransactionActualForBudgetTemps { get; set; }
        public virtual DbSet<CssLrpgltransactionAllA0001> CssLrpgltransactionAllA0001s { get; set; }
        public virtual DbSet<CssLrpgltransactionBalancesView> CssLrpgltransactionBalancesViews { get; set; }
        public virtual DbSet<CssLrpgltransactionMainView> CssLrpgltransactionMainViews { get; set; }
        public virtual DbSet<CssLrpgltransactionSum> CssLrpgltransactionSums { get; set; }
        public virtual DbSet<CssLrpgltransactionSumCheck> CssLrpgltransactionSumChecks { get; set; }
        public virtual DbSet<CssLrpgltransactionSumVendor> CssLrpgltransactionSumVendors { get; set; }
        public virtual DbSet<CssLrpgltransactionSummary> CssLrpgltransactionSummaries { get; set; }
        public virtual DbSet<CssLrpgltransactionWithLm2purpose> CssLrpgltransactionWithLm2purposes { get; set; }
        public virtual DbSet<CssLrpgltransactiongrid> CssLrpgltransactiongrids { get; set; }
        public virtual DbSet<CssLrpvendorVoucherChange> CssLrpvendorVoucherChanges { get; set; }
        public virtual DbSet<CssMatrixDefault> CssMatricesDefaults { get; set; }
        public virtual DbSet<CssMissing> CssMissings { get; set; }
        public virtual DbSet<CssOaapGroupByExpenserptnumberCountProject> CssOaapGroupByExpenserptnumberCountProjects { get; set; }
        public virtual DbSet<CssOaapGroupByProject> CssOaapGroupByProjects { get; set; }
        public virtual DbSet<CssReportGroupRpttemp> CssReportGroupRpttemps { get; set; }
        public virtual DbSet<CssReportGroupRpttemp2> CssReportGroupRpttemp2s { get; set; }
        public virtual DbSet<CssReportTotal> CssReportTotals { get; set; }
        public virtual DbSet<CssRm00101> CssRm00101s { get; set; }
        public virtual DbSet<CssSchemaGl00100Temp> CssSchemaGl00100Temps { get; set; }
        public virtual DbSet<CssSeg2Summary> CssSeg2Summaries { get; set; }
        public virtual DbSet<CssSeg2SummaryStep2> CssSeg2SummaryStep2s { get; set; }
        public virtual DbSet<CssSelectBdgbudgetinfoDetail> CssSelectBdgbudgetinfoDetails { get; set; }
        public virtual DbSet<CssSetupVarTemp> CssSetupVarTemps { get; set; }
        public virtual DbSet<CssSetupVarTemp1> CssSetupVarTemp1s { get; set; }
        public virtual DbSet<CssSyncGpWithInquiryStatus> CssSyncGpWithInquiryStatuses { get; set; }
        public virtual DbSet<CssSyncGpWithInquiryStatus1099> CssSyncGpWithInquiryStatus1099s { get; set; }
        public virtual DbSet<CssTemp1099Step1> CssTemp1099Step1s { get; set; }
        public virtual DbSet<CssTemp1099Step2> CssTemp1099Step2s { get; set; }
        public virtual DbSet<CssTempGltransactionlineAddViewMax> CssTempGltransactionlineAddViewMaxes { get; set; }
        public virtual DbSet<CssTempImportContributions2> CssTempImportContributions2s { get; set; }
        public virtual DbSet<CssTempviewBdgaccountGroupSubGroup> CssTempviewBdgaccountGroupSubGroups { get; set; }
        public virtual DbSet<CssTempviewBdgaccountGroupSubGroup2> CssTempviewBdgaccountGroupSubGroup2s { get; set; }
        public virtual DbSet<CssTypeValue> CssTypeValues { get; set; }
        public virtual DbSet<CssUpdateAllDataStatus> CssUpdateAllDataStatuses { get; set; }
        public virtual DbSet<CssVendorPurpose> CssVendorPurposes { get; set; }
        public virtual DbSet<Csslistoftransactionpriortoupdate> Csslistoftransactionpriortoupdates { get; set; }
        public virtual DbSet<CsstempBdgaccountGroupSubGroupSubgroup> CsstempBdgaccountGroupSubGroupSubgroups { get; set; }
        public virtual DbSet<CsstempBdgreportGroupBdgglaccountMapping> CsstempBdgreportGroupBdgglaccountMappings { get; set; }
        public virtual DbSet<Department> Departments { get; set; }
        public virtual DbSet<DepartmentLrp> DepartmentLrps { get; set; }
        public virtual DbSet<DistinctAcctTemp> DistinctAcctTemps { get; set; }
        public virtual DbSet<Drilldown2> Drilldown2s { get; set; }
        public virtual DbSet<DropDownDisplay> DropDownDisplays { get; set; }
        public virtual DbSet<DropDownDisplayGrid> DropDownDisplayGrids { get; set; }
        public virtual DbSet<DropDownFilter> DropDownFilters { get; set; }
        public virtual DbSet<DropDownFilterGrid> DropDownFilterGrids { get; set; }
        public virtual DbSet<DropDownSetting> DropDownSettings { get; set; }
        public virtual DbSet<DropDownSettingGrid> DropDownSettingGrids { get; set; }
        public virtual DbSet<DuplicateMaskingDetailGrid> DuplicateMaskingDetailGrids { get; set; }
        public virtual DbSet<DuplicateMaskingGrid> DuplicateMaskingGrids { get; set; }
        public virtual DbSet<Duplrpgltranstion> Duplrpgltranstions { get; set; }
        public virtual DbSet<DynamicCode> DynamicCodes { get; set; }
        public virtual DbSet<DynamicCodeGrid> DynamicCodeGrids { get; set; }
        public virtual DbSet<DynamicField> DynamicFields { get; set; }
        public virtual DbSet<DynamicFieldGrid> DynamicFieldGrids { get; set; }
        public virtual DbSet<DynamicFieldList> DynamicFieldLists { get; set; }
        public virtual DbSet<DynamicFieldType> DynamicFieldTypes { get; set; }
        public virtual DbSet<DynamicFieldTypeGrid> DynamicFieldTypeGrids { get; set; }
        public virtual DbSet<DynamicFieldValue> DynamicFieldValues { get; set; }
        public virtual DbSet<DynamicFieldValueGrid> DynamicFieldValueGrids { get; set; }
        public virtual DbSet<EmailTemplate> EmailTemplates { get; set; }
        public virtual DbSet<EmailTemplateGrid> EmailTemplateGrids { get; set; }
        public virtual DbSet<Employee> Employees { get; set; }
        public virtual DbSet<EmployeeLrp> EmployeeLrps { get; set; }
        public virtual DbSet<EquipmentRentalBdgbudgetInfoDetailGrid> EquipmentRentalBdgbudgetInfoDetailGrids { get; set; }
        public virtual DbSet<ErrorLog> ErrorLogs { get; set; }
        public virtual DbSet<EventTrigger> EventTriggers { get; set; }
        public virtual DbSet<EventTriggerGrid> EventTriggerGrids { get; set; }
        public virtual DbSet<ExecutiveSummaryReport> ExecutiveSummaryReports { get; set; }
        public virtual DbSet<ExpenseBdgbudgetInfoDetailGrid> ExpenseBdgbudgetInfoDetailGrids { get; set; }
        public virtual DbSet<ExpenseHotelHousingBdgbudgetInfoDetailGrid> ExpenseHotelHousingBdgbudgetInfoDetailGrids { get; set; }
        public virtual DbSet<ExpenseTransportationBdgbudgetInfoDetailGrid> ExpenseTransportationBdgbudgetInfoDetailGrids { get; set; }
        public virtual DbSet<FecbatchStatus> FecbatchStatuses { get; set; }
        public virtual DbSet<FecbatchStatusGrid> FecbatchStatusGrids { get; set; }
        public virtual DbSet<Feccandidate> Feccandidates { get; set; }
        public virtual DbSet<FeccandidateGrid> FeccandidateGrids { get; set; }
        public virtual DbSet<FeccandidateStatus> FeccandidateStatuses { get; set; }
        public virtual DbSet<FeccandidateStatusGrid> FeccandidateStatusGrids { get; set; }
        public virtual DbSet<FeccandidateType> FeccandidateTypes { get; set; }
        public virtual DbSet<FeccandidateTypeGrid> FeccandidateTypeGrids { get; set; }
        public virtual DbSet<FeccashAccount> FeccashAccounts { get; set; }
        public virtual DbSet<FeccashAccountGrid> FeccashAccountGrids { get; set; }
        public virtual DbSet<Feccommittee> Feccommittees { get; set; }
        public virtual DbSet<FeccommitteeGrid> FeccommitteeGrids { get; set; }
        public virtual DbSet<FeccommitteeType> FeccommitteeTypes { get; set; }
        public virtual DbSet<FeccommitteeTypeGrid> FeccommitteeTypeGrids { get; set; }
        public virtual DbSet<Feccompany> Feccompanies { get; set; }
        public virtual DbSet<FeccompanyFecsegment> FeccompanyFecsegments { get; set; }
        public virtual DbSet<FeccompanyFecsegmentGrid> FeccompanyFecsegmentGrids { get; set; }
        public virtual DbSet<FeccompanyFecsegmentValue> FeccompanyFecsegmentValues { get; set; }
        public virtual DbSet<FeccompanyFecsegmentValueGrid> FeccompanyFecsegmentValueGrids { get; set; }
        public virtual DbSet<FeccompanyFecsegmentValueTemp> FeccompanyFecsegmentValueTemps { get; set; }
        public virtual DbSet<FeccompanyGrid> FeccompanyGrids { get; set; }
        public virtual DbSet<Feccontribution> Feccontributions { get; set; }
        public virtual DbSet<FeccontributionDetail> FeccontributionDetails { get; set; }
        public virtual DbSet<FeccontributionDetailGrid> FeccontributionDetailGrids { get; set; }
        public virtual DbSet<FeccontributionGrid> FeccontributionGrids { get; set; }
        public virtual DbSet<FeccontributionLimit> FeccontributionLimits { get; set; }
        public virtual DbSet<FeccontributionLimitGrid> FeccontributionLimitGrids { get; set; }
        public virtual DbSet<FeccontributionSource> FeccontributionSources { get; set; }
        public virtual DbSet<FeccontributionSourceGrid> FeccontributionSourceGrids { get; set; }
        public virtual DbSet<FeccontributionStatus> FeccontributionStatuses { get; set; }
        public virtual DbSet<FeccontributionStatusGrid> FeccontributionStatusGrids { get; set; }
        public virtual DbSet<FeccontributionType> FeccontributionTypes { get; set; }
        public virtual DbSet<FeccontributionTypeGrid> FeccontributionTypeGrids { get; set; }
        public virtual DbSet<FeccontributorCategory> FeccontributorCategories { get; set; }
        public virtual DbSet<FeccontributorCategoryGrid> FeccontributorCategoryGrids { get; set; }
        public virtual DbSet<FecdisbursementType> FecdisbursementTypes { get; set; }
        public virtual DbSet<FecdisbursementTypeFecdistributionType> FecdisbursementTypeFecdistributionTypes { get; set; }
        public virtual DbSet<FecdisbursementTypeFecdistributionTypeGrid> FecdisbursementTypeFecdistributionTypeGrids { get; set; }
        public virtual DbSet<FecdisbursementTypeGrid> FecdisbursementTypeGrids { get; set; }
        public virtual DbSet<Fecdistribution> Fecdistributions { get; set; }
        public virtual DbSet<FecdistributionDetail> FecdistributionDetails { get; set; }
        public virtual DbSet<FecdistributionDetailGrid> FecdistributionDetailGrids { get; set; }
        public virtual DbSet<FecdistributionGrid> FecdistributionGrids { get; set; }
        public virtual DbSet<FecdistributionLimit> FecdistributionLimits { get; set; }
        public virtual DbSet<FecdistributionLimitGrid> FecdistributionLimitGrids { get; set; }
        public virtual DbSet<FecdistributionLimitType> FecdistributionLimitTypes { get; set; }
        public virtual DbSet<FecdistributionLimitTypeGrid> FecdistributionLimitTypeGrids { get; set; }
        public virtual DbSet<FecdistributionStatus> FecdistributionStatuses { get; set; }
        public virtual DbSet<FecdistributionStatusGrid> FecdistributionStatusGrids { get; set; }
        public virtual DbSet<FecdistributionStatusStatus> FecdistributionStatusStatuses { get; set; }
        public virtual DbSet<FecdistributionStatusStatusGrid> FecdistributionStatusStatusGrids { get; set; }
        public virtual DbSet<FecdistributionType> FecdistributionTypes { get; set; }
        public virtual DbSet<FecdistributionTypeGrid> FecdistributionTypeGrids { get; set; }
        public virtual DbSet<FecelectionOffice> FecelectionOffices { get; set; }
        public virtual DbSet<FecelectionOfficeGrid> FecelectionOfficeGrids { get; set; }
        public virtual DbSet<FecelectionType> FecelectionTypes { get; set; }
        public virtual DbSet<FecelectionTypeGrid> FecelectionTypeGrids { get; set; }
        public virtual DbSet<FecexpenseCategory> FecexpenseCategories { get; set; }
        public virtual DbSet<FecexpenseCategoryFecsegmentValue> FecexpenseCategoryFecsegmentValues { get; set; }
        public virtual DbSet<FecexpenseCategoryFecsegmentValueGrid> FecexpenseCategoryFecsegmentValueGrids { get; set; }
        public virtual DbSet<FecexpenseCategoryGrid> FecexpenseCategoryGrids { get; set; }
        public virtual DbSet<FecfilingFrequency> FecfilingFrequencies { get; set; }
        public virtual DbSet<FecfilingFrequencyGrid> FecfilingFrequencyGrids { get; set; }
        public virtual DbSet<FecinterestGroupCategory> FecinterestGroupCategories { get; set; }
        public virtual DbSet<FecinterestGroupCategoryGrid> FecinterestGroupCategoryGrids { get; set; }
        public virtual DbSet<FeclocalUnion> FeclocalUnions { get; set; }
        public virtual DbSet<FeclocalUnionGrid> FeclocalUnionGrids { get; set; }
        public virtual DbSet<Fecmember> Fecmembers { get; set; }
        public virtual DbSet<FecmemberGrid> FecmemberGrids { get; set; }
        public virtual DbSet<FecmemeberMissing> FecmemeberMissings { get; set; }
        public virtual DbSet<FecpaymentFrequency> FecpaymentFrequencies { get; set; }
        public virtual DbSet<FecpaymentFrequencyGrid> FecpaymentFrequencyGrids { get; set; }
        public virtual DbSet<Fecreport> Fecreports { get; set; }
        public virtual DbSet<FecreportGrid> FecreportGrids { get; set; }
        public virtual DbSet<Fecsegment> Fecsegments { get; set; }
        public virtual DbSet<FecsegmentGrid> FecsegmentGrids { get; set; }
        public virtual DbSet<Fecvendor> Fecvendors { get; set; }
        public virtual DbSet<FecvendorDistributionGrid> FecvendorDistributionGrids { get; set; }
        public virtual DbSet<FecvendorGrid> FecvendorGrids { get; set; }
        public virtual DbSet<FecvendorSource> FecvendorSources { get; set; }
        public virtual DbSet<FecvendorSourceGrid> FecvendorSourceGrids { get; set; }
        public virtual DbSet<FkrelationshipList> FkrelationshipLists { get; set; }
        public virtual DbSet<FringeAdjustmentBdgbudgetInfoDetailGrid> FringeAdjustmentBdgbudgetInfoDetailGrids { get; set; }
        public virtual DbSet<FringeEmployeeBdgbudgetInfoDetailGrid> FringeEmployeeBdgbudgetInfoDetailGrids { get; set; }
        public virtual DbSet<FringeInternBdgbudgetInfoDetailGrid> FringeInternBdgbudgetInfoDetailGrids { get; set; }
        public virtual DbSet<FringeOpenPositionBdgbudgetInfoDetailGrid> FringeOpenPositionBdgbudgetInfoDetailGrids { get; set; }
        public virtual DbSet<FringeOvertimeBdgbudgetInfoDetailGrid> FringeOvertimeBdgbudgetInfoDetailGrids { get; set; }
        public virtual DbSet<FringeSabbaticalBdgbudgetInfoDetailGrid> FringeSabbaticalBdgbudgetInfoDetailGrids { get; set; }
        public virtual DbSet<FsRowGroupingLrp> FsRowGroupingLrps { get; set; }
        public virtual DbSet<Fund> Funds { get; set; }
        public virtual DbSet<Gl20000Temp> Gl20000Temps { get; set; }
        public virtual DbSet<Gl30000Temp> Gl30000Temps { get; set; }
        public virtual DbSet<GlobalSecurity> GlobalSecurities { get; set; }
        public virtual DbSet<GlobalSecurityGrid> GlobalSecurityGrids { get; set; }
        public virtual DbSet<GltransactionLine> GltransactionLines { get; set; }
        public virtual DbSet<GltransactionLineSummaryView> GltransactionLineSummaryViews { get; set; }
        public virtual DbSet<GltransactionSummary> GltransactionSummaries { get; set; }
        public virtual DbSet<GltransactionlineAddView> GltransactionlineAddViews { get; set; }
        public virtual DbSet<GltransactionlineAddViewMax> GltransactionlineAddViewMaxes { get; set; }
        public virtual DbSet<GltransactionlineAddViewMax2> GltransactionlineAddViewMax2s { get; set; }
        public virtual DbSet<GltransactionsummaryAddView> GltransactionsummaryAddViews { get; set; }
        public virtual DbSet<Gridlayout> Gridlayouts { get; set; }
        public virtual DbSet<Gridlayouts1> Gridlayouts1 { get; set; }
        public virtual DbSet<HelpCard> HelpCards { get; set; }
        public virtual DbSet<HelpCardGrid> HelpCardGrids { get; set; }
        public virtual DbSet<HelpCardList> HelpCardLists { get; set; }
        public virtual DbSet<Installation> Installations { get; set; }
        public virtual DbSet<IzendaAdHocReport> IzendaAdHocReports { get; set; }
        public virtual DbSet<Language> Languages { get; set; }
        public virtual DbSet<LegalServiceBdgbudgetInfoDetailGrid> LegalServiceBdgbudgetInfoDetailGrids { get; set; }
        public virtual DbSet<LoadError> LoadErrors { get; set; }
        public virtual DbSet<Localisation> Localisations { get; set; }
        public virtual DbSet<LocalisationGrid> LocalisationGrids { get; set; }
        public virtual DbSet<Lrpcode> Lrpcodes { get; set; }
        public virtual DbSet<LrpcodeGrid> LrpcodeGrids { get; set; }
        public virtual DbSet<LrpcodeLrpreport> LrpcodeLrpreports { get; set; }
        public virtual DbSet<LrpcodeLrpreportGrid> LrpcodeLrpreportGrids { get; set; }
        public virtual DbSet<Lrpcompany> Lrpcompanies { get; set; }
        public virtual DbSet<LrpcompanyGrid> LrpcompanyGrids { get; set; }
        public virtual DbSet<LrpcostCenter> LrpcostCenters { get; set; }
        public virtual DbSet<LrpcostCenterGrid> LrpcostCenterGrids { get; set; }
        public virtual DbSet<Lrpdepartment> Lrpdepartments { get; set; }
        public virtual DbSet<LrpdepartmentGrid> LrpdepartmentGrids { get; set; }
        public virtual DbSet<LrpdocumentType> LrpdocumentTypes { get; set; }
        public virtual DbSet<LrpdocumentTypeGrid> LrpdocumentTypeGrids { get; set; }
        public virtual DbSet<Lrpemployee> Lrpemployees { get; set; }
        public virtual DbSet<LrpemployeeGrid> LrpemployeeGrids { get; set; }
        public virtual DbSet<LrpemployeeStatus> LrpemployeeStatuses { get; set; }
        public virtual DbSet<LrpemployeeStatusGrid> LrpemployeeStatusGrids { get; set; }
        public virtual DbSet<LrpemployeeType> LrpemployeeTypes { get; set; }
        public virtual DbSet<LrpemployeeTypeGrid> LrpemployeeTypeGrids { get; set; }
        public virtual DbSet<LrpfinancialStatementGroup> LrpfinancialStatementGroups { get; set; }
        public virtual DbSet<LrpfinancialStatementGroupGrid> LrpfinancialStatementGroupGrids { get; set; }
        public virtual DbSet<LrpgltranactionProject> LrpgltranactionProjects { get; set; }
        public virtual DbSet<Lrpgltransaction> Lrpgltransactions { get; set; }
        public virtual DbSet<Lrpgltransaction30Zero> Lrpgltransaction30Zeros { get; set; }
        public virtual DbSet<LrpgltransactionA0001> LrpgltransactionA0001s { get; set; }
        public virtual DbSet<LrpgltransactionBalance> LrpgltransactionBalances { get; set; }
        public virtual DbSet<LrpgltransactionGrid> LrpgltransactionGrids { get; set; }
        public virtual DbSet<LrpgltransactionLimitedDrillDownGrid> LrpgltransactionLimitedDrillDownGrids { get; set; }
        public virtual DbSet<LrpgltransactionLimitedGrid> LrpgltransactionLimitedGrids { get; set; }
        public virtual DbSet<LrpgltransactionLimitedGridOriginal> LrpgltransactionLimitedGridOriginals { get; set; }
        public virtual DbSet<LrpgltransactionLimitedGridpm> LrpgltransactionLimitedGridpms { get; set; }
        public virtual DbSet<LrpgltransactionLimitedGridv2> LrpgltransactionLimitedGridv2s { get; set; }
        public virtual DbSet<LrpgltransactionLimitedHistory> LrpgltransactionLimitedHistories { get; set; }
        public virtual DbSet<LrpgltransactionLimitedHistoryGrid> LrpgltransactionLimitedHistoryGrids { get; set; }
        public virtual DbSet<LrpgltransactionLimitedLinqGrid> LrpgltransactionLimitedLinqGrids { get; set; }
        public virtual DbSet<LrpgltransactionLimitedpm> LrpgltransactionLimitedpms { get; set; }
        public virtual DbSet<LrpgltransactionLineGreaterThan5Kgrid> LrpgltransactionLineGreaterThan5Kgrids { get; set; }
        public virtual DbSet<LrpgltransactionLineLessThan5Kgrid> LrpgltransactionLineLessThan5Kgrids { get; set; }
        public virtual DbSet<LrpgltransactionLinqGrid> LrpgltransactionLinqGrids { get; set; }
        public virtual DbSet<LrpgltransactionLinqGrid2> LrpgltransactionLinqGrid2s { get; set; }
        public virtual DbSet<LrpgltransactionLm2Sum> LrpgltransactionLm2Sums { get; set; }
        public virtual DbSet<LrpgltransactionLm2SumCheckno> LrpgltransactionLm2SumChecknos { get; set; }
        public virtual DbSet<LrpgltransactionSummaryGreaterThan5Kgrid> LrpgltransactionSummaryGreaterThan5Kgrids { get; set; }
        public virtual DbSet<LrpgltransactionSummaryGrid> LrpgltransactionSummaryGrids { get; set; }
        public virtual DbSet<LrpgltransactionTax> LrpgltransactionTaxes { get; set; }
        public virtual DbSet<LrpgltransactionUpdateGrid> LrpgltransactionUpdateGrids { get; set; }
        public virtual DbSet<LrpgltransactionUpdateLinqGrid> LrpgltransactionUpdateLinqGrids { get; set; }
        public virtual DbSet<LrpgltransactionV2grid> LrpgltransactionV2grids { get; set; }
        public virtual DbSet<LrpgltransactionView> LrpgltransactionViews { get; set; }
        public virtual DbSet<LrpgltransactionsGridDum> LrpgltransactionsGridDa { get; set; }
        public virtual DbSet<LrpgltransactionsLimitedGridDum> LrpgltransactionsLimitedGridDa { get; set; }
        public virtual DbSet<LrpgltranstionBudgetsumBdgaccountGroupSubGroupSubGroupIdView> LrpgltranstionBudgetsumBdgaccountGroupSubGroupSubGroupIdViews { get; set; }
        public virtual DbSet<LrpgltranstionBudgetsumBdgaccountGroupSubGroupSubGroupSubGroupidView> LrpgltranstionBudgetsumBdgaccountGroupSubGroupSubGroupSubGroupidViews { get; set; }
        public virtual DbSet<LrpgltranstionBudgetsumBdgaccountGroupSubGroupidView> LrpgltranstionBudgetsumBdgaccountGroupSubGroupidViews { get; set; }
        public virtual DbSet<LrpgltranstionBudgetsumBdgbudgetinfoDetailView> LrpgltranstionBudgetsumBdgbudgetinfoDetailViews { get; set; }
        public virtual DbSet<LrpgltranstionBudgetsumDetailView> LrpgltranstionBudgetsumDetailViews { get; set; }
        public virtual DbSet<LrpgltranstionBudgetsumView> LrpgltranstionBudgetsumViews { get; set; }
        public virtual DbSet<LrpgltranstionBudgetsumViewStep2> LrpgltranstionBudgetsumViewStep2s { get; set; }
        public virtual DbSet<LrpglyearCode> LrpglyearCodes { get; set; }
        public virtual DbSet<LrpglyearCodeGrid> LrpglyearCodeGrids { get; set; }
        public virtual DbSet<LrplineSummary> LrplineSummaries { get; set; }
        public virtual DbSet<Lrplm2disbursementCode> Lrplm2disbursementCodes { get; set; }
        public virtual DbSet<Lrplm2receiptCode> Lrplm2receiptCodes { get; set; }
        public virtual DbSet<Lrplm2status> Lrplm2statuses { get; set; }
        public virtual DbSet<Lrpproject> Lrpprojects { get; set; }
        public virtual DbSet<LrpprojectType> LrpprojectTypes { get; set; }
        public virtual DbSet<Lrpreport> Lrpreports { get; set; }
        public virtual DbSet<LrpreportGrid> LrpreportGrids { get; set; }
        public virtual DbSet<Lrpten99BoxNo> Lrpten99BoxNos { get; set; }
        public virtual DbSet<Lrpten99BoxNoGrid> Lrpten99BoxNoGrids { get; set; }
        public virtual DbSet<Lrpten99TaxType> Lrpten99TaxTypes { get; set; }
        public virtual DbSet<Lrpten99TaxTypeGrid> Lrpten99TaxTypeGrids { get; set; }
        public virtual DbSet<LrptimeEntry> LrptimeEntries { get; set; }
        public virtual DbSet<LrptimeEntryGrid> LrptimeEntryGrids { get; set; }
        public virtual DbSet<Lrpvendor> Lrpvendors { get; set; }
        public virtual DbSet<LrpvendorClass> LrpvendorClasses { get; set; }
        public virtual DbSet<LrpvendorClassGrid> LrpvendorClassGrids { get; set; }
        public virtual DbSet<LrpvendorCreate> LrpvendorCreates { get; set; }
        public virtual DbSet<LrpvendorGrid> LrpvendorGrids { get; set; }
        public virtual DbSet<LrpvendorMaster> LrpvendorMasters { get; set; }
        public virtual DbSet<LrpvendorMasterGrid> LrpvendorMasterGrids { get; set; }
        public virtual DbSet<LrpvendorUpdate> LrpvendorUpdates { get; set; }
        public virtual DbSet<LrpvendorVoucher> LrpvendorVouchers { get; set; }
        public virtual DbSet<LrpvendorVoucherAllGrid> LrpvendorVoucherAllGrids { get; set; }
        public virtual DbSet<LrpvendorVoucherApplicability> LrpvendorVoucherApplicabilities { get; set; }
        public virtual DbSet<LrpvendorVoucherApplicabilityGrid> LrpvendorVoucherApplicabilityGrids { get; set; }
        public virtual DbSet<LrpvendorVoucherChangeLog> LrpvendorVoucherChangeLogs { get; set; }
        public virtual DbSet<LrpvendorVoucherChangeLogGrid> LrpvendorVoucherChangeLogGrids { get; set; }
        public virtual DbSet<LrpvendorVoucherCreditGrid> LrpvendorVoucherCreditGrids { get; set; }
        public virtual DbSet<LrpvendorVoucherDistribution> LrpvendorVoucherDistributions { get; set; }
        public virtual DbSet<LrpvendorVoucherDistribution10992year> LrpvendorVoucherDistribution10992years { get; set; }
        public virtual DbSet<LrpvendorVoucherDistributionGrid> LrpvendorVoucherDistributionGrids { get; set; }
        public virtual DbSet<LrpvendorVoucherGrid> LrpvendorVoucherGrids { get; set; }
        public virtual DbSet<LrpvendorVoucherInvoiceGrid> LrpvendorVoucherInvoiceGrids { get; set; }
        public virtual DbSet<LrpvendorVoucherOtherGrid> LrpvendorVoucherOtherGrids { get; set; }
        public virtual DbSet<LrpvendorVoucherPaymentGrid> LrpvendorVoucherPaymentGrids { get; set; }
        public virtual DbSet<LrpvendorVoucherTempDuplicate> LrpvendorVoucherTempDuplicates { get; set; }
        public virtual DbSet<LrpvoucherStatus> LrpvoucherStatuses { get; set; }
        public virtual DbSet<LrpvoucherStatusGrid> LrpvoucherStatusGrids { get; set; }
        public virtual DbSet<Main> Mains { get; set; }
        public virtual DbSet<MainLrp> MainLrps { get; set; }
        public virtual DbSet<MeetingBdgbudgetInfoDetailGrid> MeetingBdgbudgetInfoDetailGrids { get; set; }
        public virtual DbSet<MemberExpenseBdgbudgetInfoDetailGrid> MemberExpenseBdgbudgetInfoDetailGrids { get; set; }
        public virtual DbSet<MembershipBdgbudgetInfoDetailGrid> MembershipBdgbudgetInfoDetailGrids { get; set; }
        public virtual DbSet<Menu> Menus { get; set; }
        public virtual DbSet<MenuGrid> MenuGrids { get; set; }
        public virtual DbSet<MenuParameterType> MenuParameterTypes { get; set; }
        public virtual DbSet<MenuParameterTypeGrid> MenuParameterTypeGrids { get; set; }
        public virtual DbSet<MenuPortalGrid> MenuPortalGrids { get; set; }
        public virtual DbSet<MiscellaneousBdgbudgetInfoDetailGrid> MiscellaneousBdgbudgetInfoDetailGrids { get; set; }
        public virtual DbSet<MissingMaskingDetailGrid> MissingMaskingDetailGrids { get; set; }
        public virtual DbSet<MissingMaskingGrid> MissingMaskingGrids { get; set; }
        public virtual DbSet<Module> Modules { get; set; }
        public virtual DbSet<ModuleGrid> ModuleGrids { get; set; }
        public virtual DbSet<Month> Months { get; set; }
        public virtual DbSet<MonthGrid> MonthGrids { get; set; }
        public virtual DbSet<NotificationTemplate> NotificationTemplates { get; set; }
        public virtual DbSet<NotificationTemplateGrid> NotificationTemplateGrids { get; set; }
        public virtual DbSet<NotificationTemplateView> NotificationTemplateViews { get; set; }
        public virtual DbSet<NotificationTemplateViewGrid> NotificationTemplateViewGrids { get; set; }
        public virtual DbSet<NotificationType> NotificationTypes { get; set; }
        public virtual DbSet<NotificationTypeGrid> NotificationTypeGrids { get; set; }
        public virtual DbSet<OtherBdgbudgetInfoDetailGrid> OtherBdgbudgetInfoDetailGrids { get; set; }
        public virtual DbSet<Page> Pages { get; set; }
        public virtual DbSet<PageGrid> PageGrids { get; set; }
        public virtual DbSet<PageGrid1> PageGrids1 { get; set; }
        public virtual DbSet<PageGridEditField> PageGridEditFields { get; set; }
        public virtual DbSet<PageGridEditFieldGrid> PageGridEditFieldGrids { get; set; }
        public virtual DbSet<PageGridGrid> PageGridGrids { get; set; }
        public virtual DbSet<PageQuickAdd> PageQuickAdds { get; set; }
        public virtual DbSet<PageQuickAddGrid> PageQuickAddGrids { get; set; }
        public virtual DbSet<PageTab> PageTabs { get; set; }
        public virtual DbSet<PageTabGrid> PageTabGrids { get; set; }
        public virtual DbSet<ParameterType> ParameterTypes { get; set; }
        public virtual DbSet<ParameterTypeGrid> ParameterTypeGrids { get; set; }
        public virtual DbSet<PhoneBdgbudgetInfoDetailGrid> PhoneBdgbudgetInfoDetailGrids { get; set; }
        public virtual DbSet<Portal> Portals { get; set; }
        public virtual DbSet<PortalGrid> PortalGrids { get; set; }
        public virtual DbSet<PostageOvernightMailBdgbudgetInfoDetailGrid> PostageOvernightMailBdgbudgetInfoDetailGrids { get; set; }
        public virtual DbSet<PrintingCopyBdgbudgetInfoDetailGrid> PrintingCopyBdgbudgetInfoDetailGrids { get; set; }
        public virtual DbSet<ProfessionalServiceBdgbudgetInfoDetailGrid> ProfessionalServiceBdgbudgetInfoDetailGrids { get; set; }
        public virtual DbSet<Project> Projects { get; set; }
        public virtual DbSet<ProjectBdgbudgetInfoDetailGrid> ProjectBdgbudgetInfoDetailGrids { get; set; }
        public virtual DbSet<ProjectLrp> ProjectLrps { get; set; }
        public virtual DbSet<PublicationBdgbudgetInfoDetailGrid> PublicationBdgbudgetInfoDetailGrids { get; set; }
        public virtual DbSet<QuickAddSetting> QuickAddSettings { get; set; }
        public virtual DbSet<QuickAddSettingGrid> QuickAddSettingGrids { get; set; }
        public virtual DbSet<ReferenceAttachment> ReferenceAttachments { get; set; }
        public virtual DbSet<ReferenceAttachmentGrid> ReferenceAttachmentGrids { get; set; }
        public virtual DbSet<ReferenceAttachmentUserAccount> ReferenceAttachmentUserAccounts { get; set; }
        public virtual DbSet<ReferenceAttachmentUserAccountGrid> ReferenceAttachmentUserAccountGrids { get; set; }
        public virtual DbSet<ReferenceNote> ReferenceNotes { get; set; }
        public virtual DbSet<ReferenceNoteGrid> ReferenceNoteGrids { get; set; }
        public virtual DbSet<ReferenceUserAccount> ReferenceUserAccounts { get; set; }
        public virtual DbSet<Resource> Resources { get; set; }
        public virtual DbSet<ResourceGrid> ResourceGrids { get; set; }
        public virtual DbSet<ResourceLocalisationList> ResourceLocalisationLists { get; set; }
        public virtual DbSet<ResourceTranslation> ResourceTranslations { get; set; }
        public virtual DbSet<ResourceTranslationGrid> ResourceTranslationGrids { get; set; }
        public virtual DbSet<Role> Roles { get; set; }
        public virtual DbSet<RoleGrid> RoleGrids { get; set; }
        public virtual DbSet<RoleModule> RoleModules { get; set; }
        public virtual DbSet<RoleModuleGrid> RoleModuleGrids { get; set; }
        public virtual DbSet<SalaryAdjustmentBdgbudgetInfoDetailGrid> SalaryAdjustmentBdgbudgetInfoDetailGrids { get; set; }
        public virtual DbSet<SalaryBdgbudgetInfoDetailGrid> SalaryBdgbudgetInfoDetailGrids { get; set; }
        public virtual DbSet<SalaryEmployeeBdgbudgetInfoDetailGrid> SalaryEmployeeBdgbudgetInfoDetailGrids { get; set; }
        public virtual DbSet<SalaryInternBdgbudgetInfoDetailGrid> SalaryInternBdgbudgetInfoDetailGrids { get; set; }
        public virtual DbSet<SalaryOpenPositionBdgbudgetInfoDetailGrid> SalaryOpenPositionBdgbudgetInfoDetailGrids { get; set; }
        public virtual DbSet<SalaryOvertimeBdgbudgetInfoDetailGrid> SalaryOvertimeBdgbudgetInfoDetailGrids { get; set; }
        public virtual DbSet<SalarySabbaticalBdgbudgetInfoDetailGrid> SalarySabbaticalBdgbudgetInfoDetailGrids { get; set; }
        public virtual DbSet<Salutation> Salutations { get; set; }
        public virtual DbSet<Setting> Settings { get; set; }
        public virtual DbSet<StaffTrainingConferenceBdgbudgetInfoDetailGrid> StaffTrainingConferenceBdgbudgetInfoDetailGrids { get; set; }
        public virtual DbSet<StatusUpdate> StatusUpdates { get; set; }
        public virtual DbSet<SubscriptionBdgbudgetInfoDetailGrid> SubscriptionBdgbudgetInfoDetailGrids { get; set; }
        public virtual DbSet<SupplyEquipmentUnder1000BdgbudgetInfoDetailGrid> SupplyEquipmentUnder1000BdgbudgetInfoDetailGrids { get; set; }
        public virtual DbSet<TempCss> TempCsses { get; set; }
        public virtual DbSet<TempCss1> TempCss1s { get; set; }
        public virtual DbSet<TempEmployee> TempEmployees { get; set; }
        public virtual DbSet<TempHelpBdgbudgetInfoDetailGrid> TempHelpBdgbudgetInfoDetailGrids { get; set; }
        public virtual DbSet<TempProceduresList> TempProceduresLists { get; set; }
        public virtual DbSet<TempTableList> TempTableLists { get; set; }
        public virtual DbSet<TempTriggersList> TempTriggersLists { get; set; }
        public virtual DbSet<TempViewList> TempViewLists { get; set; }
        public virtual DbSet<Tempdatabase> Tempdatabases { get; set; }
        public virtual DbSet<Tempjam> Tempjams { get; set; }
        public virtual DbSet<ToolTip> ToolTips { get; set; }
        public virtual DbSet<ToolTipGrid> ToolTipGrids { get; set; }
        public virtual DbSet<Translation> Translations { get; set; }
        public virtual DbSet<UserAccount> UserAccounts { get; set; }
        public virtual DbSet<UserAccountBdgcompany> UserAccountBdgcompanies { get; set; }
        public virtual DbSet<UserAccountBdgcompanyGrid> UserAccountBdgcompanyGrids { get; set; }
        public virtual DbSet<UserAccountBdgdepartment> UserAccountBdgdepartments { get; set; }
        public virtual DbSet<UserAccountBdgdepartmentGrid> UserAccountBdgdepartmentGrids { get; set; }
        public virtual DbSet<UserAccountBdgreport> UserAccountBdgreports { get; set; }
        public virtual DbSet<UserAccountBdgreportGrid> UserAccountBdgreportGrids { get; set; }
        public virtual DbSet<UserAccountBookmark> UserAccountBookmarks { get; set; }
        public virtual DbSet<UserAccountBookmarkGrid> UserAccountBookmarkGrids { get; set; }
        public virtual DbSet<UserAccountFeccompany> UserAccountFeccompanies { get; set; }
        public virtual DbSet<UserAccountFeccompanyGrid> UserAccountFeccompanyGrids { get; set; }
        public virtual DbSet<UserAccountFeclocalUnion> UserAccountFeclocalUnions { get; set; }
        public virtual DbSet<UserAccountFeclocalUnionGrid> UserAccountFeclocalUnionGrids { get; set; }
        public virtual DbSet<UserAccountGrid> UserAccountGrids { get; set; }
        public virtual DbSet<UserAccountGrid03282018> UserAccountGrid03282018s { get; set; }
        public virtual DbSet<UserAccountGrid1> UserAccountGrids1 { get; set; }
        public virtual DbSet<UserAccountGridCore> UserAccountGridCores { get; set; }
        public virtual DbSet<UserAccountLrpcompany> UserAccountLrpcompanies { get; set; }
        public virtual DbSet<UserAccountLrpcompanyGrid> UserAccountLrpcompanyGrids { get; set; }
        public virtual DbSet<UserAccountMenuList> UserAccountMenuLists { get; set; }
        public virtual DbSet<UserAccountModule> UserAccountModules { get; set; }
        public virtual DbSet<UserAccountModuleGrid> UserAccountModuleGrids { get; set; }
        public virtual DbSet<UserAccountModuleList> UserAccountModuleLists { get; set; }
        public virtual DbSet<UserAccountNotificationType> UserAccountNotificationTypes { get; set; }
        public virtual DbSet<UserAccountNotificationTypeGrid> UserAccountNotificationTypeGrids { get; set; }
        public virtual DbSet<UserAccountPasswordList> UserAccountPasswordLists { get; set; }
        public virtual DbSet<UserAccountRole> UserAccountRoles { get; set; }
        public virtual DbSet<UserAccountRoleGrid> UserAccountRoleGrids { get; set; }
        public virtual DbSet<UserAccountRolePermissionList> UserAccountRolePermissionLists { get; set; }
        public virtual DbSet<UserAccountTabList> UserAccountTabLists { get; set; }
        public virtual DbSet<UseraccountGridTemp> UseraccountGridTemps { get; set; }
        public virtual DbSet<Validation> Validations { get; set; }
        public virtual DbSet<ValidationGrid> ValidationGrids { get; set; }
        public virtual DbSet<VendorVoucherCreate> VendorVoucherCreates { get; set; }
        public virtual DbSet<VendorVoucherUpdateCreate> VendorVoucherUpdateCreates { get; set; }
        public virtual DbSet<View1> View1s { get; set; }
        public virtual DbSet<View2> View2s { get; set; }
        public virtual DbSet<View4> View4s { get; set; }
        public virtual DbSet<YearSetup> YearSetups { get; set; }
        public virtual DbSet<YearSetupBdgaccountGroupFactor> YearSetupBdgaccountGroupFactors { get; set; }
        public virtual DbSet<YearSetupGrid> YearSetupGrids { get; set; }
        public virtual DbSet<YearSetupTemp> YearSetupTemps { get; set; }
        public virtual DbSet<YearSetupTemp2> YearSetupTemp2s { get; set; }
        public virtual DbSet<YearStatus> YearStatuses { get; set; }
        public virtual DbSet<YearStatusGrid> YearStatusGrids { get; set; }
        public virtual DbSet<YearsetupidTemp> YearsetupidTemps { get; set; }
        public virtual DbSet<YearsetupidTemp1> YearsetupidTemp1s { get; set; }
        public virtual DbSet<YesNo> YesNos { get; set; }
        public virtual DbSet<YesNoGrid> YesNoGrids { get; set; }

        protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
        {
            if (!optionsBuilder.IsConfigured)
            {
#warning To protect potentially sensitive information in your connection string, you should move it out of source code. You can avoid scaffolding the connection string by using the Name= syntax to read it from configuration - see https://go.microsoft.com/fwlink/?linkid=2131148. For more guidance on storing connection strings, see http://go.microsoft.com/fwlink/?LinkId=723263.
                //optionsBuilder.UseSqlServer("Server=ec2-34-216-227-73.us-west-2.compute.amazonaws.com,1433;Database=CS_CPA;User Id=CscpaUser;Password=C398dk@983D8^NM;");
            }
        }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            modelBuilder.HasAnnotation("Relational:Collation", "SQL_Latin1_General_CP1_CI_AS");

            modelBuilder.Entity<ApplicationLog>(entity =>
            {
                entity.HasKey(e => e.ObjectUid);

                entity.ToTable("ApplicationLog");

                entity.Property(e => e.ObjectUid)
                    .HasColumnName("ObjectUID")
                    .HasDefaultValueSql("(newid())");

                entity.Property(e => e.ClientAddress).HasMaxLength(50);

                entity.Property(e => e.CreatedBy).HasMaxLength(50);

                entity.Property(e => e.CreatedOn)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Description).HasMaxLength(2000);

                entity.Property(e => e.Display)
                    .IsRequired()
                    .HasMaxLength(250)
                    .HasComputedColumnSql("([Name])", false);

                entity.Property(e => e.ImportedObjectUid)
                    .HasMaxLength(50)
                    .HasColumnName("ImportedObjectUID");

                entity.Property(e => e.InstallationUid).HasColumnName("InstallationUID");

                entity.Property(e => e.ModuleId).HasColumnName("ModuleID");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(250);

                entity.Property(e => e.NameAlias)
                    .IsRequired()
                    .HasMaxLength(250);

                entity.Property(e => e.OldRecordId).HasColumnName("OldRecordID");

                entity.Property(e => e.PageLink).HasMaxLength(250);

                entity.Property(e => e.PrimaryKeyId).HasColumnName("PrimaryKeyID");

                entity.Property(e => e.RecordId)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("RecordID");

                entity.Property(e => e.SortOrder).HasDefaultValueSql("((100))");

                entity.Property(e => e.UpdatedBy).HasMaxLength(50);

                entity.Property(e => e.UpdatedOn).HasColumnType("datetime");

                entity.Property(e => e.UserAccountId).HasColumnName("UserAccountID");

                entity.HasOne(d => d.Module)
                    .WithMany(p => p.ApplicationLogs)
                    .HasForeignKey(d => d.ModuleId)
                    .HasConstraintName("FK_ApplicationLog_ModuleID_Module");

                entity.HasOne(d => d.UserAccount)
                    .WithMany(p => p.ApplicationLogs)
                    .HasForeignKey(d => d.UserAccountId)
                    .HasConstraintName("FK_ApplicationLog_UserAccountID_UserAccount");
            });

            modelBuilder.Entity<Attachment>(entity =>
            {
                entity.HasKey(e => e.ObjectUid);

                entity.ToTable("Attachment");

                entity.Property(e => e.ObjectUid)
                    .HasColumnName("ObjectUID")
                    .HasDefaultValueSql("(newid())");

                entity.Property(e => e.CreatedBy).HasMaxLength(50);

                entity.Property(e => e.CreatedOn)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Description).HasMaxLength(2000);

                entity.Property(e => e.Display)
                    .IsRequired()
                    .HasMaxLength(100)
                    .HasComputedColumnSql("([Name])", false);

                entity.Property(e => e.ImportedObjectUid)
                    .HasMaxLength(50)
                    .HasColumnName("ImportedObjectUID");

                entity.Property(e => e.InstallationUid).HasColumnName("InstallationUID");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.NameAlias)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.OldRecordId).HasColumnName("OldRecordID");

                entity.Property(e => e.RecordId)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("RecordID");

                entity.Property(e => e.SortOrder).HasDefaultValueSql("((100))");

                entity.Property(e => e.UpdatedBy).HasMaxLength(50);

                entity.Property(e => e.UpdatedOn).HasColumnType("datetime");
            });

            modelBuilder.Entity<AttachmentType>(entity =>
            {
                entity.HasKey(e => e.ObjectUid);

                entity.ToTable("AttachmentType");

                entity.Property(e => e.ObjectUid)
                    .HasColumnName("ObjectUID")
                    .HasDefaultValueSql("(newid())");

                entity.Property(e => e.CreatedBy).HasMaxLength(50);

                entity.Property(e => e.CreatedOn)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Description).HasMaxLength(2000);

                entity.Property(e => e.Display)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasComputedColumnSql("([Name])", false);

                entity.Property(e => e.ImportedObjectUid)
                    .HasMaxLength(50)
                    .HasColumnName("ImportedObjectUID");

                entity.Property(e => e.InstallationUid).HasColumnName("InstallationUID");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.NameAlias)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.OldRecordId).HasColumnName("OldRecordID");

                entity.Property(e => e.RecordId)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("RecordID");

                entity.Property(e => e.SortOrder).HasDefaultValueSql("((100))");

                entity.Property(e => e.UpdatedBy).HasMaxLength(50);

                entity.Property(e => e.UpdatedOn).HasColumnType("datetime");
            });

            modelBuilder.Entity<AttachmentTypeGrid>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("AttachmentTypeGrid");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.ObjectUid).HasColumnName("ObjectUID");
            });

            modelBuilder.Entity<BdgaccountGroup>(entity =>
            {
                entity.HasKey(e => e.ObjectUid);

                entity.ToTable("BDGAccountGroup");

                entity.Property(e => e.ObjectUid)
                    .HasColumnName("ObjectUID")
                    .HasDefaultValueSql("(newid())");

                entity.Property(e => e.AccountCode).HasMaxLength(50);

                entity.Property(e => e.BdgaccountGroupTypeId).HasColumnName("BDGAccountGroupTypeID");

                entity.Property(e => e.BdgcompanyId).HasColumnName("BDGCompanyID");

                entity.Property(e => e.CreatedBy).HasMaxLength(50);

                entity.Property(e => e.CreatedOn)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Description).HasMaxLength(2000);

                entity.Property(e => e.Display)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasComputedColumnSql("([name])", false);

                entity.Property(e => e.EditPageLink).HasMaxLength(250);

                entity.Property(e => e.ImportedObjectUid)
                    .HasMaxLength(50)
                    .HasColumnName("ImportedObjectUID");

                entity.Property(e => e.InstallationUid).HasColumnName("InstallationUID");

                entity.Property(e => e.IsInactive).HasDefaultValueSql("((0))");

                entity.Property(e => e.Linenumber).HasMaxLength(50);

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.NameAlias).HasMaxLength(50);

                entity.Property(e => e.NextyearProposedBudgetFactor).HasColumnType("decimal(10, 2)");

                entity.Property(e => e.OldRecordId).HasColumnName("OldRecordID");

                entity.Property(e => e.ParentBdgaccountGroupId).HasColumnName("Parent_BDGAccountGroupID");

                entity.Property(e => e.ProposedBudgetFactor)
                    .HasColumnType("decimal(10, 2)")
                    .HasDefaultValueSql("((100))");

                entity.Property(e => e.RecordId)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("RecordID");

                entity.Property(e => e.ShowPageLink).HasMaxLength(250);

                entity.Property(e => e.SortOrder).HasDefaultValueSql("((100))");

                entity.Property(e => e.TwoMoreyearsProposedBudgetFactor).HasColumnType("decimal(10, 2)");

                entity.Property(e => e.UpdatedBy).HasMaxLength(50);

                entity.Property(e => e.UpdatedOn).HasColumnType("datetime");

                entity.HasOne(d => d.BdgaccountGroupType)
                    .WithMany(p => p.BdgaccountGroups)
                    .HasForeignKey(d => d.BdgaccountGroupTypeId)
                    .HasConstraintName("FK_BDGAccountGroup_BDGAccountGroupTypeID_BDGAccountGroupType");

                entity.HasOne(d => d.Bdgcompany)
                    .WithMany(p => p.BdgaccountGroups)
                    .HasForeignKey(d => d.BdgcompanyId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_BDGAccountGroup_BDGCompanyID_BDGCompany");

                entity.HasOne(d => d.ParentBdgaccountGroup)
                    .WithMany(p => p.InverseParentBdgaccountGroup)
                    .HasForeignKey(d => d.ParentBdgaccountGroupId)
                    .HasConstraintName("FK_BDGAccountGroup_Parent_BDGAccountGroupID_BDGAccountGroup");
            });

            modelBuilder.Entity<BdgaccountGroupGrid>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("BDGAccountGroupGrid");

                entity.Property(e => e.AccountCode).HasMaxLength(50);

                entity.Property(e => e.BdgcompanyId).HasColumnName("BDGCompanyID");

                entity.Property(e => e.EditPageLink).HasMaxLength(250);

                entity.Property(e => e.GroupType).HasMaxLength(50);

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.ObjectUid).HasColumnName("ObjectUID");

                entity.Property(e => e.Parent).HasMaxLength(50);

                entity.Property(e => e.ProposedBudgetFactor).HasColumnType("decimal(10, 2)");

                entity.Property(e => e.ShowPageLink).HasMaxLength(250);
            });

            modelBuilder.Entity<BdgaccountGroupSubGroup>(entity =>
            {
                entity.HasKey(e => e.ObjectUid);

                entity.ToTable("BDGAccountGroup_SubGroup");

                entity.Property(e => e.ObjectUid)
                    .HasColumnName("ObjectUID")
                    .HasDefaultValueSql("(newid())");

                entity.Property(e => e.AccountCode).HasMaxLength(50);

                entity.Property(e => e.BdgaccountGroupId).HasColumnName("BDGAccountGroupID");

                entity.Property(e => e.CreatedBy).HasMaxLength(50);

                entity.Property(e => e.CreatedOn)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Description).HasMaxLength(2000);

                entity.Property(e => e.Display)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasComputedColumnSql("([Name])", false);

                entity.Property(e => e.ImportedObjectUid)
                    .HasMaxLength(50)
                    .HasColumnName("ImportedObjectUID");

                entity.Property(e => e.InstallationUid).HasColumnName("InstallationUID");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.NameAlias).HasMaxLength(50);

                entity.Property(e => e.OldRecordId).HasColumnName("OldRecordID");

                entity.Property(e => e.ParentBdgaccountGroupSubGroupId).HasColumnName("Parent_BDGAccountGroup_SubGroupID");

                entity.Property(e => e.RecordId)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("RecordID");

                entity.Property(e => e.SortOrder).HasDefaultValueSql("((100))");

                entity.Property(e => e.UpdatedBy).HasMaxLength(50);

                entity.Property(e => e.UpdatedOn).HasColumnType("datetime");

                entity.HasOne(d => d.BdgaccountGroup)
                    .WithMany(p => p.BdgaccountGroupSubGroups)
                    .HasForeignKey(d => d.BdgaccountGroupId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_BDGAccountGroup_SubGroup_BDGAccountGroupID_BDGAccountGroup");

                entity.HasOne(d => d.ParentBdgaccountGroupSubGroup)
                    .WithMany(p => p.InverseParentBdgaccountGroupSubGroup)
                    .HasForeignKey(d => d.ParentBdgaccountGroupSubGroupId)
                    .HasConstraintName("FK_BDGAccountGroup_SubGroup_Parent_BDGAccountGroup_SubGroupID_BDGAccountGroup_SubGroup");
            });

            modelBuilder.Entity<BdgaccountGroupSubGroupGrid>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("BDGAccountGroup_SubGroupGrid");

                entity.Property(e => e.AccountCode).HasMaxLength(50);

                entity.Property(e => e.BdgaccountGroupId).HasColumnName("BDGAccountGroupID");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.ObjectUid).HasColumnName("ObjectUID");

                entity.Property(e => e.ParentSubGroup).HasMaxLength(50);
            });

            modelBuilder.Entity<BdgaccountGroupSubGroupSubGroup>(entity =>
            {
                entity.HasKey(e => e.ObjectUid);

                entity.ToTable("BDGAccountGroup_SubGroup_SubGroup");

                entity.Property(e => e.ObjectUid)
                    .HasColumnName("ObjectUID")
                    .HasDefaultValueSql("(newid())");

                entity.Property(e => e.AccountCode).HasMaxLength(50);

                entity.Property(e => e.BdgaccountGroupSubGroupId).HasColumnName("BDGAccountGroup_SubGroupID");

                entity.Property(e => e.CreatedBy).HasMaxLength(50);

                entity.Property(e => e.CreatedOn)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Description).HasMaxLength(2000);

                entity.Property(e => e.Display)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasComputedColumnSql("([NameAlias])", false);

                entity.Property(e => e.ImportedObjectUid)
                    .HasMaxLength(50)
                    .HasColumnName("ImportedObjectUID");

                entity.Property(e => e.InstallationUid).HasColumnName("InstallationUID");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.NameAlias)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.OldRecordId).HasColumnName("OldRecordID");

                entity.Property(e => e.ParentBdgaccountGroupSubGroupSubGroupId).HasColumnName("Parent_BDGAccountGroup_SubGroup_SubGroupID");

                entity.Property(e => e.RecordId)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("RecordID");

                entity.Property(e => e.SortOrder).HasDefaultValueSql("((100))");

                entity.Property(e => e.UpdatedBy).HasMaxLength(50);

                entity.Property(e => e.UpdatedOn).HasColumnType("datetime");

                entity.HasOne(d => d.BdgaccountGroupSubGroup)
                    .WithMany(p => p.BdgaccountGroupSubGroupSubGroups)
                    .HasForeignKey(d => d.BdgaccountGroupSubGroupId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_BDGAccountGroup_SubGroup_SubGroup_BDGAccountGroup_SubGroupID_BDGAccountGroup_SubGroup");

                entity.HasOne(d => d.ParentBdgaccountGroupSubGroupSubGroup)
                    .WithMany(p => p.InverseParentBdgaccountGroupSubGroupSubGroup)
                    .HasForeignKey(d => d.ParentBdgaccountGroupSubGroupSubGroupId)
                    .HasConstraintName("FK_BDGAccountGroup_SubGroup_SubGroup_Parent_BDGAccountGroup_SubGroup_SubGroupID_BDGAccountGroup_SubGroup_SubGroup");
            });

            modelBuilder.Entity<BdgaccountGroupSubGroupSubGroupGrid>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("BDGAccountGroup_SubGroup_SubGroupGrid");

                entity.Property(e => e.AccountCode).HasMaxLength(50);

                entity.Property(e => e.BdgaccountGroupSubGroupId).HasColumnName("BDGAccountGroup_SubGroupID");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.ObjectUid).HasColumnName("ObjectUID");

                entity.Property(e => e.ParentBdgaccountGroupSubGroupSubGroup)
                    .HasMaxLength(50)
                    .HasColumnName("Parent_BDGAccountGroup_SubGroup_SubGroup");
            });

            modelBuilder.Entity<BdgaccountGroupSubGroupSubGroupSubGroup>(entity =>
            {
                entity.HasKey(e => e.ObjectUid);

                entity.ToTable("BDGAccountGroup_SubGroup_SubGroup_SubGroup");

                entity.Property(e => e.ObjectUid)
                    .HasColumnName("ObjectUID")
                    .HasDefaultValueSql("(newid())");

                entity.Property(e => e.AccountCode).HasMaxLength(50);

                entity.Property(e => e.BdgaccountGroupSubGroupSubGroupId).HasColumnName("BDGAccountGroup_SubGroup_SubGroupID");

                entity.Property(e => e.CreatedBy).HasMaxLength(50);

                entity.Property(e => e.CreatedOn)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Description).HasMaxLength(2000);

                entity.Property(e => e.Display)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasComputedColumnSql("([NameAlias])", false);

                entity.Property(e => e.ImportedObjectUid)
                    .HasMaxLength(50)
                    .HasColumnName("ImportedObjectUID");

                entity.Property(e => e.InstallationUid).HasColumnName("InstallationUID");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.NameAlias)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.OldRecordId).HasColumnName("OldRecordID");

                entity.Property(e => e.ParentBdgaccountGroupSubGroupSubGroupSubGroupId).HasColumnName("Parent_BDGAccountGroup_SubGroup_SubGroup_SubGroupID");

                entity.Property(e => e.RecordId)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("RecordID");

                entity.Property(e => e.SortOrder).HasDefaultValueSql("((100))");

                entity.Property(e => e.UpdatedBy).HasMaxLength(50);

                entity.Property(e => e.UpdatedOn).HasColumnType("datetime");

                entity.HasOne(d => d.BdgaccountGroupSubGroupSubGroup)
                    .WithMany(p => p.BdgaccountGroupSubGroupSubGroupSubGroups)
                    .HasForeignKey(d => d.BdgaccountGroupSubGroupSubGroupId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_BDGAccountGroup_SubGroup_SubGroup_SubGroup_BDGAccountGroup_SubGroup_SubGroup");

                entity.HasOne(d => d.ParentBdgaccountGroupSubGroupSubGroupSubGroup)
                    .WithMany(p => p.InverseParentBdgaccountGroupSubGroupSubGroupSubGroup)
                    .HasForeignKey(d => d.ParentBdgaccountGroupSubGroupSubGroupSubGroupId)
                    .HasConstraintName("FK_BDGAccountGroup_SubGroup_SubGroup_SubGroup_BDGAccountGroup_SubGroup_SubGroup_SubGroup");
            });

            modelBuilder.Entity<BdgaccountGroupSubGroupSubGroupSubGroupGrid>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("BDGAccountGroup_SubGroup_SubGroup_SubGroupGrid");

                entity.Property(e => e.BdgaccountGroupSubGroupSubGroupId).HasColumnName("BDGAccountGroup_SubGroup_SubGroupID");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.ObjectUid).HasColumnName("ObjectUID");

                entity.Property(e => e.Parent).HasMaxLength(50);
            });

            modelBuilder.Entity<BdgaccountGroupTempTjt>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("BDGAccountGroup_temp_tjt");

                entity.Property(e => e.AccountCode).HasMaxLength(50);

                entity.Property(e => e.Count1).HasColumnName("count1");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnName("name");

                entity.Property(e => e.ObjectUid).HasColumnName("ObjectUID");
            });

            modelBuilder.Entity<BdgaccountGroupType>(entity =>
            {
                entity.HasKey(e => e.ObjectUid);

                entity.ToTable("BDGAccountGroupType");

                entity.Property(e => e.ObjectUid)
                    .HasColumnName("ObjectUID")
                    .HasDefaultValueSql("(newid())");

                entity.Property(e => e.BdgcompanyId)
                    .HasColumnName("BDGCompanyID")
                    .HasDefaultValueSql("('ce61b2c7-8923-45b5-ba73-21aad1a58f52')");

                entity.Property(e => e.CreatedBy).HasMaxLength(50);

                entity.Property(e => e.CreatedOn)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Description).HasMaxLength(2000);

                entity.Property(e => e.Display)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasComputedColumnSql("([Name])", false);

                entity.Property(e => e.ImportedObjectUid)
                    .HasMaxLength(50)
                    .HasColumnName("ImportedObjectUID");

                entity.Property(e => e.InstallationUid).HasColumnName("InstallationUID");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.NameAlias)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.OldRecordId).HasColumnName("OldRecordID");

                entity.Property(e => e.RecordId)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("RecordID");

                entity.Property(e => e.SortOrder).HasDefaultValueSql("((100))");

                entity.Property(e => e.UpdatedBy).HasMaxLength(50);

                entity.Property(e => e.UpdatedOn).HasColumnType("datetime");

                entity.HasOne(d => d.Bdgcompany)
                    .WithMany(p => p.BdgaccountGroupTypes)
                    .HasForeignKey(d => d.BdgcompanyId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_BDGAccountGroupType_BDGCompanyID_BDGCompany");
            });

            modelBuilder.Entity<BdgaccountGroupTypeGrid>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("BDGAccountGroupTypeGrid");

                entity.Property(e => e.BdgcompanyId).HasColumnName("BDGCompanyID");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.ObjectUid).HasColumnName("ObjectUID");
            });

            modelBuilder.Entity<BdgbudetinfoDetailDelete>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("bdgbudetinfo_detail_delete");

                entity.Property(e => e.AccountCode).HasMaxLength(50);

                entity.Property(e => e.AllocationType)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.AnticipatedStartingMonthId).HasColumnName("AnticipatedStarting_MonthID");

                entity.Property(e => e.BdgaccountGroupId).HasColumnName("BDGAccountGroupID");

                entity.Property(e => e.BdgaccountGroupSubGroupId).HasColumnName("BDGAccountGroup_SubGroupID");

                entity.Property(e => e.BdgaccountGroupSubGroupSubGroupId).HasColumnName("BDGAccountGroup_SubGroup_SubGroupID");

                entity.Property(e => e.BdgaccountGroupSubGroupSubGroupSubGroupId).HasColumnName("BDGAccountGroup_SubGroup_SubGroup_SubGroupID");

                entity.Property(e => e.BdgbudgetGroupTypeId).HasColumnName("BDGBudgetGroupTypeID");

                entity.Property(e => e.BdgbudgetInfoId).HasColumnName("BDGBudgetInfoID");

                entity.Property(e => e.BdgcommitteeTypeId).HasColumnName("BDGCommitteeTypeID");

                entity.Property(e => e.BdgemployeeCategoryId).HasColumnName("BDGEmployeeCategoryID");

                entity.Property(e => e.BdgemployeeId).HasColumnName("BDGEmployeeID");

                entity.Property(e => e.BdgemployeePositionId).HasColumnName("BDGEmployeePositionID");

                entity.Property(e => e.BdgemployeeStatusId).HasColumnName("BDGEmployeeStatusID");

                entity.Property(e => e.BdgemployeeTypeId).HasColumnName("BDGEmployeeTypeID");

                entity.Property(e => e.BdgemployeeUnitId).HasColumnName("BDGEmployeeUnitID");

                entity.Property(e => e.BdgemployeeUnitPositionId).HasColumnName("BDGEmployeeUnit_PositionID");

                entity.Property(e => e.BdgemployeeUnitPositionStepId).HasColumnName("BDGEmployeeUnit_Position_StepID");

                entity.Property(e => e.BdgmeetingStatusId).HasColumnName("BDGMeetingStatusID");

                entity.Property(e => e.BdgpositionTypeId).HasColumnName("BDGPositionTypeID");

                entity.Property(e => e.BdgprojectTypeId).HasColumnName("BDGProjectTypeID");

                entity.Property(e => e.Bpl)
                    .HasMaxLength(50)
                    .HasColumnName("BPL");

                entity.Property(e => e.BudgetAmount).HasColumnType("money");

                entity.Property(e => e.BudgetAmountP1).HasColumnType("money");

                entity.Property(e => e.BudgetAmountP10).HasColumnType("money");

                entity.Property(e => e.BudgetAmountP11).HasColumnType("money");

                entity.Property(e => e.BudgetAmountP12).HasColumnType("money");

                entity.Property(e => e.BudgetAmountP2).HasColumnType("money");

                entity.Property(e => e.BudgetAmountP3).HasColumnType("money");

                entity.Property(e => e.BudgetAmountP4).HasColumnType("money");

                entity.Property(e => e.BudgetAmountP5).HasColumnType("money");

                entity.Property(e => e.BudgetAmountP6).HasColumnType("money");

                entity.Property(e => e.BudgetAmountP7).HasColumnType("money");

                entity.Property(e => e.BudgetAmountP8).HasColumnType("money");

                entity.Property(e => e.BudgetAmountP9).HasColumnType("money");

                entity.Property(e => e.BudgetAmountPdiff)
                    .HasColumnType("money")
                    .HasColumnName("BudgetAmountPDiff");

                entity.Property(e => e.BudgetPercentageIncrease).HasColumnType("numeric(18, 3)");

                entity.Property(e => e.Comment).HasMaxLength(2000);

                entity.Property(e => e.CreatedBy).HasMaxLength(50);

                entity.Property(e => e.CreatedOn).HasColumnType("datetime");

                entity.Property(e => e.CurrentYearBudgetAmount).HasColumnType("money");

                entity.Property(e => e.Currentmonth)
                    .HasMaxLength(50)
                    .HasColumnName("currentmonth");

                entity.Property(e => e.Description).HasMaxLength(2000);

                entity.Property(e => e.DetailAmount).HasColumnType("money");

                entity.Property(e => e.Display).HasMaxLength(250);

                entity.Property(e => e.EmployeePosition).HasMaxLength(50);

                entity.Property(e => e.Exclusion).HasMaxLength(50);

                entity.Property(e => e.FringeBdgbudgetInfoDetailId).HasColumnName("Fringe_BDGBudgetInfo_DetailID");

                entity.Property(e => e.ImportedObjectUid)
                    .HasMaxLength(50)
                    .HasColumnName("ImportedObjectUID");

                entity.Property(e => e.InstallationUid).HasColumnName("InstallationUID");

                entity.Property(e => e.LineNumber).HasMaxLength(50);

                entity.Property(e => e.MeetingLocation).HasMaxLength(50);

                entity.Property(e => e.MeetingStartDate).HasMaxLength(50);

                entity.Property(e => e.Name).HasMaxLength(250);

                entity.Property(e => e.NameAlias).HasMaxLength(250);

                entity.Property(e => e.NextYearBudgetAmount).HasColumnType("money");

                entity.Property(e => e.NumberOfMembers).HasColumnName("NUmberOfMembers");

                entity.Property(e => e.ObjectUid).HasColumnName("ObjectUID");

                entity.Property(e => e.OldBdgbudgetInfoId).HasColumnName("Old_BDGBudgetInfoID");

                entity.Property(e => e.OldRecordId).HasColumnName("OldRecordID");

                entity.Property(e => e.OriginalNextYearBudgetAmount).HasColumnType("numeric(18, 3)");

                entity.Property(e => e.OriginialBudgetAmount).HasColumnType("numeric(18, 3)");

                entity.Property(e => e.OriginialTwoMoreYearsBudgetAmount).HasColumnType("numeric(18, 3)");

                entity.Property(e => e.RecordId)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("RecordID");

                entity.Property(e => e.Salary).HasColumnType("money");

                entity.Property(e => e.SlotId)
                    .HasMaxLength(50)
                    .HasColumnName("SlotID");

                entity.Property(e => e.TotalAmount).HasColumnType("money");

                entity.Property(e => e.TwoMoreYearsBudgetAmount).HasColumnType("numeric(18, 3)");

                entity.Property(e => e.UpdatedBy).HasMaxLength(50);

                entity.Property(e => e.UpdatedOn).HasColumnType("datetime");

                entity.Property(e => e.WeeklySalary).HasColumnType("money");

                entity.Property(e => e.WillBeUsingTaskForcesYesNoId).HasColumnName("WillBeUsingTaskForces_YesNoID");

                entity.Property(e => e.YtdactualAmount)
                    .HasColumnType("numeric(18, 3)")
                    .HasColumnName("YTDActualAmount");

                entity.Property(e => e.YtdbudgetAmount)
                    .HasColumnType("numeric(18, 3)")
                    .HasColumnName("YTDBudgetAmount");

                entity.Property(e => e.YtdprojectedAmount)
                    .HasColumnType("numeric(18, 3)")
                    .HasColumnName("YTDProjectedAmount");
            });

            modelBuilder.Entity<BdgbudetinfoDetailZero>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("bdgbudetinfo_detail_zero");

                entity.Property(e => e.AccountCode).HasMaxLength(50);

                entity.Property(e => e.AllocationType)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.AnticipatedStartingMonthId).HasColumnName("AnticipatedStarting_MonthID");

                entity.Property(e => e.BdgaccountGroupId).HasColumnName("BDGAccountGroupID");

                entity.Property(e => e.BdgaccountGroupSubGroupId).HasColumnName("BDGAccountGroup_SubGroupID");

                entity.Property(e => e.BdgaccountGroupSubGroupSubGroupId).HasColumnName("BDGAccountGroup_SubGroup_SubGroupID");

                entity.Property(e => e.BdgaccountGroupSubGroupSubGroupSubGroupId).HasColumnName("BDGAccountGroup_SubGroup_SubGroup_SubGroupID");

                entity.Property(e => e.BdgbudgetGroupTypeId).HasColumnName("BDGBudgetGroupTypeID");

                entity.Property(e => e.BdgbudgetInfoId).HasColumnName("BDGBudgetInfoID");

                entity.Property(e => e.BdgcommitteeTypeId).HasColumnName("BDGCommitteeTypeID");

                entity.Property(e => e.BdgemployeeCategoryId).HasColumnName("BDGEmployeeCategoryID");

                entity.Property(e => e.BdgemployeeId).HasColumnName("BDGEmployeeID");

                entity.Property(e => e.BdgemployeePositionId).HasColumnName("BDGEmployeePositionID");

                entity.Property(e => e.BdgemployeeStatusId).HasColumnName("BDGEmployeeStatusID");

                entity.Property(e => e.BdgemployeeTypeId).HasColumnName("BDGEmployeeTypeID");

                entity.Property(e => e.BdgemployeeUnitId).HasColumnName("BDGEmployeeUnitID");

                entity.Property(e => e.BdgemployeeUnitPositionId).HasColumnName("BDGEmployeeUnit_PositionID");

                entity.Property(e => e.BdgemployeeUnitPositionStepId).HasColumnName("BDGEmployeeUnit_Position_StepID");

                entity.Property(e => e.BdgmeetingStatusId).HasColumnName("BDGMeetingStatusID");

                entity.Property(e => e.BdgpositionTypeId).HasColumnName("BDGPositionTypeID");

                entity.Property(e => e.BdgprojectTypeId).HasColumnName("BDGProjectTypeID");

                entity.Property(e => e.Bpl)
                    .HasMaxLength(50)
                    .HasColumnName("BPL");

                entity.Property(e => e.BudgetAmount).HasColumnType("money");

                entity.Property(e => e.BudgetAmountP1).HasColumnType("money");

                entity.Property(e => e.BudgetAmountP10).HasColumnType("money");

                entity.Property(e => e.BudgetAmountP11).HasColumnType("money");

                entity.Property(e => e.BudgetAmountP12).HasColumnType("money");

                entity.Property(e => e.BudgetAmountP2).HasColumnType("money");

                entity.Property(e => e.BudgetAmountP3).HasColumnType("money");

                entity.Property(e => e.BudgetAmountP4).HasColumnType("money");

                entity.Property(e => e.BudgetAmountP5).HasColumnType("money");

                entity.Property(e => e.BudgetAmountP6).HasColumnType("money");

                entity.Property(e => e.BudgetAmountP7).HasColumnType("money");

                entity.Property(e => e.BudgetAmountP8).HasColumnType("money");

                entity.Property(e => e.BudgetAmountP9).HasColumnType("money");

                entity.Property(e => e.BudgetAmountPdiff)
                    .HasColumnType("money")
                    .HasColumnName("BudgetAmountPDiff");

                entity.Property(e => e.BudgetPercentageIncrease).HasColumnType("numeric(18, 3)");

                entity.Property(e => e.Comment).HasMaxLength(2000);

                entity.Property(e => e.CreatedBy).HasMaxLength(50);

                entity.Property(e => e.CreatedOn).HasColumnType("datetime");

                entity.Property(e => e.CurrentYearBudgetAmount).HasColumnType("money");

                entity.Property(e => e.Currentmonth)
                    .HasMaxLength(50)
                    .HasColumnName("currentmonth");

                entity.Property(e => e.Description).HasMaxLength(2000);

                entity.Property(e => e.DetailAmount).HasColumnType("money");

                entity.Property(e => e.Display).HasMaxLength(250);

                entity.Property(e => e.EmployeePosition).HasMaxLength(50);

                entity.Property(e => e.Exclusion).HasMaxLength(50);

                entity.Property(e => e.FringeBdgbudgetInfoDetailId).HasColumnName("Fringe_BDGBudgetInfo_DetailID");

                entity.Property(e => e.ImportedObjectUid)
                    .HasMaxLength(50)
                    .HasColumnName("ImportedObjectUID");

                entity.Property(e => e.InstallationUid).HasColumnName("InstallationUID");

                entity.Property(e => e.LineNumber).HasMaxLength(50);

                entity.Property(e => e.MeetingLocation).HasMaxLength(50);

                entity.Property(e => e.MeetingStartDate).HasMaxLength(50);

                entity.Property(e => e.Name).HasMaxLength(250);

                entity.Property(e => e.NameAlias).HasMaxLength(250);

                entity.Property(e => e.NextYearBudgetAmount).HasColumnType("money");

                entity.Property(e => e.NumberOfMembers).HasColumnName("NUmberOfMembers");

                entity.Property(e => e.ObjectUid).HasColumnName("ObjectUID");

                entity.Property(e => e.OldBdgbudgetInfoId).HasColumnName("Old_BDGBudgetInfoID");

                entity.Property(e => e.OldRecordId).HasColumnName("OldRecordID");

                entity.Property(e => e.OriginalNextYearBudgetAmount).HasColumnType("numeric(18, 3)");

                entity.Property(e => e.OriginialBudgetAmount).HasColumnType("numeric(18, 3)");

                entity.Property(e => e.OriginialTwoMoreYearsBudgetAmount).HasColumnType("numeric(18, 3)");

                entity.Property(e => e.RecordId)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("RecordID");

                entity.Property(e => e.Salary).HasColumnType("money");

                entity.Property(e => e.SlotId)
                    .HasMaxLength(50)
                    .HasColumnName("SlotID");

                entity.Property(e => e.TotalAmount).HasColumnType("money");

                entity.Property(e => e.TwoMoreYearsBudgetAmount).HasColumnType("numeric(18, 3)");

                entity.Property(e => e.UpdatedBy).HasMaxLength(50);

                entity.Property(e => e.UpdatedOn).HasColumnType("datetime");

                entity.Property(e => e.WeeklySalary).HasColumnType("money");

                entity.Property(e => e.WillBeUsingTaskForcesYesNoId).HasColumnName("WillBeUsingTaskForces_YesNoID");

                entity.Property(e => e.YtdactualAmount)
                    .HasColumnType("numeric(18, 3)")
                    .HasColumnName("YTDActualAmount");

                entity.Property(e => e.YtdbudgetAmount)
                    .HasColumnType("numeric(18, 3)")
                    .HasColumnName("YTDBudgetAmount");

                entity.Property(e => e.YtdprojectedAmount)
                    .HasColumnType("numeric(18, 3)")
                    .HasColumnName("YTDProjectedAmount");
            });

            modelBuilder.Entity<BdgbudgetCopyOption>(entity =>
            {
                entity.HasKey(e => e.ObjectUid);

                entity.ToTable("BDGBudgetCopyOption");

                entity.Property(e => e.ObjectUid)
                    .HasColumnName("ObjectUID")
                    .HasDefaultValueSql("(newid())");

                entity.Property(e => e.CreatedBy).HasMaxLength(50);

                entity.Property(e => e.CreatedOn)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Description).HasMaxLength(2000);

                entity.Property(e => e.Display)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasComputedColumnSql("([Name])", false);

                entity.Property(e => e.ImportedObjectUid)
                    .HasMaxLength(50)
                    .HasColumnName("ImportedObjectUID");

                entity.Property(e => e.InstallationUid).HasColumnName("InstallationUID");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.NameAlias)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.OldRecordId).HasColumnName("OldRecordID");

                entity.Property(e => e.RecordId)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("RecordID");

                entity.Property(e => e.SortOrder).HasDefaultValueSql("((100))");

                entity.Property(e => e.UpdatedBy).HasMaxLength(50);

                entity.Property(e => e.UpdatedOn).HasColumnType("datetime");
            });

            modelBuilder.Entity<BdgbudgetCopyOptionGrid>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("BDGBudgetCopyOptionGrid");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.ObjectUid).HasColumnName("ObjectUID");
            });

            modelBuilder.Entity<BdgbudgetGroupType>(entity =>
            {
                entity.HasKey(e => e.ObjectUid);

                entity.ToTable("BDGBudgetGroupType");

                entity.Property(e => e.ObjectUid)
                    .HasColumnName("ObjectUID")
                    .HasDefaultValueSql("(newid())");

                entity.Property(e => e.BdgcompanyId).HasColumnName("BDGCompanyID");

                entity.Property(e => e.CreatedBy).HasMaxLength(50);

                entity.Property(e => e.CreatedOn)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Description).HasMaxLength(2000);

                entity.Property(e => e.Display)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasComputedColumnSql("([Name])", false);

                entity.Property(e => e.ImportedObjectUid)
                    .HasMaxLength(50)
                    .HasColumnName("ImportedObjectUID");

                entity.Property(e => e.InstallationUid).HasColumnName("InstallationUID");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.NameAlias)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.OldRecordId).HasColumnName("OldRecordID");

                entity.Property(e => e.RecordId)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("RecordID");

                entity.Property(e => e.SortOrder).HasDefaultValueSql("((100))");

                entity.Property(e => e.UpdatedBy).HasMaxLength(50);

                entity.Property(e => e.UpdatedOn).HasColumnType("datetime");

                entity.HasOne(d => d.Bdgcompany)
                    .WithMany(p => p.BdgbudgetGroupTypes)
                    .HasForeignKey(d => d.BdgcompanyId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_BDGBudgetGroupType_BDGCompanyID_BDGCompany");
            });

            modelBuilder.Entity<BdgbudgetGroupTypeGrid>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("BDGBudgetGroupTypeGrid");

                entity.Property(e => e.BdgcompanyId).HasColumnName("BDGCompanyID");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.ObjectUid).HasColumnName("ObjectUID");
            });

            modelBuilder.Entity<BdgbudgetInfo>(entity =>
            {
                entity.HasKey(e => e.ObjectUid);

                entity.ToTable("BDGBudgetInfo");

                entity.HasIndex(e => e.YearSetupId, "FK_YearSetupID")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.ObjectUid)
                    .HasColumnName("ObjectUID")
                    .HasDefaultValueSql("(newid())");

                entity.Property(e => e.BdgaccountGroupId).HasColumnName("BDGAccountGroupID");

                entity.Property(e => e.BdgcompanyId).HasColumnName("BDGCompanyID");

                entity.Property(e => e.BdgdepartmentId).HasColumnName("BDGDepartmentID");

                entity.Property(e => e.BdgreportTypeId).HasColumnName("BDGReportTypeID");

                entity.Property(e => e.BudgetAmount)
                    .HasColumnType("money")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.CreatedBy).HasMaxLength(50);

                entity.Property(e => e.CreatedOn)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.CssStatusid).HasColumnName("CSS_STATUSID");

                entity.Property(e => e.CurrentAmountP1).HasColumnType("money");

                entity.Property(e => e.CurrentAmountP10).HasColumnType("money");

                entity.Property(e => e.CurrentAmountP11).HasColumnType("money");

                entity.Property(e => e.CurrentAmountP12).HasColumnType("money");

                entity.Property(e => e.CurrentAmountP2).HasColumnType("money");

                entity.Property(e => e.CurrentAmountP3).HasColumnType("money");

                entity.Property(e => e.CurrentAmountP4).HasColumnType("money");

                entity.Property(e => e.CurrentAmountP5).HasColumnType("money");

                entity.Property(e => e.CurrentAmountP6).HasColumnType("money");

                entity.Property(e => e.CurrentAmountP7).HasColumnType("money");

                entity.Property(e => e.CurrentAmountP8).HasColumnType("money");

                entity.Property(e => e.CurrentAmountP9).HasColumnType("money");

                entity.Property(e => e.CurrentMonth)
                    .HasColumnType("money")
                    .HasColumnName("currentMonth");

                entity.Property(e => e.CurrentMonthBudget).HasColumnType("money");

                entity.Property(e => e.Description).HasMaxLength(2000);

                entity.Property(e => e.Display)
                    .HasMaxLength(50)
                    .HasComputedColumnSql("([dbo].[GetBDGAccountGroupName]([BDGAccountGroupID]))", false);

                entity.Property(e => e.DollarIncrease)
                    .HasColumnType("money")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.EstimatedBudgetAmount)
                    .HasColumnType("money")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.ImportedObjectUid)
                    .HasMaxLength(50)
                    .HasColumnName("ImportedObjectUID");

                entity.Property(e => e.InstallationUid).HasColumnName("InstallationUID");

                entity.Property(e => e.Name).HasMaxLength(50);

                entity.Property(e => e.NameAlias).HasMaxLength(50);

                entity.Property(e => e.OldRecordId).HasColumnName("OldRecordID");

                entity.Property(e => e.OriginalNextYearBudgetAmount).HasColumnType("money");

                entity.Property(e => e.OriginialBudgetAmount).HasColumnType("money");

                entity.Property(e => e.OriginialTwoMoreYearsBudgetAmount).HasColumnType("money");

                entity.Property(e => e.PercentIncrease)
                    .HasColumnType("decimal(18, 2)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.PreviousBdgbudgetInfoId).HasColumnName("Previous_BDGBudgetInfoID");

                entity.Property(e => e.ProposedBudgetAmount)
                    .HasColumnType("money")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.ProposedBudgetAmountP1).HasColumnType("money");

                entity.Property(e => e.ProposedBudgetAmountP10).HasColumnType("money");

                entity.Property(e => e.ProposedBudgetAmountP11).HasColumnType("money");

                entity.Property(e => e.ProposedBudgetAmountP12).HasColumnType("money");

                entity.Property(e => e.ProposedBudgetAmountP2).HasColumnType("money");

                entity.Property(e => e.ProposedBudgetAmountP3).HasColumnType("money");

                entity.Property(e => e.ProposedBudgetAmountP4).HasColumnType("money");

                entity.Property(e => e.ProposedBudgetAmountP5).HasColumnType("money");

                entity.Property(e => e.ProposedBudgetAmountP6).HasColumnType("money");

                entity.Property(e => e.ProposedBudgetAmountP7).HasColumnType("money");

                entity.Property(e => e.ProposedBudgetAmountP8).HasColumnType("money");

                entity.Property(e => e.ProposedBudgetAmountP9).HasColumnType("money");

                entity.Property(e => e.ProposedBudgetAmountPdiff)
                    .HasColumnType("money")
                    .HasColumnName("ProposedBudgetAmountPDiff");

                entity.Property(e => e.RecordId)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("RecordID");

                entity.Property(e => e.SortOrder).HasDefaultValueSql("((100))");

                entity.Property(e => e.TwoMoreYearsBudgetAmount).HasColumnType("money");

                entity.Property(e => e.UpdatedBy).HasMaxLength(50);

                entity.Property(e => e.UpdatedOn).HasColumnType("datetime");

                entity.Property(e => e.YearSetupId).HasColumnName("YearSetupID");

                entity.Property(e => e.YtdactualAmount)
                    .HasColumnType("money")
                    .HasColumnName("YTDActualAmount")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.YtdbudgetAmount)
                    .HasColumnType("money")
                    .HasColumnName("YTDBudgetAmount")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.YtdprojectedAmount)
                    .HasColumnType("money")
                    .HasColumnName("YTDProjectedAmount")
                    .HasDefaultValueSql("((0))");

                entity.HasOne(d => d.BdgaccountGroup)
                    .WithMany(p => p.BdgbudgetInfos)
                    .HasForeignKey(d => d.BdgaccountGroupId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_BDGBudgetInfo_BDGAccountGroupID_BDGAccountGroup");

                entity.HasOne(d => d.Bdgcompany)
                    .WithMany(p => p.BdgbudgetInfos)
                    .HasForeignKey(d => d.BdgcompanyId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_BDGBudgetInfo_BDGCompanyID_BDGCompany");

                entity.HasOne(d => d.Bdgdepartment)
                    .WithMany(p => p.BdgbudgetInfos)
                    .HasForeignKey(d => d.BdgdepartmentId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_BDGBudgetInfo_BDGDepartmentID_BDGDepartment");

                entity.HasOne(d => d.BdgreportType)
                    .WithMany(p => p.BdgbudgetInfos)
                    .HasForeignKey(d => d.BdgreportTypeId)
                    .HasConstraintName("FK_BDGBudgetInfo_BDGReportTypeID_BDGReportType");

                entity.HasOne(d => d.PreviousBdgbudgetInfo)
                    .WithMany(p => p.InversePreviousBdgbudgetInfo)
                    .HasForeignKey(d => d.PreviousBdgbudgetInfoId)
                    .HasConstraintName("FK_BDGBudgetInfo_Previous_BDGBudgetInfoID_BDGBudgetInfo");

                entity.HasOne(d => d.YearSetup)
                    .WithMany(p => p.BdgbudgetInfos)
                    .HasForeignKey(d => d.YearSetupId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_BDGBudgetInfo_YearSetupID_YearSetup");
            });

            modelBuilder.Entity<BdgbudgetInfoActualsGrid>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("BDGBudgetInfoActualsGrid");

                entity.Property(e => e.AccountGroup)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.BdgaccountGroupId).HasColumnName("BDGAccountGroupID");

                entity.Property(e => e.BdgcompanyId).HasColumnName("BDGCompanyID");

                entity.Property(e => e.BdgdepartmentId).HasColumnName("BDGDepartmentID");

                entity.Property(e => e.CurrentMonthAmount).HasColumnType("money");

                entity.Property(e => e.CurrentMonthBudget).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.CybudgetAmount)
                    .HasColumnType("money")
                    .HasColumnName("CYBudgetAmount");

                entity.Property(e => e.Department)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.DollarIncrease).HasColumnType("money");

                entity.Property(e => e.NybudgetAmount)
                    .HasColumnType("money")
                    .HasColumnName("NYBudgetAmount");

                entity.Property(e => e.ObjectUid).HasColumnName("ObjectUID");

                entity.Property(e => e.OriginalNextYearBudgetAmount).HasColumnType("money");

                entity.Property(e => e.OriginialBudgetAmount).HasColumnType("money");

                entity.Property(e => e.OriginialTwoMoreYearsBudgetAmount).HasColumnType("money");

                entity.Property(e => e.PercentIncrease).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.PybudgetAmount)
                    .HasColumnType("money")
                    .HasColumnName("PYBudgetAmount");

                entity.Property(e => e.StatusValue)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("Status Value");

                entity.Property(e => e.TwoMoreYearsBudgetAmount).HasColumnType("money");

                entity.Property(e => e.UpdatedBy).HasMaxLength(50);

                entity.Property(e => e.UpdatedOn).HasColumnType("datetime");

                entity.Property(e => e.VarStatus)
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.VarianceBudgetAmount).HasColumnType("money");

                entity.Property(e => e.VarianceCurrentMonthBudget).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.VarianceNextYearBudgetAmount).HasColumnType("money");

                entity.Property(e => e.VarianceTwoMoreYearsBudgetAmount).HasColumnType("money");

                entity.Property(e => e.VarianceYtdbudgetAmount)
                    .HasColumnType("money")
                    .HasColumnName("VarianceYTDBudgetAmount");

                entity.Property(e => e.YearSetup)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.YearSetupId).HasColumnName("YearSetupID");

                entity.Property(e => e.YtdactualsAmount)
                    .HasColumnType("money")
                    .HasColumnName("YTDActualsAmount");

                entity.Property(e => e.YtdbudgetAmount)
                    .HasColumnType("money")
                    .HasColumnName("YTDBudgetAmount");

                entity.Property(e => e.YtdprojectedAmount)
                    .HasColumnType("money")
                    .HasColumnName("YTDProjectedAmount");
            });

            modelBuilder.Entity<BdgbudgetInfoDetail>(entity =>
            {
                entity.HasKey(e => e.ObjectUid);

                entity.ToTable("BDGBudgetInfo_Detail");

                entity.HasIndex(e => e.BdgbudgetInfoId, "FK_BDGBudgetInfo")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.ObjectUid)
                    .HasColumnName("ObjectUID")
                    .HasDefaultValueSql("(newid())");

                entity.Property(e => e.AccountCode).HasMaxLength(50);

                entity.Property(e => e.AllocationType)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.AnticipatedStartingMonthId).HasColumnName("AnticipatedStarting_MonthID");

                entity.Property(e => e.BdgaccountGroupId).HasColumnName("BDGAccountGroupID");

                entity.Property(e => e.BdgaccountGroupSubGroupId).HasColumnName("BDGAccountGroup_SubGroupID");

                entity.Property(e => e.BdgaccountGroupSubGroupSubGroupId).HasColumnName("BDGAccountGroup_SubGroup_SubGroupID");

                entity.Property(e => e.BdgaccountGroupSubGroupSubGroupSubGroupId).HasColumnName("BDGAccountGroup_SubGroup_SubGroup_SubGroupID");

                entity.Property(e => e.BdgbudgetGroupTypeId).HasColumnName("BDGBudgetGroupTypeID");

                entity.Property(e => e.BdgbudgetInfoId).HasColumnName("BDGBudgetInfoID");

                entity.Property(e => e.BdgcommitteeTypeId).HasColumnName("BDGCommitteeTypeID");

                entity.Property(e => e.BdgemployeeCategoryId).HasColumnName("BDGEmployeeCategoryID");

                entity.Property(e => e.BdgemployeeId).HasColumnName("BDGEmployeeID");

                entity.Property(e => e.BdgemployeePositionId).HasColumnName("BDGEmployeePositionID");

                entity.Property(e => e.BdgemployeeStatusId).HasColumnName("BDGEmployeeStatusID");

                entity.Property(e => e.BdgemployeeTypeId).HasColumnName("BDGEmployeeTypeID");

                entity.Property(e => e.BdgemployeeUnitId).HasColumnName("BDGEmployeeUnitID");

                entity.Property(e => e.BdgemployeeUnitPositionId).HasColumnName("BDGEmployeeUnit_PositionID");

                entity.Property(e => e.BdgemployeeUnitPositionStepId).HasColumnName("BDGEmployeeUnit_Position_StepID");

                entity.Property(e => e.BdgmeetingStatusId).HasColumnName("BDGMeetingStatusID");

                entity.Property(e => e.BdgpositionTypeId).HasColumnName("BDGPositionTypeID");

                entity.Property(e => e.BdgprojectTypeId).HasColumnName("BDGProjectTypeID");

                entity.Property(e => e.Bpl)
                    .HasMaxLength(50)
                    .HasColumnName("BPL");

                entity.Property(e => e.BudgetAmount)
                    .HasColumnType("money")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.BudgetAmountP1).HasColumnType("money");

                entity.Property(e => e.BudgetAmountP10).HasColumnType("money");

                entity.Property(e => e.BudgetAmountP11).HasColumnType("money");

                entity.Property(e => e.BudgetAmountP12).HasColumnType("money");

                entity.Property(e => e.BudgetAmountP2).HasColumnType("money");

                entity.Property(e => e.BudgetAmountP3).HasColumnType("money");

                entity.Property(e => e.BudgetAmountP4).HasColumnType("money");

                entity.Property(e => e.BudgetAmountP5).HasColumnType("money");

                entity.Property(e => e.BudgetAmountP6).HasColumnType("money");

                entity.Property(e => e.BudgetAmountP7).HasColumnType("money");

                entity.Property(e => e.BudgetAmountP8).HasColumnType("money");

                entity.Property(e => e.BudgetAmountP9).HasColumnType("money");

                entity.Property(e => e.BudgetAmountPdiff)
                    .HasColumnType("money")
                    .HasColumnName("BudgetAmountPDiff");

                entity.Property(e => e.BudgetPercentageIncrease).HasColumnType("numeric(18, 3)");

                entity.Property(e => e.Comment).HasMaxLength(2000);

                entity.Property(e => e.CreatedBy).HasMaxLength(50);

                entity.Property(e => e.CreatedOn)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.CurrentYearBudgetAmount)
                    .HasColumnType("money")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Currentmonth)
                    .HasMaxLength(50)
                    .HasColumnName("currentmonth");

                entity.Property(e => e.Description).HasMaxLength(2000);

                entity.Property(e => e.DetailAmount)
                    .HasColumnType("money")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Display).HasMaxLength(250);

                entity.Property(e => e.EmployeePosition).HasMaxLength(50);

                entity.Property(e => e.Exclusion).HasMaxLength(50);

                entity.Property(e => e.FringeBdgbudgetInfoDetailId).HasColumnName("Fringe_BDGBudgetInfo_DetailID");

                entity.Property(e => e.ImportedObjectUid)
                    .HasMaxLength(50)
                    .HasColumnName("ImportedObjectUID");

                entity.Property(e => e.InstallationUid).HasColumnName("InstallationUID");

                entity.Property(e => e.LineNumber).HasMaxLength(50);

                entity.Property(e => e.MeetingLocation).HasMaxLength(50);

                entity.Property(e => e.MeetingStartDate).HasMaxLength(50);

                entity.Property(e => e.Name).HasMaxLength(250);

                entity.Property(e => e.NameAlias).HasMaxLength(250);

                entity.Property(e => e.NextYearBudgetAmount)
                    .HasColumnType("money")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.NumberOfMembers).HasColumnName("NUmberOfMembers");

                entity.Property(e => e.OldBdgbudgetInfoId).HasColumnName("Old_BDGBudgetInfoID");

                entity.Property(e => e.OldRecordId).HasColumnName("OldRecordID");

                entity.Property(e => e.OriginalNextYearBudgetAmount).HasColumnType("numeric(18, 3)");

                entity.Property(e => e.OriginialBudgetAmount).HasColumnType("numeric(18, 3)");

                entity.Property(e => e.OriginialTwoMoreYearsBudgetAmount).HasColumnType("numeric(18, 3)");

                entity.Property(e => e.RecordId)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("RecordID");

                entity.Property(e => e.Salary).HasColumnType("money");

                entity.Property(e => e.SlotId)
                    .HasMaxLength(50)
                    .HasColumnName("SlotID");

                entity.Property(e => e.SortOrder).HasDefaultValueSql("((100))");

                entity.Property(e => e.TotalAmount)
                    .HasColumnType("money")
                    .HasComputedColumnSql("([BudgetAmount]+[DetailAmount])", false);

                entity.Property(e => e.TwoMoreYearsBudgetAmount).HasColumnType("numeric(18, 3)");

                entity.Property(e => e.UpdatedBy).HasMaxLength(50);

                entity.Property(e => e.UpdatedOn).HasColumnType("datetime");

                entity.Property(e => e.WeeklySalary).HasColumnType("money");

                entity.Property(e => e.WillBeUsingTaskForcesYesNoId).HasColumnName("WillBeUsingTaskForces_YesNoID");

                entity.Property(e => e.YtdactualAmount)
                    .HasColumnType("numeric(18, 3)")
                    .HasColumnName("YTDActualAmount");

                entity.Property(e => e.YtdbudgetAmount)
                    .HasColumnType("numeric(18, 3)")
                    .HasColumnName("YTDBudgetAmount");

                entity.Property(e => e.YtdprojectedAmount)
                    .HasColumnType("numeric(18, 3)")
                    .HasColumnName("YTDProjectedAmount");

                entity.HasOne(d => d.AnticipatedStartingMonth)
                    .WithMany(p => p.BdgbudgetInfoDetails)
                    .HasForeignKey(d => d.AnticipatedStartingMonthId)
                    .HasConstraintName("FK_BDGBudgetInfo_Detail_AnticipatedStarting_MonthID_Month");

                entity.HasOne(d => d.BdgaccountGroup)
                    .WithMany(p => p.BdgbudgetInfoDetails)
                    .HasForeignKey(d => d.BdgaccountGroupId)
                    .HasConstraintName("FK_BDGBudgetInfo_Detail_BDGAccountGroupID_BDGAccountGroup");

                entity.HasOne(d => d.BdgaccountGroupSubGroup)
                    .WithMany(p => p.BdgbudgetInfoDetails)
                    .HasForeignKey(d => d.BdgaccountGroupSubGroupId)
                    .HasConstraintName("FK_BDGBudgetInfo_Detail_BDGAccountGroup_SubGroupID_BDGAccountGroup_SubGroup");

                entity.HasOne(d => d.BdgaccountGroupSubGroupSubGroup)
                    .WithMany(p => p.BdgbudgetInfoDetails)
                    .HasForeignKey(d => d.BdgaccountGroupSubGroupSubGroupId)
                    .HasConstraintName("FK_BDGBudgetInfo_Detail_BDGAccountGroup_SubGroup_SubGroupID_BDGAccountGroup_SubGroup_SubGroup");

                entity.HasOne(d => d.BdgaccountGroupSubGroupSubGroupSubGroup)
                    .WithMany(p => p.BdgbudgetInfoDetails)
                    .HasForeignKey(d => d.BdgaccountGroupSubGroupSubGroupSubGroupId)
                    .HasConstraintName("FK_BDGBudgetInfo_Detail_BDGAccountGroup_SubGroup_SubGroup_SubGroupID_BDGAccountGroup_SubGroup_SubGroup_SubGroup");

                entity.HasOne(d => d.BdgbudgetGroupType)
                    .WithMany(p => p.BdgbudgetInfoDetails)
                    .HasForeignKey(d => d.BdgbudgetGroupTypeId)
                    .HasConstraintName("FK_BDGBudgetInfo_Detail_BDGBudgetGroupTypeID_BDGBudgetGroupType");

                entity.HasOne(d => d.BdgbudgetInfo)
                    .WithMany(p => p.BdgbudgetInfoDetailBdgbudgetInfos)
                    .HasForeignKey(d => d.BdgbudgetInfoId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_BDGBudgetInfo_Detail_BDGBudgetInfoID_BDGBudgetInfo");

                entity.HasOne(d => d.BdgcommitteeType)
                    .WithMany(p => p.BdgbudgetInfoDetails)
                    .HasForeignKey(d => d.BdgcommitteeTypeId)
                    .HasConstraintName("FK_BDGBudgetInfo_Detail_BDGCommitteeTypeID_BDGCommitteeType");

                entity.HasOne(d => d.BdgemployeeCategory)
                    .WithMany(p => p.BdgbudgetInfoDetails)
                    .HasForeignKey(d => d.BdgemployeeCategoryId)
                    .HasConstraintName("FK_BDGBudgetInfo_Detail_BDGEmployeeCategoryID_BDGEmployeeCategory");

                entity.HasOne(d => d.Bdgemployee)
                    .WithMany(p => p.BdgbudgetInfoDetails)
                    .HasForeignKey(d => d.BdgemployeeId)
                    .HasConstraintName("FK_BDGBudgetInfo_Detail_BDGEmployeeID_BDGEmployee");

                entity.HasOne(d => d.BdgemployeePosition)
                    .WithMany(p => p.BdgbudgetInfoDetails)
                    .HasForeignKey(d => d.BdgemployeePositionId)
                    .HasConstraintName("FK_BDGBudgetInfo_Detail_BDGEmployeePositionID_BDGEmployeePosition");

                entity.HasOne(d => d.BdgemployeeStatus)
                    .WithMany(p => p.BdgbudgetInfoDetails)
                    .HasForeignKey(d => d.BdgemployeeStatusId)
                    .HasConstraintName("FK_BDGBudgetInfo_Detail_BDGEmployeeStatusID_BDGEmployeeStatus");

                entity.HasOne(d => d.BdgemployeeType)
                    .WithMany(p => p.BdgbudgetInfoDetails)
                    .HasForeignKey(d => d.BdgemployeeTypeId)
                    .HasConstraintName("FK_BDGBudgetInfo_Detail_BDGEmployeeTypeID_BDGEmployeeType");

                entity.HasOne(d => d.BdgemployeeUnit)
                    .WithMany(p => p.BdgbudgetInfoDetails)
                    .HasForeignKey(d => d.BdgemployeeUnitId)
                    .HasConstraintName("FK_BDGBudgetInfo_Detail_BDGEmployeeUnitID_BDGEmployeeUnit");

                entity.HasOne(d => d.BdgemployeeUnitPosition)
                    .WithMany(p => p.BdgbudgetInfoDetails)
                    .HasForeignKey(d => d.BdgemployeeUnitPositionId)
                    .HasConstraintName("FK_BDGBudgetInfo_Detail_BDGEmployeeUnit_PositionID_BDGEmployeeUnit_Position");

                entity.HasOne(d => d.BdgemployeeUnitPositionStep)
                    .WithMany(p => p.BdgbudgetInfoDetails)
                    .HasForeignKey(d => d.BdgemployeeUnitPositionStepId)
                    .HasConstraintName("FK_BDGBudgetInfo_Detail_BDGEmployeeUnit_Position_StepID_BDGEmployeeUnit_Position_Step");

                entity.HasOne(d => d.BdgmeetingStatus)
                    .WithMany(p => p.BdgbudgetInfoDetails)
                    .HasForeignKey(d => d.BdgmeetingStatusId)
                    .HasConstraintName("FK_BDGBudgetInfo_Detail_BDGMeetingStatusID_BDGMeetingStatus");

                entity.HasOne(d => d.BdgpositionType)
                    .WithMany(p => p.BdgbudgetInfoDetails)
                    .HasForeignKey(d => d.BdgpositionTypeId)
                    .HasConstraintName("FK_BDGBudgetInfo_Detail_BDGPositionTypeID_BDGPositionType");

                entity.HasOne(d => d.BdgprojectType)
                    .WithMany(p => p.BdgbudgetInfoDetails)
                    .HasForeignKey(d => d.BdgprojectTypeId)
                    .HasConstraintName("FK_BDGBudgetInfo_Detail_BDGProjectTypeID_BDGProjectType");

                entity.HasOne(d => d.FringeBdgbudgetInfoDetail)
                    .WithMany(p => p.InverseFringeBdgbudgetInfoDetail)
                    .HasForeignKey(d => d.FringeBdgbudgetInfoDetailId)
                    .HasConstraintName("FK_BDGBudgetInfo_Detail_Fringe_BDGBudgetInfo_DetailID_BDGBudgetInfo_Detail");

                entity.HasOne(d => d.OldBdgbudgetInfo)
                    .WithMany(p => p.BdgbudgetInfoDetailOldBdgbudgetInfos)
                    .HasForeignKey(d => d.OldBdgbudgetInfoId)
                    .HasConstraintName("FK_BDGBudgetInfo_Detail_Old_BDGBudgetInfoID_BDGBudgetInfo");

                entity.HasOne(d => d.WillBeUsingTaskForcesYesNo)
                    .WithMany(p => p.BdgbudgetInfoDetails)
                    .HasForeignKey(d => d.WillBeUsingTaskForcesYesNoId)
                    .HasConstraintName("FK_BDGBudgetInfo_Detail_WillBeUsingTaskForces_YesNoID_YesNo");
            });

            modelBuilder.Entity<BdgbudgetInfoDetailChange>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("BDGBudgetInfo_Detail_change");

                entity.Property(e => e.AnticipatedStartingMonthId).HasColumnName("AnticipatedStarting_MonthID");

                entity.Property(e => e.BdgaccountGroupId).HasColumnName("BDGAccountGroupID");

                entity.Property(e => e.BdgaccountGroupSubGroupId).HasColumnName("BDGAccountGroup_SubGroupID");

                entity.Property(e => e.BdgaccountGroupSubGroupSubGroupId).HasColumnName("BDGAccountGroup_SubGroup_SubGroupID");

                entity.Property(e => e.BdgaccountGroupSubGroupSubGroupSubGroupId).HasColumnName("BDGAccountGroup_SubGroup_SubGroup_SubGroupID");

                entity.Property(e => e.BdgbudgetGroupTypeId).HasColumnName("BDGBudgetGroupTypeID");

                entity.Property(e => e.BdgbudgetInfoId).HasColumnName("BDGBudgetInfoID");

                entity.Property(e => e.BdgcommitteeTypeId).HasColumnName("BDGCommitteeTypeID");

                entity.Property(e => e.BdgemployeeCategoryId).HasColumnName("BDGEmployeeCategoryID");

                entity.Property(e => e.BdgemployeeId).HasColumnName("BDGEmployeeID");

                entity.Property(e => e.BdgemployeePositionId).HasColumnName("BDGEmployeePositionID");

                entity.Property(e => e.BdgemployeeStatusId).HasColumnName("BDGEmployeeStatusID");

                entity.Property(e => e.BdgemployeeTypeId).HasColumnName("BDGEmployeeTypeID");

                entity.Property(e => e.BdgemployeeUnitId).HasColumnName("BDGEmployeeUnitID");

                entity.Property(e => e.BdgemployeeUnitPositionId).HasColumnName("BDGEmployeeUnit_PositionID");

                entity.Property(e => e.BdgemployeeUnitPositionStepId).HasColumnName("BDGEmployeeUnit_Position_StepID");

                entity.Property(e => e.BdgmeetingStatusId).HasColumnName("BDGMeetingStatusID");

                entity.Property(e => e.BdgpositionTypeId).HasColumnName("BDGPositionTypeID");

                entity.Property(e => e.BdgprojectTypeId).HasColumnName("BDGProjectTypeID");

                entity.Property(e => e.BudgetAmount).HasColumnType("money");

                entity.Property(e => e.CreatedBy).HasMaxLength(50);

                entity.Property(e => e.CreatedOn).HasColumnType("datetime");

                entity.Property(e => e.CurrentYearBudgetAmount).HasColumnType("money");

                entity.Property(e => e.Description).HasMaxLength(2000);

                entity.Property(e => e.DetailAmount).HasColumnType("money");

                entity.Property(e => e.Display).HasMaxLength(250);

                entity.Property(e => e.FringeBdgbudgetInfoDetailId).HasColumnName("Fringe_BDGBudgetInfo_DetailID");

                entity.Property(e => e.ImportedObjectUid)
                    .HasMaxLength(50)
                    .HasColumnName("ImportedObjectUID");

                entity.Property(e => e.InstallationUid).HasColumnName("InstallationUID");

                entity.Property(e => e.LineNumber).HasMaxLength(50);

                entity.Property(e => e.MeetingLocation).HasMaxLength(50);

                entity.Property(e => e.MeetingStartDate).HasMaxLength(50);

                entity.Property(e => e.Name).HasMaxLength(250);

                entity.Property(e => e.NameAlias).HasMaxLength(250);

                entity.Property(e => e.NextYearBudgetAmount).HasColumnType("money");

                entity.Property(e => e.ObjectUid).HasColumnName("ObjectUID");

                entity.Property(e => e.OldBdgbudgetInfoId).HasColumnName("Old_BDGBudgetInfoID");

                entity.Property(e => e.OldRecordId).HasColumnName("OldRecordID");

                entity.Property(e => e.RecordId)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("RecordID");

                entity.Property(e => e.Salary).HasColumnType("money");

                entity.Property(e => e.TotalAmount).HasColumnType("money");

                entity.Property(e => e.UpdateDatetime)
                    .HasColumnType("datetime")
                    .HasColumnName("update_datetime");

                entity.Property(e => e.UpdatedBy).HasMaxLength(50);

                entity.Property(e => e.UpdatedOn).HasColumnType("datetime");

                entity.Property(e => e.WeeklySalary).HasColumnType("money");

                entity.Property(e => e.WillBeUsingTaskForcesYesNoId).HasColumnName("WillBeUsingTaskForces_YesNoID");
            });

            modelBuilder.Entity<BdgbudgetInfoDetailDetail>(entity =>
            {
                entity.HasKey(e => e.ObjectUid);

                entity.ToTable("BDGBudgetInfo_Detail_Detail");

                entity.Property(e => e.ObjectUid)
                    .HasColumnName("ObjectUID")
                    .HasDefaultValueSql("(newid())");

                entity.Property(e => e.BdgaccountGroupId).HasColumnName("BDGAccountGroupID");

                entity.Property(e => e.BdgaccountGroupSubGroupId).HasColumnName("BDGAccountGroup_SubGroupID");

                entity.Property(e => e.BdgbudgetInfoDetailId).HasColumnName("BDGBudgetInfo_DetailID");

                entity.Property(e => e.BudgetAmount)
                    .HasColumnType("money")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.CreatedBy).HasMaxLength(50);

                entity.Property(e => e.CreatedOn)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Description).HasMaxLength(2000);

                entity.Property(e => e.DetailAmount)
                    .HasColumnType("money")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Display).HasMaxLength(50);

                entity.Property(e => e.ImportedObjectUid)
                    .HasMaxLength(50)
                    .HasColumnName("ImportedObjectUID");

                entity.Property(e => e.InstallationUid).HasColumnName("InstallationUID");

                entity.Property(e => e.LineNumber).HasMaxLength(50);

                entity.Property(e => e.Name).HasMaxLength(50);

                entity.Property(e => e.NameAlias).HasMaxLength(50);

                entity.Property(e => e.OldRecordId).HasColumnName("OldRecordID");

                entity.Property(e => e.RecordId)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("RecordID");

                entity.Property(e => e.Salary).HasColumnType("money");

                entity.Property(e => e.SortOrder).HasDefaultValueSql("((100))");

                entity.Property(e => e.TotalAmount)
                    .HasColumnType("money")
                    .HasComputedColumnSql("([BudgetAmount]+[DetailAmount])", false);

                entity.Property(e => e.UpdatedBy).HasMaxLength(50);

                entity.Property(e => e.UpdatedOn).HasColumnType("datetime");

                entity.HasOne(d => d.BdgaccountGroup)
                    .WithMany(p => p.BdgbudgetInfoDetailDetails)
                    .HasForeignKey(d => d.BdgaccountGroupId)
                    .HasConstraintName("FK_BDGBudgetInfo_Detail_Detail_BDGAccountGroupID_BDGAccountGroup");

                entity.HasOne(d => d.BdgaccountGroupSubGroup)
                    .WithMany(p => p.BdgbudgetInfoDetailDetails)
                    .HasForeignKey(d => d.BdgaccountGroupSubGroupId)
                    .HasConstraintName("FK_BDGBudgetInfo_Detail_Detail_BDGAccountGroup_SubGroupID_BDGAccountGroup_SubGroup");

                entity.HasOne(d => d.BdgbudgetInfoDetail)
                    .WithMany(p => p.BdgbudgetInfoDetailDetails)
                    .HasForeignKey(d => d.BdgbudgetInfoDetailId)
                    .HasConstraintName("FK_BDGBudgetInfo_Detail_Detail_BDGBudgetInfo_DetailID_BDGBudgetInfo_Detail");
            });

            modelBuilder.Entity<BdgbudgetInfoDetailDetailDetail>(entity =>
            {
                entity.HasKey(e => e.ObjectUid);

                entity.ToTable("BDGBudgetInfo_Detail_Detail_Detail");

                entity.Property(e => e.ObjectUid)
                    .HasColumnName("ObjectUID")
                    .HasDefaultValueSql("(newid())");

                entity.Property(e => e.BdgaccountGroupId).HasColumnName("BDGAccountGroupID");

                entity.Property(e => e.BdgaccountGroupSubGroupId).HasColumnName("BDGAccountGroup_SubGroupID");

                entity.Property(e => e.BdgbudgetInfoDetailDetailId).HasColumnName("BDGBudgetInfo_Detail_DetailID");

                entity.Property(e => e.BdgemployeeId).HasColumnName("BDGEmployeeID");

                entity.Property(e => e.BdgemployeePositionId).HasColumnName("BDGEmployeePositionID");

                entity.Property(e => e.BdgemployeeStatusId).HasColumnName("BDGEmployeeStatusID");

                entity.Property(e => e.BdgemployeeTypeId).HasColumnName("BDGEmployeeTypeID");

                entity.Property(e => e.BdgemployeeUnitId).HasColumnName("BDGEmployeeUnitID");

                entity.Property(e => e.BudgetAmount)
                    .HasColumnType("money")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.CreatedBy).HasMaxLength(50);

                entity.Property(e => e.CreatedOn)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Description).HasMaxLength(2000);

                entity.Property(e => e.DetailAmount)
                    .HasColumnType("money")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Display)
                    .HasMaxLength(150)
                    .HasComputedColumnSql("([dbo].[GetGroupSubGroupName]([BDGAccountGroupID],[BDGAccountGroup_SubGroupID]))", false);

                entity.Property(e => e.ImportedObjectUid)
                    .HasMaxLength(50)
                    .HasColumnName("ImportedObjectUID");

                entity.Property(e => e.InstallationUid).HasColumnName("InstallationUID");

                entity.Property(e => e.LineNumber).HasMaxLength(50);

                entity.Property(e => e.Name).HasMaxLength(50);

                entity.Property(e => e.NameAlias).HasMaxLength(50);

                entity.Property(e => e.OldRecordId).HasColumnName("OldRecordID");

                entity.Property(e => e.RecordId)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("RecordID");

                entity.Property(e => e.Salary).HasColumnType("money");

                entity.Property(e => e.SortOrder).HasDefaultValueSql("((100))");

                entity.Property(e => e.TotalAmount)
                    .HasColumnType("money")
                    .HasComputedColumnSql("([BudgetAmount]+[DetailAmount])", false);

                entity.Property(e => e.UpdatedBy).HasMaxLength(50);

                entity.Property(e => e.UpdatedOn).HasColumnType("datetime");

                entity.HasOne(d => d.BdgaccountGroup)
                    .WithMany(p => p.BdgbudgetInfoDetailDetailDetails)
                    .HasForeignKey(d => d.BdgaccountGroupId)
                    .HasConstraintName("FK_BDGBudgetInfo_Detail_Detail_Detail_BDGAccountGroupID_BDGAccountGroup");

                entity.HasOne(d => d.BdgaccountGroupSubGroup)
                    .WithMany(p => p.BdgbudgetInfoDetailDetailDetails)
                    .HasForeignKey(d => d.BdgaccountGroupSubGroupId)
                    .HasConstraintName("FK_BDGBudgetInfo_Detail_Detail_Detail_BDGAccountGroup_SubGroupID_BDGAccountGroup_SubGroup");

                entity.HasOne(d => d.BdgbudgetInfoDetailDetail)
                    .WithMany(p => p.BdgbudgetInfoDetailDetailDetails)
                    .HasForeignKey(d => d.BdgbudgetInfoDetailDetailId)
                    .HasConstraintName("FK_BDGBudgetInfo_Detail_Detail_Detail_BDGBudgetInfo_Detail_DetailID_BDGBudgetInfo_Detail_Detail");

                entity.HasOne(d => d.Bdgemployee)
                    .WithMany(p => p.BdgbudgetInfoDetailDetailDetails)
                    .HasForeignKey(d => d.BdgemployeeId)
                    .HasConstraintName("FK_BDGBudgetInfo_Detail_Detail_Detail_BDGEmployeeID_BDGEmployee");

                entity.HasOne(d => d.BdgemployeePosition)
                    .WithMany(p => p.BdgbudgetInfoDetailDetailDetails)
                    .HasForeignKey(d => d.BdgemployeePositionId)
                    .HasConstraintName("FK_BDGBudgetInfo_Detail_Detail_Detail_BDGEmployeePositionID_BDGEmployeePosition");

                entity.HasOne(d => d.BdgemployeeStatus)
                    .WithMany(p => p.BdgbudgetInfoDetailDetailDetails)
                    .HasForeignKey(d => d.BdgemployeeStatusId)
                    .HasConstraintName("FK_BDGBudgetInfo_Detail_Detail_Detail_BDGEmployeeStatusID_BDGEmployeeStatus");

                entity.HasOne(d => d.BdgemployeeType)
                    .WithMany(p => p.BdgbudgetInfoDetailDetailDetails)
                    .HasForeignKey(d => d.BdgemployeeTypeId)
                    .HasConstraintName("FK_BDGBudgetInfo_Detail_Detail_Detail_BDGEmployeeTypeID_BDGEmployeeType");

                entity.HasOne(d => d.BdgemployeeUnit)
                    .WithMany(p => p.BdgbudgetInfoDetailDetailDetails)
                    .HasForeignKey(d => d.BdgemployeeUnitId)
                    .HasConstraintName("FK_BDGBudgetInfo_Detail_Detail_Detail_BDGEmployeeUnitID_BDGEmployeeUnit");
            });

            modelBuilder.Entity<BdgbudgetInfoDetailDetailDetailDetail>(entity =>
            {
                entity.HasKey(e => e.ObjectUid);

                entity.ToTable("BDGBudgetInfo_Detail_Detail_Detail_Detail");

                entity.Property(e => e.ObjectUid)
                    .HasColumnName("ObjectUID")
                    .HasDefaultValueSql("(newid())");

                entity.Property(e => e.BdgaccountGroupId).HasColumnName("BDGAccountGroupID");

                entity.Property(e => e.BdgaccountGroupSubGroupId).HasColumnName("BDGAccountGroup_SubGroupID");

                entity.Property(e => e.BdgbudgetInfoDetailDetailDetailId).HasColumnName("BDGBudgetInfo_Detail_Detail_DetailID");

                entity.Property(e => e.BdgemployeeId).HasColumnName("BDGEmployeeID");

                entity.Property(e => e.BdgemployeePositionId).HasColumnName("BDGEmployeePositionID");

                entity.Property(e => e.BdgemployeeStatusId).HasColumnName("BDGEmployeeStatusID");

                entity.Property(e => e.BdgemployeeTypeId).HasColumnName("BDGEmployeeTypeID");

                entity.Property(e => e.BdgemployeeUnitId).HasColumnName("BDGEmployeeUnitID");

                entity.Property(e => e.BudgetAmount)
                    .HasColumnType("money")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.CreatedBy).HasMaxLength(50);

                entity.Property(e => e.CreatedOn)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Description).HasMaxLength(2000);

                entity.Property(e => e.DetailAmount)
                    .HasColumnType("money")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Display)
                    .HasMaxLength(150)
                    .HasComputedColumnSql("([dbo].[GetGroupSubGroupName]([BDGAccountGroupID],[BDGAccountGroup_SubGroupID]))", false);

                entity.Property(e => e.ImportedObjectUid)
                    .HasMaxLength(50)
                    .HasColumnName("ImportedObjectUID");

                entity.Property(e => e.InstallationUid).HasColumnName("InstallationUID");

                entity.Property(e => e.LineNumber).HasMaxLength(50);

                entity.Property(e => e.Name).HasMaxLength(50);

                entity.Property(e => e.NameAlias).HasMaxLength(50);

                entity.Property(e => e.OldRecordId).HasColumnName("OldRecordID");

                entity.Property(e => e.RecordId)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("RecordID");

                entity.Property(e => e.Salary).HasColumnType("money");

                entity.Property(e => e.SortOrder).HasDefaultValueSql("((100))");

                entity.Property(e => e.TotalAmount)
                    .HasColumnType("money")
                    .HasComputedColumnSql("([BudgetAmount]+[DetailAmount])", false);

                entity.Property(e => e.UpdatedBy).HasMaxLength(50);

                entity.Property(e => e.UpdatedOn).HasColumnType("datetime");

                entity.HasOne(d => d.BdgaccountGroup)
                    .WithMany(p => p.BdgbudgetInfoDetailDetailDetailDetails)
                    .HasForeignKey(d => d.BdgaccountGroupId)
                    .HasConstraintName("FK_BDGBudgetInfo_Detail_Detail_Detail_Detail_BDGAccountGroupID_BDGAccountGroup");

                entity.HasOne(d => d.BdgaccountGroupSubGroup)
                    .WithMany(p => p.BdgbudgetInfoDetailDetailDetailDetails)
                    .HasForeignKey(d => d.BdgaccountGroupSubGroupId)
                    .HasConstraintName("FK_BDGBudgetInfo_Detail_Detail_Detail_Detail_BDGAccountGroup_SubGroupID_BDGAccountGroup_SubGroup");

                entity.HasOne(d => d.BdgbudgetInfoDetailDetailDetail)
                    .WithMany(p => p.BdgbudgetInfoDetailDetailDetailDetails)
                    .HasForeignKey(d => d.BdgbudgetInfoDetailDetailDetailId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_BDGBudgetInfo_Detail_Detail_Detail_Detail_BDGBudgetInfo_Detail_Detail_DetailID_BDGBudgetInfo_Detail_Detail_Detail");

                entity.HasOne(d => d.Bdgemployee)
                    .WithMany(p => p.BdgbudgetInfoDetailDetailDetailDetails)
                    .HasForeignKey(d => d.BdgemployeeId)
                    .HasConstraintName("FK_BDGBudgetInfo_Detail_Detail_Detail_Detail_BDGEmployeeID_BDGEmployee");

                entity.HasOne(d => d.BdgemployeePosition)
                    .WithMany(p => p.BdgbudgetInfoDetailDetailDetailDetails)
                    .HasForeignKey(d => d.BdgemployeePositionId)
                    .HasConstraintName("FK_BDGBudgetInfo_Detail_Detail_Detail_Detail_BDGEmployeePositionID_BDGEmployeePosition");

                entity.HasOne(d => d.BdgemployeeStatus)
                    .WithMany(p => p.BdgbudgetInfoDetailDetailDetailDetails)
                    .HasForeignKey(d => d.BdgemployeeStatusId)
                    .HasConstraintName("FK_BDGBudgetInfo_Detail_Detail_Detail_Detail_BDGEmployeeStatusID_BDGEmployeeStatus");

                entity.HasOne(d => d.BdgemployeeType)
                    .WithMany(p => p.BdgbudgetInfoDetailDetailDetailDetails)
                    .HasForeignKey(d => d.BdgemployeeTypeId)
                    .HasConstraintName("FK_BDGBudgetInfo_Detail_Detail_Detail_Detail_BDGEmployeeTypeID_BDGEmployeeType");

                entity.HasOne(d => d.BdgemployeeUnit)
                    .WithMany(p => p.BdgbudgetInfoDetailDetailDetailDetails)
                    .HasForeignKey(d => d.BdgemployeeUnitId)
                    .HasConstraintName("FK_BDGBudgetInfo_Detail_Detail_Detail_Detail_BDGEmployeeUnitID_BDGEmployeeUnit");
            });

            modelBuilder.Entity<BdgbudgetInfoDetailDetailDetailDetailDetail>(entity =>
            {
                entity.HasKey(e => e.ObjectUid);

                entity.ToTable("BDGBudgetInfo_Detail_Detail_Detail_Detail_Detail");

                entity.Property(e => e.ObjectUid)
                    .HasColumnName("ObjectUID")
                    .HasDefaultValueSql("(newid())");

                entity.Property(e => e.BdgaccountGroupId).HasColumnName("BDGAccountGroupID");

                entity.Property(e => e.BdgaccountGroupSubGroupId).HasColumnName("BDGAccountGroup_SubGroupID");

                entity.Property(e => e.BdgbudgetInfoDetailDetailDetailDetailId).HasColumnName("BDGBudgetInfo_Detail_Detail_Detail_DetailID");

                entity.Property(e => e.BdgemployeeId).HasColumnName("BDGEmployeeID");

                entity.Property(e => e.BdgemployeePositionId).HasColumnName("BDGEmployeePositionID");

                entity.Property(e => e.BdgemployeeStatusId).HasColumnName("BDGEmployeeStatusID");

                entity.Property(e => e.BdgemployeeTypeId).HasColumnName("BDGEmployeeTypeID");

                entity.Property(e => e.BdgemployeeUnitId).HasColumnName("BDGEmployeeUnitID");

                entity.Property(e => e.BudgetAmount)
                    .HasColumnType("money")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.CreatedBy).HasMaxLength(50);

                entity.Property(e => e.CreatedOn)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Description).HasMaxLength(2000);

                entity.Property(e => e.DetailAmount)
                    .HasColumnType("money")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Display)
                    .HasMaxLength(150)
                    .HasComputedColumnSql("([dbo].[GetGroupSubGroupName]([BDGAccountGroupID],[BDGAccountGroup_SubGroupID]))", false);

                entity.Property(e => e.ImportedObjectUid)
                    .HasMaxLength(50)
                    .HasColumnName("ImportedObjectUID");

                entity.Property(e => e.InstallationUid).HasColumnName("InstallationUID");

                entity.Property(e => e.LineNumber).HasMaxLength(50);

                entity.Property(e => e.Name).HasMaxLength(50);

                entity.Property(e => e.NameAlias).HasMaxLength(50);

                entity.Property(e => e.OldRecordId).HasColumnName("OldRecordID");

                entity.Property(e => e.RecordId)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("RecordID");

                entity.Property(e => e.Salary).HasColumnType("money");

                entity.Property(e => e.SortOrder).HasDefaultValueSql("((100))");

                entity.Property(e => e.TotalAmount)
                    .HasColumnType("money")
                    .HasComputedColumnSql("([BudgetAmount]+[DetailAmount])", false);

                entity.Property(e => e.UpdatedBy).HasMaxLength(50);

                entity.Property(e => e.UpdatedOn).HasColumnType("datetime");

                entity.HasOne(d => d.BdgaccountGroup)
                    .WithMany(p => p.BdgbudgetInfoDetailDetailDetailDetailDetails)
                    .HasForeignKey(d => d.BdgaccountGroupId)
                    .HasConstraintName("FK_BDGBudgetInfo_Detail_Detail_Detail_Detail_Detail_BDGAccountGroupID_BDGAccountGroup");

                entity.HasOne(d => d.BdgaccountGroupSubGroup)
                    .WithMany(p => p.BdgbudgetInfoDetailDetailDetailDetailDetails)
                    .HasForeignKey(d => d.BdgaccountGroupSubGroupId)
                    .HasConstraintName("FK_BDGBudgetInfo_Detail_Detail_Detail_Detail_Detail_BDGAccountGroup_SubGroupID_BDGAccountGroup_SubGroup");

                entity.HasOne(d => d.BdgbudgetInfoDetailDetailDetailDetail)
                    .WithMany(p => p.BdgbudgetInfoDetailDetailDetailDetailDetails)
                    .HasForeignKey(d => d.BdgbudgetInfoDetailDetailDetailDetailId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_BDGBudgetInfo_Detail_Detail_Detail_Detail_Detail_BDGBudgetInfo_Detail_Detail_Detail_Detail");

                entity.HasOne(d => d.Bdgemployee)
                    .WithMany(p => p.BdgbudgetInfoDetailDetailDetailDetailDetails)
                    .HasForeignKey(d => d.BdgemployeeId)
                    .HasConstraintName("FK_BDGBudgetInfo_Detail_Detail_Detail_Detail_Detail_BDGEmployeeID_BDGEmployee");

                entity.HasOne(d => d.BdgemployeePosition)
                    .WithMany(p => p.BdgbudgetInfoDetailDetailDetailDetailDetails)
                    .HasForeignKey(d => d.BdgemployeePositionId)
                    .HasConstraintName("FK_BDGBudgetInfo_Detail_Detail_Detail_Detail_Detail_BDGEmployeePositionID_BDGEmployeePosition");

                entity.HasOne(d => d.BdgemployeeStatus)
                    .WithMany(p => p.BdgbudgetInfoDetailDetailDetailDetailDetails)
                    .HasForeignKey(d => d.BdgemployeeStatusId)
                    .HasConstraintName("FK_BDGBudgetInfo_Detail_Detail_Detail_Detail_Detail_BDGEmployeeStatusID_BDGEmployeeStatus");

                entity.HasOne(d => d.BdgemployeeType)
                    .WithMany(p => p.BdgbudgetInfoDetailDetailDetailDetailDetails)
                    .HasForeignKey(d => d.BdgemployeeTypeId)
                    .HasConstraintName("FK_BDGBudgetInfo_Detail_Detail_Detail_Detail_Detail_BDGEmployeeTypeID_BDGEmployeeType");

                entity.HasOne(d => d.BdgemployeeUnit)
                    .WithMany(p => p.BdgbudgetInfoDetailDetailDetailDetailDetails)
                    .HasForeignKey(d => d.BdgemployeeUnitId)
                    .HasConstraintName("FK_BDGBudgetInfo_Detail_Detail_Detail_Detail_Detail_BDGEmployeeUnitID_BDGEmployeeUnit");
            });

            modelBuilder.Entity<BdgbudgetInfoDetailDetailDetailDetailDetailGrid>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("BDGBudgetInfo_Detail_Detail_Detail_Detail_DetailGrid");

                entity.Property(e => e.BdgaccountGroup)
                    .HasMaxLength(50)
                    .HasColumnName("BDGAccountGroup");

                entity.Property(e => e.BdgaccountGroupSubGroup)
                    .HasMaxLength(50)
                    .HasColumnName("BDGAccountGroup_SubGroup");

                entity.Property(e => e.BdgbudgetInfoDetailDetailDetailDetailId).HasColumnName("BDGBudgetInfo_Detail_Detail_Detail_DetailID");

                entity.Property(e => e.Bdgemployee)
                    .HasMaxLength(50)
                    .HasColumnName("BDGEmployee");

                entity.Property(e => e.BdgemployeePosition)
                    .HasMaxLength(50)
                    .HasColumnName("BDGEmployeePosition");

                entity.Property(e => e.BdgemployeeStatus)
                    .HasMaxLength(50)
                    .HasColumnName("BDGEmployeeStatus");

                entity.Property(e => e.BdgemployeeType)
                    .HasMaxLength(50)
                    .HasColumnName("BDGEmployeeType");

                entity.Property(e => e.BdgemployeeUnit)
                    .HasMaxLength(50)
                    .HasColumnName("BDGEmployeeUnit");

                entity.Property(e => e.BudgetAmount).HasColumnType("money");

                entity.Property(e => e.DetailAmount).HasColumnType("money");

                entity.Property(e => e.LineNumber).HasMaxLength(50);

                entity.Property(e => e.ObjectUid).HasColumnName("ObjectUID");

                entity.Property(e => e.Salary).HasColumnType("money");

                entity.Property(e => e.TotalAmount).HasColumnType("money");
            });

            modelBuilder.Entity<BdgbudgetInfoDetailDetailDetailDetailGrid>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("BDGBudgetInfo_Detail_Detail_Detail_DetailGrid");

                entity.Property(e => e.BdgaccountGroup)
                    .HasMaxLength(50)
                    .HasColumnName("BDGAccountGroup");

                entity.Property(e => e.BdgaccountGroupSubGroup)
                    .HasMaxLength(50)
                    .HasColumnName("BDGAccountGroup_SubGroup");

                entity.Property(e => e.BdgbudgetInfoDetailDetailDetailId).HasColumnName("BDGBudgetInfo_Detail_Detail_DetailID");

                entity.Property(e => e.Bdgemployee)
                    .HasMaxLength(50)
                    .HasColumnName("BDGEmployee");

                entity.Property(e => e.BdgemployeePosition)
                    .HasMaxLength(50)
                    .HasColumnName("BDGEmployeePosition");

                entity.Property(e => e.BdgemployeeStatus)
                    .HasMaxLength(50)
                    .HasColumnName("BDGEmployeeStatus");

                entity.Property(e => e.BdgemployeeType)
                    .HasMaxLength(50)
                    .HasColumnName("BDGEmployeeType");

                entity.Property(e => e.BdgemployeeUnit)
                    .HasMaxLength(50)
                    .HasColumnName("BDGEmployeeUnit");

                entity.Property(e => e.BudgetAmount).HasColumnType("money");

                entity.Property(e => e.DetailAmount).HasColumnType("money");

                entity.Property(e => e.LineNumber).HasMaxLength(50);

                entity.Property(e => e.ObjectUid).HasColumnName("ObjectUID");

                entity.Property(e => e.Salary).HasColumnType("money");

                entity.Property(e => e.TotalAmount).HasColumnType("money");
            });

            modelBuilder.Entity<BdgbudgetInfoDetailDetailDetailGrid>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("BDGBudgetInfo_Detail_Detail_DetailGrid");

                entity.Property(e => e.BdgaccountGroup)
                    .HasMaxLength(50)
                    .HasColumnName("BDGAccountGroup");

                entity.Property(e => e.BdgaccountGroupSubGroup)
                    .HasMaxLength(50)
                    .HasColumnName("BDGAccountGroup_SubGroup");

                entity.Property(e => e.BdgbudgetInfoDetailDetailId).HasColumnName("BDGBudgetInfo_Detail_DetailID");

                entity.Property(e => e.Bdgemployee)
                    .HasMaxLength(50)
                    .HasColumnName("BDGEmployee");

                entity.Property(e => e.BdgemployeePosition)
                    .HasMaxLength(50)
                    .HasColumnName("BDGEmployeePosition");

                entity.Property(e => e.BdgemployeeStatus)
                    .HasMaxLength(50)
                    .HasColumnName("BDGEmployeeStatus");

                entity.Property(e => e.BdgemployeeType)
                    .HasMaxLength(50)
                    .HasColumnName("BDGEmployeeType");

                entity.Property(e => e.BdgemployeeUnit)
                    .HasMaxLength(50)
                    .HasColumnName("BDGEmployeeUnit");

                entity.Property(e => e.BudgetAmount).HasColumnType("money");

                entity.Property(e => e.DetailAmount).HasColumnType("money");

                entity.Property(e => e.LineNumber).HasMaxLength(50);

                entity.Property(e => e.ObjectUid).HasColumnName("ObjectUID");

                entity.Property(e => e.Salary).HasColumnType("money");

                entity.Property(e => e.TotalAmount).HasColumnType("money");
            });

            modelBuilder.Entity<BdgbudgetInfoDetailDetailGrid>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("BDGBudgetInfo_Detail_DetailGrid");

                entity.Property(e => e.BdgaccountGroup)
                    .HasMaxLength(50)
                    .HasColumnName("BDGAccountGroup");

                entity.Property(e => e.BdgaccountGroupSubGroup)
                    .HasMaxLength(50)
                    .HasColumnName("BDGAccountGroup_SubGroup");

                entity.Property(e => e.BdgbudgetInfoDetailId).HasColumnName("BDGBudgetInfo_DetailID");

                entity.Property(e => e.BudgetAmount).HasColumnType("money");

                entity.Property(e => e.DetailAmount).HasColumnType("money");

                entity.Property(e => e.LineNumber).HasMaxLength(50);

                entity.Property(e => e.ObjectUid).HasColumnName("ObjectUID");

                entity.Property(e => e.Salary).HasColumnType("money");

                entity.Property(e => e.TotalAmount).HasColumnType("money");
            });

            modelBuilder.Entity<BdgbudgetInfoDetailGrid>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("BDGBudgetInfo_DetailGrid");

                entity.Property(e => e.AccountCode).HasMaxLength(50);

                entity.Property(e => e.BdgaccountGroup)
                    .HasMaxLength(50)
                    .HasColumnName("BDGAccountGroup");

                entity.Property(e => e.BdgaccountGroupSubGroup)
                    .HasMaxLength(50)
                    .HasColumnName("BDGAccountGroup_SubGroup");

                entity.Property(e => e.BdgbudgetInfoId).HasColumnName("BDGBudgetInfoID");

                entity.Property(e => e.Bpl)
                    .HasMaxLength(50)
                    .HasColumnName("BPL");

                entity.Property(e => e.BudgetAmount).HasColumnType("money");

                entity.Property(e => e.Comment).HasMaxLength(2000);

                entity.Property(e => e.CurrentMonth)
                    .HasMaxLength(50)
                    .HasColumnName("currentMonth");

                entity.Property(e => e.DetailAmount).HasColumnType("money");

                entity.Property(e => e.EmployeePosition).HasMaxLength(50);

                entity.Property(e => e.Exclusion).HasMaxLength(50);

                entity.Property(e => e.FringeBdgbudgetInfoDetail)
                    .HasMaxLength(250)
                    .HasColumnName("Fringe_BDGBudgetInfo_Detail");

                entity.Property(e => e.LineNumber).HasMaxLength(50);

                entity.Property(e => e.MeetingLocation).HasMaxLength(50);

                entity.Property(e => e.MeetingStartDate).HasMaxLength(50);

                entity.Property(e => e.NextYearBudgetAmount).HasColumnType("money");

                entity.Property(e => e.ObjectUid).HasColumnName("ObjectUID");

                entity.Property(e => e.OldBdgbudgetInfo)
                    .HasMaxLength(50)
                    .HasColumnName("Old_BDGBudgetInfo");

                entity.Property(e => e.OriginalNextYearBudgetAmount).HasColumnType("numeric(18, 3)");

                entity.Property(e => e.OriginialTwoMoreYearsBudgetAmount).HasColumnType("numeric(18, 3)");

                entity.Property(e => e.Originialbudgetamount)
                    .HasColumnType("numeric(18, 3)")
                    .HasColumnName("originialbudgetamount");

                entity.Property(e => e.Override2).HasColumnName("override2");

                entity.Property(e => e.Salary).HasColumnType("money");

                entity.Property(e => e.SlotId)
                    .HasMaxLength(50)
                    .HasColumnName("SlotID");

                entity.Property(e => e.TotalAmount).HasColumnType("money");

                entity.Property(e => e.TwoMoreYearsBudgetAmount).HasColumnType("numeric(18, 3)");

                entity.Property(e => e.WeeklySalary).HasColumnType("money");

                entity.Property(e => e.YtdbudgetAmount)
                    .HasColumnType("numeric(18, 3)")
                    .HasColumnName("YTDBudgetAmount");

                entity.Property(e => e.YtdprojectedAmount)
                    .HasColumnType("numeric(18, 3)")
                    .HasColumnName("YTDProjectedAmount");
            });

            modelBuilder.Entity<BdgbudgetInfoDetailLog>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("BDGBudgetInfo_Detail_log");

                entity.Property(e => e.AnticipatedStartingMonthId).HasColumnName("AnticipatedStarting_MonthID");

                entity.Property(e => e.BdgaccountGroupId).HasColumnName("BDGAccountGroupID");

                entity.Property(e => e.BdgaccountGroupSubGroupId).HasColumnName("BDGAccountGroup_SubGroupID");

                entity.Property(e => e.BdgaccountGroupSubGroupSubGroupId).HasColumnName("BDGAccountGroup_SubGroup_SubGroupID");

                entity.Property(e => e.BdgaccountGroupSubGroupSubGroupSubGroupId).HasColumnName("BDGAccountGroup_SubGroup_SubGroup_SubGroupID");

                entity.Property(e => e.BdgbudgetGroupTypeId).HasColumnName("BDGBudgetGroupTypeID");

                entity.Property(e => e.BdgbudgetInfoId).HasColumnName("BDGBudgetInfoID");

                entity.Property(e => e.BdgcommitteeTypeId).HasColumnName("BDGCommitteeTypeID");

                entity.Property(e => e.BdgemployeeCategoryId).HasColumnName("BDGEmployeeCategoryID");

                entity.Property(e => e.BdgemployeeId).HasColumnName("BDGEmployeeID");

                entity.Property(e => e.BdgemployeePositionId).HasColumnName("BDGEmployeePositionID");

                entity.Property(e => e.BdgemployeeStatusId).HasColumnName("BDGEmployeeStatusID");

                entity.Property(e => e.BdgemployeeTypeId).HasColumnName("BDGEmployeeTypeID");

                entity.Property(e => e.BdgemployeeUnitId).HasColumnName("BDGEmployeeUnitID");

                entity.Property(e => e.BdgemployeeUnitPositionId).HasColumnName("BDGEmployeeUnit_PositionID");

                entity.Property(e => e.BdgemployeeUnitPositionStepId).HasColumnName("BDGEmployeeUnit_Position_StepID");

                entity.Property(e => e.BdgmeetingStatusId).HasColumnName("BDGMeetingStatusID");

                entity.Property(e => e.BdgpositionTypeId).HasColumnName("BDGPositionTypeID");

                entity.Property(e => e.BdgprojectTypeId).HasColumnName("BDGProjectTypeID");

                entity.Property(e => e.BudgetAmount).HasColumnType("money");

                entity.Property(e => e.CreatedBy).HasMaxLength(50);

                entity.Property(e => e.CreatedOn).HasColumnType("datetime");

                entity.Property(e => e.CurrentYearBudgetAmount).HasColumnType("money");

                entity.Property(e => e.Description).HasMaxLength(2000);

                entity.Property(e => e.DetailAmount).HasColumnType("money");

                entity.Property(e => e.Display).HasMaxLength(250);

                entity.Property(e => e.FringeBdgbudgetInfoDetailId).HasColumnName("Fringe_BDGBudgetInfo_DetailID");

                entity.Property(e => e.ImportedObjectUid)
                    .HasMaxLength(50)
                    .HasColumnName("ImportedObjectUID");

                entity.Property(e => e.InstallationUid).HasColumnName("InstallationUID");

                entity.Property(e => e.LineNumber).HasMaxLength(50);

                entity.Property(e => e.MeetingLocation).HasMaxLength(50);

                entity.Property(e => e.MeetingStartDate).HasMaxLength(50);

                entity.Property(e => e.Name).HasMaxLength(250);

                entity.Property(e => e.NameAlias).HasMaxLength(250);

                entity.Property(e => e.NextYearBudgetAmount).HasColumnType("money");

                entity.Property(e => e.ObjectUid).HasColumnName("ObjectUID");

                entity.Property(e => e.OldBdgbudgetInfoId).HasColumnName("Old_BDGBudgetInfoID");

                entity.Property(e => e.OldRecordId).HasColumnName("OldRecordID");

                entity.Property(e => e.Salary).HasColumnType("money");

                entity.Property(e => e.UpdatedBy).HasMaxLength(50);

                entity.Property(e => e.UpdatedOn).HasColumnType("datetime");

                entity.Property(e => e.WeeklySalary).HasColumnType("money");

                entity.Property(e => e.WillBeUsingTaskForcesYesNoId).HasColumnName("WillBeUsingTaskForces_YesNoID");
            });

            modelBuilder.Entity<BdgbudgetInfoDetailLog2>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("BDGBudgetInfo_Detail_log2");

                entity.Property(e => e.AccountCode).HasMaxLength(50);

                entity.Property(e => e.AllocationType)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.AnticipatedStartingMonthId).HasColumnName("AnticipatedStarting_MonthID");

                entity.Property(e => e.BdgaccountGroupId).HasColumnName("BDGAccountGroupID");

                entity.Property(e => e.BdgaccountGroupSubGroupId).HasColumnName("BDGAccountGroup_SubGroupID");

                entity.Property(e => e.BdgaccountGroupSubGroupSubGroupId).HasColumnName("BDGAccountGroup_SubGroup_SubGroupID");

                entity.Property(e => e.BdgaccountGroupSubGroupSubGroupSubGroupId).HasColumnName("BDGAccountGroup_SubGroup_SubGroup_SubGroupID");

                entity.Property(e => e.BdgbudgetGroupTypeId).HasColumnName("BDGBudgetGroupTypeID");

                entity.Property(e => e.BdgbudgetInfoId).HasColumnName("BDGBudgetInfoID");

                entity.Property(e => e.BdgcommitteeTypeId).HasColumnName("BDGCommitteeTypeID");

                entity.Property(e => e.BdgemployeeCategoryId).HasColumnName("BDGEmployeeCategoryID");

                entity.Property(e => e.BdgemployeeId).HasColumnName("BDGEmployeeID");

                entity.Property(e => e.BdgemployeePositionId).HasColumnName("BDGEmployeePositionID");

                entity.Property(e => e.BdgemployeeStatusId).HasColumnName("BDGEmployeeStatusID");

                entity.Property(e => e.BdgemployeeTypeId).HasColumnName("BDGEmployeeTypeID");

                entity.Property(e => e.BdgemployeeUnitId).HasColumnName("BDGEmployeeUnitID");

                entity.Property(e => e.BdgemployeeUnitPositionId).HasColumnName("BDGEmployeeUnit_PositionID");

                entity.Property(e => e.BdgemployeeUnitPositionStepId).HasColumnName("BDGEmployeeUnit_Position_StepID");

                entity.Property(e => e.BdgmeetingStatusId).HasColumnName("BDGMeetingStatusID");

                entity.Property(e => e.BdgpositionTypeId).HasColumnName("BDGPositionTypeID");

                entity.Property(e => e.BdgprojectTypeId).HasColumnName("BDGProjectTypeID");

                entity.Property(e => e.Bpl)
                    .HasMaxLength(50)
                    .HasColumnName("BPL");

                entity.Property(e => e.BudgetAmount).HasColumnType("money");

                entity.Property(e => e.BudgetAmountP1).HasColumnType("money");

                entity.Property(e => e.BudgetAmountP10).HasColumnType("money");

                entity.Property(e => e.BudgetAmountP11).HasColumnType("money");

                entity.Property(e => e.BudgetAmountP12).HasColumnType("money");

                entity.Property(e => e.BudgetAmountP2).HasColumnType("money");

                entity.Property(e => e.BudgetAmountP3).HasColumnType("money");

                entity.Property(e => e.BudgetAmountP4).HasColumnType("money");

                entity.Property(e => e.BudgetAmountP5).HasColumnType("money");

                entity.Property(e => e.BudgetAmountP6).HasColumnType("money");

                entity.Property(e => e.BudgetAmountP7).HasColumnType("money");

                entity.Property(e => e.BudgetAmountP8).HasColumnType("money");

                entity.Property(e => e.BudgetAmountP9).HasColumnType("money");

                entity.Property(e => e.BudgetAmountPdiff)
                    .HasColumnType("money")
                    .HasColumnName("BudgetAmountPDiff");

                entity.Property(e => e.BudgetPercentageIncrease).HasColumnType("numeric(18, 3)");

                entity.Property(e => e.Comment).HasMaxLength(2000);

                entity.Property(e => e.CreatedBy).HasMaxLength(50);

                entity.Property(e => e.CreatedOn).HasColumnType("datetime");

                entity.Property(e => e.CurrentYearBudgetAmount).HasColumnType("money");

                entity.Property(e => e.Currentmonth)
                    .HasMaxLength(50)
                    .HasColumnName("currentmonth");

                entity.Property(e => e.Description).HasMaxLength(2000);

                entity.Property(e => e.DetailAmount).HasColumnType("money");

                entity.Property(e => e.Display).HasMaxLength(250);

                entity.Property(e => e.EmployeePosition).HasMaxLength(50);

                entity.Property(e => e.Exclusion).HasMaxLength(50);

                entity.Property(e => e.FringeBdgbudgetInfoDetailId).HasColumnName("Fringe_BDGBudgetInfo_DetailID");

                entity.Property(e => e.ImportedObjectUid)
                    .HasMaxLength(50)
                    .HasColumnName("ImportedObjectUID");

                entity.Property(e => e.InstallationUid).HasColumnName("InstallationUID");

                entity.Property(e => e.LineNumber).HasMaxLength(50);

                entity.Property(e => e.MeetingLocation).HasMaxLength(50);

                entity.Property(e => e.MeetingStartDate).HasMaxLength(50);

                entity.Property(e => e.Name).HasMaxLength(250);

                entity.Property(e => e.NameAlias).HasMaxLength(250);

                entity.Property(e => e.NextYearBudgetAmount).HasColumnType("money");

                entity.Property(e => e.NumberOfMembers).HasColumnName("NUmberOfMembers");

                entity.Property(e => e.ObjectUid).HasColumnName("ObjectUID");

                entity.Property(e => e.OldBdgbudgetInfoId).HasColumnName("Old_BDGBudgetInfoID");

                entity.Property(e => e.OldRecordId).HasColumnName("OldRecordID");

                entity.Property(e => e.OriginalNextYearBudgetAmount).HasColumnType("numeric(18, 3)");

                entity.Property(e => e.OriginialBudgetAmount).HasColumnType("numeric(18, 3)");

                entity.Property(e => e.OriginialTwoMoreYearsBudgetAmount).HasColumnType("numeric(18, 3)");

                entity.Property(e => e.Processdate)
                    .HasColumnType("datetime")
                    .HasColumnName("processdate");

                entity.Property(e => e.RecordId)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("RecordID");

                entity.Property(e => e.Salary).HasColumnType("money");

                entity.Property(e => e.SlotId)
                    .HasMaxLength(50)
                    .HasColumnName("SlotID");

                entity.Property(e => e.TotalAmount).HasColumnType("money");

                entity.Property(e => e.TwoMoreYearsBudgetAmount).HasColumnType("numeric(18, 3)");

                entity.Property(e => e.UpdatedBy).HasMaxLength(50);

                entity.Property(e => e.UpdatedOn).HasColumnType("datetime");

                entity.Property(e => e.WeeklySalary).HasColumnType("money");

                entity.Property(e => e.WillBeUsingTaskForcesYesNoId).HasColumnName("WillBeUsingTaskForces_YesNoID");

                entity.Property(e => e.YtdactualAmount)
                    .HasColumnType("numeric(18, 3)")
                    .HasColumnName("YTDActualAmount");

                entity.Property(e => e.YtdbudgetAmount)
                    .HasColumnType("numeric(18, 3)")
                    .HasColumnName("YTDBudgetAmount");

                entity.Property(e => e.YtdprojectedAmount)
                    .HasColumnType("numeric(18, 3)")
                    .HasColumnName("YTDProjectedAmount");
            });

            modelBuilder.Entity<BdgbudgetInfoDetailSum>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("BDGbudgetInfo_Detail_SUM");

                entity.Property(e => e.BdgbudgetInfoId).HasColumnName("BDGBudgetInfoID");

                entity.Property(e => e.BudgetAmountP1)
                    .HasColumnType("money")
                    .HasColumnName("budgetAmountP1");

                entity.Property(e => e.BudgetAmountP10)
                    .HasColumnType("money")
                    .HasColumnName("budgetAmountP10");

                entity.Property(e => e.BudgetAmountP11)
                    .HasColumnType("money")
                    .HasColumnName("budgetAmountP11");

                entity.Property(e => e.BudgetAmountP12)
                    .HasColumnType("money")
                    .HasColumnName("budgetAmountP12");

                entity.Property(e => e.BudgetAmountP2)
                    .HasColumnType("money")
                    .HasColumnName("budgetAmountP2");

                entity.Property(e => e.BudgetAmountP3)
                    .HasColumnType("money")
                    .HasColumnName("budgetAmountP3");

                entity.Property(e => e.BudgetAmountP4)
                    .HasColumnType("money")
                    .HasColumnName("budgetAmountP4");

                entity.Property(e => e.BudgetAmountP5)
                    .HasColumnType("money")
                    .HasColumnName("budgetAmountP5");

                entity.Property(e => e.BudgetAmountP6)
                    .HasColumnType("money")
                    .HasColumnName("budgetAmountP6");

                entity.Property(e => e.BudgetAmountP7)
                    .HasColumnType("money")
                    .HasColumnName("budgetAmountP7");

                entity.Property(e => e.BudgetAmountP8)
                    .HasColumnType("money")
                    .HasColumnName("budgetAmountP8");

                entity.Property(e => e.BudgetAmountP9)
                    .HasColumnType("money")
                    .HasColumnName("budgetAmountP9");
            });

            modelBuilder.Entity<BdgbudgetInfoDetailTemp>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("BDGBudgetInfo_Detail_temp");

                entity.Property(e => e.AnticipatedStartingMonthId).HasColumnName("AnticipatedStarting_MonthID");

                entity.Property(e => e.BdgaccountGroupId).HasColumnName("BDGAccountGroupID");

                entity.Property(e => e.BdgaccountGroupSubGroupId).HasColumnName("BDGAccountGroup_SubGroupID");

                entity.Property(e => e.BdgaccountGroupSubGroupSubGroupId).HasColumnName("BDGAccountGroup_SubGroup_SubGroupID");

                entity.Property(e => e.BdgaccountGroupSubGroupSubGroupSubGroupId).HasColumnName("BDGAccountGroup_SubGroup_SubGroup_SubGroupID");

                entity.Property(e => e.BdgbudgetGroupTypeId).HasColumnName("BDGBudgetGroupTypeID");

                entity.Property(e => e.BdgbudgetInfoId).HasColumnName("BDGBudgetInfoID");

                entity.Property(e => e.BdgcommitteeTypeId).HasColumnName("BDGCommitteeTypeID");

                entity.Property(e => e.BdgemployeeCategoryId).HasColumnName("BDGEmployeeCategoryID");

                entity.Property(e => e.BdgemployeeId).HasColumnName("BDGEmployeeID");

                entity.Property(e => e.BdgemployeePositionId).HasColumnName("BDGEmployeePositionID");

                entity.Property(e => e.BdgemployeeStatusId).HasColumnName("BDGEmployeeStatusID");

                entity.Property(e => e.BdgemployeeTypeId).HasColumnName("BDGEmployeeTypeID");

                entity.Property(e => e.BdgemployeeUnitId).HasColumnName("BDGEmployeeUnitID");

                entity.Property(e => e.BdgemployeeUnitPositionId).HasColumnName("BDGEmployeeUnit_PositionID");

                entity.Property(e => e.BdgemployeeUnitPositionStepId).HasColumnName("BDGEmployeeUnit_Position_StepID");

                entity.Property(e => e.BdgmeetingStatusId).HasColumnName("BDGMeetingStatusID");

                entity.Property(e => e.BdgpositionTypeId).HasColumnName("BDGPositionTypeID");

                entity.Property(e => e.BdgprojectTypeId).HasColumnName("BDGProjectTypeID");

                entity.Property(e => e.BudgetAmount).HasColumnType("money");

                entity.Property(e => e.CreatedBy).HasMaxLength(50);

                entity.Property(e => e.CreatedOn).HasColumnType("datetime");

                entity.Property(e => e.CurrentYearBudgetAmount).HasColumnType("money");

                entity.Property(e => e.Description).HasMaxLength(2000);

                entity.Property(e => e.DetailAmount).HasColumnType("money");

                entity.Property(e => e.Display).HasMaxLength(250);

                entity.Property(e => e.FringeBdgbudgetInfoDetailId).HasColumnName("Fringe_BDGBudgetInfo_DetailID");

                entity.Property(e => e.ImportedObjectUid)
                    .HasMaxLength(50)
                    .HasColumnName("ImportedObjectUID");

                entity.Property(e => e.InstallationUid).HasColumnName("InstallationUID");

                entity.Property(e => e.LineNumber).HasMaxLength(50);

                entity.Property(e => e.MeetingLocation).HasMaxLength(50);

                entity.Property(e => e.MeetingStartDate).HasMaxLength(50);

                entity.Property(e => e.Name).HasMaxLength(250);

                entity.Property(e => e.NameAlias).HasMaxLength(250);

                entity.Property(e => e.NextYearBudgetAmount).HasColumnType("money");

                entity.Property(e => e.ObjectUid).HasColumnName("ObjectUID");

                entity.Property(e => e.OldBdgbudgetInfoId).HasColumnName("Old_BDGBudgetInfoID");

                entity.Property(e => e.OldRecordId).HasColumnName("OldRecordID");

                entity.Property(e => e.RecordId)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("RecordID");

                entity.Property(e => e.Salary).HasColumnType("money");

                entity.Property(e => e.TotalAmount).HasColumnType("money");

                entity.Property(e => e.UpdatedBy).HasMaxLength(50);

                entity.Property(e => e.UpdatedOn).HasColumnType("datetime");

                entity.Property(e => e.WeeklySalary).HasColumnType("money");

                entity.Property(e => e.WillBeUsingTaskForcesYesNoId).HasColumnName("WillBeUsingTaskForces_YesNoID");
            });

            modelBuilder.Entity<BdgbudgetInfoDetailView>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("BDGBudgetInfo_Detail_VIEW");

                entity.Property(e => e.AccountCode).HasMaxLength(50);

                entity.Property(e => e.AllocationType)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.AnticipatedStartingMonthId).HasColumnName("AnticipatedStarting_MonthID");

                entity.Property(e => e.BdgaccountGroupId).HasColumnName("BDGAccountGroupID");

                entity.Property(e => e.BdgaccountGroupSubGroupId).HasColumnName("BDGAccountGroup_SubGroupID");

                entity.Property(e => e.BdgaccountGroupSubGroupSubGroupId).HasColumnName("BDGAccountGroup_SubGroup_SubGroupID");

                entity.Property(e => e.BdgaccountGroupSubGroupSubGroupSubGroupId).HasColumnName("BDGAccountGroup_SubGroup_SubGroup_SubGroupID");

                entity.Property(e => e.BdgbudgetGroupTypeId).HasColumnName("BDGBudgetGroupTypeID");

                entity.Property(e => e.BdgbudgetInfoId).HasColumnName("BDGBudgetInfoID");

                entity.Property(e => e.BdgcommitteeTypeId).HasColumnName("BDGCommitteeTypeID");

                entity.Property(e => e.BdgemployeeCategoryId).HasColumnName("BDGEmployeeCategoryID");

                entity.Property(e => e.BdgemployeeId).HasColumnName("BDGEmployeeID");

                entity.Property(e => e.BdgemployeePositionId).HasColumnName("BDGEmployeePositionID");

                entity.Property(e => e.BdgemployeeStatusId).HasColumnName("BDGEmployeeStatusID");

                entity.Property(e => e.BdgemployeeTypeId).HasColumnName("BDGEmployeeTypeID");

                entity.Property(e => e.BdgemployeeUnitId).HasColumnName("BDGEmployeeUnitID");

                entity.Property(e => e.BdgemployeeUnitPositionId).HasColumnName("BDGEmployeeUnit_PositionID");

                entity.Property(e => e.BdgemployeeUnitPositionStepId).HasColumnName("BDGEmployeeUnit_Position_StepID");

                entity.Property(e => e.BdgmeetingStatusId).HasColumnName("BDGMeetingStatusID");

                entity.Property(e => e.BdgpositionTypeId).HasColumnName("BDGPositionTypeID");

                entity.Property(e => e.BdgprojectTypeId).HasColumnName("BDGProjectTypeID");

                entity.Property(e => e.Bpl)
                    .HasMaxLength(50)
                    .HasColumnName("BPL");

                entity.Property(e => e.BudgetAmount).HasColumnType("money");

                entity.Property(e => e.BudgetAmountP1).HasColumnType("money");

                entity.Property(e => e.BudgetAmountP10).HasColumnType("money");

                entity.Property(e => e.BudgetAmountP11).HasColumnType("money");

                entity.Property(e => e.BudgetAmountP12).HasColumnType("money");

                entity.Property(e => e.BudgetAmountP2).HasColumnType("money");

                entity.Property(e => e.BudgetAmountP3).HasColumnType("money");

                entity.Property(e => e.BudgetAmountP4).HasColumnType("money");

                entity.Property(e => e.BudgetAmountP5).HasColumnType("money");

                entity.Property(e => e.BudgetAmountP6).HasColumnType("money");

                entity.Property(e => e.BudgetAmountP7).HasColumnType("money");

                entity.Property(e => e.BudgetAmountP8).HasColumnType("money");

                entity.Property(e => e.BudgetAmountP9).HasColumnType("money");

                entity.Property(e => e.BudgetAmountPdiff)
                    .HasColumnType("money")
                    .HasColumnName("BudgetAmountPDiff");

                entity.Property(e => e.BudgetPercentageIncrease).HasColumnType("numeric(18, 3)");

                entity.Property(e => e.Comment).HasMaxLength(2000);

                entity.Property(e => e.CreatedBy).HasMaxLength(50);

                entity.Property(e => e.CreatedOn).HasColumnType("datetime");

                entity.Property(e => e.CurrentYearBudgetAmount).HasColumnType("money");

                entity.Property(e => e.Currentmonth)
                    .HasMaxLength(50)
                    .HasColumnName("currentmonth");

                entity.Property(e => e.Description).HasMaxLength(2000);

                entity.Property(e => e.DetailAmount).HasColumnType("money");

                entity.Property(e => e.Display).HasMaxLength(250);

                entity.Property(e => e.EmployeePosition).HasMaxLength(50);

                entity.Property(e => e.Exclusion).HasMaxLength(50);

                entity.Property(e => e.FringeBdgbudgetInfoDetailId).HasColumnName("Fringe_BDGBudgetInfo_DetailID");

                entity.Property(e => e.ImportedObjectUid)
                    .HasMaxLength(50)
                    .HasColumnName("ImportedObjectUID");

                entity.Property(e => e.InstallationUid).HasColumnName("InstallationUID");

                entity.Property(e => e.LineNumber).HasMaxLength(50);

                entity.Property(e => e.MeetingLocation).HasMaxLength(50);

                entity.Property(e => e.MeetingStartDate).HasMaxLength(50);

                entity.Property(e => e.Name).HasMaxLength(250);

                entity.Property(e => e.NameAlias).HasMaxLength(250);

                entity.Property(e => e.NextYearBudgetAmount).HasColumnType("money");

                entity.Property(e => e.NumberOfMembers).HasColumnName("NUmberOfMembers");

                entity.Property(e => e.ObjectUid).HasColumnName("ObjectUID");

                entity.Property(e => e.OldBdgbudgetInfoId).HasColumnName("Old_BDGBudgetInfoID");

                entity.Property(e => e.OldRecordId).HasColumnName("OldRecordID");

                entity.Property(e => e.OriginalNextYearBudgetAmount).HasColumnType("numeric(18, 3)");

                entity.Property(e => e.OriginialBudgetAmount).HasColumnType("numeric(18, 3)");

                entity.Property(e => e.OriginialTwoMoreYearsBudgetAmount).HasColumnType("numeric(18, 3)");

                entity.Property(e => e.RecordId)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("RecordID");

                entity.Property(e => e.Salary).HasColumnType("money");

                entity.Property(e => e.SlotId)
                    .HasMaxLength(50)
                    .HasColumnName("SlotID");

                entity.Property(e => e.TotalAmount).HasColumnType("money");

                entity.Property(e => e.TwoMoreYearsBudgetAmount).HasColumnType("numeric(18, 3)");

                entity.Property(e => e.UpdatedBy).HasMaxLength(50);

                entity.Property(e => e.UpdatedOn).HasColumnType("datetime");

                entity.Property(e => e.WeeklySalary).HasColumnType("money");

                entity.Property(e => e.WillBeUsingTaskForcesYesNoId).HasColumnName("WillBeUsingTaskForces_YesNoID");

                entity.Property(e => e.YtdactualAmount)
                    .HasColumnType("numeric(18, 3)")
                    .HasColumnName("YTDActualAmount");

                entity.Property(e => e.YtdbudgetAmount)
                    .HasColumnType("numeric(18, 3)")
                    .HasColumnName("YTDBudgetAmount");

                entity.Property(e => e.YtdprojectedAmount)
                    .HasColumnType("numeric(18, 3)")
                    .HasColumnName("YTDProjectedAmount");
            });

            modelBuilder.Entity<BdgbudgetInfoDetailview1>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("BDGBudgetInfo_Detailview");

                entity.Property(e => e.AnticipatedStartingMonthId).HasColumnName("AnticipatedStarting_MonthID");

                entity.Property(e => e.BdgaccountGroupId).HasColumnName("BDGAccountGroupID");

                entity.Property(e => e.BdgaccountGroupSubGroupId).HasColumnName("BDGAccountGroup_SubGroupID");

                entity.Property(e => e.BdgaccountGroupSubGroupSubGroupId).HasColumnName("BDGAccountGroup_SubGroup_SubGroupID");

                entity.Property(e => e.BdgaccountGroupSubGroupSubGroupSubGroupId).HasColumnName("BDGAccountGroup_SubGroup_SubGroup_SubGroupID");

                entity.Property(e => e.BdgbudgetGroupTypeId).HasColumnName("BDGBudgetGroupTypeID");

                entity.Property(e => e.BdgbudgetInfoId).HasColumnName("BDGBudgetInfoID");

                entity.Property(e => e.BdgcommitteeTypeId).HasColumnName("BDGCommitteeTypeID");

                entity.Property(e => e.BdgemployeeCategoryId).HasColumnName("BDGEmployeeCategoryID");

                entity.Property(e => e.BdgemployeeId).HasColumnName("BDGEmployeeID");

                entity.Property(e => e.BdgemployeePositionId).HasColumnName("BDGEmployeePositionID");

                entity.Property(e => e.BdgemployeeStatusId).HasColumnName("BDGEmployeeStatusID");

                entity.Property(e => e.BdgemployeeTypeId).HasColumnName("BDGEmployeeTypeID");

                entity.Property(e => e.BdgemployeeUnitId).HasColumnName("BDGEmployeeUnitID");

                entity.Property(e => e.BdgemployeeUnitPositionId).HasColumnName("BDGEmployeeUnit_PositionID");

                entity.Property(e => e.BdgemployeeUnitPositionStepId).HasColumnName("BDGEmployeeUnit_Position_StepID");

                entity.Property(e => e.BdgmeetingStatusId).HasColumnName("BDGMeetingStatusID");

                entity.Property(e => e.BdgpositionTypeId).HasColumnName("BDGPositionTypeID");

                entity.Property(e => e.BdgprojectTypeId).HasColumnName("BDGProjectTypeID");

                entity.Property(e => e.BudgetAmount).HasColumnType("money");

                entity.Property(e => e.CreatedBy).HasMaxLength(50);

                entity.Property(e => e.CreatedOn).HasColumnType("datetime");

                entity.Property(e => e.CurrentYearBudgetAmount).HasColumnType("money");

                entity.Property(e => e.Description).HasMaxLength(2000);

                entity.Property(e => e.DetailAmount).HasColumnType("money");

                entity.Property(e => e.Display).HasMaxLength(250);

                entity.Property(e => e.FringeBdgbudgetInfoDetailId).HasColumnName("Fringe_BDGBudgetInfo_DetailID");

                entity.Property(e => e.ImportedObjectUid)
                    .HasMaxLength(50)
                    .HasColumnName("ImportedObjectUID");

                entity.Property(e => e.InstallationUid).HasColumnName("InstallationUID");

                entity.Property(e => e.LineNumber).HasMaxLength(50);

                entity.Property(e => e.MeetingLocation).HasMaxLength(50);

                entity.Property(e => e.MeetingStartDate).HasMaxLength(50);

                entity.Property(e => e.Name).HasMaxLength(250);

                entity.Property(e => e.NameAlias).HasMaxLength(250);

                entity.Property(e => e.NextYearBudgetAmount).HasColumnType("money");

                entity.Property(e => e.ObjectUid).HasColumnName("ObjectUID");

                entity.Property(e => e.OldBdgbudgetInfoId).HasColumnName("Old_BDGBudgetInfoID");

                entity.Property(e => e.OldRecordId).HasColumnName("OldRecordID");

                entity.Property(e => e.RecordId)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("RecordID");

                entity.Property(e => e.Salary).HasColumnType("money");

                entity.Property(e => e.TotalAmount).HasColumnType("money");

                entity.Property(e => e.UpdatedBy).HasMaxLength(50);

                entity.Property(e => e.UpdatedOn).HasColumnType("datetime");

                entity.Property(e => e.WeeklySalary).HasColumnType("money");

                entity.Property(e => e.WillBeUsingTaskForcesYesNoId).HasColumnName("WillBeUsingTaskForces_YesNoID");
            });

            modelBuilder.Entity<BdgbudgetInfoGrid>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("BDGBudgetInfoGrid");

                entity.Property(e => e.AccountCode).HasMaxLength(50);

                entity.Property(e => e.AccountGroup)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.AccountName)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.ActualApr)
                    .HasColumnType("money")
                    .HasColumnName("Actual Apr");

                entity.Property(e => e.ActualAug)
                    .HasColumnType("money")
                    .HasColumnName("Actual Aug");

                entity.Property(e => e.ActualDec)
                    .HasColumnType("money")
                    .HasColumnName("Actual Dec");

                entity.Property(e => e.ActualFeb)
                    .HasColumnType("money")
                    .HasColumnName("Actual Feb");

                entity.Property(e => e.ActualJan)
                    .HasColumnType("money")
                    .HasColumnName("Actual Jan");

                entity.Property(e => e.ActualJuly)
                    .HasColumnType("money")
                    .HasColumnName("Actual July");

                entity.Property(e => e.ActualJune)
                    .HasColumnType("money")
                    .HasColumnName("Actual June");

                entity.Property(e => e.ActualMar)
                    .HasColumnType("money")
                    .HasColumnName("Actual Mar");

                entity.Property(e => e.ActualMay)
                    .HasColumnType("money")
                    .HasColumnName("Actual May");

                entity.Property(e => e.ActualNov)
                    .HasColumnType("money")
                    .HasColumnName("Actual Nov");

                entity.Property(e => e.ActualOct)
                    .HasColumnType("money")
                    .HasColumnName("Actual Oct");

                entity.Property(e => e.ActualSept)
                    .HasColumnType("money")
                    .HasColumnName("Actual Sept");

                entity.Property(e => e.BdgaccountGroupId).HasColumnName("BDGAccountGroupID");

                entity.Property(e => e.BdgcompanyId).HasColumnName("BDGCompanyID");

                entity.Property(e => e.BdgdepartmentId).HasColumnName("BDGDepartmentID");

                entity.Property(e => e.BudgetApr)
                    .HasColumnType("money")
                    .HasColumnName("Budget Apr");

                entity.Property(e => e.BudgetAug)
                    .HasColumnType("money")
                    .HasColumnName("Budget Aug");

                entity.Property(e => e.BudgetDec)
                    .HasColumnType("money")
                    .HasColumnName("Budget Dec");

                entity.Property(e => e.BudgetFeb)
                    .HasColumnType("money")
                    .HasColumnName("Budget Feb");

                entity.Property(e => e.BudgetJan)
                    .HasColumnType("money")
                    .HasColumnName("Budget Jan");

                entity.Property(e => e.BudgetJuly)
                    .HasColumnType("money")
                    .HasColumnName("Budget July");

                entity.Property(e => e.BudgetJune)
                    .HasColumnType("money")
                    .HasColumnName("Budget June");

                entity.Property(e => e.BudgetMar)
                    .HasColumnType("money")
                    .HasColumnName("Budget Mar");

                entity.Property(e => e.BudgetMay)
                    .HasColumnType("money")
                    .HasColumnName("Budget May");

                entity.Property(e => e.BudgetNov)
                    .HasColumnType("money")
                    .HasColumnName("Budget Nov");

                entity.Property(e => e.BudgetOct)
                    .HasColumnType("money")
                    .HasColumnName("Budget Oct");

                entity.Property(e => e.BudgetSept)
                    .HasColumnType("money")
                    .HasColumnName("Budget Sept");

                entity.Property(e => e.CybudgetAmount)
                    .HasColumnType("money")
                    .HasColumnName("CYBudgetAmount");

                entity.Property(e => e.Department)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.DollarIncrease).HasColumnType("money");

                entity.Property(e => e.Main)
                    .HasMaxLength(4)
                    .HasColumnName("main");

                entity.Property(e => e.Number).HasMaxLength(50);

                entity.Property(e => e.NybudgetAmount)
                    .HasColumnType("money")
                    .HasColumnName("NYBudgetAmount");

                entity.Property(e => e.ObjectUid).HasColumnName("ObjectUID");

                entity.Property(e => e.OrderNew).HasMaxLength(12);

                entity.Property(e => e.PercentIncrease).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.PybudgetAmount)
                    .HasColumnType("money")
                    .HasColumnName("PYBudgetAmount");

                entity.Property(e => e.Statusvalue).HasColumnName("statusvalue");

                entity.Property(e => e.YearSetup)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.YearSetupId).HasColumnName("YearSetupID");

                entity.Property(e => e.YtdactualAmount)
                    .HasColumnType("money")
                    .HasColumnName("YTDActualAmount");

                entity.Property(e => e.YtdprojectedAmount)
                    .HasColumnType("money")
                    .HasColumnName("YTDProjectedAmount");
            });

            modelBuilder.Entity<BdgbudgetInfoLog>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("BDGBudgetInfo_log");

                entity.Property(e => e.BdgaccountGroupId).HasColumnName("BDGAccountGroupID");

                entity.Property(e => e.BdgcompanyId).HasColumnName("BDGCompanyID");

                entity.Property(e => e.BdgdepartmentId).HasColumnName("BDGDepartmentID");

                entity.Property(e => e.BdgreportTypeId).HasColumnName("BDGReportTypeID");

                entity.Property(e => e.BudgetAmount).HasColumnType("money");

                entity.Property(e => e.CreatedBy).HasMaxLength(50);

                entity.Property(e => e.CreatedOn).HasColumnType("datetime");

                entity.Property(e => e.CssStatusid).HasColumnName("CSS_STATUSID");

                entity.Property(e => e.CurrentAmountP1).HasColumnType("money");

                entity.Property(e => e.CurrentAmountP10).HasColumnType("money");

                entity.Property(e => e.CurrentAmountP11).HasColumnType("money");

                entity.Property(e => e.CurrentAmountP12).HasColumnType("money");

                entity.Property(e => e.CurrentAmountP2).HasColumnType("money");

                entity.Property(e => e.CurrentAmountP3).HasColumnType("money");

                entity.Property(e => e.CurrentAmountP4).HasColumnType("money");

                entity.Property(e => e.CurrentAmountP5).HasColumnType("money");

                entity.Property(e => e.CurrentAmountP6).HasColumnType("money");

                entity.Property(e => e.CurrentAmountP7).HasColumnType("money");

                entity.Property(e => e.CurrentAmountP8).HasColumnType("money");

                entity.Property(e => e.CurrentAmountP9).HasColumnType("money");

                entity.Property(e => e.CurrentMonth)
                    .HasColumnType("money")
                    .HasColumnName("currentMonth");

                entity.Property(e => e.CurrentMonthBudget).HasColumnType("money");

                entity.Property(e => e.Description).HasMaxLength(2000);

                entity.Property(e => e.Display).HasMaxLength(50);

                entity.Property(e => e.DollarIncrease).HasColumnType("money");

                entity.Property(e => e.EstimatedBudgetAmount).HasColumnType("money");

                entity.Property(e => e.ImportedObjectUid)
                    .HasMaxLength(50)
                    .HasColumnName("ImportedObjectUID");

                entity.Property(e => e.InstallationUid).HasColumnName("InstallationUID");

                entity.Property(e => e.Name).HasMaxLength(50);

                entity.Property(e => e.NameAlias).HasMaxLength(50);

                entity.Property(e => e.ObjectUid).HasColumnName("ObjectUID");

                entity.Property(e => e.OldRecordId).HasColumnName("OldRecordID");

                entity.Property(e => e.OriginalNextYearBudgetAmount).HasColumnType("money");

                entity.Property(e => e.OriginialBudgetAmount).HasColumnType("money");

                entity.Property(e => e.OriginialTwoMoreYearsBudgetAmount).HasColumnType("money");

                entity.Property(e => e.PercentIncrease).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.PreviousBdgbudgetInfoId).HasColumnName("Previous_BDGBudgetInfoID");

                entity.Property(e => e.Processdate)
                    .HasColumnType("datetime")
                    .HasColumnName("processdate");

                entity.Property(e => e.ProposedBudgetAmount).HasColumnType("money");

                entity.Property(e => e.ProposedBudgetAmountP1).HasColumnType("money");

                entity.Property(e => e.ProposedBudgetAmountP10).HasColumnType("money");

                entity.Property(e => e.ProposedBudgetAmountP11).HasColumnType("money");

                entity.Property(e => e.ProposedBudgetAmountP12).HasColumnType("money");

                entity.Property(e => e.ProposedBudgetAmountP2).HasColumnType("money");

                entity.Property(e => e.ProposedBudgetAmountP3).HasColumnType("money");

                entity.Property(e => e.ProposedBudgetAmountP4).HasColumnType("money");

                entity.Property(e => e.ProposedBudgetAmountP5).HasColumnType("money");

                entity.Property(e => e.ProposedBudgetAmountP6).HasColumnType("money");

                entity.Property(e => e.ProposedBudgetAmountP7).HasColumnType("money");

                entity.Property(e => e.ProposedBudgetAmountP8).HasColumnType("money");

                entity.Property(e => e.ProposedBudgetAmountP9).HasColumnType("money");

                entity.Property(e => e.ProposedBudgetAmountPdiff)
                    .HasColumnType("money")
                    .HasColumnName("ProposedBudgetAmountPDiff");

                entity.Property(e => e.RecordId)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("RecordID");

                entity.Property(e => e.TwoMoreYearsBudgetAmount).HasColumnType("money");

                entity.Property(e => e.UpdatedBy).HasMaxLength(50);

                entity.Property(e => e.UpdatedOn).HasColumnType("datetime");

                entity.Property(e => e.YearSetupId).HasColumnName("YearSetupID");

                entity.Property(e => e.YtdactualAmount)
                    .HasColumnType("money")
                    .HasColumnName("YTDActualAmount");

                entity.Property(e => e.YtdbudgetAmount)
                    .HasColumnType("money")
                    .HasColumnName("YTDBudgetAmount");

                entity.Property(e => e.YtdprojectedAmount)
                    .HasColumnType("money")
                    .HasColumnName("YTDProjectedAmount");
            });

            modelBuilder.Entity<BdgbudgetInfoTemp>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("BDGBudgetInfo_temp");

                entity.Property(e => e.BdgaccountGroupId).HasColumnName("BDGAccountGroupID");

                entity.Property(e => e.BdgcompanyId).HasColumnName("BDGCompanyID");

                entity.Property(e => e.BdgdepartmentId).HasColumnName("BDGDepartmentID");

                entity.Property(e => e.BdgreportTypeId).HasColumnName("BDGReportTypeID");

                entity.Property(e => e.BudgetAmount).HasColumnType("money");

                entity.Property(e => e.CreatedBy).HasMaxLength(50);

                entity.Property(e => e.CreatedOn).HasColumnType("datetime");

                entity.Property(e => e.Description).HasMaxLength(2000);

                entity.Property(e => e.Display).HasMaxLength(50);

                entity.Property(e => e.DollarIncrease).HasColumnType("money");

                entity.Property(e => e.EstimatedBudgetAmount).HasColumnType("money");

                entity.Property(e => e.ImportedObjectUid)
                    .HasMaxLength(50)
                    .HasColumnName("ImportedObjectUID");

                entity.Property(e => e.InstallationUid).HasColumnName("InstallationUID");

                entity.Property(e => e.Name).HasMaxLength(50);

                entity.Property(e => e.NameAlias).HasMaxLength(50);

                entity.Property(e => e.ObjectUid).HasColumnName("ObjectUID");

                entity.Property(e => e.OldRecordId).HasColumnName("OldRecordID");

                entity.Property(e => e.PercentIncrease).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.PreviousBdgbudgetInfoId).HasColumnName("Previous_BDGBudgetInfoID");

                entity.Property(e => e.ProposedBudgetAmount).HasColumnType("money");

                entity.Property(e => e.RecordId)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("RecordID");

                entity.Property(e => e.UpdatedBy).HasMaxLength(50);

                entity.Property(e => e.UpdatedOn).HasColumnType("datetime");

                entity.Property(e => e.YearSetupId).HasColumnName("YearSetupID");

                entity.Property(e => e.YtdactualAmount)
                    .HasColumnType("money")
                    .HasColumnName("YTDActualAmount");

                entity.Property(e => e.YtdprojectedAmount)
                    .HasColumnType("money")
                    .HasColumnName("YTDProjectedAmount");
            });

            modelBuilder.Entity<BdgbudgetInfoToBeAdded>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("BDGBudgetInfo_To_Be_Added");

                entity.Property(e => e.BdgaccountGroupId).HasColumnName("BDGAccountGroupID");

                entity.Property(e => e.BdgcompanyId).HasColumnName("BDGCompanyID");

                entity.Property(e => e.BdgdepartmentId).HasColumnName("BDGDepartmentID");

                entity.Property(e => e.YearSetupId).HasColumnName("YearSetupID");
            });

            modelBuilder.Entity<BdgbudgetInfoView>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("BDGBudgetInfo_view");

                entity.Property(e => e.BdgaccountGroupId).HasColumnName("BDGAccountGroupID");

                entity.Property(e => e.BdgcompanyId).HasColumnName("BDGCompanyID");

                entity.Property(e => e.BdgdepartmentId).HasColumnName("BDGDepartmentID");

                entity.Property(e => e.BdgreportTypeId).HasColumnName("BDGReportTypeID");

                entity.Property(e => e.BudgetAmount).HasColumnType("money");

                entity.Property(e => e.CreatedBy).HasMaxLength(50);

                entity.Property(e => e.CreatedOn).HasColumnType("datetime");

                entity.Property(e => e.CssStatusid).HasColumnName("CSS_STATUSID");

                entity.Property(e => e.CurrentAmountP1).HasColumnType("money");

                entity.Property(e => e.CurrentAmountP10).HasColumnType("money");

                entity.Property(e => e.CurrentAmountP11).HasColumnType("money");

                entity.Property(e => e.CurrentAmountP12).HasColumnType("money");

                entity.Property(e => e.CurrentAmountP2).HasColumnType("money");

                entity.Property(e => e.CurrentAmountP3).HasColumnType("money");

                entity.Property(e => e.CurrentAmountP4).HasColumnType("money");

                entity.Property(e => e.CurrentAmountP5).HasColumnType("money");

                entity.Property(e => e.CurrentAmountP6).HasColumnType("money");

                entity.Property(e => e.CurrentAmountP7).HasColumnType("money");

                entity.Property(e => e.CurrentAmountP8).HasColumnType("money");

                entity.Property(e => e.CurrentAmountP9).HasColumnType("money");

                entity.Property(e => e.CurrentMonth)
                    .HasColumnType("money")
                    .HasColumnName("currentMonth");

                entity.Property(e => e.CurrentMonthBudget).HasColumnType("money");

                entity.Property(e => e.Description).HasMaxLength(2000);

                entity.Property(e => e.Display).HasMaxLength(50);

                entity.Property(e => e.DollarIncrease).HasColumnType("money");

                entity.Property(e => e.EstimatedBudgetAmount).HasColumnType("money");

                entity.Property(e => e.ImportedObjectUid)
                    .HasMaxLength(50)
                    .HasColumnName("ImportedObjectUID");

                entity.Property(e => e.InstallationUid).HasColumnName("InstallationUID");

                entity.Property(e => e.Name).HasMaxLength(50);

                entity.Property(e => e.NameAlias).HasMaxLength(50);

                entity.Property(e => e.ObjectUid).HasColumnName("ObjectUID");

                entity.Property(e => e.OldRecordId).HasColumnName("OldRecordID");

                entity.Property(e => e.OriginalNextYearBudgetAmount).HasColumnType("money");

                entity.Property(e => e.OriginialBudgetAmount).HasColumnType("money");

                entity.Property(e => e.OriginialTwoMoreYearsBudgetAmount).HasColumnType("money");

                entity.Property(e => e.PercentIncrease).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.PreviousBdgbudgetInfoId).HasColumnName("Previous_BDGBudgetInfoID");

                entity.Property(e => e.ProposedBudgetAmount).HasColumnType("money");

                entity.Property(e => e.ProposedBudgetAmountP1).HasColumnType("money");

                entity.Property(e => e.ProposedBudgetAmountP10).HasColumnType("money");

                entity.Property(e => e.ProposedBudgetAmountP11).HasColumnType("money");

                entity.Property(e => e.ProposedBudgetAmountP12).HasColumnType("money");

                entity.Property(e => e.ProposedBudgetAmountP2).HasColumnType("money");

                entity.Property(e => e.ProposedBudgetAmountP3).HasColumnType("money");

                entity.Property(e => e.ProposedBudgetAmountP4).HasColumnType("money");

                entity.Property(e => e.ProposedBudgetAmountP5).HasColumnType("money");

                entity.Property(e => e.ProposedBudgetAmountP6).HasColumnType("money");

                entity.Property(e => e.ProposedBudgetAmountP7).HasColumnType("money");

                entity.Property(e => e.ProposedBudgetAmountP8).HasColumnType("money");

                entity.Property(e => e.ProposedBudgetAmountP9).HasColumnType("money");

                entity.Property(e => e.ProposedBudgetAmountPdiff)
                    .HasColumnType("money")
                    .HasColumnName("ProposedBudgetAmountPDiff");

                entity.Property(e => e.RecordId)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("RecordID");

                entity.Property(e => e.TwoMoreYearsBudgetAmount).HasColumnType("money");

                entity.Property(e => e.UpdatedBy).HasMaxLength(50);

                entity.Property(e => e.UpdatedOn).HasColumnType("datetime");

                entity.Property(e => e.YearSetupId).HasColumnName("YearSetupID");

                entity.Property(e => e.YtdactualAmount)
                    .HasColumnType("money")
                    .HasColumnName("YTDActualAmount");

                entity.Property(e => e.YtdbudgetAmount)
                    .HasColumnType("money")
                    .HasColumnName("YTDBudgetAmount");

                entity.Property(e => e.YtdprojectedAmount)
                    .HasColumnType("money")
                    .HasColumnName("YTDProjectedAmount");
            });

            modelBuilder.Entity<BdgbudgetinfoChange>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("bdgbudgetinfo_change");

                entity.Property(e => e.BdgaccountGroupId).HasColumnName("BDGAccountGroupID");

                entity.Property(e => e.BdgcompanyId).HasColumnName("BDGCompanyID");

                entity.Property(e => e.BdgdepartmentId).HasColumnName("BDGDepartmentID");

                entity.Property(e => e.BdgreportTypeId).HasColumnName("BDGReportTypeID");

                entity.Property(e => e.BudgetAmount).HasColumnType("money");

                entity.Property(e => e.CreatedBy).HasMaxLength(50);

                entity.Property(e => e.CreatedOn).HasColumnType("datetime");

                entity.Property(e => e.Description).HasMaxLength(2000);

                entity.Property(e => e.Display).HasMaxLength(50);

                entity.Property(e => e.DollarIncrease).HasColumnType("money");

                entity.Property(e => e.EstimatedBudgetAmount).HasColumnType("money");

                entity.Property(e => e.ImportedObjectUid)
                    .HasMaxLength(50)
                    .HasColumnName("ImportedObjectUID");

                entity.Property(e => e.InstallationUid).HasColumnName("InstallationUID");

                entity.Property(e => e.Name).HasMaxLength(50);

                entity.Property(e => e.NameAlias).HasMaxLength(50);

                entity.Property(e => e.ObjectUid).HasColumnName("ObjectUID");

                entity.Property(e => e.OldRecordId).HasColumnName("OldRecordID");

                entity.Property(e => e.PercentIncrease).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.PreviousBdgbudgetInfoId).HasColumnName("Previous_BDGBudgetInfoID");

                entity.Property(e => e.ProposedBudgetAmount).HasColumnType("money");

                entity.Property(e => e.RecordId)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("RecordID");

                entity.Property(e => e.UpdateDatetime)
                    .HasColumnType("datetime")
                    .HasColumnName("update_datetime");

                entity.Property(e => e.UpdatedBy).HasMaxLength(50);

                entity.Property(e => e.UpdatedOn).HasColumnType("datetime");

                entity.Property(e => e.YearSetupId).HasColumnName("YearSetupID");

                entity.Property(e => e.YtdactualAmount)
                    .HasColumnType("money")
                    .HasColumnName("YTDActualAmount");

                entity.Property(e => e.YtdprojectedAmount)
                    .HasColumnType("money")
                    .HasColumnName("YTDProjectedAmount");
            });

            modelBuilder.Entity<BdgbudgetinfoCurrentyearamountTemp>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("bdgbudgetinfo_currentyearamount_temp");

                entity.Property(e => e.Acct)
                    .HasMaxLength(75)
                    .HasColumnName("acct");

                entity.Property(e => e.Amount).HasColumnName("amount");

                entity.Property(e => e.Bdgaccountgroup)
                    .HasMaxLength(50)
                    .HasColumnName("bdgaccountgroup");

                entity.Property(e => e.Bdgaccountgroupid).HasColumnName("bdgaccountgroupid");

                entity.Property(e => e.Bdgbudgetinfoid).HasColumnName("bdgbudgetinfoid");

                entity.Property(e => e.Bdgdepartment)
                    .HasMaxLength(50)
                    .HasColumnName("BDGDepartment");

                entity.Property(e => e.Bdgdepartmentid).HasColumnName("BDGDepartmentid");

                entity.Property(e => e.Enddate)
                    .HasColumnType("date")
                    .HasColumnName("enddate");

                entity.Property(e => e.Startdate)
                    .HasColumnType("date")
                    .HasColumnName("startdate");

                entity.Property(e => e.Yearsetupid).HasColumnName("yearsetupid");
            });

            modelBuilder.Entity<BdgbudgetinfoCurrentyearamountTemponemonth>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("bdgbudgetinfo_currentyearamount_temponemonth");

                entity.Property(e => e.Amount).HasColumnName("amount");

                entity.Property(e => e.Bdgaccountgroup)
                    .HasMaxLength(50)
                    .HasColumnName("bdgaccountgroup");

                entity.Property(e => e.Bdgaccountgroupid).HasColumnName("bdgaccountgroupid");

                entity.Property(e => e.Bdgbudgetinfoid).HasColumnName("bdgbudgetinfoid");

                entity.Property(e => e.Bdgdepartment)
                    .HasMaxLength(50)
                    .HasColumnName("BDGDepartment");

                entity.Property(e => e.Bdgdepartmentid).HasColumnName("BDGDepartmentid");

                entity.Property(e => e.Enddate)
                    .HasColumnType("date")
                    .HasColumnName("enddate");

                entity.Property(e => e.Startdate)
                    .HasColumnType("date")
                    .HasColumnName("startdate");

                entity.Property(e => e.Yearsetupid).HasColumnName("yearsetupid");
            });

            modelBuilder.Entity<BdgbudgetinfoDetailCombineAll>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("bdgbudgetinfo_detail_combineAll");

                entity.Property(e => e.AccountGroup)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnName("Account Group");

                entity.Property(e => e.AccountGroupSubGroup)
                    .HasMaxLength(50)
                    .HasColumnName("AccountGroup_SubGroup");

                entity.Property(e => e.AccountGroupSubSubSubGroup)
                    .HasMaxLength(50)
                    .HasColumnName("AccountGroup_Sub_Sub_subGroup");

                entity.Property(e => e.AccountgroupSubSubGroup)
                    .HasMaxLength(50)
                    .HasColumnName("Accountgroup_Sub_SubGroup");

                entity.Property(e => e.AnticipatedStartingMonthId).HasColumnName("AnticipatedStarting_MonthID");

                entity.Property(e => e.BdgaccountGroupId).HasColumnName("BDGAccountGroupID");

                entity.Property(e => e.BdgaccountGroupSubGroupId).HasColumnName("BDGAccountGroup_SubGroupID");

                entity.Property(e => e.BdgaccountGroupSubGroupSubGroupId).HasColumnName("BDGAccountGroup_SubGroup_SubGroupID");

                entity.Property(e => e.BdgaccountGroupSubGroupSubGroupSubGroupId).HasColumnName("BDGAccountGroup_SubGroup_SubGroup_SubGroupID");

                entity.Property(e => e.BdgbudgetGroupTypeId).HasColumnName("BDGBudgetGroupTypeID");

                entity.Property(e => e.BdgbudgetInfoId).HasColumnName("BDGBudgetInfoID");

                entity.Property(e => e.BdgcommitteeTypeId).HasColumnName("BDGCommitteeTypeID");

                entity.Property(e => e.BdgemployeeCategoryId).HasColumnName("BDGEmployeeCategoryID");

                entity.Property(e => e.BdgemployeeId).HasColumnName("BDGEmployeeID");

                entity.Property(e => e.BdgemployeePositionId).HasColumnName("BDGEmployeePositionID");

                entity.Property(e => e.BdgemployeeStatusId).HasColumnName("BDGEmployeeStatusID");

                entity.Property(e => e.BdgemployeeTypeId).HasColumnName("BDGEmployeeTypeID");

                entity.Property(e => e.BdgemployeeUnitId).HasColumnName("BDGEmployeeUnitID");

                entity.Property(e => e.BdgemployeeUnitPositionId).HasColumnName("BDGEmployeeUnit_PositionID");

                entity.Property(e => e.BdgemployeeUnitPositionStepId).HasColumnName("BDGEmployeeUnit_Position_StepID");

                entity.Property(e => e.BdgmeetingStatusId).HasColumnName("BDGMeetingStatusID");

                entity.Property(e => e.BdgpositionTypeId).HasColumnName("BDGPositionTypeID");

                entity.Property(e => e.BdgprojectTypeId).HasColumnName("BDGProjectTypeID");

                entity.Property(e => e.BudgetAmount).HasColumnType("money");

                entity.Property(e => e.CreatedBy).HasMaxLength(50);

                entity.Property(e => e.CreatedOn).HasColumnType("datetime");

                entity.Property(e => e.CurrentYearBudgetAmount).HasColumnType("money");

                entity.Property(e => e.Department)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Description).HasMaxLength(2000);

                entity.Property(e => e.DetailAmount).HasColumnType("money");

                entity.Property(e => e.Display).HasMaxLength(250);

                entity.Property(e => e.FringeBdgbudgetInfoDetailId).HasColumnName("Fringe_BDGBudgetInfo_DetailID");

                entity.Property(e => e.ImportedObjectUid)
                    .HasMaxLength(50)
                    .HasColumnName("ImportedObjectUID");

                entity.Property(e => e.InstallationUid).HasColumnName("InstallationUID");

                entity.Property(e => e.LineNumber).HasMaxLength(50);

                entity.Property(e => e.MeetingLocation).HasMaxLength(50);

                entity.Property(e => e.MeetingStartDate).HasMaxLength(50);

                entity.Property(e => e.Name).HasMaxLength(250);

                entity.Property(e => e.NameAlias).HasMaxLength(250);

                entity.Property(e => e.NextYearBudgetAmount).HasColumnType("money");

                entity.Property(e => e.NextYearCode).HasMaxLength(50);

                entity.Property(e => e.NextYearSetup).HasMaxLength(50);

                entity.Property(e => e.ObjectUid).HasColumnName("ObjectUID");

                entity.Property(e => e.OldBdgbudgetInfoId).HasColumnName("Old_BDGBudgetInfoID");

                entity.Property(e => e.OldRecordId).HasColumnName("OldRecordID");

                entity.Property(e => e.PreviousActualEndDate).HasColumnType("datetime");

                entity.Property(e => e.PreviousEndDate).HasColumnType("datetime");

                entity.Property(e => e.PreviousYearCode).HasMaxLength(50);

                entity.Property(e => e.RecordId).HasColumnName("RecordID");

                entity.Property(e => e.Salary).HasColumnType("money");

                entity.Property(e => e.TotalAmount).HasColumnType("money");

                entity.Property(e => e.UpdatedBy).HasMaxLength(50);

                entity.Property(e => e.UpdatedOn).HasColumnType("datetime");

                entity.Property(e => e.WeeklySalary).HasColumnType("money");

                entity.Property(e => e.WillBeUsingTaskForcesYesNoId).HasColumnName("WillBeUsingTaskForces_YesNoID");

                entity.Property(e => e.YearCode).HasMaxLength(50);

                entity.Property(e => e.YearSetup)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.YearSetupId).HasColumnName("YearSetupID");
            });

            modelBuilder.Entity<BdgbudgetinfoDetailCurrentyearamountTemp>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("bdgbudgetinfo_detail_currentyearamount_temp");

                entity.Property(e => e.Amount).HasColumnName("amount");

                entity.Property(e => e.BdgaccountGroupSubGroup)
                    .HasMaxLength(50)
                    .HasColumnName("BDGAccountGroup_SubGroup");

                entity.Property(e => e.BdgaccountGroupSubGroupSubGroup)
                    .HasMaxLength(50)
                    .HasColumnName("BDGAccountGroup_SubGroup_SubGroup");

                entity.Property(e => e.BdgaccountGroupSubGroupSubGroupSubGroupid).HasColumnName("BDGAccountGroup_SubGroup_SubGroup_SubGroupid");

                entity.Property(e => e.BdgaccountGroupSubGroupSubGroupSubgroup)
                    .HasMaxLength(50)
                    .HasColumnName("BDGAccountGroup_SubGroup_SubGroup_subgroup");

                entity.Property(e => e.BdgaccountGroupSubGroupSubGroupid).HasColumnName("BDGAccountGroup_SubGroup_SubGroupid");

                entity.Property(e => e.BdgaccountGroupSubGroupid).HasColumnName("BDGAccountGroup_SubGroupid");

                entity.Property(e => e.Bdgaccountgroup)
                    .HasMaxLength(50)
                    .HasColumnName("bdgaccountgroup");

                entity.Property(e => e.Bdgaccountgroupid).HasColumnName("bdgaccountgroupid");

                entity.Property(e => e.BdgbudgetinfoDetailid).HasColumnName("bdgbudgetinfo_detailid");

                entity.Property(e => e.Bdgbudgetinfoid).HasColumnName("bdgbudgetinfoid");

                entity.Property(e => e.Bdgdepartment)
                    .HasMaxLength(50)
                    .HasColumnName("BDGDepartment");

                entity.Property(e => e.Bdgdepartmentid).HasColumnName("BDGDepartmentid");

                entity.Property(e => e.Enddate)
                    .HasColumnType("date")
                    .HasColumnName("enddate");

                entity.Property(e => e.Startdate)
                    .HasColumnType("date")
                    .HasColumnName("startdate");

                entity.Property(e => e.Yearsetupid).HasColumnName("yearsetupid");
            });

            modelBuilder.Entity<BdgbudgetinfoDetaill>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("bdgbudgetinfo_detaill");

                entity.Property(e => e.AnticipatedStartingMonthId).HasColumnName("AnticipatedStarting_MonthID");

                entity.Property(e => e.BdgaccountGroupId).HasColumnName("BDGAccountGroupID");

                entity.Property(e => e.BdgaccountGroupSubGroupId).HasColumnName("BDGAccountGroup_SubGroupID");

                entity.Property(e => e.BdgaccountGroupSubGroupSubGroupId).HasColumnName("BDGAccountGroup_SubGroup_SubGroupID");

                entity.Property(e => e.BdgaccountGroupSubGroupSubGroupSubGroupId).HasColumnName("BDGAccountGroup_SubGroup_SubGroup_SubGroupID");

                entity.Property(e => e.BdgbudgetGroupTypeId).HasColumnName("BDGBudgetGroupTypeID");

                entity.Property(e => e.BdgbudgetInfoId).HasColumnName("BDGBudgetInfoID");

                entity.Property(e => e.BdgcommitteeTypeId).HasColumnName("BDGCommitteeTypeID");

                entity.Property(e => e.BdgemployeeCategoryId).HasColumnName("BDGEmployeeCategoryID");

                entity.Property(e => e.BdgemployeeId).HasColumnName("BDGEmployeeID");

                entity.Property(e => e.BdgemployeePositionId).HasColumnName("BDGEmployeePositionID");

                entity.Property(e => e.BdgemployeeStatusId).HasColumnName("BDGEmployeeStatusID");

                entity.Property(e => e.BdgemployeeTypeId).HasColumnName("BDGEmployeeTypeID");

                entity.Property(e => e.BdgemployeeUnitId).HasColumnName("BDGEmployeeUnitID");

                entity.Property(e => e.BdgemployeeUnitPositionId).HasColumnName("BDGEmployeeUnit_PositionID");

                entity.Property(e => e.BdgemployeeUnitPositionStepId).HasColumnName("BDGEmployeeUnit_Position_StepID");

                entity.Property(e => e.BdgmeetingStatusId).HasColumnName("BDGMeetingStatusID");

                entity.Property(e => e.BdgpositionTypeId).HasColumnName("BDGPositionTypeID");

                entity.Property(e => e.BdgprojectTypeId).HasColumnName("BDGProjectTypeID");

                entity.Property(e => e.BudgetAmount).HasColumnType("money");

                entity.Property(e => e.CreatedBy).HasMaxLength(50);

                entity.Property(e => e.CreatedOn).HasColumnType("datetime");

                entity.Property(e => e.CurrentYearBudgetAmount).HasColumnType("money");

                entity.Property(e => e.Description).HasMaxLength(2000);

                entity.Property(e => e.DetailAmount).HasColumnType("money");

                entity.Property(e => e.Display).HasMaxLength(250);

                entity.Property(e => e.FringeBdgbudgetInfoDetailId).HasColumnName("Fringe_BDGBudgetInfo_DetailID");

                entity.Property(e => e.ImportedObjectUid)
                    .HasMaxLength(50)
                    .HasColumnName("ImportedObjectUID");

                entity.Property(e => e.InstallationUid).HasColumnName("InstallationUID");

                entity.Property(e => e.LineNumber).HasMaxLength(50);

                entity.Property(e => e.MeetingLocation).HasMaxLength(50);

                entity.Property(e => e.MeetingStartDate).HasMaxLength(50);

                entity.Property(e => e.Name).HasMaxLength(250);

                entity.Property(e => e.NameAlias).HasMaxLength(250);

                entity.Property(e => e.NextYearBudgetAmount).HasColumnType("money");

                entity.Property(e => e.ObjectUid).HasColumnName("ObjectUID");

                entity.Property(e => e.OldBdgbudgetInfoId).HasColumnName("Old_BDGBudgetInfoID");

                entity.Property(e => e.OldRecordId).HasColumnName("OldRecordID");

                entity.Property(e => e.RecordId)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("RecordID");

                entity.Property(e => e.Salary).HasColumnType("money");

                entity.Property(e => e.TotalAmount).HasColumnType("money");

                entity.Property(e => e.UpdatedBy).HasMaxLength(50);

                entity.Property(e => e.UpdatedOn).HasColumnType("datetime");

                entity.Property(e => e.WeeklySalary).HasColumnType("money");

                entity.Property(e => e.WillBeUsingTaskForcesYesNoId).HasColumnName("WillBeUsingTaskForces_YesNoID");
            });

            modelBuilder.Entity<BdgbudgetinfoMonth01>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("bdgbudgetinfo_month01");

                entity.Property(e => e.Amount).HasColumnName("amount");

                entity.Property(e => e.Bdgaccountgroup)
                    .HasMaxLength(50)
                    .HasColumnName("bdgaccountgroup");

                entity.Property(e => e.Bdgaccountgroupid).HasColumnName("bdgaccountgroupid");

                entity.Property(e => e.Bdgbudgetinfoid).HasColumnName("bdgbudgetinfoid");

                entity.Property(e => e.Bdgdepartment)
                    .HasMaxLength(50)
                    .HasColumnName("BDGDepartment");

                entity.Property(e => e.Bdgdepartmentid).HasColumnName("BDGDepartmentid");

                entity.Property(e => e.Enddate)
                    .HasColumnType("date")
                    .HasColumnName("enddate");

                entity.Property(e => e.Startdate)
                    .HasColumnType("date")
                    .HasColumnName("startdate");

                entity.Property(e => e.Yearsetupid).HasColumnName("yearsetupid");
            });

            modelBuilder.Entity<BdgbudgetinfoMonth02>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("bdgbudgetinfo_month02");

                entity.Property(e => e.Amount).HasColumnName("amount");

                entity.Property(e => e.Bdgaccountgroup)
                    .HasMaxLength(50)
                    .HasColumnName("bdgaccountgroup");

                entity.Property(e => e.Bdgaccountgroupid).HasColumnName("bdgaccountgroupid");

                entity.Property(e => e.Bdgbudgetinfoid).HasColumnName("bdgbudgetinfoid");

                entity.Property(e => e.Bdgdepartment)
                    .HasMaxLength(50)
                    .HasColumnName("BDGDepartment");

                entity.Property(e => e.Bdgdepartmentid).HasColumnName("BDGDepartmentid");

                entity.Property(e => e.Enddate)
                    .HasColumnType("date")
                    .HasColumnName("enddate");

                entity.Property(e => e.Startdate)
                    .HasColumnType("date")
                    .HasColumnName("startdate");

                entity.Property(e => e.Yearsetupid).HasColumnName("yearsetupid");
            });

            modelBuilder.Entity<BdgbudgetinfoMonth03>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("bdgbudgetinfo_month03");

                entity.Property(e => e.Amount).HasColumnName("amount");

                entity.Property(e => e.Bdgaccountgroup)
                    .HasMaxLength(50)
                    .HasColumnName("bdgaccountgroup");

                entity.Property(e => e.Bdgaccountgroupid).HasColumnName("bdgaccountgroupid");

                entity.Property(e => e.Bdgbudgetinfoid).HasColumnName("bdgbudgetinfoid");

                entity.Property(e => e.Bdgdepartment)
                    .HasMaxLength(50)
                    .HasColumnName("BDGDepartment");

                entity.Property(e => e.Bdgdepartmentid).HasColumnName("BDGDepartmentid");

                entity.Property(e => e.Enddate)
                    .HasColumnType("date")
                    .HasColumnName("enddate");

                entity.Property(e => e.Startdate)
                    .HasColumnType("date")
                    .HasColumnName("startdate");

                entity.Property(e => e.Yearsetupid).HasColumnName("yearsetupid");
            });

            modelBuilder.Entity<BdgbudgetinfoMonth04>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("bdgbudgetinfo_month04");

                entity.Property(e => e.Amount).HasColumnName("amount");

                entity.Property(e => e.Bdgaccountgroup)
                    .HasMaxLength(50)
                    .HasColumnName("bdgaccountgroup");

                entity.Property(e => e.Bdgaccountgroupid).HasColumnName("bdgaccountgroupid");

                entity.Property(e => e.Bdgbudgetinfoid).HasColumnName("bdgbudgetinfoid");

                entity.Property(e => e.Bdgdepartment)
                    .HasMaxLength(50)
                    .HasColumnName("BDGDepartment");

                entity.Property(e => e.Bdgdepartmentid).HasColumnName("BDGDepartmentid");

                entity.Property(e => e.Enddate)
                    .HasColumnType("date")
                    .HasColumnName("enddate");

                entity.Property(e => e.Startdate)
                    .HasColumnType("date")
                    .HasColumnName("startdate");

                entity.Property(e => e.Yearsetupid).HasColumnName("yearsetupid");
            });

            modelBuilder.Entity<BdgbudgetinfoMonth05>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("bdgbudgetinfo_month05");

                entity.Property(e => e.Amount).HasColumnName("amount");

                entity.Property(e => e.Bdgaccountgroup)
                    .HasMaxLength(50)
                    .HasColumnName("bdgaccountgroup");

                entity.Property(e => e.Bdgaccountgroupid).HasColumnName("bdgaccountgroupid");

                entity.Property(e => e.Bdgbudgetinfoid).HasColumnName("bdgbudgetinfoid");

                entity.Property(e => e.Bdgdepartment)
                    .HasMaxLength(50)
                    .HasColumnName("BDGDepartment");

                entity.Property(e => e.Bdgdepartmentid).HasColumnName("BDGDepartmentid");

                entity.Property(e => e.Enddate)
                    .HasColumnType("date")
                    .HasColumnName("enddate");

                entity.Property(e => e.Startdate)
                    .HasColumnType("date")
                    .HasColumnName("startdate");

                entity.Property(e => e.Yearsetupid).HasColumnName("yearsetupid");
            });

            modelBuilder.Entity<BdgbudgetinfoMonth06>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("bdgbudgetinfo_month06");

                entity.Property(e => e.Amount).HasColumnName("amount");

                entity.Property(e => e.Bdgaccountgroup)
                    .HasMaxLength(50)
                    .HasColumnName("bdgaccountgroup");

                entity.Property(e => e.Bdgaccountgroupid).HasColumnName("bdgaccountgroupid");

                entity.Property(e => e.Bdgbudgetinfoid).HasColumnName("bdgbudgetinfoid");

                entity.Property(e => e.Bdgdepartment)
                    .HasMaxLength(50)
                    .HasColumnName("BDGDepartment");

                entity.Property(e => e.Bdgdepartmentid).HasColumnName("BDGDepartmentid");

                entity.Property(e => e.Enddate)
                    .HasColumnType("date")
                    .HasColumnName("enddate");

                entity.Property(e => e.Startdate)
                    .HasColumnType("date")
                    .HasColumnName("startdate");

                entity.Property(e => e.Yearsetupid).HasColumnName("yearsetupid");
            });

            modelBuilder.Entity<BdgbudgetinfoMonth07>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("bdgbudgetinfo_month07");

                entity.Property(e => e.Amount).HasColumnName("amount");

                entity.Property(e => e.Bdgaccountgroup)
                    .HasMaxLength(50)
                    .HasColumnName("bdgaccountgroup");

                entity.Property(e => e.Bdgaccountgroupid).HasColumnName("bdgaccountgroupid");

                entity.Property(e => e.Bdgbudgetinfoid).HasColumnName("bdgbudgetinfoid");

                entity.Property(e => e.Bdgdepartment)
                    .HasMaxLength(50)
                    .HasColumnName("BDGDepartment");

                entity.Property(e => e.Bdgdepartmentid).HasColumnName("BDGDepartmentid");

                entity.Property(e => e.Enddate)
                    .HasColumnType("date")
                    .HasColumnName("enddate");

                entity.Property(e => e.Startdate)
                    .HasColumnType("date")
                    .HasColumnName("startdate");

                entity.Property(e => e.Yearsetupid).HasColumnName("yearsetupid");
            });

            modelBuilder.Entity<BdgbudgetinfoMonth08>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("bdgbudgetinfo_month08");

                entity.Property(e => e.Amount).HasColumnName("amount");

                entity.Property(e => e.Bdgaccountgroup)
                    .HasMaxLength(50)
                    .HasColumnName("bdgaccountgroup");

                entity.Property(e => e.Bdgaccountgroupid).HasColumnName("bdgaccountgroupid");

                entity.Property(e => e.Bdgbudgetinfoid).HasColumnName("bdgbudgetinfoid");

                entity.Property(e => e.Bdgdepartment)
                    .HasMaxLength(50)
                    .HasColumnName("BDGDepartment");

                entity.Property(e => e.Bdgdepartmentid).HasColumnName("BDGDepartmentid");

                entity.Property(e => e.Enddate)
                    .HasColumnType("date")
                    .HasColumnName("enddate");

                entity.Property(e => e.Startdate)
                    .HasColumnType("date")
                    .HasColumnName("startdate");

                entity.Property(e => e.Yearsetupid).HasColumnName("yearsetupid");
            });

            modelBuilder.Entity<BdgbudgetinfoMonth09>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("bdgbudgetinfo_month09");

                entity.Property(e => e.Amount).HasColumnName("amount");

                entity.Property(e => e.Bdgaccountgroup)
                    .HasMaxLength(50)
                    .HasColumnName("bdgaccountgroup");

                entity.Property(e => e.Bdgaccountgroupid).HasColumnName("bdgaccountgroupid");

                entity.Property(e => e.Bdgbudgetinfoid).HasColumnName("bdgbudgetinfoid");

                entity.Property(e => e.Bdgdepartment)
                    .HasMaxLength(50)
                    .HasColumnName("BDGDepartment");

                entity.Property(e => e.Bdgdepartmentid).HasColumnName("BDGDepartmentid");

                entity.Property(e => e.Enddate)
                    .HasColumnType("date")
                    .HasColumnName("enddate");

                entity.Property(e => e.Startdate)
                    .HasColumnType("date")
                    .HasColumnName("startdate");

                entity.Property(e => e.Yearsetupid).HasColumnName("yearsetupid");
            });

            modelBuilder.Entity<BdgbudgetinfoMonth10>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("bdgbudgetinfo_month10");

                entity.Property(e => e.Amount).HasColumnName("amount");

                entity.Property(e => e.Bdgaccountgroup)
                    .HasMaxLength(50)
                    .HasColumnName("bdgaccountgroup");

                entity.Property(e => e.Bdgaccountgroupid).HasColumnName("bdgaccountgroupid");

                entity.Property(e => e.Bdgbudgetinfoid).HasColumnName("bdgbudgetinfoid");

                entity.Property(e => e.Bdgdepartment)
                    .HasMaxLength(50)
                    .HasColumnName("BDGDepartment");

                entity.Property(e => e.Bdgdepartmentid).HasColumnName("BDGDepartmentid");

                entity.Property(e => e.Enddate)
                    .HasColumnType("date")
                    .HasColumnName("enddate");

                entity.Property(e => e.Startdate)
                    .HasColumnType("date")
                    .HasColumnName("startdate");

                entity.Property(e => e.Yearsetupid).HasColumnName("yearsetupid");
            });

            modelBuilder.Entity<BdgbudgetinfoMonth11>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("bdgbudgetinfo_month11");

                entity.Property(e => e.Amount).HasColumnName("amount");

                entity.Property(e => e.Bdgaccountgroup)
                    .HasMaxLength(50)
                    .HasColumnName("bdgaccountgroup");

                entity.Property(e => e.Bdgaccountgroupid).HasColumnName("bdgaccountgroupid");

                entity.Property(e => e.Bdgbudgetinfoid).HasColumnName("bdgbudgetinfoid");

                entity.Property(e => e.Bdgdepartment)
                    .HasMaxLength(50)
                    .HasColumnName("BDGDepartment");

                entity.Property(e => e.Bdgdepartmentid).HasColumnName("BDGDepartmentid");

                entity.Property(e => e.Enddate)
                    .HasColumnType("date")
                    .HasColumnName("enddate");

                entity.Property(e => e.Startdate)
                    .HasColumnType("date")
                    .HasColumnName("startdate");

                entity.Property(e => e.Yearsetupid).HasColumnName("yearsetupid");
            });

            modelBuilder.Entity<BdgbudgetinfoMonth12>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("bdgbudgetinfo_month12");

                entity.Property(e => e.Amount).HasColumnName("amount");

                entity.Property(e => e.Bdgaccountgroup)
                    .HasMaxLength(50)
                    .HasColumnName("bdgaccountgroup");

                entity.Property(e => e.Bdgaccountgroupid).HasColumnName("bdgaccountgroupid");

                entity.Property(e => e.Bdgbudgetinfoid).HasColumnName("bdgbudgetinfoid");

                entity.Property(e => e.Bdgdepartment)
                    .HasMaxLength(50)
                    .HasColumnName("BDGDepartment");

                entity.Property(e => e.Bdgdepartmentid).HasColumnName("BDGDepartmentid");

                entity.Property(e => e.Enddate)
                    .HasColumnType("date")
                    .HasColumnName("enddate");

                entity.Property(e => e.Startdate)
                    .HasColumnType("date")
                    .HasColumnName("startdate");

                entity.Property(e => e.Yearsetupid).HasColumnName("yearsetupid");
            });

            modelBuilder.Entity<BdgcommitteeType>(entity =>
            {
                entity.HasKey(e => e.ObjectUid);

                entity.ToTable("BDGCommitteeType");

                entity.Property(e => e.ObjectUid)
                    .HasColumnName("ObjectUID")
                    .HasDefaultValueSql("(newid())");

                entity.Property(e => e.BdgcompanyId).HasColumnName("BDGCompanyID");

                entity.Property(e => e.CreatedBy).HasMaxLength(50);

                entity.Property(e => e.CreatedOn)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Description).HasMaxLength(2000);

                entity.Property(e => e.Display)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasComputedColumnSql("([Name])", false);

                entity.Property(e => e.ImportedObjectUid)
                    .HasMaxLength(50)
                    .HasColumnName("ImportedObjectUID");

                entity.Property(e => e.InstallationUid).HasColumnName("InstallationUID");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.NameAlias)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.OldRecordId).HasColumnName("OldRecordID");

                entity.Property(e => e.RecordId)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("RecordID");

                entity.Property(e => e.SortOrder).HasDefaultValueSql("((100))");

                entity.Property(e => e.UpdatedBy).HasMaxLength(50);

                entity.Property(e => e.UpdatedOn).HasColumnType("datetime");

                entity.HasOne(d => d.Bdgcompany)
                    .WithMany(p => p.BdgcommitteeTypes)
                    .HasForeignKey(d => d.BdgcompanyId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_BDGCommitteeType_BDGCompanyID_BDGCompany");
            });

            modelBuilder.Entity<BdgcommitteeTypeGrid>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("BDGCommitteeTypeGrid");

                entity.Property(e => e.BdgcompanyId).HasColumnName("BDGCompanyID");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.ObjectUid).HasColumnName("ObjectUID");
            });

            modelBuilder.Entity<Bdgcompany>(entity =>
            {
                entity.HasKey(e => e.ObjectUid);

                entity.ToTable("BDGCompany");

                entity.Property(e => e.ObjectUid)
                    .HasColumnName("ObjectUID")
                    .HasDefaultValueSql("(newid())");

                entity.Property(e => e.AddressLineI).HasMaxLength(100);

                entity.Property(e => e.AddressLineIi)
                    .HasMaxLength(100)
                    .HasColumnName("AddressLineII");

                entity.Property(e => e.AddressLineIii)
                    .HasMaxLength(100)
                    .HasColumnName("AddressLineIII");

                entity.Property(e => e.City).HasMaxLength(50);

                entity.Property(e => e.CountryId).HasColumnName("CountryID");

                entity.Property(e => e.CountryStateId).HasColumnName("Country_StateID");

                entity.Property(e => e.CreatedBy).HasMaxLength(50);

                entity.Property(e => e.CreatedOn)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Description).HasMaxLength(2000);

                entity.Property(e => e.Display)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasComputedColumnSql("([Name])", false);

                entity.Property(e => e.ImportedObjectUid)
                    .HasMaxLength(50)
                    .HasColumnName("ImportedObjectUID");

                entity.Property(e => e.InstallationUid).HasColumnName("InstallationUID");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.NameAlias)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.OldRecordId).HasColumnName("OldRecordID");

                entity.Property(e => e.ParentBdgcompanyId).HasColumnName("Parent_BDGCompanyID");

                entity.Property(e => e.Phone).HasMaxLength(20);

                entity.Property(e => e.PostalCode).HasMaxLength(20);

                entity.Property(e => e.RecordId)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("RecordID");

                entity.Property(e => e.SortOrder).HasDefaultValueSql("((100))");

                entity.Property(e => e.UpdatedBy).HasMaxLength(50);

                entity.Property(e => e.UpdatedOn).HasColumnType("datetime");

                entity.HasOne(d => d.Country)
                    .WithMany(p => p.Bdgcompanies)
                    .HasForeignKey(d => d.CountryId)
                    .HasConstraintName("FK_BDGCompany_CountryID_Country");

                entity.HasOne(d => d.CountryState)
                    .WithMany(p => p.Bdgcompanies)
                    .HasForeignKey(d => d.CountryStateId)
                    .HasConstraintName("FK_BDGCompany_Country_StateID_Country_State");

                entity.HasOne(d => d.ParentBdgcompany)
                    .WithMany(p => p.InverseParentBdgcompany)
                    .HasForeignKey(d => d.ParentBdgcompanyId)
                    .HasConstraintName("FK_BDGCompany_Parent_BDGCompanyID_BDGCompany");
            });

            modelBuilder.Entity<BdgcompanyGrid>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("BDGCompanyGrid");

                entity.Property(e => e.AddressLineI).HasMaxLength(100);

                entity.Property(e => e.AddressLineIi)
                    .HasMaxLength(100)
                    .HasColumnName("AddressLineII");

                entity.Property(e => e.AddressLineIii)
                    .HasMaxLength(100)
                    .HasColumnName("AddressLineIII");

                entity.Property(e => e.City).HasMaxLength(50);

                entity.Property(e => e.Country).HasMaxLength(50);

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.ObjectUid).HasColumnName("ObjectUID");

                entity.Property(e => e.ParentCompany).HasMaxLength(50);

                entity.Property(e => e.Phone).HasMaxLength(20);

                entity.Property(e => e.PostalCode).HasMaxLength(20);

                entity.Property(e => e.State).HasMaxLength(50);
            });

            modelBuilder.Entity<Bdgdepartment>(entity =>
            {
                entity.HasKey(e => e.ObjectUid);

                entity.ToTable("BDGDepartment");

                entity.Property(e => e.ObjectUid)
                    .HasColumnName("ObjectUID")
                    .HasDefaultValueSql("(newid())");

                entity.Property(e => e.BdgcompanyId).HasColumnName("BDGCompanyID");

                entity.Property(e => e.BdgdepartmentGroupId).HasColumnName("BDGDepartmentGroupID");

                entity.Property(e => e.CreatedBy).HasMaxLength(50);

                entity.Property(e => e.CreatedOn)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Description).HasMaxLength(2000);

                entity.Property(e => e.Display)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasComputedColumnSql("([name])", false);

                entity.Property(e => e.ImportedObjectUid)
                    .HasMaxLength(50)
                    .HasColumnName("ImportedObjectUID");

                entity.Property(e => e.InstallationUid).HasColumnName("InstallationUID");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.NameAlias).HasMaxLength(50);

                entity.Property(e => e.Number).HasMaxLength(50);

                entity.Property(e => e.OldRecordId).HasColumnName("OldRecordID");

                entity.Property(e => e.RecordId)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("RecordID");

                entity.Property(e => e.SortOrder).HasDefaultValueSql("((100))");

                entity.Property(e => e.UpdatedBy).HasMaxLength(50);

                entity.Property(e => e.UpdatedOn).HasColumnType("datetime");

                entity.HasOne(d => d.Bdgcompany)
                    .WithMany(p => p.Bdgdepartments)
                    .HasForeignKey(d => d.BdgcompanyId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_BDGDepartment_BDGCompanyID_BDGCompany");

                entity.HasOne(d => d.BdgdepartmentGroup)
                    .WithMany(p => p.Bdgdepartments)
                    .HasForeignKey(d => d.BdgdepartmentGroupId)
                    .HasConstraintName("FK_BDGDepartment_BDGDepartmentGroupID_BDGDepartmentGroup");
            });

            modelBuilder.Entity<BdgdepartmentBdgaccountGroup>(entity =>
            {
                entity.HasKey(e => e.ObjectUid);

                entity.ToTable("BDGDepartment_BDGAccountGroup");

                entity.Property(e => e.ObjectUid)
                    .HasColumnName("ObjectUID")
                    .HasDefaultValueSql("(newid())");

                entity.Property(e => e.BdgaccountGroupId).HasColumnName("BDGAccountGroupID");

                entity.Property(e => e.BdgdepartmentId).HasColumnName("BDGDepartmentID");

                entity.Property(e => e.BdgreportGroupTypeId).HasColumnName("BDGReportGroupTypeID");

                entity.Property(e => e.CreatedBy).HasMaxLength(50);

                entity.Property(e => e.CreatedOn)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Description).HasMaxLength(2000);

                entity.Property(e => e.Display)
                    .HasMaxLength(101)
                    .HasComputedColumnSql("(([dbo].[GetBDGDepartmentname]([BDGDepartmentID])+'-')+[dbo].[GetBDGAccountGroupName]([BDGAccountGroupID]))", false);

                entity.Property(e => e.ImportedObjectUid)
                    .HasMaxLength(50)
                    .HasColumnName("ImportedObjectUID");

                entity.Property(e => e.InstallationUid).HasColumnName("InstallationUID");

                entity.Property(e => e.Name).HasMaxLength(50);

                entity.Property(e => e.NameAlias).HasMaxLength(50);

                entity.Property(e => e.OldRecordId).HasColumnName("OldRecordID");

                entity.Property(e => e.RecordId)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("RecordID");

                entity.Property(e => e.SortOrder).HasDefaultValueSql("((100))");

                entity.Property(e => e.UpdatedBy).HasMaxLength(50);

                entity.Property(e => e.UpdatedOn).HasColumnType("datetime");

                entity.HasOne(d => d.BdgaccountGroup)
                    .WithMany(p => p.BdgdepartmentBdgaccountGroups)
                    .HasForeignKey(d => d.BdgaccountGroupId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_BDGDepartment_BDGAccountGroup_BDGAccountGroup");

                entity.HasOne(d => d.Bdgdepartment)
                    .WithMany(p => p.BdgdepartmentBdgaccountGroups)
                    .HasForeignKey(d => d.BdgdepartmentId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_BDGDepartment_BDGAccountGroup_BDGDepartment");

                entity.HasOne(d => d.BdgreportGroupType)
                    .WithMany(p => p.BdgdepartmentBdgaccountGroups)
                    .HasForeignKey(d => d.BdgreportGroupTypeId)
                    .HasConstraintName("FK_BDGDepartment_BDGAccountGroup_BDGReportGroupTypeID_BDGReportGroupType");
            });

            modelBuilder.Entity<BdgdepartmentBdgaccountGroupGrid>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("BDGDepartment_BDGAccountGroupGrid");

                entity.Property(e => e.AccountGroup)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.BdgdepartmentId).HasColumnName("BDGDepartmentID");

                entity.Property(e => e.ObjectUid).HasColumnName("ObjectUID");
            });

            modelBuilder.Entity<BdgdepartmentGrid>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("BDGDepartmentGrid");

                entity.Property(e => e.BdgcompanyId).HasColumnName("BDGCompanyID");

                entity.Property(e => e.DepartmentGroup).HasMaxLength(50);

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Number).HasMaxLength(50);

                entity.Property(e => e.ObjectUid).HasColumnName("ObjectUID");
            });

            modelBuilder.Entity<BdgdepartmentGroup>(entity =>
            {
                entity.HasKey(e => e.ObjectUid);

                entity.ToTable("BDGDepartmentGroup");

                entity.Property(e => e.ObjectUid)
                    .HasColumnName("ObjectUID")
                    .HasDefaultValueSql("(newid())");

                entity.Property(e => e.BdgcompanyId).HasColumnName("BDGCompanyID");

                entity.Property(e => e.CreatedBy).HasMaxLength(50);

                entity.Property(e => e.CreatedOn)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Description).HasMaxLength(2000);

                entity.Property(e => e.Display)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasComputedColumnSql("([Name])", false);

                entity.Property(e => e.ImportedObjectUid)
                    .HasMaxLength(50)
                    .HasColumnName("ImportedObjectUID");

                entity.Property(e => e.InstallationUid).HasColumnName("InstallationUID");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.NameAlias)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.OldRecordId).HasColumnName("OldRecordID");

                entity.Property(e => e.RecordId)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("RecordID");

                entity.Property(e => e.SortOrder).HasDefaultValueSql("((100))");

                entity.Property(e => e.UpdatedBy).HasMaxLength(50);

                entity.Property(e => e.UpdatedOn).HasColumnType("datetime");

                entity.HasOne(d => d.Bdgcompany)
                    .WithMany(p => p.BdgdepartmentGroups)
                    .HasForeignKey(d => d.BdgcompanyId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_BDGDepartmentGroup_BDGCompanyID_BDGCompany");
            });

            modelBuilder.Entity<BdgdepartmentGroupGrid>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("BDGDepartmentGroupGrid");

                entity.Property(e => e.BdgcompanyId).HasColumnName("BDGCompanyID");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.ObjectUid).HasColumnName("ObjectUID");
            });

            modelBuilder.Entity<BdgdepartmentHistoricDataGrid>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("BDGDepartment_HistoricDataGrid");

                entity.Property(e => e.BdgaccountGroup)
                    .HasMaxLength(50)
                    .HasColumnName("BDGAccountGroup");

                entity.Property(e => e.BdgbudgetGroupType)
                    .HasMaxLength(50)
                    .HasColumnName("BDGBudgetGroupType");

                entity.Property(e => e.BdgdepartmentId).HasColumnName("BDGDepartmentID");

                entity.Property(e => e.BdgreportGroupType)
                    .HasMaxLength(50)
                    .HasColumnName("BDGReportGroupType");

                entity.Property(e => e.BudgetAmount).HasColumnType("money");

                entity.Property(e => e.ObjectUid).HasColumnName("ObjectUID");

                entity.Property(e => e.ProposedBudgetAmount).HasColumnType("money");

                entity.Property(e => e.YearSetup)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.YtdactualAmount)
                    .HasColumnType("money")
                    .HasColumnName("YTDActualAmount");

                entity.Property(e => e.YtdprojectedAmount)
                    .HasColumnType("money")
                    .HasColumnName("YTDProjectedAmount");
            });

            modelBuilder.Entity<BdgdepartmentHistoricDatum>(entity =>
            {
                entity.HasKey(e => e.ObjectUid);

                entity.ToTable("BDGDepartment_HistoricData");

                entity.Property(e => e.ObjectUid)
                    .HasColumnName("ObjectUID")
                    .HasDefaultValueSql("(newid())");

                entity.Property(e => e.BdgaccountGroupId).HasColumnName("BDGAccountGroupID");

                entity.Property(e => e.BdgbudgetGroupTypeId).HasColumnName("BDGBudgetGroupTypeID");

                entity.Property(e => e.BdgdepartmentId).HasColumnName("BDGDepartmentID");

                entity.Property(e => e.BdgreportGroupTypeId).HasColumnName("BDGReportGroupTypeID");

                entity.Property(e => e.BudgetAmount)
                    .HasColumnType("money")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.CreatedBy).HasMaxLength(50);

                entity.Property(e => e.CreatedOn)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Description).HasMaxLength(2000);

                entity.Property(e => e.Display)
                    .HasMaxLength(50)
                    .HasComputedColumnSql("([Name])", false);

                entity.Property(e => e.ImportedObjectUid)
                    .HasMaxLength(50)
                    .HasColumnName("ImportedObjectUID");

                entity.Property(e => e.InstallationUid).HasColumnName("InstallationUID");

                entity.Property(e => e.Name).HasMaxLength(50);

                entity.Property(e => e.NameAlias).HasMaxLength(50);

                entity.Property(e => e.OldRecordId).HasColumnName("OldRecordID");

                entity.Property(e => e.ProposedBudgetAmount)
                    .HasColumnType("money")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.RecordId)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("RecordID");

                entity.Property(e => e.SortOrder).HasDefaultValueSql("((100))");

                entity.Property(e => e.UpdatedBy).HasMaxLength(50);

                entity.Property(e => e.UpdatedOn).HasColumnType("datetime");

                entity.Property(e => e.YearSetupId).HasColumnName("YearSetupID");

                entity.Property(e => e.YtdactualAmount)
                    .HasColumnType("money")
                    .HasColumnName("YTDActualAmount")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.YtdprojectedAmount)
                    .HasColumnType("money")
                    .HasColumnName("YTDProjectedAmount")
                    .HasDefaultValueSql("((0))");

                entity.HasOne(d => d.BdgaccountGroup)
                    .WithMany(p => p.BdgdepartmentHistoricData)
                    .HasForeignKey(d => d.BdgaccountGroupId)
                    .HasConstraintName("FK_BDGDepartment_HistoricData_BDGAccountGroup");

                entity.HasOne(d => d.BdgbudgetGroupType)
                    .WithMany(p => p.BdgdepartmentHistoricData)
                    .HasForeignKey(d => d.BdgbudgetGroupTypeId)
                    .HasConstraintName("FK_BDGDepartment_HistoricData_BDGBudgetGroupType");

                entity.HasOne(d => d.Bdgdepartment)
                    .WithMany(p => p.BdgdepartmentHistoricData)
                    .HasForeignKey(d => d.BdgdepartmentId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_BDGDepartment_HistoricData_BDGDepartment");

                entity.HasOne(d => d.BdgreportGroupType)
                    .WithMany(p => p.BdgdepartmentHistoricData)
                    .HasForeignKey(d => d.BdgreportGroupTypeId)
                    .HasConstraintName("FK_BDGDepartment_HistoricData_BDGReportGroupTypeID_BDGReportGroupType");

                entity.HasOne(d => d.YearSetup)
                    .WithMany(p => p.BdgdepartmentHistoricData)
                    .HasForeignKey(d => d.YearSetupId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_BDGDepartment_HistoricData_YearSetupID_YearSetup");
            });

            modelBuilder.Entity<Bdgemployee>(entity =>
            {
                entity.HasKey(e => e.ObjectUid);

                entity.ToTable("BDGEmployee");

                entity.Property(e => e.ObjectUid)
                    .HasColumnName("ObjectUID")
                    .HasDefaultValueSql("(newid())");

                entity.Property(e => e.AnnualSalary).HasColumnType("money");

                entity.Property(e => e.BdgcompanyId).HasColumnName("BDGCompanyID");

                entity.Property(e => e.BdgdepartmentId).HasColumnName("BDGDepartmentID");

                entity.Property(e => e.BdgemployeePositionId).HasColumnName("BDGEmployeePositionID");

                entity.Property(e => e.BdgemployeeStatusId).HasColumnName("BDGEmployeeStatusID");

                entity.Property(e => e.BdgemployeeUnitId).HasColumnName("BDGEmployeeUnitID");

                entity.Property(e => e.CreatedBy).HasMaxLength(50);

                entity.Property(e => e.CreatedOn)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Description).HasMaxLength(2000);

                entity.Property(e => e.Display)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasComputedColumnSql("([Name])", false);

                entity.Property(e => e.HireDate).HasColumnType("datetime");

                entity.Property(e => e.ImportedObjectUid)
                    .HasMaxLength(50)
                    .HasColumnName("ImportedObjectUID");

                entity.Property(e => e.InitialBudgetYear).HasMaxLength(50);

                entity.Property(e => e.InstallationUid).HasColumnName("InstallationUID");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.NameAlias)
                    .HasMaxLength(50)
                    .HasDefaultValueSql("(N'name')");

                entity.Property(e => e.Number).HasMaxLength(50);

                entity.Property(e => e.OldRecordId).HasColumnName("OldRecordID");

                entity.Property(e => e.RecordId)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("RecordID");

                entity.Property(e => e.SortOrder).HasDefaultValueSql("((100))");

                entity.Property(e => e.UpdatedBy).HasMaxLength(50);

                entity.Property(e => e.UpdatedOn).HasColumnType("datetime");

                entity.HasOne(d => d.Bdgcompany)
                    .WithMany(p => p.Bdgemployees)
                    .HasForeignKey(d => d.BdgcompanyId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_BDGEmployee_BDGCompanyID_BDGCompany");

                entity.HasOne(d => d.Bdgdepartment)
                    .WithMany(p => p.Bdgemployees)
                    .HasForeignKey(d => d.BdgdepartmentId)
                    .HasConstraintName("FK_BDGEmployee_BDGDepartmentID_BDGDepartment");

                entity.HasOne(d => d.BdgemployeePosition)
                    .WithMany(p => p.Bdgemployees)
                    .HasForeignKey(d => d.BdgemployeePositionId)
                    .HasConstraintName("FK_BDGEmployee_BDGEmployeePositionID_BDGEmployeePosition");

                entity.HasOne(d => d.BdgemployeeStatus)
                    .WithMany(p => p.Bdgemployees)
                    .HasForeignKey(d => d.BdgemployeeStatusId)
                    .HasConstraintName("FK_BDGEmployee_BDGEmployeeStatusID_BDGEmployeeStatus");

                entity.HasOne(d => d.BdgemployeeUnit)
                    .WithMany(p => p.Bdgemployees)
                    .HasForeignKey(d => d.BdgemployeeUnitId)
                    .HasConstraintName("FK_BDGEmployee_BDGEmployeeUnitID_BDGEmployeeUnit");
            });

            modelBuilder.Entity<BdgemployeeCategory>(entity =>
            {
                entity.HasKey(e => e.ObjectUid);

                entity.ToTable("BDGEmployeeCategory");

                entity.Property(e => e.ObjectUid)
                    .HasColumnName("ObjectUID")
                    .HasDefaultValueSql("(newid())");

                entity.Property(e => e.BdgcompanyId).HasColumnName("BDGCompanyID");

                entity.Property(e => e.CreatedBy).HasMaxLength(50);

                entity.Property(e => e.CreatedOn)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Description).HasMaxLength(2000);

                entity.Property(e => e.Display)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasComputedColumnSql("([Name])", false);

                entity.Property(e => e.ImportedObjectUid)
                    .HasMaxLength(50)
                    .HasColumnName("ImportedObjectUID");

                entity.Property(e => e.InstallationUid).HasColumnName("InstallationUID");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.NameAlias)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.OldRecordId).HasColumnName("OldRecordID");

                entity.Property(e => e.RecordId)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("RecordID");

                entity.Property(e => e.Salary).HasColumnType("money");

                entity.Property(e => e.SortOrder).HasDefaultValueSql("((100))");

                entity.Property(e => e.UpdatedBy).HasMaxLength(50);

                entity.Property(e => e.UpdatedOn).HasColumnType("datetime");

                entity.HasOne(d => d.Bdgcompany)
                    .WithMany(p => p.BdgemployeeCategories)
                    .HasForeignKey(d => d.BdgcompanyId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_BDGEmployeeCategory_BDGCompanyID_BDGCompany");
            });

            modelBuilder.Entity<BdgemployeeCategoryGrid>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("BDGEmployeeCategoryGrid");

                entity.Property(e => e.BdgcompanyId).HasColumnName("BDGCompanyID");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.ObjectUid).HasColumnName("ObjectUID");

                entity.Property(e => e.Salary).HasColumnType("money");
            });

            modelBuilder.Entity<BdgemployeeEmployeeHistory>(entity =>
            {
                entity.HasKey(e => e.ObjectUid);

                entity.ToTable("BDGEmployee_EmployeeHistory");

                entity.Property(e => e.ObjectUid)
                    .HasColumnName("ObjectUID")
                    .HasDefaultValueSql("(newid())");

                entity.Property(e => e.AnnualSalary).HasColumnType("money");

                entity.Property(e => e.BdgcompanyId).HasColumnName("BDGCompanyID");

                entity.Property(e => e.BdgdepartmentId).HasColumnName("BDGDepartmentID");

                entity.Property(e => e.BdgemployeeId).HasColumnName("BDGEmployeeID");

                entity.Property(e => e.BdgemployeePositionId).HasColumnName("BDGEmployeePositionID");

                entity.Property(e => e.BdgemployeeStatusId).HasColumnName("BDGEmployeeStatusID");

                entity.Property(e => e.BdgemployeeUnitId).HasColumnName("BDGEmployeeUnitID");

                entity.Property(e => e.CreatedBy).HasMaxLength(50);

                entity.Property(e => e.CreatedOn)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Description).HasMaxLength(2000);

                entity.Property(e => e.Display)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasComputedColumnSql("([Name])", false);

                entity.Property(e => e.HireDate).HasColumnType("datetime");

                entity.Property(e => e.ImportedObjectUid)
                    .HasMaxLength(50)
                    .HasColumnName("ImportedObjectUID");

                entity.Property(e => e.InitialBudgetYear).HasMaxLength(50);

                entity.Property(e => e.InstallationUid).HasColumnName("InstallationUID");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.NameAlias)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Number).HasMaxLength(50);

                entity.Property(e => e.OldRecordId).HasColumnName("OldRecordID");

                entity.Property(e => e.RecordId)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("RecordID");

                entity.Property(e => e.SortOrder).HasDefaultValueSql("((100))");

                entity.Property(e => e.UpdatedBy).HasMaxLength(50);

                entity.Property(e => e.UpdatedOn).HasColumnType("datetime");

                entity.HasOne(d => d.Bdgcompany)
                    .WithMany(p => p.BdgemployeeEmployeeHistories)
                    .HasForeignKey(d => d.BdgcompanyId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_BDGEmployee_EmployeeHistory_BDGCompanyID_BDGCompany");

                entity.HasOne(d => d.Bdgdepartment)
                    .WithMany(p => p.BdgemployeeEmployeeHistories)
                    .HasForeignKey(d => d.BdgdepartmentId)
                    .HasConstraintName("FK_BDGEmployee_EmployeeHistory_BDGDepartmentID_BDGDepartment");

                entity.HasOne(d => d.Bdgemployee)
                    .WithMany(p => p.BdgemployeeEmployeeHistories)
                    .HasForeignKey(d => d.BdgemployeeId)
                    .HasConstraintName("FK_BDGEmployee_EmployeeHistory_BDGEmployeeID_BDGEmployee");

                entity.HasOne(d => d.BdgemployeePosition)
                    .WithMany(p => p.BdgemployeeEmployeeHistories)
                    .HasForeignKey(d => d.BdgemployeePositionId)
                    .HasConstraintName("FK_BDGEmployee_EmployeeHistory_BDGEmployeePositionID_BDGEmployeePosition");

                entity.HasOne(d => d.BdgemployeeStatus)
                    .WithMany(p => p.BdgemployeeEmployeeHistories)
                    .HasForeignKey(d => d.BdgemployeeStatusId)
                    .HasConstraintName("FK_BDGEmployee_EmployeeHistory_BDGEmployeeStatusID_BDGEmployeeStatus");

                entity.HasOne(d => d.BdgemployeeUnit)
                    .WithMany(p => p.BdgemployeeEmployeeHistories)
                    .HasForeignKey(d => d.BdgemployeeUnitId)
                    .HasConstraintName("FK_BDGEmployee_EmployeeHistory_BDGEmployeeUnitID_BDGEmployeeUnit");
            });

            modelBuilder.Entity<BdgemployeeEmployeeHistoryGrid>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("BDGEmployee_EmployeeHistoryGrid");

                entity.Property(e => e.AnnualSalary)
                    .HasColumnType("money")
                    .HasColumnName("Annual Salary($)");

                entity.Property(e => e.BdgcompanyId).HasColumnName("BDGCompanyID");

                entity.Property(e => e.BdgemployeeId).HasColumnName("BDGEmployeeID");

                entity.Property(e => e.Department).HasMaxLength(50);

                entity.Property(e => e.EmployeePosition).HasMaxLength(50);

                entity.Property(e => e.EmployeeStatus).HasMaxLength(50);

                entity.Property(e => e.EmployeeUnit).HasMaxLength(50);

                entity.Property(e => e.HireDate).HasColumnType("datetime");

                entity.Property(e => e.InitialBudgetYear).HasMaxLength(50);

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Number).HasMaxLength(50);

                entity.Property(e => e.ObjectUid).HasColumnName("ObjectUID");
            });

            modelBuilder.Entity<BdgemployeeGrid>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("BDGEmployeeGrid");

                entity.Property(e => e.AnnualSalary)
                    .HasColumnType("money")
                    .HasColumnName("Annual Salary($)");

                entity.Property(e => e.BdgcompanyId).HasColumnName("BDGCompanyID");

                entity.Property(e => e.Department).HasMaxLength(50);

                entity.Property(e => e.EmployeePosition).HasMaxLength(50);

                entity.Property(e => e.EmployeeStatus).HasMaxLength(50);

                entity.Property(e => e.EmployeeUnit).HasMaxLength(50);

                entity.Property(e => e.HireDate).HasColumnType("datetime");

                entity.Property(e => e.InitialBudgetYear).HasMaxLength(50);

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Number).HasMaxLength(50);

                entity.Property(e => e.ObjectUid).HasColumnName("ObjectUID");
            });

            modelBuilder.Entity<BdgemployeeMissingBdgbdugetinfoDetailTemp>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("BDGEmployee_missing_bdgbdugetinfo_detail_temp");

                entity.Property(e => e.AnnualSalary).HasColumnType("money");

                entity.Property(e => e.BdgcompanyId).HasColumnName("BDGCompanyID");

                entity.Property(e => e.BdgdepartmentId).HasColumnName("BDGDepartmentID");

                entity.Property(e => e.BdgemployeePositionId).HasColumnName("BDGEmployeePositionID");

                entity.Property(e => e.BdgemployeeStatusId).HasColumnName("BDGEmployeeStatusID");

                entity.Property(e => e.BdgemployeeUnitId).HasColumnName("BDGEmployeeUnitID");

                entity.Property(e => e.CreatedBy).HasMaxLength(50);

                entity.Property(e => e.CreatedOn).HasColumnType("datetime");

                entity.Property(e => e.Description).HasMaxLength(2000);

                entity.Property(e => e.Display)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.HireDate).HasColumnType("datetime");

                entity.Property(e => e.ImportedObjectUid)
                    .HasMaxLength(50)
                    .HasColumnName("ImportedObjectUID");

                entity.Property(e => e.InitialBudgetYear).HasMaxLength(50);

                entity.Property(e => e.InstallationUid).HasColumnName("InstallationUID");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.NameAlias)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Number).HasMaxLength(50);

                entity.Property(e => e.ObjectUid).HasColumnName("ObjectUID");

                entity.Property(e => e.OldRecordId).HasColumnName("OldRecordID");

                entity.Property(e => e.RecordId).HasColumnName("RecordID");

                entity.Property(e => e.Test).HasColumnName("test");

                entity.Property(e => e.UpdatedBy).HasMaxLength(50);

                entity.Property(e => e.UpdatedOn).HasColumnType("datetime");
            });

            modelBuilder.Entity<BdgemployeePosition>(entity =>
            {
                entity.HasKey(e => e.ObjectUid);

                entity.ToTable("BDGEmployeePosition");

                entity.Property(e => e.ObjectUid)
                    .HasColumnName("ObjectUID")
                    .HasDefaultValueSql("(newid())");

                entity.Property(e => e.BdgcompanyId).HasColumnName("BDGCompanyID");

                entity.Property(e => e.CreatedBy).HasMaxLength(50);

                entity.Property(e => e.CreatedOn)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Description).HasMaxLength(2000);

                entity.Property(e => e.Display)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasComputedColumnSql("([Name])", false);

                entity.Property(e => e.ImportedObjectUid)
                    .HasMaxLength(50)
                    .HasColumnName("ImportedObjectUID");

                entity.Property(e => e.InstallationUid).HasColumnName("InstallationUID");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.NameAlias)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.OldRecordId).HasColumnName("OldRecordID");

                entity.Property(e => e.RecordId)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("RecordID");

                entity.Property(e => e.SortOrder).HasDefaultValueSql("((100))");

                entity.Property(e => e.UpdatedBy).HasMaxLength(50);

                entity.Property(e => e.UpdatedOn).HasColumnType("datetime");

                entity.HasOne(d => d.Bdgcompany)
                    .WithMany(p => p.BdgemployeePositions)
                    .HasForeignKey(d => d.BdgcompanyId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_BDGEmployeePosition_BDGCompanyID_BDGCompany");
            });

            modelBuilder.Entity<BdgemployeePositionGrid>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("BDGEmployeePositionGrid");

                entity.Property(e => e.BdgcompanyId).HasColumnName("BDGCompanyID");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.ObjectUid).HasColumnName("ObjectUID");
            });

            modelBuilder.Entity<BdgemployeeStatus>(entity =>
            {
                entity.HasKey(e => e.ObjectUid);

                entity.ToTable("BDGEmployeeStatus");

                entity.Property(e => e.ObjectUid)
                    .HasColumnName("ObjectUID")
                    .HasDefaultValueSql("(newid())");

                entity.Property(e => e.BdgcompanyId).HasColumnName("BDGCompanyID");

                entity.Property(e => e.CreatedBy).HasMaxLength(50);

                entity.Property(e => e.CreatedOn)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Description).HasMaxLength(2000);

                entity.Property(e => e.Display)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasComputedColumnSql("([Name])", false);

                entity.Property(e => e.ImportedObjectUid)
                    .HasMaxLength(50)
                    .HasColumnName("ImportedObjectUID");

                entity.Property(e => e.InstallationUid).HasColumnName("InstallationUID");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.NameAlias)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.OldRecordId).HasColumnName("OldRecordID");

                entity.Property(e => e.RecordId)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("RecordID");

                entity.Property(e => e.SortOrder).HasDefaultValueSql("((100))");

                entity.Property(e => e.UpdatedBy).HasMaxLength(50);

                entity.Property(e => e.UpdatedOn).HasColumnType("datetime");

                entity.HasOne(d => d.Bdgcompany)
                    .WithMany(p => p.BdgemployeeStatuses)
                    .HasForeignKey(d => d.BdgcompanyId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_BDGEmployeeStatus_BDGCompanyID_BDGCompany");
            });

            modelBuilder.Entity<BdgemployeeStatusGrid>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("BDGEmployeeStatusGrid");

                entity.Property(e => e.BdgcompanyId).HasColumnName("BDGCompanyID");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.ObjectUid).HasColumnName("ObjectUID");
            });

            modelBuilder.Entity<BdgemployeeTemp>(entity =>
            {
                entity.HasKey(e => e.ObjectUid);

                entity.ToTable("BDGEmployeeTemp");

                entity.Property(e => e.ObjectUid)
                    .HasColumnName("ObjectUID")
                    .HasDefaultValueSql("(newid())");

                entity.Property(e => e.AnnualSalary).HasColumnType("money");

                entity.Property(e => e.Bdgcompany)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnName("BDGCompany");

                entity.Property(e => e.BdgcompanyId).HasColumnName("BDGCompanyID");

                entity.Property(e => e.Bdgdepartment)
                    .HasMaxLength(50)
                    .HasColumnName("BDGDepartment");

                entity.Property(e => e.BdgdepartmentId).HasColumnName("BDGDepartmentID");

                entity.Property(e => e.BdgemployeePosition)
                    .HasMaxLength(50)
                    .HasColumnName("BDGEmployeePosition");

                entity.Property(e => e.BdgemployeePositionId).HasColumnName("BDGEmployeePositionID");

                entity.Property(e => e.BdgemployeeStatus)
                    .HasMaxLength(50)
                    .HasColumnName("BDGEmployeeStatus");

                entity.Property(e => e.BdgemployeeStatusId).HasColumnName("BDGEmployeeStatusID");

                entity.Property(e => e.BdgemployeeUnit)
                    .HasMaxLength(50)
                    .HasColumnName("BDGEmployeeUnit");

                entity.Property(e => e.BdgemployeeUnitId).HasColumnName("BDGEmployeeUnitID");

                entity.Property(e => e.CreatedBy).HasMaxLength(50);

                entity.Property(e => e.CreatedOn)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Description).HasMaxLength(2000);

                entity.Property(e => e.Display)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasComputedColumnSql("([Name])", false);

                entity.Property(e => e.HireDate).HasColumnType("datetime");

                entity.Property(e => e.ImportedObjectUid)
                    .HasMaxLength(50)
                    .HasColumnName("ImportedObjectUID");

                entity.Property(e => e.InitialBudgetYear).HasMaxLength(50);

                entity.Property(e => e.InstallationUid).HasColumnName("InstallationUID");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.NameAlias).HasMaxLength(50);

                entity.Property(e => e.Number).HasMaxLength(50);

                entity.Property(e => e.OldRecordId).HasColumnName("OldRecordID");

                entity.Property(e => e.RecordId)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("RecordID");

                entity.Property(e => e.SortOrder).HasDefaultValueSql("((100))");

                entity.Property(e => e.UpdatedBy).HasMaxLength(50);

                entity.Property(e => e.UpdatedOn).HasColumnType("datetime");

                entity.Property(e => e.UploadFileId).HasColumnName("UploadFileID");
            });

            modelBuilder.Entity<BdgemployeeType>(entity =>
            {
                entity.HasKey(e => e.ObjectUid);

                entity.ToTable("BDGEmployeeType");

                entity.Property(e => e.ObjectUid)
                    .HasColumnName("ObjectUID")
                    .HasDefaultValueSql("(newid())");

                entity.Property(e => e.AdditiveFactor).HasColumnType("money");

                entity.Property(e => e.BdgcompanyId).HasColumnName("BDGCompanyID");

                entity.Property(e => e.CreatedBy).HasMaxLength(50);

                entity.Property(e => e.CreatedOn)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Description).HasMaxLength(2000);

                entity.Property(e => e.Display)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasComputedColumnSql("([Name])", false);

                entity.Property(e => e.ImportedObjectUid)
                    .HasMaxLength(50)
                    .HasColumnName("ImportedObjectUID");

                entity.Property(e => e.InstallationUid).HasColumnName("InstallationUID");

                entity.Property(e => e.MultiplicativeFactor)
                    .HasColumnType("decimal(11, 2)")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.NameAlias)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.OldRecordId).HasColumnName("OldRecordID");

                entity.Property(e => e.RecordId)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("RecordID");

                entity.Property(e => e.SortOrder).HasDefaultValueSql("((100))");

                entity.Property(e => e.UpdatedBy).HasMaxLength(50);

                entity.Property(e => e.UpdatedOn).HasColumnType("datetime");

                entity.HasOne(d => d.Bdgcompany)
                    .WithMany(p => p.BdgemployeeTypes)
                    .HasForeignKey(d => d.BdgcompanyId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_BDGEmployeeType_BDGCompanyID_BDGCompany");
            });

            modelBuilder.Entity<BdgemployeeTypeGrid>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("BDGEmployeeTypeGrid");

                entity.Property(e => e.AdditiveFactor).HasColumnType("money");

                entity.Property(e => e.BdgcompanyId).HasColumnName("BDGCompanyID");

                entity.Property(e => e.MultiplicativeFactor).HasColumnType("decimal(11, 2)");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.ObjectUid).HasColumnName("ObjectUID");
            });

            modelBuilder.Entity<BdgemployeeUnit>(entity =>
            {
                entity.HasKey(e => e.ObjectUid);

                entity.ToTable("BDGEmployeeUnit");

                entity.Property(e => e.ObjectUid)
                    .HasColumnName("ObjectUID")
                    .HasDefaultValueSql("(newid())");

                entity.Property(e => e.BdgcompanyId).HasColumnName("BDGCompanyID");

                entity.Property(e => e.CreatedBy).HasMaxLength(50);

                entity.Property(e => e.CreatedOn)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Description).HasMaxLength(2000);

                entity.Property(e => e.Display)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasComputedColumnSql("([Name])", false);

                entity.Property(e => e.EffectiveSalaryMonthId).HasColumnName("EffectiveSalary_MonthID");

                entity.Property(e => e.ImportedObjectUid)
                    .HasMaxLength(50)
                    .HasColumnName("ImportedObjectUID");

                entity.Property(e => e.InstallationUid).HasColumnName("InstallationUID");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.NameAlias)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.NextYearProposedBudgetFactor).HasColumnType("decimal(10, 2)");

                entity.Property(e => e.OldRecordId).HasColumnName("OldRecordID");

                entity.Property(e => e.ProposedBudgetFactor).HasColumnType("decimal(10, 2)");

                entity.Property(e => e.RecordId)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("RecordID");

                entity.Property(e => e.SortOrder).HasDefaultValueSql("((100))");

                entity.Property(e => e.UpdatedBy).HasMaxLength(50);

                entity.Property(e => e.UpdatedOn).HasColumnType("datetime");

                entity.HasOne(d => d.Bdgcompany)
                    .WithMany(p => p.BdgemployeeUnits)
                    .HasForeignKey(d => d.BdgcompanyId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_BDGEmployeeUnit_BDGCompanyID_BDGCompany");

                entity.HasOne(d => d.EffectiveSalaryMonth)
                    .WithMany(p => p.BdgemployeeUnits)
                    .HasForeignKey(d => d.EffectiveSalaryMonthId)
                    .HasConstraintName("FK_BDGEmployeeUnit_EffectiveSalary_MonthID_Month");
            });

            modelBuilder.Entity<BdgemployeeUnitGrid>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("BDGEmployeeUnitGrid");

                entity.Property(e => e.BdgcompanyId).HasColumnName("BDGCompanyID");

                entity.Property(e => e.EffectiveSalaryMonth)
                    .HasMaxLength(50)
                    .HasColumnName("EffectiveSalary_Month");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.ObjectUid).HasColumnName("ObjectUID");

                entity.Property(e => e.ProposedBudgetFactor).HasColumnType("decimal(10, 2)");
            });

            modelBuilder.Entity<BdgemployeeUnitPosition>(entity =>
            {
                entity.HasKey(e => e.ObjectUid);

                entity.ToTable("BDGEmployeeUnit_Position");

                entity.Property(e => e.ObjectUid)
                    .HasColumnName("ObjectUID")
                    .HasDefaultValueSql("(newid())");

                entity.Property(e => e.BdgemployeeUnitId).HasColumnName("BDGEmployeeUnitID");

                entity.Property(e => e.CreatedBy).HasMaxLength(50);

                entity.Property(e => e.CreatedOn)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Description).HasMaxLength(2000);

                entity.Property(e => e.Display)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasComputedColumnSql("([Name])", false);

                entity.Property(e => e.ImportedObjectUid)
                    .HasMaxLength(50)
                    .HasColumnName("ImportedObjectUID");

                entity.Property(e => e.InstallationUid).HasColumnName("InstallationUID");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.NameAlias)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.OldRecordId).HasColumnName("OldRecordID");

                entity.Property(e => e.RecordId)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("RecordID");

                entity.Property(e => e.SortOrder).HasDefaultValueSql("((100))");

                entity.Property(e => e.UpdatedBy).HasMaxLength(50);

                entity.Property(e => e.UpdatedOn).HasColumnType("datetime");

                entity.HasOne(d => d.BdgemployeeUnit)
                    .WithMany(p => p.BdgemployeeUnitPositions)
                    .HasForeignKey(d => d.BdgemployeeUnitId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_BDGEmployeeUnit_Position_BDGEmployeeUnitID_BDGEmployeeUnit");
            });

            modelBuilder.Entity<BdgemployeeUnitPositionGrid>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("BDGEmployeeUnit_PositionGrid");

                entity.Property(e => e.BdgemployeeUnitId).HasColumnName("BDGEmployeeUnitID");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.ObjectUid).HasColumnName("ObjectUID");
            });

            modelBuilder.Entity<BdgemployeeUnitPositionStep>(entity =>
            {
                entity.HasKey(e => e.ObjectUid);

                entity.ToTable("BDGEmployeeUnit_Position_Step");

                entity.Property(e => e.ObjectUid)
                    .HasColumnName("ObjectUID")
                    .HasDefaultValueSql("(newid())");

                entity.Property(e => e.BdgemployeeUnitPositionId).HasColumnName("BDGEmployeeUnit_PositionID");

                entity.Property(e => e.BdgpositionTypeId).HasColumnName("BDGPositionTypeID");

                entity.Property(e => e.CreatedBy).HasMaxLength(50);

                entity.Property(e => e.CreatedOn)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.CurrentYearSalary)
                    .HasColumnType("money")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Description).HasMaxLength(2000);

                entity.Property(e => e.Display)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasComputedColumnSql("([Name])", false);

                entity.Property(e => e.ImportedObjectUid)
                    .HasMaxLength(50)
                    .HasColumnName("ImportedObjectUID");

                entity.Property(e => e.InstallationUid).HasColumnName("InstallationUID");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.NameAlias)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.OldRecordId).HasColumnName("OldRecordID");

                entity.Property(e => e.PreviousYearSalary)
                    .HasColumnType("money")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.RecordId)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("RecordID");

                entity.Property(e => e.Salary)
                    .HasColumnType("money")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.SortOrder).HasDefaultValueSql("((100))");

                entity.Property(e => e.UpdatedBy).HasMaxLength(50);

                entity.Property(e => e.UpdatedOn).HasColumnType("datetime");

                entity.HasOne(d => d.BdgemployeeUnitPosition)
                    .WithMany(p => p.BdgemployeeUnitPositionSteps)
                    .HasForeignKey(d => d.BdgemployeeUnitPositionId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_BDGEmployeeUnit_Position_Step_BDGEmployeeUnit_PositionID_BDGEmployeeUnit_Position");

                entity.HasOne(d => d.BdgpositionType)
                    .WithMany(p => p.BdgemployeeUnitPositionSteps)
                    .HasForeignKey(d => d.BdgpositionTypeId)
                    .HasConstraintName("FK_BDGEmployeeUnit_Position_Step_BDGPositionTypeID_BDGPositionType");
            });

            modelBuilder.Entity<BdgemployeeUnitPositionStepEditableGrid>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("BDGEmployeeUnit_Position_StepEditableGrid");

                entity.Property(e => e.BdgcompanyId).HasColumnName("BDGCompanyID");

                entity.Property(e => e.CurrentYearSalary).HasColumnType("money");

                entity.Property(e => e.ObjectUid).HasColumnName("ObjectUID");

                entity.Property(e => e.Position)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.PreviousYearSalary).HasColumnType("money");

                entity.Property(e => e.Step)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Unit)
                    .IsRequired()
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<BdgemployeeUnitPositionStepGrid>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("BDGEmployeeUnit_Position_StepGrid");

                entity.Property(e => e.BdgemployeeUnitPositionId).HasColumnName("BDGEmployeeUnit_PositionID");

                entity.Property(e => e.CurrentYearSalary)
                    .HasColumnType("money")
                    .HasColumnName("Current Year Salary($)");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.ObjectUid).HasColumnName("ObjectUID");

                entity.Property(e => e.PositionType).HasMaxLength(50);

                entity.Property(e => e.PreviousYearSalary)
                    .HasColumnType("money")
                    .HasColumnName("Previous Year Salary($)");

                entity.Property(e => e.Salary)
                    .HasColumnType("money")
                    .HasColumnName("Salary($)");
            });

            modelBuilder.Entity<BdgglaccountMapping>(entity =>
            {
                entity.HasKey(e => e.ObjectUid);

                entity.ToTable("BDGGLAccountMapping");

                entity.HasIndex(e => e.MaskedAccountNo, "IDX_MaskedAccountNo")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.ObjectUid)
                    .HasColumnName("ObjectUID")
                    .HasDefaultValueSql("(newid())");

                entity.Property(e => e.AccountNo)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Amount).HasColumnType("money");

                entity.Property(e => e.BdgaccountGroupId).HasColumnName("BDGAccountGroupID");

                entity.Property(e => e.BdgaccountGroupSubGroupId).HasColumnName("BDGAccountGroup_SubGroupID");

                entity.Property(e => e.BdgcompanyId).HasColumnName("BDGCompanyID");

                entity.Property(e => e.BdgdepartmentId).HasColumnName("BDGDepartmentID");

                entity.Property(e => e.CreatedBy).HasMaxLength(50);

                entity.Property(e => e.CreatedOn)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Description).HasMaxLength(2000);

                entity.Property(e => e.Display)
                    .HasMaxLength(50)
                    .HasComputedColumnSql("([Name])", false);

                entity.Property(e => e.ImportedObjectUid)
                    .HasMaxLength(50)
                    .HasColumnName("ImportedObjectUID");

                entity.Property(e => e.InstallationUid).HasColumnName("InstallationUID");

                entity.Property(e => e.MaskedAccountNo).HasMaxLength(50);

                entity.Property(e => e.Name).HasMaxLength(50);

                entity.Property(e => e.NameAlias).HasMaxLength(50);

                entity.Property(e => e.OldRecordId).HasColumnName("OldRecordID");

                entity.Property(e => e.RecordId)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("RecordID");

                entity.Property(e => e.SortOrder).HasDefaultValueSql("((100))");

                entity.Property(e => e.UpdatedBy).HasMaxLength(50);

                entity.Property(e => e.UpdatedOn).HasColumnType("datetime");

                entity.HasOne(d => d.BdgaccountGroup)
                    .WithMany(p => p.BdgglaccountMappings)
                    .HasForeignKey(d => d.BdgaccountGroupId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_BDGGLAccountMapping_BDGAccountGroupID_BDGAccountGroup");

                entity.HasOne(d => d.BdgaccountGroupSubGroup)
                    .WithMany(p => p.BdgglaccountMappings)
                    .HasForeignKey(d => d.BdgaccountGroupSubGroupId)
                    .HasConstraintName("FK_BDGGLAccountMapping_BDGAccountGroup_SubGroupID_BDGAccountGroup_SubGroup");

                entity.HasOne(d => d.Bdgcompany)
                    .WithMany(p => p.BdgglaccountMappings)
                    .HasForeignKey(d => d.BdgcompanyId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_BDGGLAccountMapping_BDGCompanyID_BDGCompany");

                entity.HasOne(d => d.Bdgdepartment)
                    .WithMany(p => p.BdgglaccountMappings)
                    .HasForeignKey(d => d.BdgdepartmentId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_BDGGLAccountMapping_BDGDepartmentID_BDGDepartment");
            });

            modelBuilder.Entity<Bdggltransaction>(entity =>
            {
                entity.HasKey(e => e.ObjectUid);

                entity.ToTable("BDGGLTransaction");

                entity.HasIndex(e => e.TransactionAccount, "IDX_TransactionAccount")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.ObjectUid)
                    .HasColumnName("ObjectUID")
                    .HasDefaultValueSql("(newid())");

                entity.Property(e => e.ApplyFromDocumentNo).HasMaxLength(50);

                entity.Property(e => e.ApplyToDocmentNo).HasMaxLength(50);

                entity.Property(e => e.BdgcompanyId)
                    .HasColumnName("BDGCompanyID")
                    .HasDefaultValueSql("('ce61b2c7-8923-45b5-ba73-21aad1a58f52')");

                entity.Property(e => e.CreatedBy).HasMaxLength(50);

                entity.Property(e => e.CreatedOn)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.CreditAmount).HasMaxLength(50);

                entity.Property(e => e.DebitAmount).HasColumnType("money");

                entity.Property(e => e.Description).HasMaxLength(2000);

                entity.Property(e => e.Display)
                    .HasMaxLength(50)
                    .HasComputedColumnSql("([NameAlias])", false);

                entity.Property(e => e.DocumentDate).HasColumnType("datetime");

                entity.Property(e => e.DocumentNo).HasMaxLength(50);

                entity.Property(e => e.ImportedObjectUid)
                    .HasMaxLength(50)
                    .HasColumnName("ImportedObjectUID");

                entity.Property(e => e.InstallationUid).HasColumnName("InstallationUID");

                entity.Property(e => e.JournalEntry).HasMaxLength(50);

                entity.Property(e => e.Name).HasMaxLength(50);

                entity.Property(e => e.NameAlias).HasMaxLength(50);

                entity.Property(e => e.OldRecordId).HasColumnName("OldRecordID");

                entity.Property(e => e.PostingDate).HasColumnType("datetime");

                entity.Property(e => e.RecordId)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("RecordID");

                entity.Property(e => e.ReferenceNo).HasMaxLength(50);

                entity.Property(e => e.SortOrder).HasDefaultValueSql("((100))");

                entity.Property(e => e.SourceDocument).HasMaxLength(50);

                entity.Property(e => e.TransactionAccount).HasMaxLength(50);

                entity.Property(e => e.TransactionAmount).HasColumnType("money");

                entity.Property(e => e.TransactionDate).HasColumnType("datetime");

                entity.Property(e => e.TransactionDescription).HasMaxLength(2000);

                entity.Property(e => e.TransactionMonth).HasMaxLength(50);

                entity.Property(e => e.TransactionYear).HasMaxLength(50);

                entity.Property(e => e.UpdatedBy).HasMaxLength(50);

                entity.Property(e => e.UpdatedOn).HasColumnType("datetime");

                entity.Property(e => e.VendorId)
                    .HasMaxLength(50)
                    .HasColumnName("VendorID");

                entity.Property(e => e.VendorNo).HasMaxLength(50);

                entity.HasOne(d => d.Bdgcompany)
                    .WithMany(p => p.Bdggltransactions)
                    .HasForeignKey(d => d.BdgcompanyId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_BDGGLTransaction_BDGCompanyID_BDGCompany");
            });

            modelBuilder.Entity<BdggltransactionGrid>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("BDGGLTransactionGrid");

                entity.Property(e => e.BdgcompanyId).HasColumnName("BDGCompanyID");

                entity.Property(e => e.ObjectUid).HasColumnName("ObjectUID");

                entity.Property(e => e.TransactionAccount).HasMaxLength(50);

                entity.Property(e => e.TransactionAmount).HasColumnType("money");

                entity.Property(e => e.TransactionDate).HasColumnType("datetime");

                entity.Property(e => e.TransactionDescription).HasMaxLength(2000);
            });

            modelBuilder.Entity<BdgmeetingStatus>(entity =>
            {
                entity.HasKey(e => e.ObjectUid);

                entity.ToTable("BDGMeetingStatus");

                entity.Property(e => e.ObjectUid)
                    .HasColumnName("ObjectUID")
                    .HasDefaultValueSql("(newid())");

                entity.Property(e => e.BdgcompanyId).HasColumnName("BDGCompanyID");

                entity.Property(e => e.CreatedBy).HasMaxLength(50);

                entity.Property(e => e.CreatedOn)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Description).HasMaxLength(2000);

                entity.Property(e => e.Display)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasComputedColumnSql("([Name])", false);

                entity.Property(e => e.ImportedObjectUid)
                    .HasMaxLength(50)
                    .HasColumnName("ImportedObjectUID");

                entity.Property(e => e.InstallationUid).HasColumnName("InstallationUID");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.NameAlias)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.OldRecordId).HasColumnName("OldRecordID");

                entity.Property(e => e.RecordId)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("RecordID");

                entity.Property(e => e.SortOrder).HasDefaultValueSql("((100))");

                entity.Property(e => e.UpdatedBy).HasMaxLength(50);

                entity.Property(e => e.UpdatedOn).HasColumnType("datetime");

                entity.HasOne(d => d.Bdgcompany)
                    .WithMany(p => p.BdgmeetingStatuses)
                    .HasForeignKey(d => d.BdgcompanyId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_BDGMeetingStatus_BDGCompanyID_BDGCompany");
            });

            modelBuilder.Entity<BdgmeetingStatusGrid>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("BDGMeetingStatusGrid");

                entity.Property(e => e.BdgcompanyId).HasColumnName("BDGCompanyID");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.ObjectUid).HasColumnName("ObjectUID");
            });

            modelBuilder.Entity<BdgpositionType>(entity =>
            {
                entity.HasKey(e => e.ObjectUid);

                entity.ToTable("BDGPositionType");

                entity.Property(e => e.ObjectUid)
                    .HasColumnName("ObjectUID")
                    .HasDefaultValueSql("(newid())");

                entity.Property(e => e.BdgcompanyId).HasColumnName("BDGCompanyID");

                entity.Property(e => e.CreatedBy).HasMaxLength(50);

                entity.Property(e => e.CreatedOn)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Description).HasMaxLength(2000);

                entity.Property(e => e.Display)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasComputedColumnSql("([Name])", false);

                entity.Property(e => e.ImportedObjectUid)
                    .HasMaxLength(50)
                    .HasColumnName("ImportedObjectUID");

                entity.Property(e => e.InstallationUid).HasColumnName("InstallationUID");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.NameAlias)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.OldRecordId).HasColumnName("OldRecordID");

                entity.Property(e => e.RecordId)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("RecordID");

                entity.Property(e => e.SortOrder).HasDefaultValueSql("((100))");

                entity.Property(e => e.UpdatedBy).HasMaxLength(50);

                entity.Property(e => e.UpdatedOn).HasColumnType("datetime");

                entity.HasOne(d => d.Bdgcompany)
                    .WithMany(p => p.BdgpositionTypes)
                    .HasForeignKey(d => d.BdgcompanyId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_BDGPositionType_BDGCompanyID_BDGCompany");
            });

            modelBuilder.Entity<BdgpositionTypeGrid>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("BDGPositionTypeGrid");

                entity.Property(e => e.BdgcompanyId).HasColumnName("BDGCompanyID");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.ObjectUid).HasColumnName("ObjectUID");
            });

            modelBuilder.Entity<BdgprojectType>(entity =>
            {
                entity.HasKey(e => e.ObjectUid);

                entity.ToTable("BDGProjectType");

                entity.Property(e => e.ObjectUid)
                    .HasColumnName("ObjectUID")
                    .HasDefaultValueSql("(newid())");

                entity.Property(e => e.BdgcompanyId).HasColumnName("BDGCompanyID");

                entity.Property(e => e.CreatedBy).HasMaxLength(50);

                entity.Property(e => e.CreatedOn)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Description).HasMaxLength(2000);

                entity.Property(e => e.Display)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasComputedColumnSql("([Name])", false);

                entity.Property(e => e.ImportedObjectUid)
                    .HasMaxLength(50)
                    .HasColumnName("ImportedObjectUID");

                entity.Property(e => e.InstallationUid).HasColumnName("InstallationUID");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.NameAlias)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.OldRecordId).HasColumnName("OldRecordID");

                entity.Property(e => e.RecordId)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("RecordID");

                entity.Property(e => e.SortOrder).HasDefaultValueSql("((100))");

                entity.Property(e => e.UpdatedBy).HasMaxLength(50);

                entity.Property(e => e.UpdatedOn).HasColumnType("datetime");

                entity.HasOne(d => d.Bdgcompany)
                    .WithMany(p => p.BdgprojectTypes)
                    .HasForeignKey(d => d.BdgcompanyId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_BDGProjectType_BDGCompanyID_BDGCompany");
            });

            modelBuilder.Entity<BdgprojectTypeGrid>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("BDGProjectTypeGrid");

                entity.Property(e => e.Bdgcompany)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnName("BDGCompany");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.ObjectUid).HasColumnName("ObjectUID");
            });

            modelBuilder.Entity<Bdgreport>(entity =>
            {
                entity.HasKey(e => e.ObjectUid);

                entity.ToTable("BDGReport");

                entity.Property(e => e.ObjectUid)
                    .HasColumnName("ObjectUID")
                    .HasDefaultValueSql("(newid())");

                entity.Property(e => e.BdgcompanyId).HasColumnName("BDGCompanyID");

                entity.Property(e => e.CreatedBy).HasMaxLength(50);

                entity.Property(e => e.CreatedOn)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Dbname)
                    .HasMaxLength(50)
                    .HasColumnName("DBName");

                entity.Property(e => e.Description).HasMaxLength(2000);

                entity.Property(e => e.Display)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasComputedColumnSql("([NameAlias])", false);

                entity.Property(e => e.ImportedObjectUid)
                    .HasMaxLength(50)
                    .HasColumnName("ImportedObjectUID");

                entity.Property(e => e.InstallationUid).HasColumnName("InstallationUID");

                entity.Property(e => e.IsAdmin).HasDefaultValueSql("((0))");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.NameAlias)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.OldRecordId).HasColumnName("OldRecordID");

                entity.Property(e => e.Password).HasMaxLength(50);

                entity.Property(e => e.PortalId).HasColumnName("PortalID");

                entity.Property(e => e.RecordId)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("RecordID");

                entity.Property(e => e.ReportFile)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.ServerName).HasMaxLength(50);

                entity.Property(e => e.SortOrder).HasDefaultValueSql("((100))");

                entity.Property(e => e.Source).HasMaxLength(50);

                entity.Property(e => e.UpdatedBy).HasMaxLength(50);

                entity.Property(e => e.UpdatedOn).HasColumnType("datetime");

                entity.Property(e => e.Username).HasMaxLength(50);

                entity.HasOne(d => d.Bdgcompany)
                    .WithMany(p => p.Bdgreports)
                    .HasForeignKey(d => d.BdgcompanyId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_BDGReport_BDGCompanyID_BDGCompany");

                entity.HasOne(d => d.Portal)
                    .WithMany(p => p.Bdgreports)
                    .HasForeignKey(d => d.PortalId)
                    .HasConstraintName("FK_BDGReport_PortalID_Portal");
            });

            modelBuilder.Entity<BdgreportGrid>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("BDGReportGrid");

                entity.Property(e => e.Bdgcompany)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnName("BDGCompany");

                entity.Property(e => e.BdgcompanyId).HasColumnName("BDGCompanyID");

                entity.Property(e => e.Dbname)
                    .HasMaxLength(50)
                    .HasColumnName("DBName");

                entity.Property(e => e.Display)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.NameAlias)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.ObjectUid).HasColumnName("ObjectUID");

                entity.Property(e => e.Password).HasMaxLength(50);

                entity.Property(e => e.ReportFile)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.ServerName).HasMaxLength(50);

                entity.Property(e => e.Username).HasMaxLength(50);
            });

            modelBuilder.Entity<BdgreportGroup>(entity =>
            {
                entity.HasKey(e => e.ObjectUid);

                entity.ToTable("BDGReportGroup");

                entity.Property(e => e.ObjectUid)
                    .HasColumnName("ObjectUID")
                    .HasDefaultValueSql("(newid())");

                entity.Property(e => e.BdgcompanyId).HasColumnName("BDGCompanyID");

                entity.Property(e => e.CreatedBy).HasMaxLength(50);

                entity.Property(e => e.CreatedOn)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Description).HasMaxLength(2000);

                entity.Property(e => e.Display)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasComputedColumnSql("([NameAlias])", false);

                entity.Property(e => e.ImportedObjectUid)
                    .HasMaxLength(50)
                    .HasColumnName("ImportedObjectUID");

                entity.Property(e => e.InstallationUid).HasColumnName("InstallationUID");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.NameAlias)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.OldRecordId).HasColumnName("OldRecordID");

                entity.Property(e => e.RecordId)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("RecordID");

                entity.Property(e => e.SortOrder).HasDefaultValueSql("((100))");

                entity.Property(e => e.UpdatedBy).HasMaxLength(50);

                entity.Property(e => e.UpdatedOn).HasColumnType("datetime");

                entity.HasOne(d => d.Bdgcompany)
                    .WithMany(p => p.BdgreportGroups)
                    .HasForeignKey(d => d.BdgcompanyId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_BDGReportGroup_BDGCompanyID_BDGCompany");
            });

            modelBuilder.Entity<BdgreportGroupBdgglaccountMapping>(entity =>
            {
                entity.HasKey(e => e.ObjectUid);

                entity.ToTable("BDGReportGroup_BDGGLAccountMapping");

                entity.HasIndex(e => e.MaskedAccountNo, "IDXMaskedAccountNumber")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.ObjectUid)
                    .HasColumnName("ObjectUID")
                    .HasDefaultValueSql("(newid())");

                entity.Property(e => e.AccountNo)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.BdgaccountGroupId).HasColumnName("BDGAccountGroupID");

                entity.Property(e => e.BdgaccountGroupSubGroupId).HasColumnName("BDGAccountGroup_SubGroupID");

                entity.Property(e => e.BdgaccountGroupSubGroupSubGroupId).HasColumnName("BDGAccountGroup_SubGroup_SubGroupID");

                entity.Property(e => e.BdgaccountGroupSubGroupSubGroupSubGroupId).HasColumnName("BDGAccountGroup_SubGroup_SubGroup_SubGroupID");

                entity.Property(e => e.BdgdepartmentId).HasColumnName("BDGDepartmentID");

                entity.Property(e => e.BdgreportGroupId).HasColumnName("BDGReportGroupID");

                entity.Property(e => e.CreatedBy).HasMaxLength(50);

                entity.Property(e => e.CreatedOn)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Description).HasMaxLength(2000);

                entity.Property(e => e.Display)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasComputedColumnSql("([AccountNo])", false);

                entity.Property(e => e.ImportedObjectUid)
                    .HasMaxLength(50)
                    .HasColumnName("ImportedObjectUID");

                entity.Property(e => e.InstallationUid).HasColumnName("InstallationUID");

                entity.Property(e => e.MaskedAccountNo)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Name).HasMaxLength(50);

                entity.Property(e => e.NameAlias).HasMaxLength(50);

                entity.Property(e => e.OldRecordId).HasColumnName("OldRecordID");

                entity.Property(e => e.RecordId)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("RecordID");

                entity.Property(e => e.SortOrder).HasDefaultValueSql("((100))");

                entity.Property(e => e.UpdatedBy).HasMaxLength(50);

                entity.Property(e => e.UpdatedOn).HasColumnType("datetime");

                entity.HasOne(d => d.BdgaccountGroup)
                    .WithMany(p => p.BdgreportGroupBdgglaccountMappings)
                    .HasForeignKey(d => d.BdgaccountGroupId)
                    .HasConstraintName("FK_BDGReportGroup_BDGGLAccountMapping_BDGAccountGroupID_BDGAccountGroup");

                entity.HasOne(d => d.BdgaccountGroupSubGroup)
                    .WithMany(p => p.BdgreportGroupBdgglaccountMappings)
                    .HasForeignKey(d => d.BdgaccountGroupSubGroupId)
                    .HasConstraintName("FK_BDGReportGroup_BDGGLAccountMapping_BDGAccountGroup_SubGroupID_BDGAccountGroup_SubGroup");

                entity.HasOne(d => d.BdgaccountGroupSubGroupSubGroup)
                    .WithMany(p => p.BdgreportGroupBdgglaccountMappings)
                    .HasForeignKey(d => d.BdgaccountGroupSubGroupSubGroupId)
                    .HasConstraintName("FK_BDGReportGroup_BDGGLAccountMapping_BDGAccountGroup_SubGroup_SubGroupID_BDGAccountGroup_SubGroup_SubGroup");

                entity.HasOne(d => d.BdgaccountGroupSubGroupSubGroupSubGroup)
                    .WithMany(p => p.BdgreportGroupBdgglaccountMappings)
                    .HasForeignKey(d => d.BdgaccountGroupSubGroupSubGroupSubGroupId)
                    .HasConstraintName("FK_BDGReportGroup_BDGGLAccountMapping_BDGAccountGroup_SubGroup_SubGroup_SubGroup");

                entity.HasOne(d => d.Bdgdepartment)
                    .WithMany(p => p.BdgreportGroupBdgglaccountMappings)
                    .HasForeignKey(d => d.BdgdepartmentId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_BDGReportGroup_BDGGLAccountMapping_BDGDepartmentID_BDGDepartment");

                entity.HasOne(d => d.BdgreportGroup)
                    .WithMany(p => p.BdgreportGroupBdgglaccountMappings)
                    .HasForeignKey(d => d.BdgreportGroupId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_BDGReportGroup_BDGGLAccountMapping_BDGReportGroupID_BDGReportGroup");
            });

            modelBuilder.Entity<BdgreportGroupBdgglaccountMappingGrid>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("BDGReportGroup_BDGGLAccountMappingGrid");

                entity.Property(e => e.AccountGroup).HasMaxLength(50);

                entity.Property(e => e.AccountNo)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.BdgreportGroupId).HasColumnName("BDGReportGroupID");

                entity.Property(e => e.Department).HasMaxLength(50);

                entity.Property(e => e.ObjectUid).HasColumnName("ObjectUID");

                entity.Property(e => e.SubGroup).HasMaxLength(50);

                entity.Property(e => e.SubSubGroup).HasMaxLength(50);

                entity.Property(e => e.SubSubSubGroup).HasMaxLength(50);
            });

            modelBuilder.Entity<BdgreportGroupBdgreport>(entity =>
            {
                entity.HasKey(e => e.ObjectUid);

                entity.ToTable("BDGReportGroup_BDGReport");

                entity.Property(e => e.ObjectUid)
                    .HasColumnName("ObjectUID")
                    .HasDefaultValueSql("(newid())");

                entity.Property(e => e.BdgreportGroupId).HasColumnName("BDGReportGroupID");

                entity.Property(e => e.BdgreportId).HasColumnName("BDGReportID");

                entity.Property(e => e.CreatedBy).HasMaxLength(50);

                entity.Property(e => e.CreatedOn)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Description).HasMaxLength(2000);

                entity.Property(e => e.Display)
                    .HasMaxLength(50)
                    .HasComputedColumnSql("([Name])", false);

                entity.Property(e => e.ImportedObjectUid)
                    .HasMaxLength(50)
                    .HasColumnName("ImportedObjectUID");

                entity.Property(e => e.InstallationUid).HasColumnName("InstallationUID");

                entity.Property(e => e.Name).HasMaxLength(50);

                entity.Property(e => e.NameAlias).HasMaxLength(50);

                entity.Property(e => e.OldRecordId).HasColumnName("OldRecordID");

                entity.Property(e => e.RecordId)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("RecordID");

                entity.Property(e => e.SortOrder).HasDefaultValueSql("((100))");

                entity.Property(e => e.UpdatedBy).HasMaxLength(50);

                entity.Property(e => e.UpdatedOn).HasColumnType("datetime");

                entity.HasOne(d => d.BdgreportGroup)
                    .WithMany(p => p.BdgreportGroupBdgreports)
                    .HasForeignKey(d => d.BdgreportGroupId)
                    .HasConstraintName("FK_BDGReportGroup_BDGReport_BDGReportGroup");

                entity.HasOne(d => d.Bdgreport)
                    .WithMany(p => p.BdgreportGroupBdgreports)
                    .HasForeignKey(d => d.BdgreportId)
                    .HasConstraintName("FK_BDGReportGroup_BDGReport_BDGReport");
            });

            modelBuilder.Entity<BdgreportGroupBdgreportGrid>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("BDGReportGroup_BDGReportGrid");

                entity.Property(e => e.Bdgreport)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnName("BDGReport");

                entity.Property(e => e.BdgreportGroupId).HasColumnName("BDGReportGroupID");

                entity.Property(e => e.ObjectUid).HasColumnName("ObjectUID");
            });

            modelBuilder.Entity<BdgreportGroupDuplicateMasking>(entity =>
            {
                entity.HasKey(e => e.ObjectUid);

                entity.ToTable("BDGReportGroup_DuplicateMasking");

                entity.Property(e => e.ObjectUid)
                    .HasColumnName("ObjectUID")
                    .HasDefaultValueSql("(newid())");

                entity.Property(e => e.AccountNo)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.BdgreportGroupId).HasColumnName("BDGReportGroupID");

                entity.Property(e => e.CreatedBy).HasMaxLength(50);

                entity.Property(e => e.CreatedOn)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Description).HasMaxLength(2000);

                entity.Property(e => e.Display)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasComputedColumnSql("([AccountNo])", true);

                entity.Property(e => e.ImportedObjectUid)
                    .HasMaxLength(50)
                    .HasColumnName("ImportedObjectUID");

                entity.Property(e => e.InstallationUid).HasColumnName("InstallationUID");

                entity.Property(e => e.Name).HasMaxLength(50);

                entity.Property(e => e.NameAlias).HasMaxLength(50);

                entity.Property(e => e.OldRecordId).HasColumnName("OldRecordID");

                entity.Property(e => e.RecordId)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("RecordID");

                entity.Property(e => e.SortOrder).HasDefaultValueSql("((100))");

                entity.Property(e => e.UpdatedBy).HasMaxLength(50);

                entity.Property(e => e.UpdatedOn).HasColumnType("datetime");

                entity.HasOne(d => d.BdgreportGroup)
                    .WithMany(p => p.BdgreportGroupDuplicateMaskings)
                    .HasForeignKey(d => d.BdgreportGroupId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_BDGReportGroup_DuplicateMasking_BDGReportGroupID_BDGReportGroup");
            });

            modelBuilder.Entity<BdgreportGroupDuplicateMaskingGrid>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("BDGReportGroup_DuplicateMaskingGrid");

                entity.Property(e => e.AccountNo)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.BdgreportGroupId).HasColumnName("BDGReportGroupID");

                entity.Property(e => e.ObjectUid).HasColumnName("ObjectUID");
            });

            modelBuilder.Entity<BdgreportGroupGrid>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("BDGReportGroupGrid");

                entity.Property(e => e.BdgcompanyId).HasColumnName("BDGCompanyID");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.ObjectUid).HasColumnName("ObjectUID");
            });

            modelBuilder.Entity<BdgreportGroupMissingMasking>(entity =>
            {
                entity.HasKey(e => e.ObjectUid);

                entity.ToTable("BDGReportGroup_MissingMasking");

                entity.Property(e => e.ObjectUid)
                    .HasColumnName("ObjectUID")
                    .HasDefaultValueSql("(newid())");

                entity.Property(e => e.AccountNo)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.BdgreportGroupId).HasColumnName("BDGReportGroupID");

                entity.Property(e => e.CreatedBy).HasMaxLength(50);

                entity.Property(e => e.CreatedOn)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Description).HasMaxLength(2000);

                entity.Property(e => e.Display)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasComputedColumnSql("([AccountNo])", true);

                entity.Property(e => e.ImportedObjectUid)
                    .HasMaxLength(50)
                    .HasColumnName("ImportedObjectUID");

                entity.Property(e => e.InstallationUid).HasColumnName("InstallationUID");

                entity.Property(e => e.Name).HasMaxLength(50);

                entity.Property(e => e.NameAlias).HasMaxLength(50);

                entity.Property(e => e.OldRecordId).HasColumnName("OldRecordID");

                entity.Property(e => e.RecordId)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("RecordID");

                entity.Property(e => e.SortOrder).HasDefaultValueSql("((100))");

                entity.Property(e => e.SumAmount).HasColumnType("money");

                entity.Property(e => e.UpdatedBy).HasMaxLength(50);

                entity.Property(e => e.UpdatedOn).HasColumnType("datetime");

                entity.HasOne(d => d.BdgreportGroup)
                    .WithMany(p => p.BdgreportGroupMissingMaskings)
                    .HasForeignKey(d => d.BdgreportGroupId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_BDGReportGroup_MissingMasking_BDGReportGroupID_BDGReportGroup");
            });

            modelBuilder.Entity<BdgreportGroupMissingMaskingGrid>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("BDGReportGroup_MissingMaskingGrid");

                entity.Property(e => e.AccountNo)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.BdgreportGroupId).HasColumnName("BDGReportGroupID");

                entity.Property(e => e.Description).HasMaxLength(2000);

                entity.Property(e => e.ObjectUid).HasColumnName("ObjectUID");

                entity.Property(e => e.TotalAmount).HasColumnType("money");
            });

            modelBuilder.Entity<BdgreportGroupType>(entity =>
            {
                entity.HasKey(e => e.ObjectUid);

                entity.ToTable("BDGReportGroupType");

                entity.Property(e => e.ObjectUid)
                    .HasColumnName("ObjectUID")
                    .HasDefaultValueSql("(newid())");

                entity.Property(e => e.BdgcompanyId).HasColumnName("BDGCompanyID");

                entity.Property(e => e.CreatedBy).HasMaxLength(50);

                entity.Property(e => e.CreatedOn)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Description).HasMaxLength(2000);

                entity.Property(e => e.Display)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasComputedColumnSql("([Name])", false);

                entity.Property(e => e.ImportedObjectUid)
                    .HasMaxLength(50)
                    .HasColumnName("ImportedObjectUID");

                entity.Property(e => e.InstallationUid).HasColumnName("InstallationUID");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.NameAlias)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.OldRecordId).HasColumnName("OldRecordID");

                entity.Property(e => e.RecordId)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("RecordID");

                entity.Property(e => e.SortOrder).HasDefaultValueSql("((100))");

                entity.Property(e => e.UpdatedBy).HasMaxLength(50);

                entity.Property(e => e.UpdatedOn).HasColumnType("datetime");

                entity.HasOne(d => d.Bdgcompany)
                    .WithMany(p => p.BdgreportGroupTypes)
                    .HasForeignKey(d => d.BdgcompanyId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_BDGReportGroupType_BDGCompanyID_BDGCompany");
            });

            modelBuilder.Entity<BdgreportGroupTypeGrid>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("BDGReportGroupTypeGrid");

                entity.Property(e => e.BdgcompanyId).HasColumnName("BDGCompanyID");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.ObjectUid).HasColumnName("ObjectUID");
            });

            modelBuilder.Entity<BdgreportParameter>(entity =>
            {
                entity.HasKey(e => e.ObjectUid);

                entity.ToTable("BDGReport_Parameter");

                entity.Property(e => e.ObjectUid)
                    .HasColumnName("ObjectUID")
                    .HasDefaultValueSql("(newid())");

                entity.Property(e => e.BdgreportId).HasColumnName("BDGReportID");

                entity.Property(e => e.BdgreportParameterTypeId).HasColumnName("BDGReportParameterTypeID");

                entity.Property(e => e.CreatedBy).HasMaxLength(50);

                entity.Property(e => e.CreatedOn)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Description).HasMaxLength(2000);

                entity.Property(e => e.Display)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasComputedColumnSql("([ParameterDisplayName])", false);

                entity.Property(e => e.ImportedObjectUid)
                    .HasMaxLength(50)
                    .HasColumnName("ImportedObjectUID");

                entity.Property(e => e.InstallationUid).HasColumnName("InstallationUID");

                entity.Property(e => e.Name).HasMaxLength(50);

                entity.Property(e => e.NameAlias).HasMaxLength(50);

                entity.Property(e => e.OldRecordId).HasColumnName("OldRecordID");

                entity.Property(e => e.ParameterDatabaseFieldName)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.ParameterDefaultEndValue).HasColumnType("datetime");

                entity.Property(e => e.ParameterDefaultStartValue).HasColumnType("datetime");

                entity.Property(e => e.ParameterDefaultValue).HasMaxLength(50);

                entity.Property(e => e.ParameterDisplayName)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.RecordId)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("RecordID");

                entity.Property(e => e.SortOrder).HasDefaultValueSql("((100))");

                entity.Property(e => e.UpdatedBy).HasMaxLength(50);

                entity.Property(e => e.UpdatedOn).HasColumnType("datetime");

                entity.HasOne(d => d.Bdgreport)
                    .WithMany(p => p.BdgreportParameters)
                    .HasForeignKey(d => d.BdgreportId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_BDGReport_Parameter_BDGReportID_BDGReport");

                entity.HasOne(d => d.BdgreportParameterType)
                    .WithMany(p => p.BdgreportParameters)
                    .HasForeignKey(d => d.BdgreportParameterTypeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_BDGReport_Parameter_BDGReportParameterTypeID_BDGReportParameterType");
            });

            modelBuilder.Entity<BdgreportParameterGrid>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("BDGReport_ParameterGrid");

                entity.Property(e => e.BdgreportId).HasColumnName("BDGReportID");

                entity.Property(e => e.BdgreportParameterType)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnName("BDGReportParameterType");

                entity.Property(e => e.ObjectUid).HasColumnName("ObjectUID");

                entity.Property(e => e.ParameterDatabaseFieldName)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.ParameterDefaultEndValue).HasColumnType("datetime");

                entity.Property(e => e.ParameterDefaultStartValue).HasColumnType("datetime");

                entity.Property(e => e.ParameterDefaultValue).HasMaxLength(50);

                entity.Property(e => e.ParameterDisplayName)
                    .IsRequired()
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<BdgreportParameterType>(entity =>
            {
                entity.HasKey(e => e.ObjectUid);

                entity.ToTable("BDGReportParameterType");

                entity.Property(e => e.ObjectUid)
                    .HasColumnName("ObjectUID")
                    .HasDefaultValueSql("(newid())");

                entity.Property(e => e.CreatedBy).HasMaxLength(50);

                entity.Property(e => e.CreatedOn)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Description).HasMaxLength(2000);

                entity.Property(e => e.Display)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasComputedColumnSql("([Name])", false);

                entity.Property(e => e.ImportedObjectUid)
                    .HasMaxLength(50)
                    .HasColumnName("ImportedObjectUID");

                entity.Property(e => e.InstallationUid).HasColumnName("InstallationUID");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.NameAlias)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.OldRecordId).HasColumnName("OldRecordID");

                entity.Property(e => e.RecordId)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("RecordID");

                entity.Property(e => e.SortOrder).HasDefaultValueSql("((100))");

                entity.Property(e => e.UpdatedBy).HasMaxLength(50);

                entity.Property(e => e.UpdatedOn).HasColumnType("datetime");
            });

            modelBuilder.Entity<BdgreportParameterTypeGrid>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("BDGReportParameterTypeGrid");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.ObjectUid).HasColumnName("ObjectUID");
            });

            modelBuilder.Entity<BdgreportType>(entity =>
            {
                entity.HasKey(e => e.ObjectUid);

                entity.ToTable("BDGReportType");

                entity.Property(e => e.ObjectUid)
                    .HasColumnName("ObjectUID")
                    .HasDefaultValueSql("(newid())");

                entity.Property(e => e.BdgcompanyId).HasColumnName("BDGCompanyID");

                entity.Property(e => e.CreatedBy).HasMaxLength(50);

                entity.Property(e => e.CreatedOn)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Description).HasMaxLength(2000);

                entity.Property(e => e.Display)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasComputedColumnSql("([Name])", false);

                entity.Property(e => e.ImportedObjectUid)
                    .HasMaxLength(50)
                    .HasColumnName("ImportedObjectUID");

                entity.Property(e => e.InstallationUid).HasColumnName("InstallationUID");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.NameAlias).HasMaxLength(50);

                entity.Property(e => e.OldRecordId).HasColumnName("OldRecordID");

                entity.Property(e => e.RecordId)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("RecordID");

                entity.Property(e => e.ReportName)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.SortOrder).HasDefaultValueSql("((100))");

                entity.Property(e => e.UpdatedBy).HasMaxLength(50);

                entity.Property(e => e.UpdatedOn).HasColumnType("datetime");

                entity.HasOne(d => d.Bdgcompany)
                    .WithMany(p => p.BdgreportTypes)
                    .HasForeignKey(d => d.BdgcompanyId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_BDGReportType_BDGCompanyID_BDGCompany");
            });

            modelBuilder.Entity<BdgreportTypeGrid>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("BDGReportTypeGrid");

                entity.Property(e => e.BdgcompanyId).HasColumnName("BDGCompanyID");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.ObjectUid).HasColumnName("ObjectUID");

                entity.Property(e => e.ReportName)
                    .IsRequired()
                    .HasMaxLength(100);
            });

            modelBuilder.Entity<BdgreportUserAccountGrid>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("BDGReport_UserAccountGrid");

                entity.Property(e => e.BdgreportId).HasColumnName("BDGReportID");

                entity.Property(e => e.ObjectUid).HasColumnName("ObjectUID");

                entity.Property(e => e.UserAccount)
                    .IsRequired()
                    .HasMaxLength(100);
            });

            modelBuilder.Entity<BudgetAmountTemp>(entity =>
            {
                entity.HasKey(e => e.ObjectUid);

                entity.ToTable("BudgetAmountTemp");

                entity.Property(e => e.ObjectUid)
                    .HasColumnName("ObjectUID")
                    .HasDefaultValueSql("(newid())");

                entity.Property(e => e.AccountGroup).HasMaxLength(255);

                entity.Property(e => e.AccountGroupSubGroup)
                    .HasMaxLength(255)
                    .HasColumnName("AccountGroup_SubGroup");

                entity.Property(e => e.AccountGroupSubGroupSubGroup)
                    .HasMaxLength(255)
                    .HasColumnName("AccountGroup_SubGroup_SubGroup");

                entity.Property(e => e.AccountGroupSubGroupSubGroupSubGroup)
                    .HasMaxLength(255)
                    .HasColumnName("AccountGroup_SubGroup_SubGroup_SubGroup");

                entity.Property(e => e.Amount).HasColumnType("money");

                entity.Property(e => e.BdgaccountGroupId).HasColumnName("BDGAccountGroupID");

                entity.Property(e => e.BdgaccountGroupSubGroupId).HasColumnName("BDGAccountGroup_SubGroupID");

                entity.Property(e => e.BdgaccountGroupSubGroupSubGroupId).HasColumnName("BDGAccountGroup_SubGroup_SubGroupID");

                entity.Property(e => e.BdgaccountGroupSubGroupSubGroupSubGroupId).HasColumnName("BDGAccountGroup_SubGroup_SubGroup_SubGroupID");

                entity.Property(e => e.BdgdepartmentId).HasColumnName("BDGDepartmentID");

                entity.Property(e => e.CreatedBy).HasMaxLength(50);

                entity.Property(e => e.CreatedOn)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Department).HasMaxLength(255);

                entity.Property(e => e.Description).HasMaxLength(2000);

                entity.Property(e => e.Display)
                    .HasMaxLength(50)
                    .HasComputedColumnSql("([Name])", false);

                entity.Property(e => e.ImportedObjectUid)
                    .HasMaxLength(50)
                    .HasColumnName("ImportedObjectUID");

                entity.Property(e => e.InstallationUid).HasColumnName("InstallationUID");

                entity.Property(e => e.Name).HasMaxLength(50);

                entity.Property(e => e.NameAlias).HasMaxLength(50);

                entity.Property(e => e.OldRecordId).HasColumnName("OldRecordID");

                entity.Property(e => e.Recordid)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("recordid");

                entity.Property(e => e.UpdatedBy).HasMaxLength(50);

                entity.Property(e => e.UpdatedOn).HasColumnType("datetime");

                entity.Property(e => e.YearSetupId).HasColumnName("YearSetupID");

                entity.HasOne(d => d.BdgaccountGroup)
                    .WithMany(p => p.BudgetAmountTemps)
                    .HasForeignKey(d => d.BdgaccountGroupId)
                    .HasConstraintName("FK_BudgetAmountTemp_BDGAccountGroupID_BDGAccountGroup");

                entity.HasOne(d => d.BdgaccountGroupSubGroup)
                    .WithMany(p => p.BudgetAmountTemps)
                    .HasForeignKey(d => d.BdgaccountGroupSubGroupId)
                    .HasConstraintName("FK_BudgetAmountTemp_BDGAccountGroup_SubGroupID_BDGAccountGroup_SubGroup");

                entity.HasOne(d => d.BdgaccountGroupSubGroupSubGroup)
                    .WithMany(p => p.BudgetAmountTemps)
                    .HasForeignKey(d => d.BdgaccountGroupSubGroupSubGroupId)
                    .HasConstraintName("FK_BudgetAmountTemp_BDGAccountGroup_SubGroup_SubGroupID_BDGAccountGroup_SubGroup_SubGroup");

                entity.HasOne(d => d.BdgaccountGroupSubGroupSubGroupSubGroup)
                    .WithMany(p => p.BudgetAmountTemps)
                    .HasForeignKey(d => d.BdgaccountGroupSubGroupSubGroupSubGroupId)
                    .HasConstraintName("FK_BudgetAmountTemp_BDGAccountGroup_SubGroup_SubGroup_SubGroupID_BDGAccountGroup_SubGroup_SubGroup_SubGroup");

                entity.HasOne(d => d.Bdgdepartment)
                    .WithMany(p => p.BudgetAmountTemps)
                    .HasForeignKey(d => d.BdgdepartmentId)
                    .HasConstraintName("FK_BudgetAmountTemp_BDGDepartmentID_BDGDepartment");

                entity.HasOne(d => d.YearSetup)
                    .WithMany(p => p.BudgetAmountTemps)
                    .HasForeignKey(d => d.YearSetupId)
                    .HasConstraintName("FK_BudgetAmountTemp_YearSetupID_YearSetup");
            });

            modelBuilder.Entity<BudgetAmountTempBackup>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("BudgetAmountTemp_backup");

                entity.Property(e => e.AccountGroup).HasMaxLength(255);

                entity.Property(e => e.AccountGroupSubGroup)
                    .HasMaxLength(255)
                    .HasColumnName("AccountGroup_SubGroup");

                entity.Property(e => e.AccountGroupSubGroupSubGroup)
                    .HasMaxLength(255)
                    .HasColumnName("AccountGroup_SubGroup_SubGroup");

                entity.Property(e => e.AccountGroupSubGroupSubGroupSubGroup)
                    .HasMaxLength(255)
                    .HasColumnName("AccountGroup_SubGroup_SubGroup_SubGroup");

                entity.Property(e => e.Amount).HasColumnType("money");

                entity.Property(e => e.BdgaccountGroupId).HasColumnName("BDGAccountGroupID");

                entity.Property(e => e.BdgaccountGroupSubGroupId).HasColumnName("BDGAccountGroup_SubGroupID");

                entity.Property(e => e.BdgaccountGroupSubGroupSubGroupId).HasColumnName("BDGAccountGroup_SubGroup_SubGroupID");

                entity.Property(e => e.BdgaccountGroupSubGroupSubGroupSubGroupId).HasColumnName("BDGAccountGroup_SubGroup_SubGroup_SubGroupID");

                entity.Property(e => e.BdgdepartmentId).HasColumnName("BDGDepartmentID");

                entity.Property(e => e.CreatedBy).HasMaxLength(50);

                entity.Property(e => e.CreatedOn).HasColumnType("datetime");

                entity.Property(e => e.Department).HasMaxLength(255);

                entity.Property(e => e.Description).HasMaxLength(2000);

                entity.Property(e => e.Display).HasMaxLength(50);

                entity.Property(e => e.ImportedObjectUid)
                    .HasMaxLength(50)
                    .HasColumnName("ImportedObjectUID");

                entity.Property(e => e.InstallationUid).HasColumnName("InstallationUID");

                entity.Property(e => e.Name).HasMaxLength(50);

                entity.Property(e => e.NameAlias).HasMaxLength(50);

                entity.Property(e => e.ObjectUid).HasColumnName("ObjectUID");

                entity.Property(e => e.OldRecordId).HasColumnName("OldRecordID");

                entity.Property(e => e.Recordid)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("recordid");

                entity.Property(e => e.UpdatedBy).HasMaxLength(50);

                entity.Property(e => e.UpdatedOn).HasColumnType("datetime");

                entity.Property(e => e.YearSetupId).HasColumnName("YearSetupID");
            });

            modelBuilder.Entity<BudgetAmountTempGrid>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("BudgetAmountTempGrid");

                entity.Property(e => e.AccountGroup).HasMaxLength(255);

                entity.Property(e => e.Amount).HasColumnType("money");

                entity.Property(e => e.Department).HasMaxLength(255);

                entity.Property(e => e.ObjectUid).HasColumnName("ObjectUID");

                entity.Property(e => e.SubGroup).HasMaxLength(255);

                entity.Property(e => e.SubSubGroup).HasMaxLength(255);

                entity.Property(e => e.SubSubSubGroup).HasMaxLength(255);

                entity.Property(e => e.Year)
                    .IsRequired()
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<BudgetAmountTempHistory>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("BudgetAmountTemp_HISTORY");

                entity.Property(e => e.AccountGroup).HasMaxLength(255);

                entity.Property(e => e.AccountGroupSubGroup)
                    .HasMaxLength(255)
                    .HasColumnName("AccountGroup_SubGroup");

                entity.Property(e => e.AccountGroupSubGroupSubGroup)
                    .HasMaxLength(255)
                    .HasColumnName("AccountGroup_SubGroup_SubGroup");

                entity.Property(e => e.AccountGroupSubGroupSubGroupSubGroup)
                    .HasMaxLength(255)
                    .HasColumnName("AccountGroup_SubGroup_SubGroup_SubGroup");

                entity.Property(e => e.Amount).HasColumnType("money");

                entity.Property(e => e.BdgaccountGroupId).HasColumnName("BDGAccountGroupID");

                entity.Property(e => e.BdgaccountGroupSubGroupId).HasColumnName("BDGAccountGroup_SubGroupID");

                entity.Property(e => e.BdgaccountGroupSubGroupSubGroupId).HasColumnName("BDGAccountGroup_SubGroup_SubGroupID");

                entity.Property(e => e.BdgaccountGroupSubGroupSubGroupSubGroupId).HasColumnName("BDGAccountGroup_SubGroup_SubGroup_SubGroupID");

                entity.Property(e => e.BdgdepartmentId).HasColumnName("BDGDepartmentID");

                entity.Property(e => e.CopyDate)
                    .HasColumnType("datetime")
                    .HasColumnName("COPY_DATE");

                entity.Property(e => e.CreatedBy).HasMaxLength(50);

                entity.Property(e => e.CreatedOn).HasColumnType("datetime");

                entity.Property(e => e.Department).HasMaxLength(255);

                entity.Property(e => e.Description).HasMaxLength(2000);

                entity.Property(e => e.Display).HasMaxLength(50);

                entity.Property(e => e.ImportedObjectUid)
                    .HasMaxLength(50)
                    .HasColumnName("ImportedObjectUID");

                entity.Property(e => e.InstallationUid).HasColumnName("InstallationUID");

                entity.Property(e => e.Name).HasMaxLength(50);

                entity.Property(e => e.NameAlias).HasMaxLength(50);

                entity.Property(e => e.ObjectUid).HasColumnName("ObjectUID");

                entity.Property(e => e.OldRecordId).HasColumnName("OldRecordID");

                entity.Property(e => e.Recordid)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("recordid");

                entity.Property(e => e.UpdatedBy).HasMaxLength(50);

                entity.Property(e => e.UpdatedOn).HasColumnType("datetime");

                entity.Property(e => e.YearSetupId).HasColumnName("YearSetupID");
            });

            modelBuilder.Entity<BudgetInfoExpenditureReport>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("BudgetInfoExpenditureReport");

                entity.Property(e => e.AccountGroup)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.ActualEndDate).HasColumnType("datetime");

                entity.Property(e => e.ActualStartDate).HasColumnType("datetime");

                entity.Property(e => e.CybudgetAmount)
                    .HasColumnType("money")
                    .HasColumnName("CYBudgetAmount");

                entity.Property(e => e.Department)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.DepartmentId).HasColumnName("DepartmentID");

                entity.Property(e => e.EndDate).HasColumnType("datetime");

                entity.Property(e => e.IsParent)
                    .IsRequired()
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.NextYearCode).HasMaxLength(50);

                entity.Property(e => e.NextYearSetup).HasMaxLength(50);

                entity.Property(e => e.NybudgetAmount)
                    .HasColumnType("money")
                    .HasColumnName("NYBudgetAmount");

                entity.Property(e => e.PreviousActualEndDate).HasColumnType("datetime");

                entity.Property(e => e.PreviousActualStartDate).HasColumnType("datetime");

                entity.Property(e => e.PreviousEndDate).HasColumnType("datetime");

                entity.Property(e => e.PreviousStartDate).HasColumnType("datetime");

                entity.Property(e => e.PreviousYearCode).HasMaxLength(50);

                entity.Property(e => e.PreviousYearSetup).HasMaxLength(50);

                entity.Property(e => e.PybudgetAmount)
                    .HasColumnType("money")
                    .HasColumnName("PYBudgetAmount");

                entity.Property(e => e.ReportName).HasMaxLength(50);

                entity.Property(e => e.RevisedAccountGroup).HasMaxLength(50);

                entity.Property(e => e.StartDate).HasColumnType("datetime");

                entity.Property(e => e.YearCode).HasMaxLength(50);

                entity.Property(e => e.YearSetup)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.YearSetupId).HasColumnName("YearSetupID");

                entity.Property(e => e.YtdactualAmount)
                    .HasColumnType("money")
                    .HasColumnName("YTDActualAmount");

                entity.Property(e => e.YtdprojectedAmount)
                    .HasColumnType("money")
                    .HasColumnName("YTDProjectedAmount");
            });

            modelBuilder.Entity<BudgetInfoMpcdetailReport>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("BudgetInfoMPCDetailReport");

                entity.Property(e => e.AccountGroup)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.ActualEndDate).HasColumnType("datetime");

                entity.Property(e => e.ActualStartDate).HasColumnType("datetime");

                entity.Property(e => e.BdgbudgetGroupTypeId).HasColumnName("BDGBudgetGroupTypeID");

                entity.Property(e => e.BdgreportGroupTypeId).HasColumnName("BDGReportGroupTypeID");

                entity.Property(e => e.BudgetInfoDetailLine).HasMaxLength(250);

                entity.Property(e => e.CybudgetAmount)
                    .HasColumnType("money")
                    .HasColumnName("CYBudgetAmount");

                entity.Property(e => e.CydetailBudgetAmount)
                    .HasColumnType("money")
                    .HasColumnName("CYDetailBudgetAmount");

                entity.Property(e => e.Department)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.DepartmentId).HasColumnName("DepartmentID");

                entity.Property(e => e.Description).HasMaxLength(2000);

                entity.Property(e => e.EndDate).HasColumnType("datetime");

                entity.Property(e => e.HistoricBudgetAmount).HasColumnType("money");

                entity.Property(e => e.HistoricYtdactualAmount)
                    .HasColumnType("money")
                    .HasColumnName("HistoricYTDActualAmount");

                entity.Property(e => e.HistoricYtdprojectedAmount)
                    .HasColumnType("money")
                    .HasColumnName("HistoricYTDProjectedAmount");

                entity.Property(e => e.IsParent)
                    .IsRequired()
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.NextYearCode).HasMaxLength(50);

                entity.Property(e => e.NextYearSetup).HasMaxLength(50);

                entity.Property(e => e.NybudgetAmount)
                    .HasColumnType("money")
                    .HasColumnName("NYBudgetAmount");

                entity.Property(e => e.NydetailBudgetAmount)
                    .HasColumnType("money")
                    .HasColumnName("NYDetailBudgetAmount");

                entity.Property(e => e.PreviousActualEndDate).HasColumnType("datetime");

                entity.Property(e => e.PreviousActualStartDate).HasColumnType("datetime");

                entity.Property(e => e.PreviousEndDate).HasColumnType("datetime");

                entity.Property(e => e.PreviousStartDate).HasColumnType("datetime");

                entity.Property(e => e.PreviousYearCode).HasMaxLength(50);

                entity.Property(e => e.PreviousYearSetup).HasMaxLength(50);

                entity.Property(e => e.PybudgetAmount)
                    .HasColumnType("money")
                    .HasColumnName("PYBudgetAmount");

                entity.Property(e => e.PydetailBudgetamount)
                    .HasColumnType("money")
                    .HasColumnName("PYDetailBUdgetamount");

                entity.Property(e => e.StartDate).HasColumnType("datetime");

                entity.Property(e => e.YearCode).HasMaxLength(50);

                entity.Property(e => e.YearSetup)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.YearSetupId).HasColumnName("YearSetupID");

                entity.Property(e => e.YtdactualAmount)
                    .HasColumnType("money")
                    .HasColumnName("YTDActualAmount");

                entity.Property(e => e.YtdprojectedAmount)
                    .HasColumnType("money")
                    .HasColumnName("YTDProjectedAmount");
            });

            modelBuilder.Entity<BudgetInfoMpcsummaryReport>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("BudgetInfoMPCSummaryReport");

                entity.Property(e => e.ActualEndDate).HasColumnType("datetime");

                entity.Property(e => e.ActualStartDate).HasColumnType("datetime");

                entity.Property(e => e.BudgetGroupType).HasMaxLength(50);

                entity.Property(e => e.CybudgetAmount)
                    .HasColumnType("money")
                    .HasColumnName("CYBudgetAmount");

                entity.Property(e => e.Department)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.EndDate).HasColumnType("datetime");

                entity.Property(e => e.NextYearCode).HasMaxLength(50);

                entity.Property(e => e.NextYearSetup).HasMaxLength(50);

                entity.Property(e => e.PreviousActualEndDate).HasColumnType("datetime");

                entity.Property(e => e.PreviousActualStartDate).HasColumnType("datetime");

                entity.Property(e => e.PreviousEndDate).HasColumnType("datetime");

                entity.Property(e => e.PreviousStartDate).HasColumnType("datetime");

                entity.Property(e => e.PreviousYearCode).HasMaxLength(50);

                entity.Property(e => e.PreviousYearSetup).HasMaxLength(50);

                entity.Property(e => e.PybudgetAmount)
                    .HasColumnType("money")
                    .HasColumnName("PYBudgetAmount");

                entity.Property(e => e.PyprojectedAmount)
                    .HasColumnType("money")
                    .HasColumnName("PYProjectedAmount");

                entity.Property(e => e.ReportGroupType).HasMaxLength(50);

                entity.Property(e => e.StartDate).HasColumnType("datetime");

                entity.Property(e => e.YearCode).HasMaxLength(50);

                entity.Property(e => e.YearSetup)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.YearSetupId).HasColumnName("YearSetupID");
            });

            modelBuilder.Entity<BudgetInfoReport>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("BudgetInfoReport");

                entity.Property(e => e.AccountGroup).HasMaxLength(101);

                entity.Property(e => e.AccountGroup2)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.ActualEndDate).HasColumnType("datetime");

                entity.Property(e => e.ActualStartDate).HasColumnType("datetime");

                entity.Property(e => e.BdgbudgetInfoDetailRecordId).HasColumnName("BDGBudgetInfo_Detail_RecordID");

                entity.Property(e => e.BudgetInfoDetailLine).HasMaxLength(250);

                entity.Property(e => e.CurrentAmountP1)
                    .HasColumnType("money")
                    .HasColumnName("currentAmountP1");

                entity.Property(e => e.CurrentAmountP10)
                    .HasColumnType("money")
                    .HasColumnName("currentAmountP10");

                entity.Property(e => e.CurrentAmountP11)
                    .HasColumnType("money")
                    .HasColumnName("currentAmountP11");

                entity.Property(e => e.CurrentAmountP12)
                    .HasColumnType("money")
                    .HasColumnName("currentAmountP12");

                entity.Property(e => e.CurrentAmountP2)
                    .HasColumnType("money")
                    .HasColumnName("currentAmountP2");

                entity.Property(e => e.CurrentAmountP3)
                    .HasColumnType("money")
                    .HasColumnName("currentAmountP3");

                entity.Property(e => e.CurrentAmountP4)
                    .HasColumnType("money")
                    .HasColumnName("currentAmountP4");

                entity.Property(e => e.CurrentAmountP5)
                    .HasColumnType("money")
                    .HasColumnName("currentAmountP5");

                entity.Property(e => e.CurrentAmountP6)
                    .HasColumnType("money")
                    .HasColumnName("currentAmountP6");

                entity.Property(e => e.CurrentAmountP7)
                    .HasColumnType("money")
                    .HasColumnName("currentAmountP7");

                entity.Property(e => e.CurrentAmountP8)
                    .HasColumnType("money")
                    .HasColumnName("currentAmountP8");

                entity.Property(e => e.CurrentAmountP9)
                    .HasColumnType("money")
                    .HasColumnName("currentAmountP9");

                entity.Property(e => e.CurrentMonth)
                    .HasColumnType("money")
                    .HasColumnName("currentMonth");

                entity.Property(e => e.CurrentMonthBudget).HasColumnType("money");

                entity.Property(e => e.CybudgetAmount)
                    .HasColumnType("money")
                    .HasColumnName("CYBudgetAmount");

                entity.Property(e => e.CydetailBudgetAmount)
                    .HasColumnType("money")
                    .HasColumnName("CYDetailBudgetAmount");

                entity.Property(e => e.Department)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.DepartmentId).HasColumnName("DepartmentID");

                entity.Property(e => e.Description).HasMaxLength(2000);

                entity.Property(e => e.DetailAmount).HasColumnType("money");

                entity.Property(e => e.EndDate).HasColumnType("datetime");

                entity.Property(e => e.IsParent)
                    .IsRequired()
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.LydetailBudgetAmount)
                    .HasColumnType("money")
                    .HasColumnName("LYDetailBudgetAmount");

                entity.Property(e => e.NextYearCode).HasMaxLength(50);

                entity.Property(e => e.NextYearSetup).HasMaxLength(50);

                entity.Property(e => e.NybudgetAmount)
                    .HasColumnType("money")
                    .HasColumnName("NYBudgetAmount");

                entity.Property(e => e.NydetailBudgetAmount)
                    .HasColumnType("money")
                    .HasColumnName("NYDetailBudgetAmount");

                entity.Property(e => e.Objectuid).HasColumnName("objectuid");

                entity.Property(e => e.PreviousActualEndDate).HasColumnType("datetime");

                entity.Property(e => e.PreviousActualStartDate).HasColumnType("datetime");

                entity.Property(e => e.PreviousEndDate).HasColumnType("datetime");

                entity.Property(e => e.PreviousStartDate).HasColumnType("datetime");

                entity.Property(e => e.PreviousYearCode).HasMaxLength(50);

                entity.Property(e => e.PreviousYearSetup).HasMaxLength(50);

                entity.Property(e => e.ProposedBudgetAmountp1).HasColumnType("money");

                entity.Property(e => e.ProposedBudgetAmountp10).HasColumnType("money");

                entity.Property(e => e.ProposedBudgetAmountp11).HasColumnType("money");

                entity.Property(e => e.ProposedBudgetAmountp12).HasColumnType("money");

                entity.Property(e => e.ProposedBudgetAmountp2).HasColumnType("money");

                entity.Property(e => e.ProposedBudgetAmountp3).HasColumnType("money");

                entity.Property(e => e.ProposedBudgetAmountp4).HasColumnType("money");

                entity.Property(e => e.ProposedBudgetAmountp5).HasColumnType("money");

                entity.Property(e => e.ProposedBudgetAmountp6).HasColumnType("money");

                entity.Property(e => e.ProposedBudgetAmountp7).HasColumnType("money");

                entity.Property(e => e.ProposedBudgetAmountp8).HasColumnType("money");

                entity.Property(e => e.ProposedBudgetAmountp9).HasColumnType("money");

                entity.Property(e => e.PybudgetAmount)
                    .HasColumnType("money")
                    .HasColumnName("PYBudgetAmount");

                entity.Property(e => e.StartDate).HasColumnType("datetime");

                entity.Property(e => e.YearCode).HasMaxLength(50);

                entity.Property(e => e.YearSetup)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.YearSetupId).HasColumnName("YearSetupID");

                entity.Property(e => e.YtdactualAmount)
                    .HasColumnType("money")
                    .HasColumnName("YTDActualAmount");

                entity.Property(e => e.YtdbudgetAmount)
                    .HasColumnType("money")
                    .HasColumnName("YTDBudgetAmount");

                entity.Property(e => e.YtdprojectedAmount)
                    .HasColumnType("money")
                    .HasColumnName("YTDProjectedAmount");
            });

            modelBuilder.Entity<BudgetInfoReportPermonth>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("BudgetInfoReport_PERMONTH");

                entity.Property(e => e.AccountGroup)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.ActualEndDate).HasColumnType("datetime");

                entity.Property(e => e.ActualStartDate).HasColumnType("datetime");

                entity.Property(e => e.BdgbudgetInfoDetailRecordId).HasColumnName("BDGBudgetInfo_Detail_RecordID");

                entity.Property(e => e.BudgetAmountP1).HasColumnType("money");

                entity.Property(e => e.BudgetAmountP10).HasColumnType("money");

                entity.Property(e => e.BudgetAmountP11).HasColumnType("money");

                entity.Property(e => e.BudgetAmountP12).HasColumnType("money");

                entity.Property(e => e.BudgetAmountP2).HasColumnType("money");

                entity.Property(e => e.BudgetAmountP3).HasColumnType("money");

                entity.Property(e => e.BudgetAmountP4).HasColumnType("money");

                entity.Property(e => e.BudgetAmountP5).HasColumnType("money");

                entity.Property(e => e.BudgetAmountP6).HasColumnType("money");

                entity.Property(e => e.BudgetAmountP7).HasColumnType("money");

                entity.Property(e => e.BudgetAmountP8).HasColumnType("money");

                entity.Property(e => e.BudgetAmountP9).HasColumnType("money");

                entity.Property(e => e.BudgetInfoDetailLine).HasMaxLength(250);

                entity.Property(e => e.CybudgetAmount)
                    .HasColumnType("money")
                    .HasColumnName("CYBudgetAmount");

                entity.Property(e => e.CydetailBudgetAmount)
                    .HasColumnType("money")
                    .HasColumnName("CYDetailBudgetAmount");

                entity.Property(e => e.Department)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.DepartmentId).HasColumnName("DepartmentID");

                entity.Property(e => e.Description).HasMaxLength(2000);

                entity.Property(e => e.DetailAmount).HasColumnType("money");

                entity.Property(e => e.EndDate).HasColumnType("datetime");

                entity.Property(e => e.IsParent)
                    .IsRequired()
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.LydetailBudgetAmount)
                    .HasColumnType("money")
                    .HasColumnName("LYDetailBudgetAmount");

                entity.Property(e => e.NextYearCode).HasMaxLength(50);

                entity.Property(e => e.NextYearSetup).HasMaxLength(50);

                entity.Property(e => e.NybudgetAmount)
                    .HasColumnType("money")
                    .HasColumnName("NYBudgetAmount");

                entity.Property(e => e.NydetailBudgetAmount)
                    .HasColumnType("money")
                    .HasColumnName("NYDetailBudgetAmount");

                entity.Property(e => e.PreviousActualEndDate).HasColumnType("datetime");

                entity.Property(e => e.PreviousActualStartDate).HasColumnType("datetime");

                entity.Property(e => e.PreviousEndDate).HasColumnType("datetime");

                entity.Property(e => e.PreviousStartDate).HasColumnType("datetime");

                entity.Property(e => e.PreviousYearCode).HasMaxLength(50);

                entity.Property(e => e.PreviousYearSetup).HasMaxLength(50);

                entity.Property(e => e.PybudgetAmount)
                    .HasColumnType("money")
                    .HasColumnName("PYBudgetAmount");

                entity.Property(e => e.StartDate).HasColumnType("datetime");

                entity.Property(e => e.YearCode).HasMaxLength(50);

                entity.Property(e => e.YearSetup)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.YearSetupId).HasColumnName("YearSetupID");

                entity.Property(e => e.YtdactualAmount)
                    .HasColumnType("money")
                    .HasColumnName("YTDActualAmount");

                entity.Property(e => e.YtdprojectedAmount)
                    .HasColumnType("money")
                    .HasColumnName("YTDProjectedAmount");
            });

            modelBuilder.Entity<BudgetInfoReportapwuhp>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("BudgetInfoReportapwuhp");

                entity.Property(e => e.AccountGroup)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.AccountName).HasMaxLength(50);

                entity.Property(e => e.ActualEndDate).HasColumnType("datetime");

                entity.Property(e => e.ActualStartDate).HasColumnType("datetime");

                entity.Property(e => e.BdgbudgetInfoDetailRecordId).HasColumnName("BDGBudgetInfo_Detail_RecordID");

                entity.Property(e => e.BudgetAmountP1).HasColumnType("money");

                entity.Property(e => e.BudgetAmountP10).HasColumnType("money");

                entity.Property(e => e.BudgetAmountP11).HasColumnType("money");

                entity.Property(e => e.BudgetAmountP12).HasColumnType("money");

                entity.Property(e => e.BudgetAmountP2).HasColumnType("money");

                entity.Property(e => e.BudgetAmountP3).HasColumnType("money");

                entity.Property(e => e.BudgetAmountP4).HasColumnType("money");

                entity.Property(e => e.BudgetAmountP5).HasColumnType("money");

                entity.Property(e => e.BudgetAmountP6).HasColumnType("money");

                entity.Property(e => e.BudgetAmountP7).HasColumnType("money");

                entity.Property(e => e.BudgetAmountP8).HasColumnType("money");

                entity.Property(e => e.BudgetAmountP9).HasColumnType("money");

                entity.Property(e => e.BudgetInfoDetailLine).HasMaxLength(250);

                entity.Property(e => e.CurrentAmountP1)
                    .HasColumnType("money")
                    .HasColumnName("currentAmountP1");

                entity.Property(e => e.CurrentAmountP10)
                    .HasColumnType("money")
                    .HasColumnName("currentAmountP10");

                entity.Property(e => e.CurrentAmountP11)
                    .HasColumnType("money")
                    .HasColumnName("currentAmountP11");

                entity.Property(e => e.CurrentAmountP12)
                    .HasColumnType("money")
                    .HasColumnName("currentAmountP12");

                entity.Property(e => e.CurrentAmountP2)
                    .HasColumnType("money")
                    .HasColumnName("currentAmountP2");

                entity.Property(e => e.CurrentAmountP3)
                    .HasColumnType("money")
                    .HasColumnName("currentAmountP3");

                entity.Property(e => e.CurrentAmountP4)
                    .HasColumnType("money")
                    .HasColumnName("currentAmountP4");

                entity.Property(e => e.CurrentAmountP5)
                    .HasColumnType("money")
                    .HasColumnName("currentAmountP5");

                entity.Property(e => e.CurrentAmountP6)
                    .HasColumnType("money")
                    .HasColumnName("currentAmountP6");

                entity.Property(e => e.CurrentAmountP7)
                    .HasColumnType("money")
                    .HasColumnName("currentAmountP7");

                entity.Property(e => e.CurrentAmountP8)
                    .HasColumnType("money")
                    .HasColumnName("currentAmountP8");

                entity.Property(e => e.CurrentAmountP9)
                    .HasColumnType("money")
                    .HasColumnName("currentAmountP9");

                entity.Property(e => e.CurrentMonth)
                    .HasColumnType("money")
                    .HasColumnName("currentMonth");

                entity.Property(e => e.CurrentMonthBudget).HasColumnType("money");

                entity.Property(e => e.CybudgetAmount)
                    .HasColumnType("money")
                    .HasColumnName("CYBudgetAmount");

                entity.Property(e => e.CydetailBudgetAmount)
                    .HasColumnType("money")
                    .HasColumnName("CYDetailBudgetAmount");

                entity.Property(e => e.Department)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.DepartmentId).HasColumnName("DepartmentID");

                entity.Property(e => e.Description).HasMaxLength(2000);

                entity.Property(e => e.DetailAmount).HasColumnType("money");

                entity.Property(e => e.EndDate).HasColumnType("datetime");

                entity.Property(e => e.IsParent)
                    .IsRequired()
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.LydetailBudgetAmount)
                    .HasColumnType("money")
                    .HasColumnName("LYDetailBudgetAmount");

                entity.Property(e => e.NextYearCode).HasMaxLength(50);

                entity.Property(e => e.NextYearSetup).HasMaxLength(50);

                entity.Property(e => e.NybudgetAmount)
                    .HasColumnType("money")
                    .HasColumnName("NYBudgetAmount");

                entity.Property(e => e.NydetailBudgetAmount)
                    .HasColumnType("money")
                    .HasColumnName("NYDetailBudgetAmount");

                entity.Property(e => e.PreviousActualEndDate).HasColumnType("datetime");

                entity.Property(e => e.PreviousActualStartDate).HasColumnType("datetime");

                entity.Property(e => e.PreviousEndDate).HasColumnType("datetime");

                entity.Property(e => e.PreviousStartDate).HasColumnType("datetime");

                entity.Property(e => e.PreviousYearCode).HasMaxLength(50);

                entity.Property(e => e.PreviousYearSetup).HasMaxLength(50);

                entity.Property(e => e.PybudgetAmount)
                    .HasColumnType("money")
                    .HasColumnName("PYBudgetAmount");

                entity.Property(e => e.StartDate).HasColumnType("datetime");

                entity.Property(e => e.YearCode).HasMaxLength(50);

                entity.Property(e => e.YearSetup)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.YearSetupId).HasColumnName("YearSetupID");

                entity.Property(e => e.YtdactualAmount)
                    .HasColumnType("money")
                    .HasColumnName("YTDActualAmount");

                entity.Property(e => e.YtdbudgetAmount)
                    .HasColumnType("money")
                    .HasColumnName("YTDBudgetAmount");

                entity.Property(e => e.YtdprojectedAmount)
                    .HasColumnType("money")
                    .HasColumnName("YTDProjectedAmount");
            });

            modelBuilder.Entity<BudgetInfoReportsp>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("BudgetInfoReportsp");

                entity.Property(e => e.AccountGroup)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.ActualEndDate).HasColumnType("datetime");

                entity.Property(e => e.ActualStartDate).HasColumnType("datetime");

                entity.Property(e => e.BdgbudgetInfoDetailRecordId).HasColumnName("BDGBudgetInfo_Detail_RecordID");

                entity.Property(e => e.BudgetInfoDetailLine).HasMaxLength(250);

                entity.Property(e => e.CybudgetAmount)
                    .HasColumnType("money")
                    .HasColumnName("CYBudgetAmount");

                entity.Property(e => e.Cybudgetamountdp)
                    .HasColumnType("money")
                    .HasColumnName("cybudgetamountdp");

                entity.Property(e => e.CydetailBudgetAmount)
                    .HasColumnType("money")
                    .HasColumnName("CYDetailBudgetAmount");

                entity.Property(e => e.Department)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.DepartmentId).HasColumnName("DepartmentID");

                entity.Property(e => e.DepartmentIdsub).HasColumnName("DepartmentIDsub");

                entity.Property(e => e.Departmentgroup)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Departmentsub)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Description).HasMaxLength(2000);

                entity.Property(e => e.DetailAmount).HasColumnType("money");

                entity.Property(e => e.EndDate).HasColumnType("datetime");

                entity.Property(e => e.IsParent)
                    .IsRequired()
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.LydetailBudgetAmount)
                    .HasColumnType("money")
                    .HasColumnName("LYDetailBudgetAmount");

                entity.Property(e => e.NextYearCode).HasMaxLength(50);

                entity.Property(e => e.NextYearSetup).HasMaxLength(50);

                entity.Property(e => e.Number).HasMaxLength(50);

                entity.Property(e => e.NybudgetAmount)
                    .HasColumnType("money")
                    .HasColumnName("NYBudgetAmount");

                entity.Property(e => e.Nybudgetamountdp)
                    .HasColumnType("money")
                    .HasColumnName("nybudgetamountdp");

                entity.Property(e => e.NydetailBudgetAmount)
                    .HasColumnType("money")
                    .HasColumnName("NYDetailBudgetAmount");

                entity.Property(e => e.PreviousActualEndDate).HasColumnType("datetime");

                entity.Property(e => e.PreviousActualStartDate).HasColumnType("datetime");

                entity.Property(e => e.PreviousEndDate).HasColumnType("datetime");

                entity.Property(e => e.PreviousStartDate).HasColumnType("datetime");

                entity.Property(e => e.PreviousYearCode).HasMaxLength(50);

                entity.Property(e => e.PreviousYearSetup).HasMaxLength(50);

                entity.Property(e => e.PybudgetAmount)
                    .HasColumnType("money")
                    .HasColumnName("PYBudgetAmount");

                entity.Property(e => e.Pybudgetamountdp)
                    .HasColumnType("money")
                    .HasColumnName("pybudgetamountdp");

                entity.Property(e => e.StartDate).HasColumnType("datetime");

                entity.Property(e => e.YearCode).HasMaxLength(50);

                entity.Property(e => e.YearSetup)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.YearSetupId).HasColumnName("YearSetupID");

                entity.Property(e => e.YtdactualAmount)
                    .HasColumnType("money")
                    .HasColumnName("YTDActualAmount");

                entity.Property(e => e.Ytdactualamountdp)
                    .HasColumnType("money")
                    .HasColumnName("ytdactualamountdp");

                entity.Property(e => e.YtdprojectedAmount)
                    .HasColumnType("money")
                    .HasColumnName("YTDProjectedAmount");

                entity.Property(e => e.Ytdprojectedamountdp)
                    .HasColumnType("money")
                    .HasColumnName("ytdprojectedamountdp");
            });

            modelBuilder.Entity<BudgetInfoReportv2>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("BudgetInfoReportv2");

                entity.Property(e => e.AccountGroup)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.ActualEndDate).HasColumnType("datetime");

                entity.Property(e => e.ActualStartDate).HasColumnType("datetime");

                entity.Property(e => e.BdgbudgetInfoDetailRecordId).HasColumnName("BDGBudgetInfo_Detail_RecordID");

                entity.Property(e => e.BudgetInfoDetailLine).HasMaxLength(250);

                entity.Property(e => e.CybudgetAmount)
                    .HasColumnType("money")
                    .HasColumnName("CYBudgetAmount");

                entity.Property(e => e.CydetailBudgetAmount)
                    .HasColumnType("money")
                    .HasColumnName("CYDetailBudgetAmount");

                entity.Property(e => e.Department)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.DepartmentId).HasColumnName("DepartmentID");

                entity.Property(e => e.Description).HasMaxLength(2000);

                entity.Property(e => e.DetailAmount).HasColumnType("money");

                entity.Property(e => e.EndDate).HasColumnType("datetime");

                entity.Property(e => e.IsParent)
                    .IsRequired()
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.LydetailBudgetAmount)
                    .HasColumnType("money")
                    .HasColumnName("LYDetailBudgetAmount");

                entity.Property(e => e.NextYearCode).HasMaxLength(50);

                entity.Property(e => e.NextYearSetup).HasMaxLength(50);

                entity.Property(e => e.NybudgetAmount)
                    .HasColumnType("money")
                    .HasColumnName("NYBudgetAmount");

                entity.Property(e => e.NydetailBudgetAmount)
                    .HasColumnType("money")
                    .HasColumnName("NYDetailBudgetAmount");

                entity.Property(e => e.PreviousActualEndDate).HasColumnType("datetime");

                entity.Property(e => e.PreviousActualStartDate).HasColumnType("datetime");

                entity.Property(e => e.PreviousEndDate).HasColumnType("datetime");

                entity.Property(e => e.PreviousStartDate).HasColumnType("datetime");

                entity.Property(e => e.PreviousYearCode).HasMaxLength(50);

                entity.Property(e => e.PreviousYearSetup).HasMaxLength(50);

                entity.Property(e => e.PybudgetAmount)
                    .HasColumnType("money")
                    .HasColumnName("PYBudgetAmount");

                entity.Property(e => e.StartDate).HasColumnType("datetime");

                entity.Property(e => e.YearCode).HasMaxLength(50);

                entity.Property(e => e.YearSetup)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.YearSetupId).HasColumnName("YearSetupID");

                entity.Property(e => e.YtdactualAmount)
                    .HasColumnType("money")
                    .HasColumnName("YTDActualAmount");

                entity.Property(e => e.YtdprojectedAmount)
                    .HasColumnType("money")
                    .HasColumnName("YTDProjectedAmount");
            });

            modelBuilder.Entity<BudgetInfoRollupReport>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("BudgetInfoRollupReport");

                entity.Property(e => e.AccountGroup)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.ActualEndDate).HasColumnType("datetime");

                entity.Property(e => e.ActualStartDate).HasColumnType("datetime");

                entity.Property(e => e.CybudgetAmount)
                    .HasColumnType("money")
                    .HasColumnName("CYBudgetAmount");

                entity.Property(e => e.Department)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.DepartmentId).HasColumnName("DepartmentID");

                entity.Property(e => e.EndDate).HasColumnType("datetime");

                entity.Property(e => e.IsParent)
                    .IsRequired()
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.NextYearCode).HasMaxLength(50);

                entity.Property(e => e.NextYearSetup).HasMaxLength(50);

                entity.Property(e => e.NybudgetAmount)
                    .HasColumnType("money")
                    .HasColumnName("NYBudgetAmount");

                entity.Property(e => e.PreviousActualEndDate).HasColumnType("datetime");

                entity.Property(e => e.PreviousActualStartDate).HasColumnType("datetime");

                entity.Property(e => e.PreviousEndDate).HasColumnType("datetime");

                entity.Property(e => e.PreviousStartDate).HasColumnType("datetime");

                entity.Property(e => e.PreviousYearCode).HasMaxLength(50);

                entity.Property(e => e.PreviousYearSetup).HasMaxLength(50);

                entity.Property(e => e.PybudgetAmount)
                    .HasColumnType("money")
                    .HasColumnName("PYBudgetAmount");

                entity.Property(e => e.StartDate).HasColumnType("datetime");

                entity.Property(e => e.YearCode).HasMaxLength(50);

                entity.Property(e => e.YearSetup)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.YearSetupId).HasColumnName("YearSetupID");

                entity.Property(e => e.YtdactualAmount)
                    .HasColumnType("money")
                    .HasColumnName("YTDActualAmount");

                entity.Property(e => e.YtdprojectedAmount)
                    .HasColumnType("money")
                    .HasColumnName("YTDProjectedAmount");
            });

            modelBuilder.Entity<BudgetInfoRollupReportBdgbudgetInfoV2>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("BudgetInfoRollupReportBDGbudgetInfo_V2");

                entity.Property(e => e.AccountGroup)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.ActualEndDate).HasColumnType("datetime");

                entity.Property(e => e.ActualStartDate).HasColumnType("datetime");

                entity.Property(e => e.CybudgetAmount)
                    .HasColumnType("money")
                    .HasColumnName("CYBudgetAmount");

                entity.Property(e => e.Department)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.DepartmentId).HasColumnName("DepartmentID");

                entity.Property(e => e.EndDate).HasColumnType("datetime");

                entity.Property(e => e.IsParent)
                    .IsRequired()
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.NextYearCode).HasMaxLength(50);

                entity.Property(e => e.NextYearSetup).HasMaxLength(50);

                entity.Property(e => e.NybudgetAmount)
                    .HasColumnType("money")
                    .HasColumnName("NYBudgetAmount");

                entity.Property(e => e.PreviousActualEndDate).HasColumnType("datetime");

                entity.Property(e => e.PreviousActualStartDate).HasColumnType("datetime");

                entity.Property(e => e.PreviousEndDate).HasColumnType("datetime");

                entity.Property(e => e.PreviousStartDate).HasColumnType("datetime");

                entity.Property(e => e.PreviousYearCode).HasMaxLength(50);

                entity.Property(e => e.PreviousYearSetup).HasMaxLength(50);

                entity.Property(e => e.ProposedBudgetAmountP1).HasColumnType("money");

                entity.Property(e => e.ProposedBudgetAmountP10).HasColumnType("money");

                entity.Property(e => e.ProposedBudgetAmountP11).HasColumnType("money");

                entity.Property(e => e.ProposedBudgetAmountP12).HasColumnType("money");

                entity.Property(e => e.ProposedBudgetAmountP2).HasColumnType("money");

                entity.Property(e => e.ProposedBudgetAmountP3).HasColumnType("money");

                entity.Property(e => e.ProposedBudgetAmountP4).HasColumnType("money");

                entity.Property(e => e.ProposedBudgetAmountP5).HasColumnType("money");

                entity.Property(e => e.ProposedBudgetAmountP6).HasColumnType("money");

                entity.Property(e => e.ProposedBudgetAmountP7).HasColumnType("money");

                entity.Property(e => e.ProposedBudgetAmountP8).HasColumnType("money");

                entity.Property(e => e.ProposedBudgetAmountP9).HasColumnType("money");

                entity.Property(e => e.PybudgetAmount)
                    .HasColumnType("money")
                    .HasColumnName("PYBudgetAmount");

                entity.Property(e => e.StartDate).HasColumnType("datetime");

                entity.Property(e => e.YearCode).HasMaxLength(50);

                entity.Property(e => e.YearSetup)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.YearSetupId).HasColumnName("YearSetupID");

                entity.Property(e => e.YtdactualAmount)
                    .HasColumnType("money")
                    .HasColumnName("YTDActualAmount");

                entity.Property(e => e.YtdprojectedAmount)
                    .HasColumnType("money")
                    .HasColumnName("YTDProjectedAmount");
            });

            modelBuilder.Entity<CommitteeBdgbudgetInfoDetailGrid>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("CommitteeBDGBudgetInfo_DetailGrid");

                entity.Property(e => e.BdgaccountGroupSubGroup)
                    .HasMaxLength(50)
                    .HasColumnName("BDGAccountGroupSubGroup");

                entity.Property(e => e.BdgaccountGroupSubGroupSubGroup)
                    .HasMaxLength(50)
                    .HasColumnName("BDGAccountGroupSubGroupSubGroup");

                entity.Property(e => e.BdgbudgetInfoId).HasColumnName("BDGBudgetInfoID");

                entity.Property(e => e.BudgetAmount)
                    .HasColumnType("money")
                    .HasColumnName("Budget Amount($)");

                entity.Property(e => e.CommitteeType).HasMaxLength(50);

                entity.Property(e => e.CurrentYearBudgetAmount)
                    .HasColumnType("money")
                    .HasColumnName("Current Year Budget Amount($)");

                entity.Property(e => e.NextYearBudgetAmount)
                    .HasColumnType("money")
                    .HasColumnName("Next Year Budget Amount($)");

                entity.Property(e => e.ObjectUid).HasColumnName("ObjectUID");

                entity.Property(e => e.Subject).HasMaxLength(250);

                entity.Property(e => e.WillBeUsingTaskForces).HasMaxLength(10);

                entity.Property(e => e.YtdActuals)
                    .HasColumnType("money")
                    .HasColumnName("YTD Actuals($)");
            });

            modelBuilder.Entity<Country>(entity =>
            {
                entity.HasKey(e => e.ObjectUid);

                entity.ToTable("Country");

                entity.Property(e => e.ObjectUid)
                    .HasColumnName("ObjectUID")
                    .HasDefaultValueSql("(newid())");

                entity.Property(e => e.CreatedBy).HasMaxLength(50);

                entity.Property(e => e.CreatedOn)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Description).HasMaxLength(2000);

                entity.Property(e => e.Display)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasComputedColumnSql("([Name])", false);

                entity.Property(e => e.ImportedObjectUid)
                    .HasMaxLength(50)
                    .HasColumnName("ImportedObjectUID");

                entity.Property(e => e.InstallationUid).HasColumnName("InstallationUID");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.NameAlias)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.OldRecordId).HasColumnName("OldRecordID");

                entity.Property(e => e.RecordId)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("RecordID");

                entity.Property(e => e.SortOrder).HasDefaultValueSql("((100))");

                entity.Property(e => e.UpdatedBy).HasMaxLength(50);

                entity.Property(e => e.UpdatedOn).HasColumnType("datetime");
            });

            modelBuilder.Entity<CountryGrid>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("CountryGrid");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.ObjectUid).HasColumnName("ObjectUID");
            });

            modelBuilder.Entity<CountryState>(entity =>
            {
                entity.HasKey(e => e.ObjectUid);

                entity.ToTable("Country_State");

                entity.Property(e => e.ObjectUid)
                    .HasColumnName("ObjectUID")
                    .HasDefaultValueSql("(newid())");

                entity.Property(e => e.CountryId).HasColumnName("CountryID");

                entity.Property(e => e.CreatedBy).HasMaxLength(50);

                entity.Property(e => e.CreatedOn)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Description).HasMaxLength(2000);

                entity.Property(e => e.Display)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasComputedColumnSql("([Name])", false);

                entity.Property(e => e.ImportedObjectUid)
                    .HasMaxLength(50)
                    .HasColumnName("ImportedObjectUID");

                entity.Property(e => e.InstallationUid).HasColumnName("InstallationUID");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.NameAlias)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.OldRecordId).HasColumnName("OldRecordID");

                entity.Property(e => e.RecordId)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("RecordID");

                entity.Property(e => e.SortOrder).HasDefaultValueSql("((100))");

                entity.Property(e => e.UpdatedBy).HasMaxLength(50);

                entity.Property(e => e.UpdatedOn).HasColumnType("datetime");

                entity.HasOne(d => d.Country)
                    .WithMany(p => p.CountryStates)
                    .HasForeignKey(d => d.CountryId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Country_State_CountryID_Country");
            });

            modelBuilder.Entity<CountryStateGrid>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Country_StateGrid");

                entity.Property(e => e.CountryId).HasColumnName("CountryID");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.ObjectUid).HasColumnName("ObjectUID");
            });

            modelBuilder.Entity<CsActualsPerMonthPerAcct>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("CS_ACTUALS_PER_MONTH_PER_ACCT");

                entity.Property(e => e.Acct)
                    .HasMaxLength(75)
                    .HasColumnName("acct");

                entity.Property(e => e.Amount).HasColumnName("AMOUNT");

                entity.Property(e => e.Date1)
                    .HasMaxLength(55)
                    .IsUnicode(false)
                    .HasColumnName("DATE1");

                entity.Property(e => e.Month1).HasColumnName("MONTH1");
            });

            modelBuilder.Entity<CsActualslinkGp>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("cs_actualslink_gp");

                entity.Property(e => e.Tests)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("tests");
            });

            modelBuilder.Entity<CsAllocationPerMonth>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("CS_allocation_per_month");

                entity.Property(e => e.Objectuid).HasDefaultValueSql("(newid())");

                entity.Property(e => e.Period1).HasColumnType("numeric(18, 6)");

                entity.Property(e => e.Period10).HasColumnType("numeric(18, 6)");

                entity.Property(e => e.Period11).HasColumnType("numeric(18, 6)");

                entity.Property(e => e.Period12).HasColumnType("numeric(18, 6)");

                entity.Property(e => e.Period2).HasColumnType("numeric(18, 6)");

                entity.Property(e => e.Period3).HasColumnType("numeric(18, 6)");

                entity.Property(e => e.Period4).HasColumnType("numeric(18, 6)");

                entity.Property(e => e.Period5).HasColumnType("numeric(18, 6)");

                entity.Property(e => e.Period6).HasColumnType("numeric(18, 6)");

                entity.Property(e => e.Period7).HasColumnType("numeric(18, 6)");

                entity.Property(e => e.Period8).HasColumnType("numeric(18, 6)");

                entity.Property(e => e.Period9).HasColumnType("numeric(18, 6)");

                entity.Property(e => e.Type)
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<CsBdgaccountgroupSubgroupAccountcode>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("cs_bdgaccountgroup_subgroup_accountcode");

                entity.Property(e => e.AccountCode).HasMaxLength(50);

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnName("name");
            });

            modelBuilder.Entity<CsBdgbudgetCount>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("cs_bdgbudget_count");

                entity.Property(e => e.AccountCode).HasMaxLength(50);

                entity.Property(e => e.Count1).HasColumnName("count1");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnName("name");

                entity.Property(e => e.ObjectUid).HasColumnName("ObjectUID");
            });

            modelBuilder.Entity<CsBdgbudgetInfoGrantotalUpdateView>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("cs_BDGBudgetInfo_grantotal_update_view");

                entity.Property(e => e.Bdgdepartmentid).HasColumnName("BDGDepartmentid");

                entity.Property(e => e.Currentmonth)
                    .HasColumnType("money")
                    .HasColumnName("currentmonth");

                entity.Property(e => e.Currentmonthbudget)
                    .HasColumnType("money")
                    .HasColumnName("currentmonthbudget");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnName("name");

                entity.Property(e => e.Number)
                    .HasMaxLength(50)
                    .HasColumnName("number");

                entity.Property(e => e.Yearsetupid).HasColumnName("yearsetupid");

                entity.Property(e => e.YtdactualAmount)
                    .HasColumnType("money")
                    .HasColumnName("YTDActualAmount");

                entity.Property(e => e.YtdbudgetAmount)
                    .HasColumnType("money")
                    .HasColumnName("YTDBudgetAmount");
            });

            modelBuilder.Entity<CsBdgbudgetInfoSum>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("cs_BDGBudgetInfo_sum");

                entity.Property(e => e.BdgbudgetInfoId).HasColumnName("BDGBudgetInfoID");

                entity.Property(e => e.BudgetAmount).HasColumnType("money");

                entity.Property(e => e.CurrentYearBudgetAmount).HasColumnType("money");

                entity.Property(e => e.NextYearBudgetAmount).HasColumnType("money");
            });

            modelBuilder.Entity<CsBdgbudgetSumdetail>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("cs_bdgbudget_sumdetail");

                entity.Property(e => e.AccountCode).HasMaxLength(50);

                entity.Property(e => e.BudgetAmount).HasColumnType("money");

                entity.Property(e => e.Count1).HasColumnName("count1");

                entity.Property(e => e.DetailBudgetAmount)
                    .HasColumnType("money")
                    .HasColumnName("detailBudgetAmount");

                entity.Property(e => e.Detailcurrentyearbudgetamount)
                    .HasColumnType("money")
                    .HasColumnName("detailcurrentyearbudgetamount");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnName("name");

                entity.Property(e => e.ObjectUid).HasColumnName("ObjectUID");

                entity.Property(e => e.ProposedBudgetAmount).HasColumnType("money");

                entity.Property(e => e.Yearname)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnName("yearname");
            });

            modelBuilder.Entity<CsBdgbudgetinfoCompareBdgbudgetinfozDetail>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("cs_bdgbudgetinfo_compare_bdgbudgetinfoz_detail");

                entity.Property(e => e.Accountcode)
                    .HasMaxLength(50)
                    .HasColumnName("accountcode");

                entity.Property(e => e.BudgetAmount).HasColumnType("money");

                entity.Property(e => e.Count3).HasColumnName("count3");

                entity.Property(e => e.CurrentYearBudgetAmount).HasColumnType("money");

                entity.Property(e => e.Maxrecordid).HasColumnName("maxrecordid");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnName("name");

                entity.Property(e => e.Number)
                    .HasMaxLength(50)
                    .HasColumnName("number");

                entity.Property(e => e.Objectuid).HasColumnName("objectuid");
            });

            modelBuilder.Entity<CsBdgbudgetinfoDetailMonthlyProof>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("cs_bdgbudgetinfo_detail_monthly_proof");

                entity.Property(e => e.BdgbudgetInfoid).HasColumnName("BDGBudgetInfoid");

                entity.Property(e => e.Budgetamount)
                    .HasColumnType("money")
                    .HasColumnName("budgetamount");

                entity.Property(e => e.Monthamount)
                    .HasColumnType("money")
                    .HasColumnName("monthamount");

                entity.Property(e => e.Objectuid).HasColumnName("objectuid");
            });

            modelBuilder.Entity<CsBdgbudgetinfoDetailSummary>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("cs_bdgbudgetinfo_detail_summary");

                entity.Property(e => e.Bdgbudgetinfoid).HasColumnName("bdgbudgetinfoid");

                entity.Property(e => e.BudgetAmountP1).HasColumnType("money");

                entity.Property(e => e.BudgetAmountP10).HasColumnType("money");

                entity.Property(e => e.BudgetAmountP11).HasColumnType("money");

                entity.Property(e => e.BudgetAmountP12).HasColumnType("money");

                entity.Property(e => e.BudgetAmountP2).HasColumnType("money");

                entity.Property(e => e.BudgetAmountP3).HasColumnType("money");

                entity.Property(e => e.BudgetAmountP4).HasColumnType("money");

                entity.Property(e => e.BudgetAmountP5).HasColumnType("money");

                entity.Property(e => e.BudgetAmountP6).HasColumnType("money");

                entity.Property(e => e.BudgetAmountP7).HasColumnType("money");

                entity.Property(e => e.BudgetAmountP8).HasColumnType("money");

                entity.Property(e => e.BudgetAmountP9).HasColumnType("money");
            });

            modelBuilder.Entity<CsBdgbudgetinfoDetailView>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("cs_bdgbudgetinfo_detail_view");

                entity.Property(e => e.AccountCode).HasMaxLength(50);

                entity.Property(e => e.AllocationType)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.AnticipatedStartingMonthId).HasColumnName("AnticipatedStarting_MonthID");

                entity.Property(e => e.BdgaccountGroupId).HasColumnName("BDGAccountGroupID");

                entity.Property(e => e.BdgaccountGroupSubGroupId).HasColumnName("BDGAccountGroup_SubGroupID");

                entity.Property(e => e.BdgaccountGroupSubGroupSubGroupId).HasColumnName("BDGAccountGroup_SubGroup_SubGroupID");

                entity.Property(e => e.BdgaccountGroupSubGroupSubGroupSubGroupId).HasColumnName("BDGAccountGroup_SubGroup_SubGroup_SubGroupID");

                entity.Property(e => e.BdgbudgetGroupTypeId).HasColumnName("BDGBudgetGroupTypeID");

                entity.Property(e => e.BdgbudgetInfoId).HasColumnName("BDGBudgetInfoID");

                entity.Property(e => e.BdgcommitteeTypeId).HasColumnName("BDGCommitteeTypeID");

                entity.Property(e => e.BdgemployeeCategoryId).HasColumnName("BDGEmployeeCategoryID");

                entity.Property(e => e.BdgemployeeId).HasColumnName("BDGEmployeeID");

                entity.Property(e => e.BdgemployeePositionId).HasColumnName("BDGEmployeePositionID");

                entity.Property(e => e.BdgemployeeStatusId).HasColumnName("BDGEmployeeStatusID");

                entity.Property(e => e.BdgemployeeTypeId).HasColumnName("BDGEmployeeTypeID");

                entity.Property(e => e.BdgemployeeUnitId).HasColumnName("BDGEmployeeUnitID");

                entity.Property(e => e.BdgemployeeUnitPositionId).HasColumnName("BDGEmployeeUnit_PositionID");

                entity.Property(e => e.BdgemployeeUnitPositionStepId).HasColumnName("BDGEmployeeUnit_Position_StepID");

                entity.Property(e => e.BdgmeetingStatusId).HasColumnName("BDGMeetingStatusID");

                entity.Property(e => e.BdgpositionTypeId).HasColumnName("BDGPositionTypeID");

                entity.Property(e => e.BdgprojectTypeId).HasColumnName("BDGProjectTypeID");

                entity.Property(e => e.Bpl)
                    .HasMaxLength(50)
                    .HasColumnName("BPL");

                entity.Property(e => e.BudgetAmount).HasColumnType("money");

                entity.Property(e => e.BudgetAmountP1).HasColumnType("money");

                entity.Property(e => e.BudgetAmountP10).HasColumnType("money");

                entity.Property(e => e.BudgetAmountP11).HasColumnType("money");

                entity.Property(e => e.BudgetAmountP12).HasColumnType("money");

                entity.Property(e => e.BudgetAmountP2).HasColumnType("money");

                entity.Property(e => e.BudgetAmountP3).HasColumnType("money");

                entity.Property(e => e.BudgetAmountP4).HasColumnType("money");

                entity.Property(e => e.BudgetAmountP5).HasColumnType("money");

                entity.Property(e => e.BudgetAmountP6).HasColumnType("money");

                entity.Property(e => e.BudgetAmountP7).HasColumnType("money");

                entity.Property(e => e.BudgetAmountP8).HasColumnType("money");

                entity.Property(e => e.BudgetAmountP9).HasColumnType("money");

                entity.Property(e => e.BudgetAmountPdiff)
                    .HasColumnType("money")
                    .HasColumnName("BudgetAmountPDiff");

                entity.Property(e => e.BudgetPercentageIncrease).HasColumnType("numeric(18, 3)");

                entity.Property(e => e.Comment).HasMaxLength(2000);

                entity.Property(e => e.CreatedBy).HasMaxLength(50);

                entity.Property(e => e.CreatedOn).HasColumnType("datetime");

                entity.Property(e => e.CurrentYearBudgetAmount).HasColumnType("money");

                entity.Property(e => e.Currentmonth)
                    .HasMaxLength(50)
                    .HasColumnName("currentmonth");

                entity.Property(e => e.Description).HasMaxLength(2000);

                entity.Property(e => e.DetailAmount).HasColumnType("money");

                entity.Property(e => e.Display).HasMaxLength(250);

                entity.Property(e => e.EmployeePosition).HasMaxLength(50);

                entity.Property(e => e.Exclusion).HasMaxLength(50);

                entity.Property(e => e.FringeBdgbudgetInfoDetailId).HasColumnName("Fringe_BDGBudgetInfo_DetailID");

                entity.Property(e => e.ImportedObjectUid)
                    .HasMaxLength(50)
                    .HasColumnName("ImportedObjectUID");

                entity.Property(e => e.InstallationUid).HasColumnName("InstallationUID");

                entity.Property(e => e.LineNumber).HasMaxLength(50);

                entity.Property(e => e.MeetingLocation).HasMaxLength(50);

                entity.Property(e => e.MeetingStartDate).HasMaxLength(50);

                entity.Property(e => e.Name).HasMaxLength(250);

                entity.Property(e => e.NameAlias).HasMaxLength(250);

                entity.Property(e => e.NextYearBudgetAmount).HasColumnType("money");

                entity.Property(e => e.NumberOfMembers).HasColumnName("NUmberOfMembers");

                entity.Property(e => e.ObjectUid).HasColumnName("ObjectUID");

                entity.Property(e => e.OldBdgbudgetInfoId).HasColumnName("Old_BDGBudgetInfoID");

                entity.Property(e => e.OldRecordId).HasColumnName("OldRecordID");

                entity.Property(e => e.OriginalNextYearBudgetAmount).HasColumnType("numeric(18, 3)");

                entity.Property(e => e.OriginialBudgetAmount).HasColumnType("numeric(18, 3)");

                entity.Property(e => e.OriginialTwoMoreYearsBudgetAmount).HasColumnType("numeric(18, 3)");

                entity.Property(e => e.RecordId)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("RecordID");

                entity.Property(e => e.Salary).HasColumnType("money");

                entity.Property(e => e.SlotId)
                    .HasMaxLength(50)
                    .HasColumnName("SlotID");

                entity.Property(e => e.TotalAmount).HasColumnType("money");

                entity.Property(e => e.TwoMoreYearsBudgetAmount).HasColumnType("numeric(18, 3)");

                entity.Property(e => e.UpdatedBy).HasMaxLength(50);

                entity.Property(e => e.UpdatedOn).HasColumnType("datetime");

                entity.Property(e => e.WeeklySalary).HasColumnType("money");

                entity.Property(e => e.WillBeUsingTaskForcesYesNoId).HasColumnName("WillBeUsingTaskForces_YesNoID");

                entity.Property(e => e.YtdactualAmount)
                    .HasColumnType("numeric(18, 3)")
                    .HasColumnName("YTDActualAmount");

                entity.Property(e => e.YtdbudgetAmount)
                    .HasColumnType("numeric(18, 3)")
                    .HasColumnName("YTDBudgetAmount");

                entity.Property(e => e.YtdprojectedAmount)
                    .HasColumnType("numeric(18, 3)")
                    .HasColumnName("YTDProjectedAmount");
            });

            modelBuilder.Entity<CsBdgbudgetinfoTotalsUpdate>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("cs_bdgbudgetinfo_totals_Update");

                entity.Property(e => e.A01objectuid).HasColumnName("a01objectuid");

                entity.Property(e => e.Ao02objectuid).HasColumnName("ao02objectuid");

                entity.Property(e => e.Bag01name)
                    .HasMaxLength(50)
                    .HasColumnName("bag01name");

                entity.Property(e => e.Bag02name)
                    .HasMaxLength(50)
                    .HasColumnName("bag02name");

                entity.Property(e => e.BdgbudgetInfoId).HasColumnName("BDGBudgetInfoID");

                entity.Property(e => e.BudgetAmount).HasColumnType("money");

                entity.Property(e => e.BudgetAmountP1).HasColumnType("money");

                entity.Property(e => e.BudgetAmountP10).HasColumnType("money");

                entity.Property(e => e.BudgetAmountP11).HasColumnType("money");

                entity.Property(e => e.BudgetAmountP12).HasColumnType("money");

                entity.Property(e => e.BudgetAmountP2).HasColumnType("money");

                entity.Property(e => e.BudgetAmountP3).HasColumnType("money");

                entity.Property(e => e.BudgetAmountP4).HasColumnType("money");

                entity.Property(e => e.BudgetAmountP5).HasColumnType("money");

                entity.Property(e => e.BudgetAmountP6).HasColumnType("money");

                entity.Property(e => e.BudgetAmountP7).HasColumnType("money");

                entity.Property(e => e.BudgetAmountP8).HasColumnType("money");

                entity.Property(e => e.BudgetAmountP9).HasColumnType("money");

                entity.Property(e => e.CurrentYearBudgetAmount).HasColumnType("money");

                entity.Property(e => e.NextYearBudgetAmount).HasColumnType("money");

                entity.Property(e => e.Number)
                    .HasMaxLength(50)
                    .HasColumnName("NUMBER");

                entity.Property(e => e.OriginalNextYearBudgetAmount)
                    .HasColumnType("numeric(38, 3)")
                    .HasColumnName("originalNextYearBudgetAmount");

                entity.Property(e => e.OriginialBudgetAmount).HasColumnType("numeric(38, 3)");

                entity.Property(e => e.OriginialTwoMoreYearsBudgetAmount).HasColumnType("numeric(38, 3)");

                entity.Property(e => e.TwoMoreYearsBudgetAmount).HasColumnType("numeric(38, 3)");
            });

            modelBuilder.Entity<CsBdgbudgetinfoTotalsUpdateLevel2>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("cs_bdgbudgetinfo_totals_Update_level2");

                entity.Property(e => e.Bag01name)
                    .HasMaxLength(50)
                    .HasColumnName("bag01name");

                entity.Property(e => e.BdgbudgetInfoId).HasColumnName("BDGBudgetInfoID");

                entity.Property(e => e.BudgetAmount).HasColumnType("money");

                entity.Property(e => e.CurrentYearBudgetAmount).HasColumnType("money");

                entity.Property(e => e.NextYearBudgetAmount).HasColumnType("money");

                entity.Property(e => e.OriginalNextYearBudgetAmount)
                    .HasColumnType("numeric(38, 3)")
                    .HasColumnName("originalNextYearBudgetAmount");

                entity.Property(e => e.OriginialBudgetAmount).HasColumnType("numeric(38, 3)");

                entity.Property(e => e.OriginialTwoMoreYearsBudgetAmount).HasColumnType("numeric(38, 3)");

                entity.Property(e => e.TwoMoreYearsBudgetAmount).HasColumnType("numeric(38, 3)");
            });

            modelBuilder.Entity<CsBdgbudgetinfoTotalsUpdateLevel3>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("cs_bdgbudgetinfo_totals_Update_level3");

                entity.Property(e => e.Bag02name)
                    .HasMaxLength(50)
                    .HasColumnName("bag02name");

                entity.Property(e => e.BdgbudgetInfoId).HasColumnName("BDGBudgetInfoID");

                entity.Property(e => e.BudgetAmount).HasColumnType("money");

                entity.Property(e => e.CurrentYearBudgetAmount).HasColumnType("money");

                entity.Property(e => e.NextYearBudgetAmount).HasColumnType("money");

                entity.Property(e => e.OriginalNextYearBudgetAmount)
                    .HasColumnType("numeric(38, 3)")
                    .HasColumnName("originalNextYearBudgetAmount");

                entity.Property(e => e.OriginialBudgetAmount).HasColumnType("numeric(38, 3)");

                entity.Property(e => e.OriginialTwoMoreYearsBudgetAmount).HasColumnType("numeric(38, 3)");

                entity.Property(e => e.TwoMoreYearsBudgetAmount).HasColumnType("numeric(38, 3)");
            });

            modelBuilder.Entity<CsBudgetInfoReportsp>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("cs_BudgetInfoReportsp");

                entity.Property(e => e.BdgaccountGroupId).HasColumnName("BDGAccountGroupID");

                entity.Property(e => e.BdgdepartmentGroupId).HasColumnName("BDGDepartmentGroupID");

                entity.Property(e => e.BudgetAmount).HasColumnType("money");

                entity.Property(e => e.EstimatedBudgetAmount).HasColumnType("money");

                entity.Property(e => e.ProposedBudgetAmount).HasColumnType("money");

                entity.Property(e => e.Yearsetupid).HasColumnName("yearsetupid");

                entity.Property(e => e.YtdactualAmount)
                    .HasColumnType("money")
                    .HasColumnName("YTDActualAmount");

                entity.Property(e => e.YtdprojectedAmount)
                    .HasColumnType("money")
                    .HasColumnName("YTDProjectedAmount");
            });

            modelBuilder.Entity<CsBudgetInfoReportspDept>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("cs_BudgetInfoReportsp_dept");

                entity.Property(e => e.BdgaccountGroupId).HasColumnName("BDGAccountGroupID");

                entity.Property(e => e.BdgdepartmentId).HasColumnName("BDGDepartmentID");

                entity.Property(e => e.BudgetAmount).HasColumnType("money");

                entity.Property(e => e.EstimatedBudgetAmount).HasColumnType("money");

                entity.Property(e => e.ProposedBudgetAmount).HasColumnType("money");

                entity.Property(e => e.Yearsetupid).HasColumnName("yearsetupid");

                entity.Property(e => e.YtdactualAmount)
                    .HasColumnType("money")
                    .HasColumnName("YTDActualAmount");

                entity.Property(e => e.YtdprojectedAmount)
                    .HasColumnType("money")
                    .HasColumnName("YTDProjectedAmount");
            });

            modelBuilder.Entity<CsBudgetInfoReview>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("cs_budget_info_review");

                entity.Property(e => e.Accountcode)
                    .HasMaxLength(50)
                    .HasColumnName("accountcode");

                entity.Property(e => e.Acctgroupname)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnName("acctgroupname");

                entity.Property(e => e.Deptname)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnName("deptname");

                entity.Property(e => e.Deptno)
                    .HasMaxLength(50)
                    .HasColumnName("deptno");

                entity.Property(e => e.DtBudgetamountLy)
                    .HasColumnType("money")
                    .HasColumnName("dt_budgetamountLY");

                entity.Property(e => e.DtBudgetamountNy)
                    .HasColumnType("money")
                    .HasColumnName("dt_budgetamount_NY");

                entity.Property(e => e.DtBudgetamoutCy)
                    .HasColumnType("money")
                    .HasColumnName("dt_budgetamout_CY");

                entity.Property(e => e.HdBudgetamountLy)
                    .HasColumnType("money")
                    .HasColumnName("hd_budgetamountLY");

                entity.Property(e => e.HdBudgetamountNy)
                    .HasColumnType("money")
                    .HasColumnName("hd_budgetamount_NY");

                entity.Property(e => e.HdBudgetamoutCy)
                    .HasColumnType("money")
                    .HasColumnName("hd_budgetamout_CY");

                entity.Property(e => e.HdYtdactualAmount)
                    .HasColumnType("money")
                    .HasColumnName("hd_YTDActualAmount");

                entity.Property(e => e.HdYtdprojectedAmount)
                    .HasColumnType("money")
                    .HasColumnName("hdYTDProjectedAmount");

                entity.Property(e => e.Headerrecordid).HasColumnName("headerrecordid");

                entity.Property(e => e.LineName)
                    .HasMaxLength(250)
                    .HasColumnName("lineName");

                entity.Property(e => e.Linedescription)
                    .HasMaxLength(2000)
                    .HasColumnName("linedescription");

                entity.Property(e => e.Linerecordid).HasColumnName("linerecordid");

                entity.Property(e => e.Name)
                    .HasMaxLength(50)
                    .HasColumnName("name");

                entity.Property(e => e.Yearname)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnName("yearname");
            });

            modelBuilder.Entity<CsBudgetInfoReviewChange>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("cs_budget_info_review_change");

                entity.Property(e => e.Accountcode)
                    .HasMaxLength(50)
                    .HasColumnName("accountcode");

                entity.Property(e => e.Acctgroupname)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnName("acctgroupname");

                entity.Property(e => e.Deptname)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnName("deptname");

                entity.Property(e => e.Deptno)
                    .HasMaxLength(50)
                    .HasColumnName("deptno");

                entity.Property(e => e.DtBudgetamountLy)
                    .HasColumnType("money")
                    .HasColumnName("dt_budgetamountLY");

                entity.Property(e => e.DtBudgetamountNy)
                    .HasColumnType("money")
                    .HasColumnName("dt_budgetamount_NY");

                entity.Property(e => e.DtBudgetamoutCy)
                    .HasColumnType("money")
                    .HasColumnName("dt_budgetamout_CY");

                entity.Property(e => e.HdBudgetamountLy)
                    .HasColumnType("money")
                    .HasColumnName("hd_budgetamountLY");

                entity.Property(e => e.HdBudgetamountNy)
                    .HasColumnType("money")
                    .HasColumnName("hd_budgetamount_NY");

                entity.Property(e => e.HdBudgetamoutCy)
                    .HasColumnType("money")
                    .HasColumnName("hd_budgetamout_CY");

                entity.Property(e => e.HdYtdactualAmount)
                    .HasColumnType("money")
                    .HasColumnName("hd_YTDActualAmount");

                entity.Property(e => e.HdYtdprojectedAmount)
                    .HasColumnType("money")
                    .HasColumnName("hdYTDProjectedAmount");

                entity.Property(e => e.LineName)
                    .HasMaxLength(250)
                    .HasColumnName("lineName");

                entity.Property(e => e.Linedescription)
                    .HasMaxLength(2000)
                    .HasColumnName("linedescription");

                entity.Property(e => e.Linerecordid).HasColumnName("linerecordid");

                entity.Property(e => e.Name)
                    .HasMaxLength(50)
                    .HasColumnName("name");

                entity.Property(e => e.Processdatedetail)
                    .HasColumnType("datetime")
                    .HasColumnName("processdatedetail");

                entity.Property(e => e.Processdatehd)
                    .HasColumnType("datetime")
                    .HasColumnName("processdatehd");

                entity.Property(e => e.Yearname)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnName("yearname");
            });

            modelBuilder.Entity<CsBudgetPerMonth>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("cs_budget_per_month");

                entity.Property(e => e.Test1)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("test1");
            });

            modelBuilder.Entity<CsBudgetall>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("cs_budgetall");

                entity.Property(e => e.AccountCode).HasMaxLength(50);

                entity.Property(e => e.AcctType)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.Acctgroup)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnName("acctgroup");

                entity.Property(e => e.BdgbudgetInfoId).HasColumnName("BDGBudgetInfoID");

                entity.Property(e => e.BdgbudgetinfoDetailid).HasColumnName("bdgbudgetinfo_detailid");

                entity.Property(e => e.Bdgdetailname)
                    .HasMaxLength(250)
                    .HasColumnName("bdgdetailname");

                entity.Property(e => e.BudgetAmount).HasColumnType("money");

                entity.Property(e => e.BudgetAmountP1).HasColumnType("money");

                entity.Property(e => e.BudgetAmountP10).HasColumnType("money");

                entity.Property(e => e.BudgetAmountP11).HasColumnType("money");

                entity.Property(e => e.BudgetAmountP12).HasColumnType("money");

                entity.Property(e => e.BudgetAmountP2).HasColumnType("money");

                entity.Property(e => e.BudgetAmountP3).HasColumnType("money");

                entity.Property(e => e.BudgetAmountP4).HasColumnType("money");

                entity.Property(e => e.BudgetAmountP5).HasColumnType("money");

                entity.Property(e => e.BudgetAmountP6).HasColumnType("money");

                entity.Property(e => e.BudgetAmountP7).HasColumnType("money");

                entity.Property(e => e.BudgetAmountP8).HasColumnType("money");

                entity.Property(e => e.BudgetAmountP9).HasColumnType("money");

                entity.Property(e => e.Budgetname)
                    .HasMaxLength(50)
                    .HasColumnName("budgetname");

                entity.Property(e => e.Departmentname)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnName("departmentname");

                entity.Property(e => e.Deptnumber)
                    .HasMaxLength(50)
                    .HasColumnName("deptnumber");

                entity.Property(e => e.DetailBudgetamount)
                    .HasColumnType("money")
                    .HasColumnName("detail_budgetamount");

                entity.Property(e => e.DetailCurrentamount)
                    .HasColumnType("money")
                    .HasColumnName("detail_currentamount");

                entity.Property(e => e.DetailName).HasMaxLength(250);

                entity.Property(e => e.DetailNextyear)
                    .HasColumnType("money")
                    .HasColumnName("detail_nextyear");

                entity.Property(e => e.Detaildescription)
                    .HasMaxLength(2000)
                    .HasColumnName("detaildescription");

                entity.Property(e => e.Detailoldrecorno).HasColumnName("detailoldrecorno");

                entity.Property(e => e.Detailrecorid).HasColumnName("detailrecorid");

                entity.Property(e => e.Employeeno)
                    .HasMaxLength(50)
                    .HasColumnName("employeeno");

                entity.Property(e => e.EstimatedBudgetAmount).HasColumnType("money");

                entity.Property(e => e.Number)
                    .HasMaxLength(50)
                    .HasColumnName("number");

                entity.Property(e => e.OldRecordId).HasColumnName("OldRecordID");

                entity.Property(e => e.ProposedBudgetAmount).HasColumnType("money");

                entity.Property(e => e.ProposedBudgetAmountP1).HasColumnType("money");

                entity.Property(e => e.ProposedBudgetAmountP10).HasColumnType("money");

                entity.Property(e => e.ProposedBudgetAmountP11).HasColumnType("money");

                entity.Property(e => e.ProposedBudgetAmountP12).HasColumnType("money");

                entity.Property(e => e.ProposedBudgetAmountP2).HasColumnType("money");

                entity.Property(e => e.ProposedBudgetAmountP3).HasColumnType("money");

                entity.Property(e => e.ProposedBudgetAmountP4).HasColumnType("money");

                entity.Property(e => e.ProposedBudgetAmountP5).HasColumnType("money");

                entity.Property(e => e.ProposedBudgetAmountP6).HasColumnType("money");

                entity.Property(e => e.ProposedBudgetAmountP7).HasColumnType("money");

                entity.Property(e => e.ProposedBudgetAmountP8).HasColumnType("money");

                entity.Property(e => e.ProposedBudgetAmountP9).HasColumnType("money");

                entity.Property(e => e.Recordid).HasColumnName("recordid");

                entity.Property(e => e.Yearname)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnName("yearname");

                entity.Property(e => e.YtdactualAmount)
                    .HasColumnType("money")
                    .HasColumnName("YTDActualAmount");
            });

            modelBuilder.Entity<CsBudgetallHeader>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("cs_budgetall_HEADER");

                entity.Property(e => e.AccountCode).HasMaxLength(50);

                entity.Property(e => e.Acctgroup)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnName("acctgroup");

                entity.Property(e => e.BudgetAmount).HasColumnType("money");

                entity.Property(e => e.Budgetname)
                    .HasMaxLength(50)
                    .HasColumnName("budgetname");

                entity.Property(e => e.Departmentname)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnName("departmentname");

                entity.Property(e => e.Deptnumber)
                    .HasMaxLength(50)
                    .HasColumnName("deptnumber");

                entity.Property(e => e.EstimatedBudgetAmount).HasColumnType("money");

                entity.Property(e => e.Grouptype)
                    .IsRequired()
                    .HasMaxLength(7)
                    .IsUnicode(false)
                    .HasColumnName("grouptype");

                entity.Property(e => e.Number)
                    .HasMaxLength(50)
                    .HasColumnName("number");

                entity.Property(e => e.ProposedBudgetAmount).HasColumnType("money");

                entity.Property(e => e.Recordid).HasColumnName("recordid");

                entity.Property(e => e.Yearname)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnName("yearname");

                entity.Property(e => e.YtdactualAmount)
                    .HasColumnType("money")
                    .HasColumnName("YTDActualAmount");
            });

            modelBuilder.Entity<CsBudgetlinkGp>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("cs_budgetlink_gp");

                entity.Property(e => e.Test1)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("test1");
            });

            modelBuilder.Entity<CsBudgetlinkProjectedGp>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("cs_budgetlink_projected_gp");

                entity.Property(e => e.Test2)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("test2");
            });

            modelBuilder.Entity<CsBudgetsummary>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("cs_budgetsummary");

                entity.Property(e => e.Test1)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("test1");
            });

            modelBuilder.Entity<CsBudgetsummaryMonth>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("cs_budgetsummary_month");

                entity.Property(e => e.Test1)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("test1");
            });

            modelBuilder.Entity<CsBudgetsummaryYtd>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("cs_budgetsummary_ytd");

                entity.Property(e => e.Test1)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("test1");
            });

            modelBuilder.Entity<CsBudgetupdate>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("cs_budgetupdate");

                entity.Property(e => e.Test1)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("test1");
            });

            modelBuilder.Entity<CsDuplicateEmployee>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("cs_duplicate_employee");

                entity.Property(e => e.Test)
                    .IsRequired()
                    .HasMaxLength(4)
                    .IsUnicode(false)
                    .HasColumnName("test");
            });

            modelBuilder.Entity<CsDuplicateEmployee2>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("cs_duplicate_employee_2");

                entity.Property(e => e.Test1)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("test1");
            });

            modelBuilder.Entity<CsGlAccount>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("cs_gl_account");

                entity.Property(e => e.Account)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.AccountCategory)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.AccountDesc)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.AccountGroup)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.AccountKey)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.AccountType)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CashFlowsType)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ClearBalance)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CompanyCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.DateCreated).HasColumnType("date");

                entity.Property(e => e.DateEnd).HasColumnType("date");

                entity.Property(e => e.DateStart).HasColumnType("date");

                entity.Property(e => e.DateUpdated).HasColumnType("date");

                entity.Property(e => e.MainAccountCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.RawAccount)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.RollupCode1)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.RollupCode2)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.RollupCode3)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.RollupCode4)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Status)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.TimeCreated)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.TimeUpdated)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UserCreatedKey)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UserUpdatedKey)
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<CsGlBalance>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("cs_gl_balances");

                entity.Property(e => e.Test1)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("test1");
            });

            modelBuilder.Entity<CsGpBudgetSummary>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("cs_gp_budget_summary");

                entity.Property(e => e.Test2)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("test2");
            });

            modelBuilder.Entity<CsGpYtdSummary>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("cs_gp_ytd_summary");

                entity.Property(e => e.Test1)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("test1");
            });

            modelBuilder.Entity<CsGrandtotalFix>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("cs_grandtotal_fix");

                entity.Property(e => e.Bdgdepartmentid).HasColumnName("BDGDepartmentid");

                entity.Property(e => e.Maxrecordid).HasColumnName("maxrecordid");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnName("name");
            });

            modelBuilder.Entity<CsGrandtotalFix2>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("cs_grandtotal_fix2");

                entity.Property(e => e.Bdgdepartmentid).HasColumnName("BDGDepartmentid");

                entity.Property(e => e.Maxrecordid).HasColumnName("maxrecordid");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnName("name");
            });

            modelBuilder.Entity<CsLrpgltransaction>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("cs_lrpgltransaction");

                entity.Property(e => e.Count1).HasColumnName("count1");

                entity.Property(e => e.IdField)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("ID_FIELD");

                entity.Property(e => e.Maxrecordid).HasColumnName("maxrecordid");
            });

            modelBuilder.Entity<CsLrpgltransactionTemp>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("cs_lrpgltransaction_temp");

                entity.Property(e => e.Acct)
                    .HasMaxLength(75)
                    .HasColumnName("ACCT");

                entity.Property(e => e.Amount).HasColumnName("amount");

                entity.Property(e => e.BdgaccountGroup)
                    .HasMaxLength(50)
                    .HasColumnName("BDGAccountGroup");

                entity.Property(e => e.BdgaccountGroupSubGroup)
                    .HasMaxLength(50)
                    .HasColumnName("BDGAccountGroup_SubGroup");

                entity.Property(e => e.BdgaccountGroupSubGroupSubGroup)
                    .HasMaxLength(50)
                    .HasColumnName("BDGAccountGroup_SubGroup_SubGroup");

                entity.Property(e => e.BdgaccountGroupSubGroupSubGroupSubGroup)
                    .HasMaxLength(50)
                    .HasColumnName("BDGAccountGroup_SubGroup_SubGroup_SubGroup");

                entity.Property(e => e.BdgaccountgroupSortorder).HasColumnName("bdgaccountgroup_sortorder");

                entity.Property(e => e.Bdgaccountgroupid).HasColumnName("bdgaccountgroupid");

                entity.Property(e => e.Bdgdeaprtmentid).HasColumnName("bdgdeaprtmentid");

                entity.Property(e => e.Bdgdepartmentname)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnName("bdgdepartmentname");

                entity.Property(e => e.Cpnyid)
                    .HasMaxLength(75)
                    .HasColumnName("CPNYID");

                entity.Property(e => e.Fiscyr)
                    .HasMaxLength(75)
                    .HasColumnName("FISCYR");

                entity.Property(e => e.TranDate)
                    .HasMaxLength(63)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<CsLrpgltransactionTempStep2>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("cs_lrpgltransaction_temp_step2");

                entity.Property(e => e.BdgaccountGroup)
                    .HasMaxLength(50)
                    .HasColumnName("BDGAccountGroup");

                entity.Property(e => e.BdgaccountGroupSubGroup)
                    .HasMaxLength(50)
                    .HasColumnName("BDGAccountGroup_SubGroup");

                entity.Property(e => e.BdgaccountGroupSubGroupSubGroup)
                    .HasMaxLength(50)
                    .HasColumnName("BDGAccountGroup_SubGroup_SubGroup");

                entity.Property(e => e.BdgaccountGroupSubGroupSubGroupSubGroup)
                    .HasMaxLength(50)
                    .HasColumnName("BDGAccountGroup_SubGroup_SubGroup_SubGroup");

                entity.Property(e => e.Bdgaccountgroupid).HasColumnName("bdgaccountgroupid");

                entity.Property(e => e.Bdgdeaprtmentid).HasColumnName("bdgdeaprtmentid");

                entity.Property(e => e.Bdgdepartmentname)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnName("bdgdepartmentname");

                entity.Property(e => e.Cpnyid)
                    .HasMaxLength(75)
                    .HasColumnName("CPNYID");

                entity.Property(e => e.Fiscyr)
                    .HasMaxLength(75)
                    .HasColumnName("FISCYR");
            });

            modelBuilder.Entity<CsSalaryFringeStep1>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("cs_salary_fringe_step1");

                entity.Property(e => e.Bagsname)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnName("bagsname");

                entity.Property(e => e.Bbidname)
                    .HasMaxLength(250)
                    .HasColumnName("bbidname");

                entity.Property(e => e.BudgetAmount).HasColumnType("money");

                entity.Property(e => e.Fringeacct)
                    .HasMaxLength(58)
                    .HasColumnName("fringeacct");

                entity.Property(e => e.Linenumber).HasMaxLength(50);

                entity.Property(e => e.NextYearBudgetAmount).HasColumnType("money");

                entity.Property(e => e.YearSetupId).HasColumnName("YearSetupID");
            });

            modelBuilder.Entity<CsSalaryFringeStep2>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("cs_salary_fringe_step2");

                entity.Property(e => e.BudgetAmount).HasColumnType("money");

                entity.Property(e => e.NextYearBudgetAmount).HasColumnType("money");

                entity.Property(e => e.ObjectUid).HasColumnName("ObjectUID");
            });

            modelBuilder.Entity<CsSummaryMonthlybudgetActual>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("cs_summary_monthlybudget_actual");

                entity.Property(e => e.Bdgdepartmentid).HasColumnName("bdgdepartmentid");

                entity.Property(e => e.Budgetamount)
                    .HasColumnType("money")
                    .HasColumnName("budgetamount");

                entity.Property(e => e.Currentamountp1)
                    .HasColumnType("money")
                    .HasColumnName("currentamountp1");

                entity.Property(e => e.Currentamountp10)
                    .HasColumnType("money")
                    .HasColumnName("currentamountp10");

                entity.Property(e => e.Currentamountp11)
                    .HasColumnType("money")
                    .HasColumnName("currentamountp11");

                entity.Property(e => e.Currentamountp12)
                    .HasColumnType("money")
                    .HasColumnName("currentamountp12");

                entity.Property(e => e.Currentamountp2)
                    .HasColumnType("money")
                    .HasColumnName("currentamountp2");

                entity.Property(e => e.Currentamountp3)
                    .HasColumnType("money")
                    .HasColumnName("currentamountp3");

                entity.Property(e => e.Currentamountp4)
                    .HasColumnType("money")
                    .HasColumnName("currentamountp4");

                entity.Property(e => e.Currentamountp5)
                    .HasColumnType("money")
                    .HasColumnName("currentamountp5");

                entity.Property(e => e.Currentamountp6)
                    .HasColumnType("money")
                    .HasColumnName("currentamountp6");

                entity.Property(e => e.Currentamountp7)
                    .HasColumnType("money")
                    .HasColumnName("currentamountp7");

                entity.Property(e => e.Currentamountp8)
                    .HasColumnType("money")
                    .HasColumnName("currentamountp8");

                entity.Property(e => e.Currentamountp9)
                    .HasColumnType("money")
                    .HasColumnName("currentamountp9");

                entity.Property(e => e.Currentmonth)
                    .HasColumnType("money")
                    .HasColumnName("currentmonth");

                entity.Property(e => e.Currentmonthbudget)
                    .HasColumnType("money")
                    .HasColumnName("currentmonthbudget");

                entity.Property(e => e.Proposedbudgetamountp1)
                    .HasColumnType("money")
                    .HasColumnName("proposedbudgetamountp1");

                entity.Property(e => e.Proposedbudgetamountp10)
                    .HasColumnType("money")
                    .HasColumnName("proposedbudgetamountp10");

                entity.Property(e => e.Proposedbudgetamountp11)
                    .HasColumnType("money")
                    .HasColumnName("proposedbudgetamountp11");

                entity.Property(e => e.Proposedbudgetamountp12)
                    .HasColumnType("money")
                    .HasColumnName("proposedbudgetamountp12");

                entity.Property(e => e.Proposedbudgetamountp2)
                    .HasColumnType("money")
                    .HasColumnName("proposedbudgetamountp2");

                entity.Property(e => e.Proposedbudgetamountp3)
                    .HasColumnType("money")
                    .HasColumnName("proposedbudgetamountp3");

                entity.Property(e => e.Proposedbudgetamountp4)
                    .HasColumnType("money")
                    .HasColumnName("proposedbudgetamountp4");

                entity.Property(e => e.Proposedbudgetamountp5)
                    .HasColumnType("money")
                    .HasColumnName("proposedbudgetamountp5");

                entity.Property(e => e.Proposedbudgetamountp6)
                    .HasColumnType("money")
                    .HasColumnName("proposedbudgetamountp6");

                entity.Property(e => e.Proposedbudgetamountp7)
                    .HasColumnType("money")
                    .HasColumnName("proposedbudgetamountp7");

                entity.Property(e => e.Proposedbudgetamountp8)
                    .HasColumnType("money")
                    .HasColumnName("proposedbudgetamountp8");

                entity.Property(e => e.Proposedbudgetamountp9)
                    .HasColumnType("money")
                    .HasColumnName("proposedbudgetamountp9");

                entity.Property(e => e.Yearsetupid).HasColumnName("yearsetupid");

                entity.Property(e => e.YtdactualAmount)
                    .HasColumnType("money")
                    .HasColumnName("YTDActualAmount");

                entity.Property(e => e.YtdbudgetAmount)
                    .HasColumnType("money")
                    .HasColumnName("YTDBudgetAmount");
            });

            modelBuilder.Entity<CsTotalBudgetamountByBudgetinfoid>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("cs_total_budgetamount_by_budgetinfoid");

                entity.Property(e => e.Bdgbudgetinfoid).HasColumnName("bdgbudgetinfoid");

                entity.Property(e => e.Budgetamount)
                    .HasColumnType("money")
                    .HasColumnName("budgetamount");

                entity.Property(e => e.Count1).HasColumnName("count1");
            });

            modelBuilder.Entity<Css1099Amount>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("css_1099_amount");

                entity.Property(e => e.Test).HasColumnName("test");
            });

            modelBuilder.Entity<Css1099AmountDetail>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("css_1099_amount_Detail");

                entity.Property(e => e.Test).HasColumnName("test");
            });

            modelBuilder.Entity<Css1099TempStep1a>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("CSS_1099_TEMP_STEP1a");

                entity.Property(e => e.Test)
                    .IsRequired()
                    .HasMaxLength(4)
                    .IsUnicode(false)
                    .HasColumnName("test");
            });

            modelBuilder.Entity<Css1099TempStep1aTemp>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("CSS_1099_TEMP_STEP1a_temp");

                entity.Property(e => e.Acnmvndr)
                    .HasMaxLength(21)
                    .IsUnicode(false)
                    .HasColumnName("ACNMVNDR")
                    .IsFixedLength(true);

                entity.Property(e => e.Acpuridx).HasColumnName("ACPURIDX");

                entity.Property(e => e.Address1)
                    .HasMaxLength(61)
                    .IsUnicode(false)
                    .HasColumnName("ADDRESS1")
                    .IsFixedLength(true);

                entity.Property(e => e.Address2)
                    .HasMaxLength(61)
                    .IsUnicode(false)
                    .HasColumnName("ADDRESS2")
                    .IsFixedLength(true);

                entity.Property(e => e.Address3)
                    .HasMaxLength(61)
                    .IsUnicode(false)
                    .HasColumnName("ADDRESS3")
                    .IsFixedLength(true);

                entity.Property(e => e.Brthdate)
                    .HasColumnType("datetime")
                    .HasColumnName("BRTHDATE");

                entity.Property(e => e.Cbvat).HasColumnName("CBVAT");

                entity.Property(e => e.Ccode)
                    .HasMaxLength(7)
                    .IsUnicode(false)
                    .HasColumnName("CCode")
                    .IsFixedLength(true);

                entity.Property(e => e.Checkno)
                    .IsRequired()
                    .HasMaxLength(22)
                    .IsUnicode(false)
                    .HasColumnName("checkno");

                entity.Property(e => e.Chekbkid)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("CHEKBKID")
                    .IsFixedLength(true);

                entity.Property(e => e.City)
                    .HasMaxLength(35)
                    .IsUnicode(false)
                    .HasColumnName("CITY")
                    .IsFixedLength(true);

                entity.Property(e => e.Comment1)
                    .HasMaxLength(31)
                    .IsUnicode(false)
                    .HasColumnName("COMMENT1")
                    .IsFixedLength(true);

                entity.Property(e => e.Comment2)
                    .HasMaxLength(31)
                    .IsUnicode(false)
                    .HasColumnName("COMMENT2")
                    .IsFixedLength(true);

                entity.Property(e => e.Company)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Country)
                    .HasMaxLength(61)
                    .IsUnicode(false)
                    .HasColumnName("COUNTRY")
                    .IsFixedLength(true);

                entity.Property(e => e.Creatddt)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATDDT");

                entity.Property(e => e.Credtlmt).HasColumnName("CREDTLMT");

                entity.Property(e => e.Crlmtdlr)
                    .HasColumnType("numeric(19, 5)")
                    .HasColumnName("CRLMTDLR");

                entity.Property(e => e.Crtcomdt)
                    .HasColumnType("datetime")
                    .HasColumnName("CRTCOMDT");

                entity.Property(e => e.Crtexpdt)
                    .HasColumnType("datetime")
                    .HasColumnName("CRTEXPDT");

                entity.Property(e => e.Curncyid)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("CURNCYID")
                    .IsFixedLength(true);

                entity.Property(e => e.Declid)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("DECLID")
                    .IsFixedLength(true);

                entity.Property(e => e.DexRowId).HasColumnName("DEX_ROW_ID");

                entity.Property(e => e.DexRowTs)
                    .HasColumnType("datetime")
                    .HasColumnName("DEX_ROW_TS");

                entity.Property(e => e.Disgrper).HasColumnName("DISGRPER");

                entity.Property(e => e.Docfmtid)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("DOCFMTID")
                    .IsFixedLength(true);

                entity.Property(e => e.DocumentAmount).HasColumnType("money");

                entity.Property(e => e.DocumentNo).HasMaxLength(50);

                entity.Property(e => e.Duegrper).HasColumnName("DUEGRPER");

                entity.Property(e => e.Dxvarnum)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("DXVARNUM")
                    .IsFixedLength(true);

                entity.Property(e => e.Faxnumbr)
                    .HasMaxLength(21)
                    .IsUnicode(false)
                    .HasColumnName("FAXNUMBR")
                    .IsFixedLength(true);

                entity.Property(e => e.Freeonboard).HasColumnName("FREEONBOARD");

                entity.Property(e => e.Govcrpid)
                    .HasMaxLength(31)
                    .IsUnicode(false)
                    .HasColumnName("GOVCRPID")
                    .IsFixedLength(true);

                entity.Property(e => e.Govindid)
                    .HasMaxLength(31)
                    .IsUnicode(false)
                    .HasColumnName("GOVINDID")
                    .IsFixedLength(true);

                entity.Property(e => e.Hold).HasColumnName("HOLD");

                entity.Property(e => e.Kgldsths).HasColumnName("KGLDSTHS");

                entity.Property(e => e.Kpcalhst).HasColumnName("KPCALHST");

                entity.Property(e => e.Kperhist).HasColumnName("KPERHIST");

                entity.Property(e => e.Kptrxhst).HasColumnName("KPTRXHST");

                entity.Property(e => e.Lrpcompanyname)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnName("lrpcompanyname");

                entity.Property(e => e.Lrpten99BoxNoId).HasColumnName("LRPTen99BoxNoID");

                entity.Property(e => e.Lrpten99TaxTypeId).HasColumnName("LRPTen99TaxTypeID");

                entity.Property(e => e.LrpvendorVoucherid).HasColumnName("lrpvendor_voucherid");

                entity.Property(e => e.Lrpvendorid).HasColumnName("lrpvendorid");

                entity.Property(e => e.Maxindlr)
                    .HasColumnType("numeric(19, 5)")
                    .HasColumnName("MAXINDLR");

                entity.Property(e => e.Minorder)
                    .HasColumnType("numeric(19, 5)")
                    .HasColumnName("MINORDER");

                entity.Property(e => e.Minpydlr)
                    .HasColumnType("numeric(19, 5)")
                    .HasColumnName("MINPYDLR");

                entity.Property(e => e.Minpypct).HasColumnName("MINPYPCT");

                entity.Property(e => e.Minpytyp).HasColumnName("MINPYTYP");

                entity.Property(e => e.Modifdt)
                    .HasColumnType("datetime")
                    .HasColumnName("MODIFDT");

                entity.Property(e => e.Mxiafvnd).HasColumnName("MXIAFVND");

                entity.Property(e => e.Mxwofamt)
                    .HasColumnType("numeric(19, 5)")
                    .HasColumnName("MXWOFAMT");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Noteindx)
                    .HasColumnType("numeric(19, 5)")
                    .HasColumnName("NOTEINDX");

                entity.Property(e => e.Parvenid)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("PARVENID")
                    .IsFixedLength(true);

                entity.Property(e => e.Paymentdate)
                    .HasColumnType("datetime")
                    .HasColumnName("paymentdate");

                entity.Property(e => e.Phnumbr1)
                    .HasMaxLength(21)
                    .IsUnicode(false)
                    .HasColumnName("PHNUMBR1")
                    .IsFixedLength(true);

                entity.Property(e => e.Phnumbr2)
                    .HasMaxLength(21)
                    .IsUnicode(false)
                    .HasColumnName("PHNUMBR2")
                    .IsFixedLength(true);

                entity.Property(e => e.Phone3)
                    .HasMaxLength(21)
                    .IsUnicode(false)
                    .HasColumnName("PHONE3")
                    .IsFixedLength(true);

                entity.Property(e => e.Pmapindx).HasColumnName("PMAPINDX");

                entity.Property(e => e.Pmcshidx).HasColumnName("PMCSHIDX");

                entity.Property(e => e.Pmdavidx).HasColumnName("PMDAVIDX");

                entity.Property(e => e.Pmdtkidx).HasColumnName("PMDTKIDX");

                entity.Property(e => e.Pmfinidx).HasColumnName("PMFINIDX");

                entity.Property(e => e.Pmfrtidx).HasColumnName("PMFRTIDX");

                entity.Property(e => e.Pmmschix).HasColumnName("PMMSCHIX");

                entity.Property(e => e.Pmprchix).HasColumnName("PMPRCHIX");

                entity.Property(e => e.Pmrtngix).HasColumnName("PMRTNGIX");

                entity.Property(e => e.Pmtaxidx).HasColumnName("PMTAXIDX");

                entity.Property(e => e.Pmtdscix).HasColumnName("PMTDSCIX");

                entity.Property(e => e.Pmwrtidx).HasColumnName("PMWRTIDX");

                entity.Property(e => e.PostResultsTo).HasColumnName("Post_Results_To");

                entity.Property(e => e.Ppstaxrt).HasColumnName("PPSTAXRT");

                entity.Property(e => e.Prspayee).HasColumnName("PRSPAYEE");

                entity.Property(e => e.Pstgdate)
                    .HasColumnType("datetime")
                    .HasColumnName("PSTGDate");

                entity.Property(e => e.Ptcshacf).HasColumnName("PTCSHACF");

                entity.Property(e => e.Purpvidx).HasColumnName("PURPVIDX");

                entity.Property(e => e.Pymntpri)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasColumnName("PYMNTPRI")
                    .IsFixedLength(true);

                entity.Property(e => e.Pymtrmid)
                    .HasMaxLength(21)
                    .IsUnicode(false)
                    .HasColumnName("PYMTRMID")
                    .IsFixedLength(true);

                entity.Property(e => e.Ratetpid)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("RATETPID")
                    .IsFixedLength(true);

                entity.Property(e => e.RevalueVendor).HasColumnName("Revalue_Vendor");

                entity.Property(e => e.Rtobutkn).HasColumnName("RTOBUTKN");

                entity.Property(e => e.Sbppsded).HasColumnName("SBPPSDED");

                entity.Property(e => e.Shipmthd)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("SHIPMTHD")
                    .IsFixedLength(true);

                entity.Property(e => e.State)
                    .HasMaxLength(29)
                    .IsUnicode(false)
                    .HasColumnName("STATE")
                    .IsFixedLength(true);

                entity.Property(e => e.Taxschid)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("TAXSCHID")
                    .IsFixedLength(true);

                entity.Property(e => e.Ten99amnt)
                    .HasColumnType("money")
                    .HasColumnName("TEN99AMNT");

                entity.Property(e => e.Ten99amnt1)
                    .HasColumnType("numeric(38, 5)")
                    .HasColumnName("TEN99AMNT1");

                entity.Property(e => e.Ten99boxno)
                    .HasMaxLength(2051)
                    .HasColumnName("ten99boxno");

                entity.Property(e => e.Ten99boxnumber).HasColumnName("TEN99BOXNUMBER");

                entity.Property(e => e.Ten99taxtype)
                    .HasMaxLength(50)
                    .HasColumnName("ten99taxtype");

                entity.Property(e => e.Ten99type).HasColumnName("TEN99TYPE");

                entity.Property(e => e.Trddisct).HasColumnName("TRDDISCT");

                entity.Property(e => e.TrxDescription).HasMaxLength(50);

                entity.Property(e => e.Txidnmbr)
                    .HasMaxLength(11)
                    .IsUnicode(false)
                    .HasColumnName("TXIDNMBR")
                    .IsFixedLength(true);

                entity.Property(e => e.Txrgnnum)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("TXRGNNUM")
                    .IsFixedLength(true);

                entity.Property(e => e.Upszone)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasColumnName("UPSZONE")
                    .IsFixedLength(true);

                entity.Property(e => e.Userdef1)
                    .HasMaxLength(21)
                    .IsUnicode(false)
                    .HasColumnName("USERDEF1")
                    .IsFixedLength(true);

                entity.Property(e => e.Userdef2)
                    .HasMaxLength(21)
                    .IsUnicode(false)
                    .HasColumnName("USERDEF2")
                    .IsFixedLength(true);

                entity.Property(e => e.Userlang).HasColumnName("USERLANG");

                entity.Property(e => e.Vadcdpad)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("VADCDPAD")
                    .IsFixedLength(true);

                entity.Property(e => e.Vadcdsfr)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("VADCDSFR")
                    .IsFixedLength(true);

                entity.Property(e => e.Vadcdtro)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("VADCDTRO")
                    .IsFixedLength(true);

                entity.Property(e => e.Vaddcdpr)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("VADDCDPR")
                    .IsFixedLength(true);

                entity.Property(e => e.ValueGp).HasColumnName("Value_gp");

                entity.Property(e => e.Vendname)
                    .HasMaxLength(65)
                    .IsUnicode(false)
                    .HasColumnName("VENDNAME")
                    .IsFixedLength(true);

                entity.Property(e => e.VendorNo)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Vendorid)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("VENDORID")
                    .IsFixedLength(true);

                entity.Property(e => e.Vendorid1)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("VENDORID1")
                    .IsFixedLength(true);

                entity.Property(e => e.Vendshnm)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("VENDSHNM")
                    .IsFixedLength(true);

                entity.Property(e => e.Vendstts).HasColumnName("VENDSTTS");

                entity.Property(e => e.Vndchknm)
                    .HasMaxLength(65)
                    .IsUnicode(false)
                    .HasColumnName("VNDCHKNM")
                    .IsFixedLength(true);

                entity.Property(e => e.Vndclsid)
                    .HasMaxLength(11)
                    .IsUnicode(false)
                    .HasColumnName("VNDCLSID")
                    .IsFixedLength(true);

                entity.Property(e => e.Vndcntct)
                    .HasMaxLength(61)
                    .IsUnicode(false)
                    .HasColumnName("VNDCNTCT")
                    .IsFixedLength(true);

                entity.Property(e => e.Voucherno)
                    .IsRequired()
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("voucherno");

                entity.Property(e => e.WorkflowApprovalStatus).HasColumnName("Workflow_Approval_Status");

                entity.Property(e => e.WorkflowPriority).HasColumnName("Workflow_Priority");

                entity.Property(e => e.Writeoff).HasColumnName("WRITEOFF");

                entity.Property(e => e.Xpdtoblg).HasColumnName("XPDTOBLG");

                entity.Property(e => e.Year1).HasColumnName("YEAR1");

                entity.Property(e => e.Zipcode)
                    .HasMaxLength(11)
                    .IsUnicode(false)
                    .HasColumnName("ZIPCODE")
                    .IsFixedLength(true);
            });

            modelBuilder.Entity<Css1099TempStep1b>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("CSS_1099_TEMP_STEP1b");

                entity.Property(e => e.Test).HasColumnName("test");
            });

            modelBuilder.Entity<Css1099TempStepa>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("css_1099_temp_stepa");

                entity.Property(e => e.Checkno)
                    .IsRequired()
                    .HasMaxLength(22)
                    .IsUnicode(false)
                    .HasColumnName("checkno");

                entity.Property(e => e.Company)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.DocumentAmount).HasColumnType("money");

                entity.Property(e => e.DocumentNo).HasMaxLength(50);

                entity.Property(e => e.Lrpcompanyname)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnName("lrpcompanyname");

                entity.Property(e => e.Lrpten99BoxNoId).HasColumnName("LRPTen99BoxNoID");

                entity.Property(e => e.Lrpten99TaxTypeId).HasColumnName("LRPTen99TaxTypeID");

                entity.Property(e => e.LrpvendorVoucherid).HasColumnName("lrpvendor_voucherid");

                entity.Property(e => e.Lrpvendorid).HasColumnName("lrpvendorid");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Paymentdate)
                    .HasColumnType("datetime")
                    .HasColumnName("paymentdate");

                entity.Property(e => e.Pstgdate)
                    .HasColumnType("datetime")
                    .HasColumnName("PSTGDate");

                entity.Property(e => e.Ten99amnt)
                    .HasColumnType("money")
                    .HasColumnName("TEN99AMNT");

                entity.Property(e => e.TrxDescription).HasMaxLength(50);

                entity.Property(e => e.VendorNo)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Voucherno)
                    .IsRequired()
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("voucherno");
            });

            modelBuilder.Entity<Css1099TempStepb>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("CSS_1099_TEMP_STEPB");

                entity.Property(e => e.Test).HasColumnName("test");
            });

            modelBuilder.Entity<Css1099TempStepbTemp>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("CSS_1099_TEMP_STEPB_temp");

                entity.Property(e => e.Acnmvndr)
                    .HasMaxLength(21)
                    .IsUnicode(false)
                    .HasColumnName("ACNMVNDR")
                    .IsFixedLength(true);

                entity.Property(e => e.Acpuridx).HasColumnName("ACPURIDX");

                entity.Property(e => e.Address1)
                    .HasMaxLength(61)
                    .IsUnicode(false)
                    .HasColumnName("ADDRESS1")
                    .IsFixedLength(true);

                entity.Property(e => e.Address2)
                    .HasMaxLength(61)
                    .IsUnicode(false)
                    .HasColumnName("ADDRESS2")
                    .IsFixedLength(true);

                entity.Property(e => e.Address3)
                    .HasMaxLength(61)
                    .IsUnicode(false)
                    .HasColumnName("ADDRESS3")
                    .IsFixedLength(true);

                entity.Property(e => e.Brthdate)
                    .HasColumnType("datetime")
                    .HasColumnName("BRTHDATE");

                entity.Property(e => e.Cbvat).HasColumnName("CBVAT");

                entity.Property(e => e.Ccode)
                    .HasMaxLength(7)
                    .IsUnicode(false)
                    .HasColumnName("CCode")
                    .IsFixedLength(true);

                entity.Property(e => e.Checkno)
                    .IsRequired()
                    .HasMaxLength(22)
                    .IsUnicode(false)
                    .HasColumnName("checkno");

                entity.Property(e => e.Chekbkid)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("CHEKBKID")
                    .IsFixedLength(true);

                entity.Property(e => e.City)
                    .HasMaxLength(35)
                    .IsUnicode(false)
                    .HasColumnName("CITY")
                    .IsFixedLength(true);

                entity.Property(e => e.Comment1)
                    .HasMaxLength(31)
                    .IsUnicode(false)
                    .HasColumnName("COMMENT1")
                    .IsFixedLength(true);

                entity.Property(e => e.Comment2)
                    .HasMaxLength(31)
                    .IsUnicode(false)
                    .HasColumnName("COMMENT2")
                    .IsFixedLength(true);

                entity.Property(e => e.Company)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Company1)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnName("company1");

                entity.Property(e => e.Country)
                    .HasMaxLength(61)
                    .IsUnicode(false)
                    .HasColumnName("COUNTRY")
                    .IsFixedLength(true);

                entity.Property(e => e.Creatddt)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATDDT");

                entity.Property(e => e.Credtlmt).HasColumnName("CREDTLMT");

                entity.Property(e => e.Crlmtdlr)
                    .HasColumnType("numeric(19, 5)")
                    .HasColumnName("CRLMTDLR");

                entity.Property(e => e.Crtcomdt)
                    .HasColumnType("datetime")
                    .HasColumnName("CRTCOMDT");

                entity.Property(e => e.Crtexpdt)
                    .HasColumnType("datetime")
                    .HasColumnName("CRTEXPDT");

                entity.Property(e => e.Curncyid)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("CURNCYID")
                    .IsFixedLength(true);

                entity.Property(e => e.Declid)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("DECLID")
                    .IsFixedLength(true);

                entity.Property(e => e.DexRowId).HasColumnName("DEX_ROW_ID");

                entity.Property(e => e.DexRowTs)
                    .HasColumnType("datetime")
                    .HasColumnName("DEX_ROW_TS");

                entity.Property(e => e.Disgrper).HasColumnName("DISGRPER");

                entity.Property(e => e.Docfmtid)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("DOCFMTID")
                    .IsFixedLength(true);

                entity.Property(e => e.DocumentAmount).HasColumnType("money");

                entity.Property(e => e.DocumentNo).HasMaxLength(50);

                entity.Property(e => e.Duegrper).HasColumnName("DUEGRPER");

                entity.Property(e => e.Dxvarnum)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("DXVARNUM")
                    .IsFixedLength(true);

                entity.Property(e => e.Faxnumbr)
                    .HasMaxLength(21)
                    .IsUnicode(false)
                    .HasColumnName("FAXNUMBR")
                    .IsFixedLength(true);

                entity.Property(e => e.Freeonboard).HasColumnName("FREEONBOARD");

                entity.Property(e => e.Govcrpid)
                    .HasMaxLength(31)
                    .IsUnicode(false)
                    .HasColumnName("GOVCRPID")
                    .IsFixedLength(true);

                entity.Property(e => e.Govindid)
                    .HasMaxLength(31)
                    .IsUnicode(false)
                    .HasColumnName("GOVINDID")
                    .IsFixedLength(true);

                entity.Property(e => e.Hold).HasColumnName("HOLD");

                entity.Property(e => e.Kgldsths).HasColumnName("KGLDSTHS");

                entity.Property(e => e.Kpcalhst).HasColumnName("KPCALHST");

                entity.Property(e => e.Kperhist).HasColumnName("KPERHIST");

                entity.Property(e => e.Kptrxhst).HasColumnName("KPTRXHST");

                entity.Property(e => e.Lrpcompanyname)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnName("lrpcompanyname");

                entity.Property(e => e.Lrpten99BoxNoId).HasColumnName("LRPTen99BoxNoID");

                entity.Property(e => e.Lrpten99TaxTypeId).HasColumnName("LRPTen99TaxTypeID");

                entity.Property(e => e.LrpvendorVoucherid).HasColumnName("lrpvendor_voucherid");

                entity.Property(e => e.Lrpvendorid).HasColumnName("lrpvendorid");

                entity.Property(e => e.Maxindlr)
                    .HasColumnType("numeric(19, 5)")
                    .HasColumnName("MAXINDLR");

                entity.Property(e => e.Minorder)
                    .HasColumnType("numeric(19, 5)")
                    .HasColumnName("MINORDER");

                entity.Property(e => e.Minpydlr)
                    .HasColumnType("numeric(19, 5)")
                    .HasColumnName("MINPYDLR");

                entity.Property(e => e.Minpypct).HasColumnName("MINPYPCT");

                entity.Property(e => e.Minpytyp).HasColumnName("MINPYTYP");

                entity.Property(e => e.Modifdt)
                    .HasColumnType("datetime")
                    .HasColumnName("MODIFDT");

                entity.Property(e => e.Mxiafvnd).HasColumnName("MXIAFVND");

                entity.Property(e => e.Mxwofamt)
                    .HasColumnType("numeric(19, 5)")
                    .HasColumnName("MXWOFAMT");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Noteindx)
                    .HasColumnType("numeric(19, 5)")
                    .HasColumnName("NOTEINDX");

                entity.Property(e => e.Parvenid)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("PARVENID")
                    .IsFixedLength(true);

                entity.Property(e => e.Paymentdate)
                    .HasColumnType("datetime")
                    .HasColumnName("paymentdate");

                entity.Property(e => e.Phnumbr1)
                    .HasMaxLength(21)
                    .IsUnicode(false)
                    .HasColumnName("PHNUMBR1")
                    .IsFixedLength(true);

                entity.Property(e => e.Phnumbr2)
                    .HasMaxLength(21)
                    .IsUnicode(false)
                    .HasColumnName("PHNUMBR2")
                    .IsFixedLength(true);

                entity.Property(e => e.Phone3)
                    .HasMaxLength(21)
                    .IsUnicode(false)
                    .HasColumnName("PHONE3")
                    .IsFixedLength(true);

                entity.Property(e => e.Pmapindx).HasColumnName("PMAPINDX");

                entity.Property(e => e.Pmcshidx).HasColumnName("PMCSHIDX");

                entity.Property(e => e.Pmdavidx).HasColumnName("PMDAVIDX");

                entity.Property(e => e.Pmdtkidx).HasColumnName("PMDTKIDX");

                entity.Property(e => e.Pmfinidx).HasColumnName("PMFINIDX");

                entity.Property(e => e.Pmfrtidx).HasColumnName("PMFRTIDX");

                entity.Property(e => e.Pmmschix).HasColumnName("PMMSCHIX");

                entity.Property(e => e.Pmprchix).HasColumnName("PMPRCHIX");

                entity.Property(e => e.Pmrtngix).HasColumnName("PMRTNGIX");

                entity.Property(e => e.Pmtaxidx).HasColumnName("PMTAXIDX");

                entity.Property(e => e.Pmtdscix).HasColumnName("PMTDSCIX");

                entity.Property(e => e.Pmwrtidx).HasColumnName("PMWRTIDX");

                entity.Property(e => e.PostResultsTo).HasColumnName("Post_Results_To");

                entity.Property(e => e.Ppstaxrt).HasColumnName("PPSTAXRT");

                entity.Property(e => e.Prspayee).HasColumnName("PRSPAYEE");

                entity.Property(e => e.Pstgdate)
                    .HasColumnType("datetime")
                    .HasColumnName("PSTGDate");

                entity.Property(e => e.Ptcshacf).HasColumnName("PTCSHACF");

                entity.Property(e => e.Purpvidx).HasColumnName("PURPVIDX");

                entity.Property(e => e.Pymntpri)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasColumnName("PYMNTPRI")
                    .IsFixedLength(true);

                entity.Property(e => e.Pymtrmid)
                    .HasMaxLength(21)
                    .IsUnicode(false)
                    .HasColumnName("PYMTRMID")
                    .IsFixedLength(true);

                entity.Property(e => e.Ratetpid)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("RATETPID")
                    .IsFixedLength(true);

                entity.Property(e => e.RevalueVendor).HasColumnName("Revalue_Vendor");

                entity.Property(e => e.Rtobutkn).HasColumnName("RTOBUTKN");

                entity.Property(e => e.Sbppsded).HasColumnName("SBPPSDED");

                entity.Property(e => e.Shipmthd)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("SHIPMTHD")
                    .IsFixedLength(true);

                entity.Property(e => e.State)
                    .HasMaxLength(29)
                    .IsUnicode(false)
                    .HasColumnName("STATE")
                    .IsFixedLength(true);

                entity.Property(e => e.Taxschid)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("TAXSCHID")
                    .IsFixedLength(true);

                entity.Property(e => e.Ten99amnt)
                    .HasColumnType("money")
                    .HasColumnName("TEN99AMNT");

                entity.Property(e => e.Ten99amnt1)
                    .HasColumnType("numeric(38, 5)")
                    .HasColumnName("TEN99AMNT1");

                entity.Property(e => e.Ten99amnttotal)
                    .HasColumnType("numeric(38, 5)")
                    .HasColumnName("ten99amnttotal");

                entity.Property(e => e.Ten99boxno)
                    .HasMaxLength(2051)
                    .HasColumnName("ten99boxno");

                entity.Property(e => e.Ten99boxnumber).HasColumnName("TEN99BOXNUMBER");

                entity.Property(e => e.Ten99taxtype)
                    .HasMaxLength(50)
                    .HasColumnName("ten99taxtype");

                entity.Property(e => e.Ten99type).HasColumnName("TEN99TYPE");

                entity.Property(e => e.Trddisct).HasColumnName("TRDDISCT");

                entity.Property(e => e.TrxDescription).HasMaxLength(50);

                entity.Property(e => e.Txidnmbr)
                    .HasMaxLength(11)
                    .IsUnicode(false)
                    .HasColumnName("TXIDNMBR")
                    .IsFixedLength(true);

                entity.Property(e => e.Txrgnnum)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("TXRGNNUM")
                    .IsFixedLength(true);

                entity.Property(e => e.Upszone)
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasColumnName("UPSZONE")
                    .IsFixedLength(true);

                entity.Property(e => e.Userdef1)
                    .HasMaxLength(21)
                    .IsUnicode(false)
                    .HasColumnName("USERDEF1")
                    .IsFixedLength(true);

                entity.Property(e => e.Userdef2)
                    .HasMaxLength(21)
                    .IsUnicode(false)
                    .HasColumnName("USERDEF2")
                    .IsFixedLength(true);

                entity.Property(e => e.Userlang).HasColumnName("USERLANG");

                entity.Property(e => e.Vadcdpad)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("VADCDPAD")
                    .IsFixedLength(true);

                entity.Property(e => e.Vadcdsfr)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("VADCDSFR")
                    .IsFixedLength(true);

                entity.Property(e => e.Vadcdtro)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("VADCDTRO")
                    .IsFixedLength(true);

                entity.Property(e => e.Vaddcdpr)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("VADDCDPR")
                    .IsFixedLength(true);

                entity.Property(e => e.ValueGp).HasColumnName("Value_gp");

                entity.Property(e => e.Vendname)
                    .HasMaxLength(65)
                    .IsUnicode(false)
                    .HasColumnName("VENDNAME")
                    .IsFixedLength(true);

                entity.Property(e => e.VendorNo)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Vendorid)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("VENDORID")
                    .IsFixedLength(true);

                entity.Property(e => e.Vendorid1)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("VENDORID1")
                    .IsFixedLength(true);

                entity.Property(e => e.Vendornoa)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnName("vendornoa");

                entity.Property(e => e.Vendshnm)
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("VENDSHNM")
                    .IsFixedLength(true);

                entity.Property(e => e.Vendstts).HasColumnName("VENDSTTS");

                entity.Property(e => e.Vndchknm)
                    .HasMaxLength(65)
                    .IsUnicode(false)
                    .HasColumnName("VNDCHKNM")
                    .IsFixedLength(true);

                entity.Property(e => e.Vndclsid)
                    .HasMaxLength(11)
                    .IsUnicode(false)
                    .HasColumnName("VNDCLSID")
                    .IsFixedLength(true);

                entity.Property(e => e.Vndcntct)
                    .HasMaxLength(61)
                    .IsUnicode(false)
                    .HasColumnName("VNDCNTCT")
                    .IsFixedLength(true);

                entity.Property(e => e.Voucherno)
                    .IsRequired()
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("voucherno");

                entity.Property(e => e.WorkflowApprovalStatus).HasColumnName("Workflow_Approval_Status");

                entity.Property(e => e.WorkflowPriority).HasColumnName("Workflow_Priority");

                entity.Property(e => e.Writeoff).HasColumnName("WRITEOFF");

                entity.Property(e => e.Xpdtoblg).HasColumnName("XPDTOBLG");

                entity.Property(e => e.Year1).HasColumnName("YEAR1");

                entity.Property(e => e.Year1a).HasColumnName("year1a");

                entity.Property(e => e.Zipcode)
                    .HasMaxLength(11)
                    .IsUnicode(false)
                    .HasColumnName("ZIPCODE")
                    .IsFixedLength(true);
            });

            modelBuilder.Entity<Css1099VendorExport>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("css_1099_vendor_export");

                entity.Property(e => e.Test)
                    .IsRequired()
                    .HasMaxLength(4)
                    .IsUnicode(false)
                    .HasColumnName("test");
            });

            modelBuilder.Entity<Css1099VendorExportTemp>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("css_1099_vendor_export_TEMP");

                entity.Property(e => e.Address1)
                    .IsRequired()
                    .HasMaxLength(61)
                    .IsUnicode(false)
                    .HasColumnName("ADDRESS1")
                    .IsFixedLength(true);

                entity.Property(e => e.Address2)
                    .IsRequired()
                    .HasMaxLength(61)
                    .IsUnicode(false)
                    .HasColumnName("ADDRESS2")
                    .IsFixedLength(true);

                entity.Property(e => e.Address3)
                    .IsRequired()
                    .HasMaxLength(61)
                    .IsUnicode(false)
                    .HasColumnName("ADDRESS3")
                    .IsFixedLength(true);

                entity.Property(e => e.Box001)
                    .HasColumnType("numeric(22, 2)")
                    .HasColumnName("BOX001");

                entity.Property(e => e.Box002)
                    .HasColumnType("numeric(22, 2)")
                    .HasColumnName("BOX002");

                entity.Property(e => e.Box003)
                    .HasColumnType("numeric(22, 2)")
                    .HasColumnName("BOX003");

                entity.Property(e => e.Box004)
                    .HasColumnType("numeric(22, 2)")
                    .HasColumnName("BOX004");

                entity.Property(e => e.Box005)
                    .HasColumnType("numeric(22, 2)")
                    .HasColumnName("BOX005");

                entity.Property(e => e.Box006)
                    .HasColumnType("numeric(22, 2)")
                    .HasColumnName("BOX006");

                entity.Property(e => e.Box007)
                    .HasColumnType("numeric(22, 2)")
                    .HasColumnName("BOX007");

                entity.Property(e => e.Box008)
                    .HasColumnType("numeric(22, 2)")
                    .HasColumnName("BOX008");

                entity.Property(e => e.Box010)
                    .HasColumnType("numeric(22, 2)")
                    .HasColumnName("BOX010");

                entity.Property(e => e.Box013)
                    .HasColumnType("numeric(22, 2)")
                    .HasColumnName("BOX013");

                entity.Property(e => e.Box014)
                    .HasColumnType("numeric(22, 2)")
                    .HasColumnName("BOX014");

                entity.Property(e => e.Box016)
                    .HasColumnType("numeric(22, 2)")
                    .HasColumnName("BOX016");

                entity.Property(e => e.Box15a)
                    .HasColumnType("numeric(22, 2)")
                    .HasColumnName("BOX15A");

                entity.Property(e => e.Box15b)
                    .HasColumnType("numeric(22, 2)")
                    .HasColumnName("BOX15b");

                entity.Property(e => e.City)
                    .IsRequired()
                    .HasMaxLength(35)
                    .IsUnicode(false)
                    .HasColumnName("CITY")
                    .IsFixedLength(true);

                entity.Property(e => e.State)
                    .IsRequired()
                    .HasMaxLength(29)
                    .IsUnicode(false)
                    .HasColumnName("STATE")
                    .IsFixedLength(true);

                entity.Property(e => e.Totalamount)
                    .HasColumnType("numeric(38, 5)")
                    .HasColumnName("TOTALAMOUNT");

                entity.Property(e => e.Txidnmbr)
                    .IsRequired()
                    .HasMaxLength(11)
                    .IsUnicode(false)
                    .HasColumnName("TXIDNMBR")
                    .IsFixedLength(true);

                entity.Property(e => e.Vendname)
                    .IsRequired()
                    .HasMaxLength(65)
                    .IsUnicode(false)
                    .HasColumnName("VENDNAME")
                    .IsFixedLength(true);

                entity.Property(e => e.Vendorid)
                    .IsRequired()
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("VENDORID")
                    .IsFixedLength(true);

                entity.Property(e => e.Year1).HasColumnName("YEAR1");

                entity.Property(e => e.Zipcode)
                    .IsRequired()
                    .HasMaxLength(11)
                    .IsUnicode(false)
                    .HasColumnName("ZIPCODE")
                    .IsFixedLength(true);
            });

            modelBuilder.Entity<CssAddglyearcodeTemp>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("css_addglyearcode_temp");

                entity.Property(e => e.Codeid).HasColumnName("codeid");

                entity.Property(e => e.Createdby)
                    .IsRequired()
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasColumnName("CREATEDBY");

                entity.Property(e => e.Createdon)
                    .HasColumnType("datetime")
                    .HasColumnName("CREATEDON");

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasMaxLength(101);

                entity.Property(e => e.ImportedObjectUid)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("ImportedObjectUID");

                entity.Property(e => e.Name)
                    .HasMaxLength(2051)
                    .HasColumnName("name");

                entity.Property(e => e.Namealias)
                    .HasMaxLength(2051)
                    .HasColumnName("namealias");

                entity.Property(e => e.OldRecordId).HasColumnName("OldRecordID");

                entity.Property(e => e.Test)
                    .IsRequired()
                    .HasMaxLength(12)
                    .IsUnicode(false)
                    .HasColumnName("test");

                entity.Property(e => e.UpdatedBy)
                    .IsRequired()
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.UpdatedOn).HasColumnType("datetime");

                entity.Property(e => e.Yearsetupid).HasColumnName("yearsetupid");
            });

            modelBuilder.Entity<CssAftMain>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("css_aft_main");

                entity.Property(e => e.Test)
                    .IsRequired()
                    .HasMaxLength(4)
                    .IsUnicode(false)
                    .HasColumnName("test");
            });

            modelBuilder.Entity<CssAp1099Temp>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("CSS_AP_1099_temp");

                entity.Property(e => e.Acct)
                    .HasMaxLength(75)
                    .IsUnicode(false)
                    .HasColumnName("ACCT");

                entity.Property(e => e.Amount).HasColumnName("AMOUNT");

                entity.Property(e => e.Checkdate)
                    .HasColumnType("datetime")
                    .HasColumnName("CHECKDATE");

                entity.Property(e => e.Checkno)
                    .HasMaxLength(75)
                    .IsUnicode(false)
                    .HasColumnName("CHECKNO");

                entity.Property(e => e.CssLink)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("css_link")
                    .IsFixedLength(true);

                entity.Property(e => e.Descr)
                    .HasMaxLength(75)
                    .IsUnicode(false)
                    .HasColumnName("DESCR");

                entity.Property(e => e.Description)
                    .HasMaxLength(75)
                    .IsUnicode(false);

                entity.Property(e => e.DocumentAmount).HasColumnType("money");

                entity.Property(e => e.FinalId)
                    .HasMaxLength(75)
                    .IsUnicode(false)
                    .HasColumnName("FINAL_ID");

                entity.Property(e => e.IdField)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("ID_FIELD");

                entity.Property(e => e.Refnbr)
                    .HasMaxLength(75)
                    .IsUnicode(false)
                    .HasColumnName("REFNBR");

                entity.Property(e => e.Ten99amnt)
                    .HasColumnType("money")
                    .HasColumnName("TEN99AMNT");

                entity.Property(e => e.Ten99amnttotal)
                    .HasColumnType("numeric(38, 5)")
                    .HasColumnName("TEN99AMNTTOTAL");

                entity.Property(e => e.Ten99boxnumber).HasColumnName("TEN99BOXNUMBER");

                entity.Property(e => e.Ten99boxnumber1).HasColumnName("TEN99BOXNUMBER1");

                entity.Property(e => e.Ten99type).HasColumnName("TEN99TYPE");

                entity.Property(e => e.Ten99type1).HasColumnName("TEN99TYPE1");

                entity.Property(e => e.Trandate)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("TRANDATE");

                entity.Property(e => e.Txidnmbr)
                    .HasMaxLength(11)
                    .IsUnicode(false)
                    .HasColumnName("TXIDNMBR")
                    .IsFixedLength(true);

                entity.Property(e => e.Vendname)
                    .HasMaxLength(65)
                    .IsUnicode(false)
                    .HasColumnName("VENDNAME")
                    .IsFixedLength(true);

                entity.Property(e => e.VoucherNo).HasMaxLength(50);

                entity.Property(e => e.Year1).HasColumnName("year1");

                entity.Property(e => e._1099Box)
                    .HasMaxLength(2000)
                    .HasColumnName("1099 BOX");

                entity.Property(e => e._1099Flag)
                    .HasMaxLength(10)
                    .HasColumnName("1099_flag")
                    .IsFixedLength(true);

                entity.Property(e => e._1099Type)
                    .HasMaxLength(2000)
                    .HasColumnName("1099 TYPE");
            });

            modelBuilder.Entity<CssApAgingTemp>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("css_ap_aging_TEMP");

                entity.Property(e => e.AccountDescription).HasMaxLength(500);

                entity.Property(e => e.AccountNo).HasMaxLength(50);

                entity.Property(e => e.AppliedDate)
                    .HasColumnType("datetime")
                    .HasColumnName("applied_date");

                entity.Property(e => e.AppliedToDocumentNo).HasMaxLength(50);

                entity.Property(e => e.Appliedamount)
                    .HasColumnType("money")
                    .HasColumnName("appliedamount");

                entity.Property(e => e.CompanyName)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnName("company_name");

                entity.Property(e => e.CreditAmount).HasColumnType("money");

                entity.Property(e => e.CssLink)
                    .HasMaxLength(100)
                    .HasColumnName("CSS_Link");

                entity.Property(e => e.DebitAmount).HasColumnType("money");

                entity.Property(e => e.DocumentAmount).HasColumnType("money");

                entity.Property(e => e.DocumentBalance).HasColumnType("money");

                entity.Property(e => e.DocumentDate).HasColumnType("datetime");

                entity.Property(e => e.DocumentNo).HasMaxLength(50);

                entity.Property(e => e.DocumentTypeNo)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.DocumenttypeName)
                    .HasMaxLength(50)
                    .HasColumnName("documenttype_name");

                entity.Property(e => e.Groupno)
                    .HasColumnType("numeric(2, 1)")
                    .HasColumnName("groupno");

                entity.Property(e => e.Pstgdate)
                    .HasColumnType("date")
                    .HasColumnName("PSTGDate");

                entity.Property(e => e.VendorName)
                    .IsRequired()
                    .HasMaxLength(100)
                    .HasColumnName("vendor_name");

                entity.Property(e => e.VendorNo)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.VendorVoucherApplicabilityDocumentDate)
                    .HasColumnType("date")
                    .HasColumnName("Vendor_Voucher_Applicability_DocumentDate");

                entity.Property(e => e.VoucherNo)
                    .IsRequired()
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<CssBdgaccountGroupSubGroup>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("css_BDGAccountGroup_SubGroup");

                entity.Property(e => e.AccountCode).HasMaxLength(50);

                entity.Property(e => e.AccountObejctuid).HasColumnName("account_obejctuid");

                entity.Property(e => e.Accountmappingno)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnName("accountmappingno");

                entity.Property(e => e.Acctgroup)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnName("acctgroup");

                entity.Property(e => e.Acctgroupid).HasColumnName("ACCTGROUPID");

                entity.Property(e => e.BdgaccountGroupId).HasColumnName("BDGAccountGroupID");

                entity.Property(e => e.CreatedBy).HasMaxLength(50);

                entity.Property(e => e.CreatedOn).HasColumnType("datetime");

                entity.Property(e => e.Department)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnName("department");

                entity.Property(e => e.Description).HasMaxLength(2000);

                entity.Property(e => e.Display).HasMaxLength(150);

                entity.Property(e => e.ImportedObjectUid)
                    .HasMaxLength(50)
                    .HasColumnName("ImportedObjectUID");

                entity.Property(e => e.InstallationUid).HasColumnName("InstallationUID");

                entity.Property(e => e.MappingObjectuid).HasColumnName("mapping_objectuid");

                entity.Property(e => e.Name).HasMaxLength(50);

                entity.Property(e => e.NameAlias).HasMaxLength(50);

                entity.Property(e => e.ObjectUid).HasColumnName("ObjectUID");

                entity.Property(e => e.OldRecordId).HasColumnName("OldRecordID");

                entity.Property(e => e.ParentBdgaccountGroupSubGroupId).HasColumnName("Parent_BDGAccountGroup_SubGroupID");

                entity.Property(e => e.RecordId).HasColumnName("RecordID");

                entity.Property(e => e.Status)
                    .IsRequired()
                    .HasMaxLength(12)
                    .IsUnicode(false)
                    .HasColumnName("status");

                entity.Property(e => e.SubGroup)
                    .HasMaxLength(50)
                    .HasColumnName("sub_group");

                entity.Property(e => e.SubSubName)
                    .HasMaxLength(50)
                    .HasColumnName("sub_sub_name");

                entity.Property(e => e.SubSubSubName)
                    .HasMaxLength(50)
                    .HasColumnName("sub_sub_sub_name");

                entity.Property(e => e.UpdatedBy).HasMaxLength(50);

                entity.Property(e => e.UpdatedOn).HasColumnType("datetime");
            });

            modelBuilder.Entity<CssBdgaccountGroupSubGroupSubGroupTemp>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("css_BDGAccountGroup_SubGroup_SubGroup_temp");

                entity.Property(e => e.AccountCode).HasMaxLength(50);

                entity.Property(e => e.BdgaccountGroupSubGroupId).HasColumnName("BDGAccountGroup_SubGroupID");

                entity.Property(e => e.CreatedBy).HasMaxLength(50);

                entity.Property(e => e.CreatedOn).HasColumnType("datetime");

                entity.Property(e => e.Description).HasMaxLength(2000);

                entity.Property(e => e.Display)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.ImportedObjectUid)
                    .HasMaxLength(50)
                    .HasColumnName("ImportedObjectUID");

                entity.Property(e => e.InstallationUid).HasColumnName("InstallationUID");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.NameAlias)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.ObjectUid).HasColumnName("ObjectUID");

                entity.Property(e => e.OldRecordId).HasColumnName("OldRecordID");

                entity.Property(e => e.ParentBdgaccountGroupSubGroupSubGroupId).HasColumnName("Parent_BDGAccountGroup_SubGroup_SubGroupID");

                entity.Property(e => e.RecordId)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("RecordID");

                entity.Property(e => e.UpdatedBy).HasMaxLength(50);

                entity.Property(e => e.UpdatedOn).HasColumnType("datetime");
            });

            modelBuilder.Entity<CssBdgaccountGroupSubGroupSugroupView>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("css_BDGAccountGroup_SubGroup_sugroup_view");

                entity.Property(e => e.BdgaccountGroupSubGroupId).HasColumnName("BDGAccountGroup_SubGroupID");

                entity.Property(e => e.Count1).HasColumnName("count1");

                entity.Property(e => e.MaxRecordid).HasColumnName("max_recordid");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<CssBdgaccountGroupSubGroupTemp>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("css_BDGAccountGroup_SubGroup_temp");

                entity.Property(e => e.BdgaccountGroupId).HasColumnName("BDGAccountGroupID");

                entity.Property(e => e.Count1).HasColumnName("count1");

                entity.Property(e => e.MaxRecordid).HasColumnName("max_recordid");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Status)
                    .IsRequired()
                    .HasMaxLength(7)
                    .IsUnicode(false)
                    .HasColumnName("status");
            });

            modelBuilder.Entity<CssBdgaccountGroupSubGroupView>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("css_BDGAccountGroup_SubGroup_view");

                entity.Property(e => e.BdgaccountGroupId).HasColumnName("BDGAccountGroupID");

                entity.Property(e => e.Count1).HasColumnName("count1");

                entity.Property(e => e.MaxRecordid).HasColumnName("max_recordid");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<CssBdgbudgetInfoDetailMinRecordidDuplicate>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("css_BDGBudgetInfo_Detail_min_recordid_duplicate");

                entity.Property(e => e.BdgdepartmentId).HasColumnName("BDGDepartmentID");

                entity.Property(e => e.BdgemployeeId).HasColumnName("BDGEmployeeID");

                entity.Property(e => e.Count1).HasColumnName("COUNT1");

                entity.Property(e => e.Deptname)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnName("deptname");

                entity.Property(e => e.Employeename)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnName("employeename");

                entity.Property(e => e.MinRecordid).HasColumnName("min_recordid");
            });

            modelBuilder.Entity<CssBdgbudgetInfoDetailSummaryView>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("css_BDGBudgetInfo_Detail_summary_view");

                entity.Property(e => e.Bdgbudgetinfoid).HasColumnName("bdgbudgetinfoid");

                entity.Property(e => e.Budgetamount)
                    .HasColumnType("money")
                    .HasColumnName("budgetamount");

                entity.Property(e => e.Currentyearbudget)
                    .HasColumnType("money")
                    .HasColumnName("currentyearbudget");

                entity.Property(e => e.Nextyearbudgetamount)
                    .HasColumnType("money")
                    .HasColumnName("nextyearbudgetamount");
            });

            modelBuilder.Entity<CssBdgbudgetInfoDetailView>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("css_BDGBudgetInfo_Detail_view");

                entity.Property(e => e.AnticipatedStartingMonthId).HasColumnName("AnticipatedStarting_MonthID");

                entity.Property(e => e.BdgaccountGroupId).HasColumnName("BDGAccountGroupID");

                entity.Property(e => e.BdgaccountGroupSubGroupId).HasColumnName("BDGAccountGroup_SubGroupID");

                entity.Property(e => e.BdgaccountGroupSubGroupSubGroupId).HasColumnName("BDGAccountGroup_SubGroup_SubGroupID");

                entity.Property(e => e.BdgaccountGroupSubGroupSubGroupSubGroupId).HasColumnName("BDGAccountGroup_SubGroup_SubGroup_SubGroupID");

                entity.Property(e => e.BdgbudgetGroupTypeId).HasColumnName("BDGBudgetGroupTypeID");

                entity.Property(e => e.BdgbudgetInfoId).HasColumnName("BDGBudgetInfoID");

                entity.Property(e => e.BdgcommitteeTypeId).HasColumnName("BDGCommitteeTypeID");

                entity.Property(e => e.BdgemployeeCategoryId).HasColumnName("BDGEmployeeCategoryID");

                entity.Property(e => e.BdgemployeeId).HasColumnName("BDGEmployeeID");

                entity.Property(e => e.BdgemployeePositionId).HasColumnName("BDGEmployeePositionID");

                entity.Property(e => e.BdgemployeeStatusId).HasColumnName("BDGEmployeeStatusID");

                entity.Property(e => e.BdgemployeeTypeId).HasColumnName("BDGEmployeeTypeID");

                entity.Property(e => e.BdgemployeeUnitId).HasColumnName("BDGEmployeeUnitID");

                entity.Property(e => e.BdgemployeeUnitPositionId).HasColumnName("BDGEmployeeUnit_PositionID");

                entity.Property(e => e.BdgemployeeUnitPositionStepId).HasColumnName("BDGEmployeeUnit_Position_StepID");

                entity.Property(e => e.BdgmeetingStatusId).HasColumnName("BDGMeetingStatusID");

                entity.Property(e => e.BdgpositionTypeId).HasColumnName("BDGPositionTypeID");

                entity.Property(e => e.BdgprojectTypeId).HasColumnName("BDGProjectTypeID");

                entity.Property(e => e.BudgetAmount).HasColumnType("money");

                entity.Property(e => e.CreatedBy).HasMaxLength(50);

                entity.Property(e => e.CreatedOn).HasColumnType("datetime");

                entity.Property(e => e.CurrentYearBudgetAmount).HasColumnType("money");

                entity.Property(e => e.Description).HasMaxLength(2000);

                entity.Property(e => e.DetailAmount).HasColumnType("money");

                entity.Property(e => e.Display).HasMaxLength(250);

                entity.Property(e => e.FringeBdgbudgetInfoDetailId).HasColumnName("Fringe_BDGBudgetInfo_DetailID");

                entity.Property(e => e.ImportedObjectUid)
                    .HasMaxLength(50)
                    .HasColumnName("ImportedObjectUID");

                entity.Property(e => e.InstallationUid).HasColumnName("InstallationUID");

                entity.Property(e => e.LineNumber).HasMaxLength(50);

                entity.Property(e => e.MeetingLocation).HasMaxLength(50);

                entity.Property(e => e.MeetingStartDate).HasMaxLength(50);

                entity.Property(e => e.Name).HasMaxLength(250);

                entity.Property(e => e.NameAlias).HasMaxLength(250);

                entity.Property(e => e.NextYearBudgetAmount).HasColumnType("money");

                entity.Property(e => e.ObjectUid).HasColumnName("ObjectUID");

                entity.Property(e => e.OldBdgbudgetInfoId).HasColumnName("Old_BDGBudgetInfoID");

                entity.Property(e => e.OldRecordId).HasColumnName("OldRecordID");

                entity.Property(e => e.RecordId)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("RecordID");

                entity.Property(e => e.Salary).HasColumnType("money");

                entity.Property(e => e.TotalAmount).HasColumnType("money");

                entity.Property(e => e.UpdatedBy).HasMaxLength(50);

                entity.Property(e => e.UpdatedOn).HasColumnType("datetime");

                entity.Property(e => e.WeeklySalary).HasColumnType("money");

                entity.Property(e => e.WillBeUsingTaskForcesYesNoId).HasColumnName("WillBeUsingTaskForces_YesNoID");
            });

            modelBuilder.Entity<CssBdgbudgetInfoGrandtotal>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("css_BDGBudgetInfo_grandtotals");

                entity.Property(e => e.Budgetamount)
                    .HasColumnType("money")
                    .HasColumnName("budgetamount");

                entity.Property(e => e.Estimatedbudgetamount)
                    .HasColumnType("money")
                    .HasColumnName("estimatedbudgetamount");

                entity.Property(e => e.ObjectUid).HasColumnName("ObjectUID");

                entity.Property(e => e.ProposedBudgetAmount).HasColumnType("money");

                entity.Property(e => e.YtdactualAmount)
                    .HasColumnType("money")
                    .HasColumnName("YTDActualAmount");

                entity.Property(e => e.YtdprojectedAmount)
                    .HasColumnType("money")
                    .HasColumnName("YTDProjectedAmount");
            });

            modelBuilder.Entity<CssBdgbudgetInfoSubtotal>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("css_BDGBudgetInfo_subtotals");

                entity.Property(e => e.Budgetamount)
                    .HasColumnType("money")
                    .HasColumnName("budgetamount");

                entity.Property(e => e.Estimatedbudgetamount)
                    .HasColumnType("money")
                    .HasColumnName("estimatedbudgetamount");

                entity.Property(e => e.ObjectUid).HasColumnName("ObjectUID");

                entity.Property(e => e.ProposedBudgetAmount).HasColumnType("money");

                entity.Property(e => e.YtdactualAmount)
                    .HasColumnType("money")
                    .HasColumnName("YTDActualAmount");

                entity.Property(e => e.YtdprojectedAmount)
                    .HasColumnType("money")
                    .HasColumnName("YTDProjectedAmount");
            });

            modelBuilder.Entity<CssBdgbudgetInfoSummary>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("css_BDGBudgetInfo_summary");

                entity.Property(e => e.Amount)
                    .HasColumnType("money")
                    .HasColumnName("amount");

                entity.Property(e => e.Objectuid).HasColumnName("objectuid");
            });

            modelBuilder.Entity<CssBdgbudgetInfoSummary2>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("css_BDGBudgetInfo_summary2");

                entity.Property(e => e.Objectuid).HasColumnName("objectuid");

                entity.Property(e => e.Statusvalue)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("statusvalue");
            });

            modelBuilder.Entity<CssBdgbudgetInfoSummary2Var>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("css_BDGBudgetInfo_summary2Var");

                entity.Property(e => e.Objectuid).HasColumnName("objectuid");

                entity.Property(e => e.Statusvalue)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("statusvalue");
            });

            modelBuilder.Entity<CssBdgbudgetInfoSummaryvar>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("css_BDGBudgetInfo_summaryvar");

                entity.Property(e => e.Amount)
                    .HasColumnType("money")
                    .HasColumnName("amount");

                entity.Property(e => e.Objectuid).HasColumnName("objectuid");
            });

            modelBuilder.Entity<CssBdgbudgetinfoDetail>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("css_bdgbudgetinfo_detail");

                entity.Property(e => e.BdgaccountGroupId).HasColumnName("BDGAccountGroupID");

                entity.Property(e => e.BdgdepartmentId).HasColumnName("BDGDepartmentID");

                entity.Property(e => e.ObjectUid).HasColumnName("ObjectUID");

                entity.Property(e => e.Yearsetupid).HasColumnName("yearsetupid");
            });

            modelBuilder.Entity<CssBdgbudgetinfoDetailTempMissingItem>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("css_bdgbudgetinfo_detail_temp_missing_items");

                entity.Property(e => e.AnticipatedStartingMonthId).HasColumnName("AnticipatedStarting_MonthID");

                entity.Property(e => e.BdgaccountGroupId).HasColumnName("BDGAccountGroupID");

                entity.Property(e => e.BdgaccountGroupSubGroupId).HasColumnName("BDGAccountGroup_SubGroupID");

                entity.Property(e => e.BdgaccountGroupSubGroupSubGroupId).HasColumnName("BDGAccountGroup_SubGroup_SubGroupID");

                entity.Property(e => e.BdgaccountGroupSubGroupSubGroupSubGroupId).HasColumnName("BDGAccountGroup_SubGroup_SubGroup_SubGroupID");

                entity.Property(e => e.BdgaccountgroupidHeader).HasColumnName("bdgaccountgroupid_header");

                entity.Property(e => e.BdgbudgetGroupTypeId).HasColumnName("BDGBudgetGroupTypeID");

                entity.Property(e => e.BdgbudgetInfoId).HasColumnName("BDGBudgetInfoID");

                entity.Property(e => e.BdgcommitteeTypeId).HasColumnName("BDGCommitteeTypeID");

                entity.Property(e => e.BdgdepartmentId).HasColumnName("BDGDepartmentID");

                entity.Property(e => e.BdgemployeeCategoryId).HasColumnName("BDGEmployeeCategoryID");

                entity.Property(e => e.BdgemployeeId).HasColumnName("BDGEmployeeID");

                entity.Property(e => e.BdgemployeePositionId).HasColumnName("BDGEmployeePositionID");

                entity.Property(e => e.BdgemployeeStatusId).HasColumnName("BDGEmployeeStatusID");

                entity.Property(e => e.BdgemployeeTypeId).HasColumnName("BDGEmployeeTypeID");

                entity.Property(e => e.BdgemployeeUnitId).HasColumnName("BDGEmployeeUnitID");

                entity.Property(e => e.BdgemployeeUnitPositionId).HasColumnName("BDGEmployeeUnit_PositionID");

                entity.Property(e => e.BdgemployeeUnitPositionStepId).HasColumnName("BDGEmployeeUnit_Position_StepID");

                entity.Property(e => e.BdgmeetingStatusId).HasColumnName("BDGMeetingStatusID");

                entity.Property(e => e.BdgpositionTypeId).HasColumnName("BDGPositionTypeID");

                entity.Property(e => e.BdgprojectTypeId).HasColumnName("BDGProjectTypeID");

                entity.Property(e => e.BudgetAmount).HasColumnType("money");

                entity.Property(e => e.CreatedBy).HasMaxLength(50);

                entity.Property(e => e.CreatedOn).HasColumnType("datetime");

                entity.Property(e => e.CurrentYearBudgetAmount).HasColumnType("money");

                entity.Property(e => e.Description).HasMaxLength(2000);

                entity.Property(e => e.DetailAmount).HasColumnType("money");

                entity.Property(e => e.Display).HasMaxLength(250);

                entity.Property(e => e.FrineobjectuiD).HasColumnName("frineobjectuiD");

                entity.Property(e => e.FringeBdgbudgetInfoDetailId).HasColumnName("Fringe_BDGBudgetInfo_DetailID");

                entity.Property(e => e.ImportedObjectUid)
                    .HasMaxLength(50)
                    .HasColumnName("ImportedObjectUID");

                entity.Property(e => e.InstallationUid).HasColumnName("InstallationUID");

                entity.Property(e => e.LineNumber).HasMaxLength(50);

                entity.Property(e => e.MeetingLocation).HasMaxLength(50);

                entity.Property(e => e.MeetingStartDate).HasMaxLength(50);

                entity.Property(e => e.Name).HasMaxLength(250);

                entity.Property(e => e.NameAlias).HasMaxLength(250);

                entity.Property(e => e.NextYearBudgetAmount).HasColumnType("money");

                entity.Property(e => e.ObjectUid).HasColumnName("ObjectUID");

                entity.Property(e => e.OldBdgbudgetInfoId).HasColumnName("Old_BDGBudgetInfoID");

                entity.Property(e => e.OldRecordId).HasColumnName("OldRecordID");

                entity.Property(e => e.RecordId).HasColumnName("RecordID");

                entity.Property(e => e.Salary).HasColumnType("money");

                entity.Property(e => e.Tobedetermind)
                    .IsRequired()
                    .HasMaxLength(75)
                    .IsUnicode(false)
                    .HasColumnName("tobedetermind");

                entity.Property(e => e.TotalAmount).HasColumnType("money");

                entity.Property(e => e.UpdatedBy).HasMaxLength(50);

                entity.Property(e => e.UpdatedOn).HasColumnType("datetime");

                entity.Property(e => e.WeeklySalary).HasColumnType("money");

                entity.Property(e => e.WillBeUsingTaskForcesYesNoId).HasColumnName("WillBeUsingTaskForces_YesNoID");
            });

            modelBuilder.Entity<CssBdgbudgetinfodetailTotal>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("css_bdgbudgetinfodetail_totals");

                entity.Property(e => e.BdgbudgetInfoid).HasColumnName("BDGBudgetInfoid");

                entity.Property(e => e.Budgetamount)
                    .HasColumnType("money")
                    .HasColumnName("budgetamount");

                entity.Property(e => e.Currentyearbudgetamount)
                    .HasColumnType("money")
                    .HasColumnName("currentyearbudgetamount");

                entity.Property(e => e.Nextyearbudgetamount)
                    .HasColumnType("money")
                    .HasColumnName("nextyearbudgetamount");
            });

            modelBuilder.Entity<CssBdgbudgetinfodetailamountsPm>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("css_bdgbudgetinfodetailamountsPM");

                entity.Property(e => e.AccountGroup)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.BudgetAmount)
                    .HasColumnType("money")
                    .HasColumnName("budgetAmount");

                entity.Property(e => e.CurrentYearBudgetAmount).HasColumnType("money");

                entity.Property(e => e.EmployeeType)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.NextYearBudgetAmount).HasColumnType("money");
            });

            modelBuilder.Entity<CssBdgemployeeAmount>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("css_bdgemployee_amounts");

                entity.Property(e => e.Bdgemployeeunitname)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnName("bdgemployeeunitname");

                entity.Property(e => e.CurrentYearSalary).HasColumnType("money");

                entity.Property(e => e.Positionname)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnName("positionname");

                entity.Property(e => e.PreviousYearSalary).HasColumnType("money");

                entity.Property(e => e.Salary).HasColumnType("money");

                entity.Property(e => e.Stepname)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnName("stepname");
            });

            modelBuilder.Entity<CssBdgemployeeDuplicate>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("CSS_BDGEMPLOYEE_DUPLICATE");

                entity.Property(e => e.BdgdepartmentId).HasColumnName("BDGDepartmentID");

                entity.Property(e => e.BdgemployeeId).HasColumnName("BDGEmployeeID");

                entity.Property(e => e.Count1).HasColumnName("COUNT1");

                entity.Property(e => e.Deptname)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnName("deptname");

                entity.Property(e => e.Employeename)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnName("employeename");
            });

            modelBuilder.Entity<CssBdgemployeeMissing>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("css_bdgemployee_missing");

                entity.Property(e => e.BdgbudgetinfoDetailid).HasColumnName("bdgbudgetinfo_detailid");

                entity.Property(e => e.Bdgemployeeid).HasColumnName("BDGEmployeeid");

                entity.Property(e => e.Name).HasMaxLength(50);

                entity.Property(e => e.ObjectUid).HasColumnName("ObjectUID");

                entity.Property(e => e.Yearsetupid)
                    .IsRequired()
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("yearsetupid");
            });

            modelBuilder.Entity<CssBdgreportGroupBdgglaccountMapping>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("css_BDGReportGroup_BDGGLAccountMapping");

                entity.Property(e => e.AccountNo)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.BdgaccountGroupId).HasColumnName("BDGAccountGroupID");

                entity.Property(e => e.BdgaccountGroupSubGroupId).HasColumnName("BDGAccountGroup_SubGroupID");

                entity.Property(e => e.BdgaccountGroupSubGroupSubGroupId).HasColumnName("BDGAccountGroup_SubGroup_SubGroupID");

                entity.Property(e => e.BdgaccountGroupSubGroupSubGroupSubGroupId).HasColumnName("BDGAccountGroup_SubGroup_SubGroup_SubGroupID");

                entity.Property(e => e.BdgdepartmentId).HasColumnName("BDGDepartmentID");

                entity.Property(e => e.BdgreportGroupId).HasColumnName("BDGReportGroupID");

                entity.Property(e => e.CreatedBy).HasMaxLength(50);

                entity.Property(e => e.CreatedOn).HasColumnType("datetime");

                entity.Property(e => e.Description).HasMaxLength(2000);

                entity.Property(e => e.Display)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.ImportedObjectUid)
                    .HasMaxLength(50)
                    .HasColumnName("ImportedObjectUID");

                entity.Property(e => e.InstallationUid).HasColumnName("InstallationUID");

                entity.Property(e => e.MaskedAccountNo)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Name).HasMaxLength(50);

                entity.Property(e => e.NameAlias).HasMaxLength(50);

                entity.Property(e => e.ObjectUid).HasColumnName("ObjectUID");

                entity.Property(e => e.OldRecordId).HasColumnName("OldRecordID");

                entity.Property(e => e.RecordId)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("RecordID");

                entity.Property(e => e.UpdatedBy).HasMaxLength(50);

                entity.Property(e => e.UpdatedOn).HasColumnType("datetime");
            });

            modelBuilder.Entity<CssBdgreportGroupBdgglaccountMappingSummary>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("CSS_BDGReportGroup_BDGGLAccountMapping_SUMMARY");

                entity.Property(e => e.Acct)
                    .HasMaxLength(75)
                    .HasColumnName("ACCT");

                entity.Property(e => e.Amount).HasColumnName("amount");

                entity.Property(e => e.Cpnyid)
                    .HasMaxLength(75)
                    .HasColumnName("CPNYID");

                entity.Property(e => e.Fiscyr)
                    .HasMaxLength(75)
                    .HasColumnName("FISCYR");

                entity.Property(e => e.Month).HasColumnName("MONTH");

                entity.Property(e => e.Period).HasColumnName("period");
            });

            modelBuilder.Entity<CssBdgreportGroupBdgglaccountMappingSummaryView>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("CSS_BDGReportGroup_BDGGLAccountMapping_SUMMARY_VIEW");

                entity.Property(e => e.Acct)
                    .HasMaxLength(75)
                    .HasColumnName("ACCT");

                entity.Property(e => e.Amount).HasColumnName("amount");

                entity.Property(e => e.Cpnyid)
                    .HasMaxLength(75)
                    .HasColumnName("CPNYID");

                entity.Property(e => e.Fiscyr)
                    .HasMaxLength(75)
                    .HasColumnName("FISCYR");

                entity.Property(e => e.Month).HasColumnName("MONTH");

                entity.Property(e => e.Period).HasColumnName("period");
            });

            modelBuilder.Entity<CssBudgetMoveFor2013>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("CSS_BudgetMoveFor2013");

                entity.Property(e => e.AnnualSalary).HasColumnType("money");

                entity.Property(e => e.BdgaccountGroupId).HasColumnName("BDGAccountGroupID");

                entity.Property(e => e.Bdgaccountgroup)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnName("BDGAccountgroup");

                entity.Property(e => e.BdgbudgetInfoDetail)
                    .HasMaxLength(250)
                    .HasColumnName("BDGBudgetInfo_detail");

                entity.Property(e => e.BdgbudgetInfoDetailId).HasColumnName("BDGBudgetInfo_detailID");

                entity.Property(e => e.BdgbudgetInfoId).HasColumnName("BDGBudgetInfoID");

                entity.Property(e => e.BdgdepartmentId).HasColumnName("BDGDepartmentID");

                entity.Property(e => e.Bdgemployee)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnName("BDGemployee");

                entity.Property(e => e.BdgemployeeId).HasColumnName("BDGEmployeeID");

                entity.Property(e => e.BdgemployeeUnit)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnName("BDGEmployeeUnit");

                entity.Property(e => e.BdgemployeeunitId).HasColumnName("BDGemployeeunitID");

                entity.Property(e => e.BudgetAmount).HasColumnType("money");

                entity.Property(e => e.Department).HasMaxLength(50);

                entity.Property(e => e.EffectiveSalaryMonthId).HasColumnName("EffectiveSalary_MonthID");

                entity.Property(e => e.NextYearProposedBudgetFactor).HasColumnType("decimal(10, 2)");

                entity.Property(e => e.ProposedBudgetFactor).HasColumnType("decimal(10, 2)");

                entity.Property(e => e.Yearsetup)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.YearsetupId).HasColumnName("YearsetupID");
            });

            modelBuilder.Entity<CssBudgetSalaries2012Temp>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("css_budget_salaries_2012_temp");

                entity.Property(e => e.AftEmpNo)
                    .HasMaxLength(255)
                    .HasColumnName("AFT Emp No");

                entity.Property(e => e.AnnualSalary)
                    .HasColumnType("numeric(38, 3)")
                    .HasColumnName("Annual Salary");

                entity.Property(e => e.Dept).HasMaxLength(255);

                entity.Property(e => e.Deptid)
                    .HasMaxLength(255)
                    .HasColumnName("deptid");

                entity.Property(e => e.EmployeeName)
                    .HasMaxLength(255)
                    .HasColumnName("Employee Name");

                entity.Property(e => e.F3).HasMaxLength(255);

                entity.Property(e => e.GradePosition)
                    .HasMaxLength(255)
                    .HasColumnName("Grade / Position");

                entity.Property(e => e.Gradepositionid).HasMaxLength(255);

                entity.Property(e => e.HireDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Hire Date");

                entity.Property(e => e.Status).HasMaxLength(255);

                entity.Property(e => e.Statusid)
                    .HasMaxLength(255)
                    .HasColumnName("statusid");

                entity.Property(e => e.Test)
                    .HasMaxLength(255)
                    .HasColumnName("test");

                entity.Property(e => e.Unit).HasMaxLength(255);

                entity.Property(e => e.Unitid)
                    .HasMaxLength(255)
                    .HasColumnName("unitid");
            });

            modelBuilder.Entity<CssBudgetTemp>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("css_budget_temp");

                entity.Property(e => e.AccountGroup).HasMaxLength(255);

                entity.Property(e => e.AccountGroupSubGroup)
                    .HasMaxLength(255)
                    .HasColumnName("AccountGroup_SubGroup");

                entity.Property(e => e.AccountGroupSubGroupSubGroup)
                    .HasMaxLength(255)
                    .HasColumnName("AccountGroup_SubGroup_SubGroup");

                entity.Property(e => e.AccountGroupSubGroupSubGroupSubGroup)
                    .HasMaxLength(255)
                    .HasColumnName("AccountGroup_SubGroup_SubGroup_SubGroup");

                entity.Property(e => e.Amount).HasColumnType("money");

                entity.Property(e => e.BdgaccountGroupId).HasColumnName("BDGAccountGroupID");

                entity.Property(e => e.BdgaccountGroupSubGroupId).HasColumnName("BDGAccountGroup_SubGroupID");

                entity.Property(e => e.BdgaccountGroupSubGroupSubGroupId).HasColumnName("BDGAccountGroup_SubGroup_SubGroupID");

                entity.Property(e => e.BdgaccountGroupSubGroupSubGroupSubGroupId).HasColumnName("BDGAccountGroup_SubGroup_SubGroup_SubGroupID");

                entity.Property(e => e.BdgdepartmentId).HasColumnName("BDGDepartmentID");

                entity.Property(e => e.CreatedBy).HasMaxLength(50);

                entity.Property(e => e.CreatedOn).HasColumnType("datetime");

                entity.Property(e => e.Department).HasMaxLength(255);

                entity.Property(e => e.Description).HasMaxLength(2000);

                entity.Property(e => e.Display).HasMaxLength(50);

                entity.Property(e => e.ImportedObjectUid)
                    .HasMaxLength(50)
                    .HasColumnName("ImportedObjectUID");

                entity.Property(e => e.InstallationUid).HasColumnName("InstallationUID");

                entity.Property(e => e.Name).HasMaxLength(50);

                entity.Property(e => e.Name1)
                    .HasMaxLength(50)
                    .HasColumnName("name1");

                entity.Property(e => e.Name2)
                    .HasMaxLength(50)
                    .HasColumnName("name2");

                entity.Property(e => e.NameAlias).HasMaxLength(50);

                entity.Property(e => e.ObjectUid).HasColumnName("ObjectUID");

                entity.Property(e => e.OldRecordId).HasColumnName("OldRecordID");

                entity.Property(e => e.Recordid).HasColumnName("recordid");

                entity.Property(e => e.UpdatedBy).HasMaxLength(50);

                entity.Property(e => e.UpdatedOn).HasColumnType("datetime");

                entity.Property(e => e.YearSetupId).HasColumnName("YearSetupID");
            });

            modelBuilder.Entity<CssBudgetinfoMove>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("css_budgetinfo_moves");

                entity.Property(e => e.Description).HasMaxLength(2000);

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Number).HasMaxLength(50);
            });

            modelBuilder.Entity<CssBudgetsetupTemp>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("css_budgetsetup_temp");

                entity.Property(e => e.Bdgaccountgroupname)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnName("bdgaccountgroupname");

                entity.Property(e => e.BdgbudgetinfoDetailid).HasColumnName("bdgbudgetinfo_detailid");

                entity.Property(e => e.BudgetAmount).HasColumnType("money");

                entity.Property(e => e.CurrentYearBudgetAmount).HasColumnType("money");

                entity.Property(e => e.NextYearBudgetAmount).HasColumnType("money");

                entity.Property(e => e.Yearsetupname)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnName("yearsetupname");
            });

            modelBuilder.Entity<CssChecknoApplied>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("css_checkno_applied");

                entity.Property(e => e.Appliedtodocumentno)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnName("appliedtodocumentno");

                entity.Property(e => e.Checkno)
                    .HasMaxLength(75)
                    .HasColumnName("CHECKNO");

                entity.Property(e => e.DocumentNo).HasMaxLength(50);

                entity.Property(e => e.Documentdate)
                    .HasColumnType("datetime")
                    .HasColumnName("documentdate");

                entity.Property(e => e.Id)
                    .HasMaxLength(75)
                    .HasColumnName("ID");

                entity.Property(e => e.Objectuid).HasColumnName("objectuid");
            });

            modelBuilder.Entity<CssContributionPlusDeatil>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("CSS_CONTRIBUTION_PLUS_DEATIL");

                entity.Property(e => e.ACheckDate)
                    .HasColumnType("datetime")
                    .HasColumnName("A_CheckDate");

                entity.Property(e => e.ACheckNo)
                    .HasMaxLength(20)
                    .HasColumnName("A_CheckNo");

                entity.Property(e => e.ACreatedBy)
                    .HasMaxLength(50)
                    .HasColumnName("A_CreatedBy");

                entity.Property(e => e.ACreatedOn)
                    .HasColumnType("datetime")
                    .HasColumnName("A_CreatedOn");

                entity.Property(e => e.ADateReceived)
                    .HasColumnType("datetime")
                    .HasColumnName("A_DateReceived");

                entity.Property(e => e.ADepositAmount)
                    .HasColumnType("money")
                    .HasColumnName("A_DepositAmount");

                entity.Property(e => e.ADepositDate)
                    .HasColumnType("datetime")
                    .HasColumnName("A_DepositDate");

                entity.Property(e => e.ADescription)
                    .HasMaxLength(2000)
                    .HasColumnName("A_Description");

                entity.Property(e => e.ADisplay)
                    .HasMaxLength(20)
                    .HasColumnName("A_Display");

                entity.Property(e => e.AEndDate)
                    .HasColumnType("datetime")
                    .HasColumnName("A_EndDate");

                entity.Property(e => e.AFeccashAccountId).HasColumnName("A_FECCashAccountID");

                entity.Property(e => e.AFeccompanyId).HasColumnName("A_FECCompanyID");

                entity.Property(e => e.AFeccontributionSourceId).HasColumnName("A_FECContributionSourceID");

                entity.Property(e => e.AFeccontributionStatusId).HasColumnName("A_FECContributionStatusID");

                entity.Property(e => e.AFeccontributionTypeId).HasColumnName("A_FECContributionTypeID");

                entity.Property(e => e.AFeclocalUnionId).HasColumnName("A_FECLocalUnionID");

                entity.Property(e => e.AGpreferenceNo)
                    .HasMaxLength(20)
                    .HasColumnName("A_GPReferenceNo");

                entity.Property(e => e.AImportedObjectUid)
                    .HasMaxLength(50)
                    .HasColumnName("A_ImportedObjectUID");

                entity.Property(e => e.AInstallationUid).HasColumnName("A_InstallationUID");

                entity.Property(e => e.AIsDeleted).HasColumnName("A_IsDeleted");

                entity.Property(e => e.AIsInactive).HasColumnName("A_IsInactive");

                entity.Property(e => e.AIsLocked).HasColumnName("A_IsLocked");

                entity.Property(e => e.AMemberTotal)
                    .HasColumnType("money")
                    .HasColumnName("A_MemberTotal");

                entity.Property(e => e.AName)
                    .HasMaxLength(50)
                    .HasColumnName("A_Name");

                entity.Property(e => e.ANameAlias)
                    .HasMaxLength(50)
                    .HasColumnName("A_NameAlias");

                entity.Property(e => e.AObjectUid).HasColumnName("A_ObjectUID");

                entity.Property(e => e.AOldRecordId).HasColumnName("A_OldRecordID");

                entity.Property(e => e.ARecordId).HasColumnName("A_RecordID");

                entity.Property(e => e.ASortOrder).HasColumnName("A_SortOrder");

                entity.Property(e => e.AStartDate)
                    .HasColumnType("datetime")
                    .HasColumnName("A_StartDate");

                entity.Property(e => e.AUpdatedBy)
                    .HasMaxLength(50)
                    .HasColumnName("A_UpdatedBy");

                entity.Property(e => e.AUpdatedOn)
                    .HasColumnType("datetime")
                    .HasColumnName("A_UpdatedOn");

                entity.Property(e => e.AUploadDetail)
                    .HasColumnType("image")
                    .HasColumnName("A_UploadDetail");

                entity.Property(e => e.BAddressLineI)
                    .HasMaxLength(100)
                    .HasColumnName("B_AddressLineI");

                entity.Property(e => e.BAddressLineIi)
                    .HasMaxLength(100)
                    .HasColumnName("B_AddressLineII");

                entity.Property(e => e.BCity)
                    .HasMaxLength(50)
                    .HasColumnName("B_City");

                entity.Property(e => e.BContributionAmount)
                    .HasColumnType("money")
                    .HasColumnName("B_ContributionAmount");

                entity.Property(e => e.BCountryStateId).HasColumnName("B_Country_StateID");

                entity.Property(e => e.BCreatedBy)
                    .HasMaxLength(50)
                    .HasColumnName("B_CreatedBy");

                entity.Property(e => e.BCreatedOn)
                    .HasColumnType("datetime")
                    .HasColumnName("B_CreatedOn");

                entity.Property(e => e.BDescription)
                    .HasMaxLength(2000)
                    .HasColumnName("B_Description");

                entity.Property(e => e.BDisplay)
                    .HasMaxLength(50)
                    .HasColumnName("B_Display");

                entity.Property(e => e.BEmailPrimary)
                    .HasMaxLength(50)
                    .HasColumnName("B_EmailPrimary");

                entity.Property(e => e.BEmployer)
                    .HasMaxLength(50)
                    .HasColumnName("B_Employer");

                entity.Property(e => e.BFeccontributionId).HasColumnName("B_FECContributionID");

                entity.Property(e => e.BFeclocalUnionId).HasColumnName("B_FECLocalUnionID");

                entity.Property(e => e.BFecmemberId).HasColumnName("B_FECMemberID");

                entity.Property(e => e.BFirstName)
                    .HasMaxLength(50)
                    .HasColumnName("B_FirstName");

                entity.Property(e => e.BImportedObjectUid)
                    .HasMaxLength(50)
                    .HasColumnName("B_ImportedObjectUID");

                entity.Property(e => e.BInstallationUid).HasColumnName("B_InstallationUID");

                entity.Property(e => e.BIsDeleted).HasColumnName("B_IsDeleted");

                entity.Property(e => e.BIsInactive).HasColumnName("B_IsInactive");

                entity.Property(e => e.BIsLocked).HasColumnName("B_IsLocked");

                entity.Property(e => e.BJobTitle)
                    .HasMaxLength(50)
                    .HasColumnName("B_JobTitle");

                entity.Property(e => e.BLastName)
                    .HasMaxLength(50)
                    .HasColumnName("B_LastName");

                entity.Property(e => e.BMemberCode)
                    .HasMaxLength(20)
                    .HasColumnName("B_MemberCode");

                entity.Property(e => e.BMiddleName)
                    .HasMaxLength(2)
                    .HasColumnName("B_MiddleName");

                entity.Property(e => e.BName)
                    .HasMaxLength(50)
                    .HasColumnName("B_Name");

                entity.Property(e => e.BNameAlias)
                    .HasMaxLength(50)
                    .HasColumnName("B_NameAlias");

                entity.Property(e => e.BObjectUid).HasColumnName("B_ObjectUID");

                entity.Property(e => e.BOldRecordId).HasColumnName("B_OldRecordID");

                entity.Property(e => e.BPhoneHome)
                    .HasMaxLength(50)
                    .HasColumnName("B_PhoneHome");

                entity.Property(e => e.BPostalCode)
                    .HasMaxLength(20)
                    .HasColumnName("B_PostalCode");

                entity.Property(e => e.BPrefix)
                    .HasMaxLength(50)
                    .HasColumnName("B_Prefix");

                entity.Property(e => e.BRecordId).HasColumnName("B_RecordID");

                entity.Property(e => e.BSortOrder).HasColumnName("B_SortOrder");

                entity.Property(e => e.BUpdatedBy)
                    .HasMaxLength(50)
                    .HasColumnName("B_UpdatedBy");

                entity.Property(e => e.BUpdatedOn)
                    .HasColumnType("datetime")
                    .HasColumnName("B_UpdatedOn");

                entity.Property(e => e.FeccashAccountName)
                    .HasMaxLength(50)
                    .HasColumnName("FECCashAccount_name");

                entity.Property(e => e.FeccompanyName)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnName("feccompany_name");

                entity.Property(e => e.FeccontributionSourceName)
                    .HasMaxLength(50)
                    .HasColumnName("FECContributionSource_name");

                entity.Property(e => e.FeccontributionStatusName)
                    .HasMaxLength(50)
                    .HasColumnName("FECContributionStatus_name");

                entity.Property(e => e.FeccontributionTypeName)
                    .HasMaxLength(50)
                    .HasColumnName("FECContributionType_name");

                entity.Property(e => e.FeclocalUnionName)
                    .HasMaxLength(50)
                    .HasColumnName("FECLocalUnion_name");

                entity.Property(e => e.FecmemberName)
                    .HasMaxLength(125)
                    .HasColumnName("FECMember_name");

                entity.Property(e => e.GlaccountNumber)
                    .HasMaxLength(50)
                    .HasColumnName("GLAccountNumber");

                entity.Property(e => e.GpaccountName)
                    .HasMaxLength(50)
                    .HasColumnName("GPAccountName");

                entity.Property(e => e.GpcheckBook)
                    .HasMaxLength(50)
                    .HasColumnName("GPCheckBook");

                entity.Property(e => e.Number)
                    .IsRequired()
                    .HasMaxLength(10);

                entity.Property(e => e.ProcessDate).HasColumnType("datetime");

                entity.Property(e => e.State).HasMaxLength(50);
            });

            modelBuilder.Entity<CssCountLrpvendorVoucher>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("css_count_LRPVendor_Voucher");

                entity.Property(e => e.Count1).HasColumnName("count1");

                entity.Property(e => e.CssLink)
                    .HasMaxLength(100)
                    .HasColumnName("CSS_Link");

                entity.Property(e => e.Recordid).HasColumnName("recordid");
            });

            modelBuilder.Entity<CssCssBdgaccountGroupSubGroupView>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("css_css_BDGAccountGroup_SubGroup_view");

                entity.Property(e => e.AccountCode).HasMaxLength(50);

                entity.Property(e => e.Acctgroup)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnName("acctgroup");

                entity.Property(e => e.Acctgroupid).HasColumnName("acctgroupid");

                entity.Property(e => e.BdgaccountGroupId).HasColumnName("BDGAccountGroupID");

                entity.Property(e => e.CreatedBy).HasMaxLength(50);

                entity.Property(e => e.CreatedOn).HasColumnType("datetime");

                entity.Property(e => e.Department)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnName("department");

                entity.Property(e => e.Description).HasMaxLength(2000);

                entity.Property(e => e.Display).HasMaxLength(150);

                entity.Property(e => e.ImportedObjectUid)
                    .HasMaxLength(50)
                    .HasColumnName("ImportedObjectUID");

                entity.Property(e => e.InstallationUid).HasColumnName("InstallationUID");

                entity.Property(e => e.MappingObjectuid).HasColumnName("mapping_objectuid");

                entity.Property(e => e.Name).HasMaxLength(50);

                entity.Property(e => e.NameAlias).HasMaxLength(50);

                entity.Property(e => e.ObjectUid).HasColumnName("ObjectUID");

                entity.Property(e => e.OldRecordId).HasColumnName("OldRecordID");

                entity.Property(e => e.ParentBdgaccountGroupSubGroupId).HasColumnName("Parent_BDGAccountGroup_SubGroupID");

                entity.Property(e => e.RecordId).HasColumnName("RecordID");

                entity.Property(e => e.Status)
                    .IsRequired()
                    .HasMaxLength(12)
                    .IsUnicode(false)
                    .HasColumnName("status");

                entity.Property(e => e.SubGroup)
                    .HasMaxLength(50)
                    .HasColumnName("sub_group");

                entity.Property(e => e.SubSubName)
                    .HasMaxLength(50)
                    .HasColumnName("sub_sub_name");

                entity.Property(e => e.SubSubSubName)
                    .HasMaxLength(50)
                    .HasColumnName("sub_sub_sub_name");

                entity.Property(e => e.UpdatedBy).HasMaxLength(50);

                entity.Property(e => e.UpdatedOn).HasColumnType("datetime");
            });

            modelBuilder.Entity<CssDistinctMaskingAccount>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("css_DistinctMaskingAccount");

                entity.Property(e => e.AccountNo)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.BdgaccountGroupId).HasColumnName("BDGAccountGroupID");

                entity.Property(e => e.BdgaccountGroupName)
                    .HasMaxLength(50)
                    .HasColumnName("BDGAccountGroup_Name");

                entity.Property(e => e.BdgaccountGroupSubGroupId).HasColumnName("BDGAccountGroup_SubGroupID");

                entity.Property(e => e.BdgaccountGroupSubGroupName)
                    .HasMaxLength(50)
                    .HasColumnName("BDGAccountGroup_SubGroup_Name");

                entity.Property(e => e.BdgaccountGroupSubGroupSubGroupId).HasColumnName("BDGAccountGroup_SubGroup_SubGroupID");

                entity.Property(e => e.BdgaccountGroupSubGroupSubGroupName)
                    .HasMaxLength(50)
                    .HasColumnName("BDGAccountGroup_SubGroup_SubGroup_Name");

                entity.Property(e => e.BdgaccountGroupSubGroupSubGroupSubGroupId).HasColumnName("BDGAccountGroup_SubGroup_SubGroup_SubGroupID");

                entity.Property(e => e.BdgaccountGroupSubGroupSubGroupSubGroupName)
                    .HasMaxLength(50)
                    .HasColumnName("BDGAccountGroup_SubGroup_SubGroup_SubGroup_name");

                entity.Property(e => e.BdgdepartmentId).HasColumnName("BDGDepartmentID");

                entity.Property(e => e.BdgdepartmentName)
                    .HasMaxLength(50)
                    .HasColumnName("BDGDepartment_Name");
            });

            modelBuilder.Entity<CssDistinctMaskingAccountTemp>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("css_DistinctMaskingAccount_temp");

                entity.Property(e => e.AccountNo).HasMaxLength(75);

                entity.Property(e => e.BdgaccountGroup)
                    .HasMaxLength(50)
                    .HasColumnName("BDGAccountGroup");

                entity.Property(e => e.BdgaccountGroupSubGroup)
                    .HasMaxLength(50)
                    .HasColumnName("BDGAccountGroup_SubGroup");

                entity.Property(e => e.BdgaccountGroupSubGroupSubGroup)
                    .HasMaxLength(50)
                    .HasColumnName("BDGAccountGroup_SubGroup_SubGroup");

                entity.Property(e => e.BdgaccountGroupSubGroupSubGroupSubGroup)
                    .HasMaxLength(50)
                    .HasColumnName("BDGAccountGroup_SubGroup_SubGroup_SubGroup");

                entity.Property(e => e.BdgaccountGroupid).HasColumnName("BDGAccountGroupid");

                entity.Property(e => e.Bdgdepartment)
                    .HasMaxLength(50)
                    .HasColumnName("BDGDepartment");

                entity.Property(e => e.Bdgdepartmentid).HasColumnName("BDGDepartmentid");

                entity.Property(e => e.Company).HasMaxLength(75);

                entity.Property(e => e.MaskedAccountNo).HasMaxLength(50);
            });

            modelBuilder.Entity<CssDuplciateMapping>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("css_duplciate_mapping");

                entity.Property(e => e.AccountNo)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Count1).HasColumnName("count1");
            });

            modelBuilder.Entity<CssEmployeeMoveFrom>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("css_Employee_Move_from");

                entity.Property(e => e.BudgetAmount).HasColumnType("money");

                entity.Property(e => e.CurrentYearBudgetAmount).HasColumnType("money");

                entity.Property(e => e.Name).HasMaxLength(250);

                entity.Property(e => e.NextYearBudgetAmount).HasColumnType("money");

                entity.Property(e => e.Number).HasMaxLength(50);

                entity.Property(e => e.ObjectUid).HasColumnName("ObjectUID");
            });

            modelBuilder.Entity<CssEmployeeMoveTo>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("css_Employee_move_to");

                entity.Property(e => e.BudgetAmount).HasColumnType("money");

                entity.Property(e => e.CurrentYearBudgetAmount).HasColumnType("money");

                entity.Property(e => e.Name).HasMaxLength(250);

                entity.Property(e => e.NextYearBudgetAmount).HasColumnType("money");

                entity.Property(e => e.Number).HasMaxLength(50);

                entity.Property(e => e.ObjectUid).HasColumnName("ObjectUID");
            });

            modelBuilder.Entity<CssFecdistributionDetailError>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("css_FECDistribution_Detail_error");

                entity.Property(e => e.Test)
                    .IsRequired()
                    .HasMaxLength(4)
                    .IsUnicode(false)
                    .HasColumnName("test");
            });

            modelBuilder.Entity<CssFecdistributionDetailErrorHold>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("css_FECDistribution_Detail_error_hold");

                entity.Property(e => e.Test)
                    .IsRequired()
                    .HasMaxLength(4)
                    .IsUnicode(false)
                    .HasColumnName("test");
            });

            modelBuilder.Entity<CssFecdistributionDetailErrorInvalidsegment>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("css_FECDistribution_Detail_error_invalidsegment");

                entity.Property(e => e.Test)
                    .IsRequired()
                    .HasMaxLength(4)
                    .IsUnicode(false)
                    .HasColumnName("test");
            });

            modelBuilder.Entity<CssFecdistributionProofamount>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("css_FECDistribution_proofamount");

                entity.Property(e => e.Documentamount)
                    .HasColumnType("money")
                    .HasColumnName("documentamount");

                entity.Property(e => e.ExpenditureamountSum)
                    .HasColumnType("money")
                    .HasColumnName("expenditureamount_sum");

                entity.Property(e => e.Objectuid).HasColumnName("objectuid");
            });

            modelBuilder.Entity<CssFecdistributionProofamountStep2>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("css_FECDistribution_proofamount_step2");

                entity.Property(e => e.ErrorMessage)
                    .IsRequired()
                    .HasMaxLength(59)
                    .IsUnicode(false)
                    .HasColumnName("Error_Message");

                entity.Property(e => e.Objectuid).HasColumnName("objectuid");
            });

            modelBuilder.Entity<CssFecdistributionReport>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("css_fecdistribution_report");

                entity.Property(e => e.AccountIdentifier).HasMaxLength(20);

                entity.Property(e => e.AccountNumber).HasMaxLength(50);

                entity.Property(e => e.AmountRemaining).HasColumnType("money");

                entity.Property(e => e.ApprovedValue)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnName("approved_value");

                entity.Property(e => e.BatchNo).HasMaxLength(50);

                entity.Property(e => e.BdgaccountGroupName2)
                    .HasMaxLength(50)
                    .HasColumnName("BDGAccountGroupName2");

                entity.Property(e => e.Bdgaccountgroupname)
                    .HasMaxLength(50)
                    .HasColumnName("bdgaccountgroupname");

                entity.Property(e => e.Bdgdepartmentname)
                    .HasMaxLength(50)
                    .HasColumnName("bdgdepartmentname");

                entity.Property(e => e.Bdgdepartmentnameline)
                    .HasMaxLength(50)
                    .HasColumnName("bdgdepartmentnameline");

                entity.Property(e => e.CandidateOrCommitteeAddressI).HasMaxLength(100);

                entity.Property(e => e.CandidateOrCommitteeAddressIi)
                    .HasMaxLength(100)
                    .HasColumnName("CandidateOrCommitteeAddressII");

                entity.Property(e => e.CandidateOrCommitteeCity).HasMaxLength(20);

                entity.Property(e => e.CandidateOrCommitteeCountryStateId).HasColumnName("CandidateOrCommittee_Country_StateID");

                entity.Property(e => e.CandidateOrCommitteeEmail)
                    .HasMaxLength(50)
                    .HasColumnName("CandidateOrCommitteeEMail");

                entity.Property(e => e.CandidateOrCommitteeFax).HasMaxLength(20);

                entity.Property(e => e.CandidateOrCommitteePhone).HasMaxLength(20);

                entity.Property(e => e.CandidateOrCommitteePostalCode).HasMaxLength(20);

                entity.Property(e => e.CheckAmount).HasColumnType("money");

                entity.Property(e => e.CheckDate).HasColumnType("datetime");

                entity.Property(e => e.CheckNo).HasMaxLength(20);

                entity.Property(e => e.Companyname)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnName("companyname");

                entity.Property(e => e.ControlAmount).HasColumnType("money");

                entity.Property(e => e.CreatedBy).HasMaxLength(50);

                entity.Property(e => e.CreatedOn).HasColumnType("datetime");

                entity.Property(e => e.Display).HasMaxLength(20);

                entity.Property(e => e.DistributionDate).HasColumnType("datetime");

                entity.Property(e => e.DocumentAmount).HasColumnType("money");

                entity.Property(e => e.DocumentDate).HasColumnType("datetime");

                entity.Property(e => e.DocumentNo).HasMaxLength(20);

                entity.Property(e => e.ElectionCountryStateId).HasColumnName("Election_Country_StateID");

                entity.Property(e => e.ElectionDistrict)
                    .HasMaxLength(5)
                    .HasColumnName("Election_District");

                entity.Property(e => e.ElectionOtherDescription).HasMaxLength(2000);

                entity.Property(e => e.ElectionOtherIdentification)
                    .HasMaxLength(20)
                    .HasColumnName("Election_OtherIdentification");

                entity.Property(e => e.ExpenditureAmount).HasColumnType("money");

                entity.Property(e => e.ExpenditurePurpose).HasMaxLength(2000);

                entity.Property(e => e.FecBdgdepartmentId).HasColumnName("FEC_BDGDepartmentID");

                entity.Property(e => e.FecUserAccountId).HasColumnName("FEC_UserAccountID");

                entity.Property(e => e.FecbatchStatusId).HasColumnName("FECBatchStatusID");

                entity.Property(e => e.FeccandidateId).HasColumnName("FECCandidateID");

                entity.Property(e => e.FeccommitteeId).HasColumnName("FECCommitteeID");

                entity.Property(e => e.FeccompanyId).HasColumnName("FECCompanyID");

                entity.Property(e => e.FecdisbursementTypeId).HasColumnName("FECDisbursementTypeID");

                entity.Property(e => e.FecdistibutionlineObjectuid).HasColumnName("fecdistibutionline_objectuid");

                entity.Property(e => e.FecdistributionStatusId).HasColumnName("FECDistributionStatusID");

                entity.Property(e => e.FecdistributionTypeId).HasColumnName("FECDistributionTypeID");

                entity.Property(e => e.FecelectionOfficeId).HasColumnName("FECElectionOfficeID");

                entity.Property(e => e.FecelectionTypeId).HasColumnName("FECElectionTypeID");

                entity.Property(e => e.FecexpenseCategoryId).HasColumnName("FECExpenseCategoryID");

                entity.Property(e => e.FecvendorId).HasColumnName("FECVendorID");

                entity.Property(e => e.HeaderDescription)
                    .HasMaxLength(2000)
                    .HasColumnName("Header Description");

                entity.Property(e => e.Idno)
                    .HasMaxLength(50)
                    .HasColumnName("IDNo");

                entity.Property(e => e.ImportedObjectUid)
                    .HasMaxLength(50)
                    .HasColumnName("ImportedObjectUID");

                entity.Property(e => e.InstallationUid).HasColumnName("InstallationUID");

                entity.Property(e => e.LineNotes)
                    .HasMaxLength(2000)
                    .HasColumnName("LINE_NOTES");

                entity.Property(e => e.LrpcodeName)
                    .HasMaxLength(50)
                    .HasColumnName("LRPCodeName");

                entity.Property(e => e.Lrpten99BoxNoName)
                    .HasMaxLength(50)
                    .HasColumnName("LRPTen99BoxNoName");

                entity.Property(e => e.Lrpten99TaxTypeName)
                    .HasMaxLength(50)
                    .HasColumnName("LRPTen99TaxTypeName");

                entity.Property(e => e.MailingAddressI).HasMaxLength(100);

                entity.Property(e => e.MailingAddressIi)
                    .HasMaxLength(100)
                    .HasColumnName("MailingAddressII");

                entity.Property(e => e.MailingCity).HasMaxLength(50);

                entity.Property(e => e.MailingCountryStateId).HasColumnName("Mailing_Country_StateID");

                entity.Property(e => e.MailingEmail)
                    .HasMaxLength(50)
                    .HasColumnName("MailingEMail");

                entity.Property(e => e.MailingFax).HasMaxLength(20);

                entity.Property(e => e.MailingPhone).HasMaxLength(20);

                entity.Property(e => e.MailingPostalCode).HasMaxLength(20);

                entity.Property(e => e.Name).HasMaxLength(50);

                entity.Property(e => e.NameAlias).HasMaxLength(50);

                entity.Property(e => e.ObjectUid).HasColumnName("ObjectUID");

                entity.Property(e => e.OldRecordId).HasColumnName("OldRecordID");

                entity.Property(e => e.RecordId).HasColumnName("RecordID");

                entity.Property(e => e.UpdatedBy).HasMaxLength(50);

                entity.Property(e => e.UpdatedOn).HasColumnType("datetime");

                entity.Property(e => e.VendorAddressI).HasMaxLength(100);

                entity.Property(e => e.VendorAddressIi)
                    .HasMaxLength(100)
                    .HasColumnName("VendorAddressII");

                entity.Property(e => e.VendorCity).HasMaxLength(50);

                entity.Property(e => e.VendorCountryStateId).HasColumnName("Vendor_Country_StateID");

                entity.Property(e => e.VendorEmail)
                    .HasMaxLength(50)
                    .HasColumnName("VendorEMail");

                entity.Property(e => e.VendorFax).HasMaxLength(20);

                entity.Property(e => e.VendorName).HasMaxLength(50);

                entity.Property(e => e.VendorPhone).HasMaxLength(20);

                entity.Property(e => e.VendorPostalCode).HasMaxLength(20);

                entity.Property(e => e.VoucherNo).HasMaxLength(20);
            });

            modelBuilder.Entity<CssFeclocalUnionView>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("css_FECLocalUnion_view");

                entity.Property(e => e.AddressLineI).HasMaxLength(100);

                entity.Property(e => e.AddressLineIi)
                    .HasMaxLength(100)
                    .HasColumnName("AddressLineII");

                entity.Property(e => e.City).HasMaxLength(50);

                entity.Property(e => e.CountryStateId).HasColumnName("Country_StateID");

                entity.Property(e => e.CreatedBy).HasMaxLength(50);

                entity.Property(e => e.CreatedOn).HasColumnType("datetime");

                entity.Property(e => e.Description).HasMaxLength(2000);

                entity.Property(e => e.Display).HasMaxLength(65);

                entity.Property(e => e.FeccompanyId).HasColumnName("FECCompanyID");

                entity.Property(e => e.ImportedObjectUid)
                    .HasMaxLength(50)
                    .HasColumnName("ImportedObjectUID");

                entity.Property(e => e.InstallationUid).HasColumnName("InstallationUID");

                entity.Property(e => e.Name).HasMaxLength(50);

                entity.Property(e => e.NameAlias).HasMaxLength(50);

                entity.Property(e => e.Number)
                    .IsRequired()
                    .HasMaxLength(10);

                entity.Property(e => e.ObjectUid).HasColumnName("ObjectUID");

                entity.Property(e => e.OldRecordId).HasColumnName("OldRecordID");

                entity.Property(e => e.PostalCode).HasMaxLength(20);

                entity.Property(e => e.RecordId)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("RecordID");

                entity.Property(e => e.UpdatedBy).HasMaxLength(50);

                entity.Property(e => e.UpdatedOn).HasColumnType("datetime");
            });

            modelBuilder.Entity<CssFecmemberTemp>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("css_FECMember_temp");

                entity.Property(e => e.AddressLineI).HasMaxLength(100);

                entity.Property(e => e.AddressLineIi)
                    .HasMaxLength(100)
                    .HasColumnName("AddressLineII");

                entity.Property(e => e.City).HasMaxLength(50);

                entity.Property(e => e.CountryStateId).HasColumnName("Country_StateID");

                entity.Property(e => e.CreatedBy).HasMaxLength(50);

                entity.Property(e => e.CreatedOn).HasColumnType("datetime");

                entity.Property(e => e.Description).HasMaxLength(2000);

                entity.Property(e => e.Display).HasMaxLength(125);

                entity.Property(e => e.EmailPrimary).HasMaxLength(50);

                entity.Property(e => e.Employer).HasMaxLength(50);

                entity.Property(e => e.Feccompanyid).HasColumnName("FECCompanyid");

                entity.Property(e => e.FeclocalUnionId).HasColumnName("FECLocalUnionID");

                entity.Property(e => e.FecpaymentFrequencyId).HasColumnName("FECPaymentFrequencyID");

                entity.Property(e => e.FirstName)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.ImportedObjectUid)
                    .HasMaxLength(50)
                    .HasColumnName("ImportedObjectUID");

                entity.Property(e => e.InstallationUid).HasColumnName("InstallationUID");

                entity.Property(e => e.JobTitle).HasMaxLength(50);

                entity.Property(e => e.LastName)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.MemberCode).HasMaxLength(20);

                entity.Property(e => e.MiddleName).HasMaxLength(2);

                entity.Property(e => e.Name).HasMaxLength(50);

                entity.Property(e => e.NameAlias).HasMaxLength(50);

                entity.Property(e => e.OldRecordId).HasColumnName("OldRecordID");

                entity.Property(e => e.PaymentAmount).HasColumnType("money");

                entity.Property(e => e.PhoneHome).HasMaxLength(50);

                entity.Property(e => e.PostalCode).HasMaxLength(20);

                entity.Property(e => e.Prefix).HasMaxLength(50);

                entity.Property(e => e.RecordId).HasColumnName("RecordID");

                entity.Property(e => e.Status1)
                    .IsRequired()
                    .HasMaxLength(18)
                    .IsUnicode(false)
                    .HasColumnName("status1");

                entity.Property(e => e.UpdatedBy).HasMaxLength(50);

                entity.Property(e => e.UpdatedOn).HasColumnType("datetime");
            });

            modelBuilder.Entity<CssFecvendorTemp>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("css_fecvendor_temp");

                entity.Property(e => e.AddressLineI).HasMaxLength(100);

                entity.Property(e => e.AddressLineIi)
                    .HasMaxLength(100)
                    .HasColumnName("AddressLineII");

                entity.Property(e => e.City).HasMaxLength(50);

                entity.Property(e => e.ContactName).HasMaxLength(100);

                entity.Property(e => e.CountryId).HasColumnName("CountryID");

                entity.Property(e => e.CountryStateId).HasColumnName("Country_StateID");

                entity.Property(e => e.CreatedBy).HasMaxLength(50);

                entity.Property(e => e.CreatedOn).HasColumnType("datetime");

                entity.Property(e => e.Description).HasMaxLength(2000);

                entity.Property(e => e.Display)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.Email)
                    .HasMaxLength(50)
                    .HasColumnName("EMail");

                entity.Property(e => e.Fax).HasMaxLength(20);

                entity.Property(e => e.FeccompanyId).HasColumnName("FECCompanyID");

                entity.Property(e => e.ImportedObjectUid)
                    .HasMaxLength(50)
                    .HasColumnName("ImportedObjectUID");

                entity.Property(e => e.InstallationUid).HasColumnName("InstallationUID");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.NameAlias)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.ObjectUid).HasColumnName("ObjectUID");

                entity.Property(e => e.OldRecordId).HasColumnName("OldRecordID");

                entity.Property(e => e.Phone).HasMaxLength(50);

                entity.Property(e => e.PostalCode).HasMaxLength(20);

                entity.Property(e => e.RecordId)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("RecordID");

                entity.Property(e => e.Statusvalue)
                    .IsRequired()
                    .HasMaxLength(13)
                    .IsUnicode(false)
                    .HasColumnName("statusvalue");

                entity.Property(e => e.UpdatedBy).HasMaxLength(50);

                entity.Property(e => e.UpdatedOn).HasColumnType("datetime");

                entity.Property(e => e.VendorIdentification).HasMaxLength(20);
            });

            modelBuilder.Entity<CssFsMissingLine>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("css_fs_missing_lines");

                entity.Property(e => e.Test)
                    .IsRequired()
                    .HasMaxLength(4)
                    .IsUnicode(false)
                    .HasColumnName("test");
            });

            modelBuilder.Entity<CssFsSummaryForBudget>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("CSS_fs_SUMMARY_FOR_BUDGET");

                entity.Property(e => e.Acct)
                    .HasMaxLength(75)
                    .HasColumnName("ACCT");

                entity.Property(e => e.Amount).HasColumnName("AMOUNT");

                entity.Property(e => e.BdgaccountGroupId).HasColumnName("BDGAccountGroupID");

                entity.Property(e => e.BdgdepartmentId).HasColumnName("BDGDepartmentID");

                entity.Property(e => e.BdgreportGroupBdgglaccountMappingid).HasColumnName("BDGReportGroup_BDGGLAccountMappingid");

                entity.Property(e => e.BdgreportGroupId).HasColumnName("BDGReportGroupID");

                entity.Property(e => e.Cpnyid)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnName("cpnyid");

                entity.Property(e => e.Fiscyr)
                    .HasMaxLength(75)
                    .HasColumnName("FISCYR");

                entity.Property(e => e.Month).HasColumnName("month");

                entity.Property(e => e.NAmeBdgreportGroupBdgglaccountMappingid)
                    .HasMaxLength(50)
                    .HasColumnName("nAME_BDGReportGroup_BDGGLAccountMappingid");

                entity.Property(e => e.NameBdgreportgroupid)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnName("NAME_BDGREPORTGROUPID");

                entity.Property(e => e.Period).HasColumnName("period");
            });

            modelBuilder.Entity<CssGltransactionLine>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("css_GLTransactionLine");

                entity.Property(e => e.CheckNumber)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Code)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("code");

                entity.Property(e => e.Glyearcodeid).HasColumnName("glyearcodeid");

                entity.Property(e => e.Totalamount)
                    .HasColumnType("money")
                    .HasColumnName("totalamount");
            });

            modelBuilder.Entity<CssGlyearcodeSum>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("CSS_GLYEARCODE_SUM");

                entity.Property(e => e.Test).HasColumnName("test");
            });

            modelBuilder.Entity<CssListofcorrect>(entity =>
            {
                entity.HasKey(e => e.RecordId);

                entity.ToTable("css_listofcorrect");

                entity.Property(e => e.RecordId).HasColumnName("RecordID");

                entity.Property(e => e.Lm2Code)
                    .HasMaxLength(255)
                    .HasColumnName("LM2_CODE");
            });

            modelBuilder.Entity<CssListofcorrectv2>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("css_listofcorrectv2");

                entity.Property(e => e.Lm2Code)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("LM2_CODE");

                entity.Property(e => e.RecordId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("RecordID");
            });

            modelBuilder.Entity<CssLm2MatchingBasedOnWebportal>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("css_lm2_matching_based_on_webportal");

                entity.Property(e => e.Test)
                    .IsRequired()
                    .HasMaxLength(4)
                    .IsUnicode(false)
                    .HasColumnName("test");
            });

            modelBuilder.Entity<CssLm2MatchingBasedOnWebportalDiff>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("css_lm2_matching_based_on_webportal_diff");

                entity.Property(e => e.Test)
                    .IsRequired()
                    .HasMaxLength(4)
                    .IsUnicode(false)
                    .HasColumnName("test");
            });

            modelBuilder.Entity<CssLrpglMappingpm>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("css_LrpglMappingpm");

                entity.Property(e => e.Acct)
                    .HasMaxLength(75)
                    .HasColumnName("ACCT");

                entity.Property(e => e.Amount).HasColumnName("AMOUNT");

                entity.Property(e => e.Auditnbr)
                    .HasMaxLength(75)
                    .HasColumnName("AUDITNBR");

                entity.Property(e => e.Batnbr)
                    .HasMaxLength(75)
                    .HasColumnName("BATNBR");

                entity.Property(e => e.BdgaccountGroup)
                    .HasMaxLength(50)
                    .HasColumnName("BDGAccountGroup");

                entity.Property(e => e.BdgaccountGroupSubGroup)
                    .HasMaxLength(50)
                    .HasColumnName("BDGAccountGroup_SubGroup");

                entity.Property(e => e.BdgaccountGroupSubGroupSubGroup)
                    .HasMaxLength(50)
                    .HasColumnName("BDGAccountGroup_SubGroup_SubGroup");

                entity.Property(e => e.BdgaccountGroupSubGroupSubGroupSubGroup)
                    .HasMaxLength(50)
                    .HasColumnName("BDGAccountGroup_SubGroup_SubGroup_SubGroup");

                entity.Property(e => e.Bdgdepartment)
                    .HasMaxLength(50)
                    .HasColumnName("BDGDepartment");

                entity.Property(e => e.Checkdate)
                    .HasColumnType("datetime")
                    .HasColumnName("CHECKDATE");

                entity.Property(e => e.Checkdate2)
                    .HasColumnType("datetime")
                    .HasColumnName("CHECKDATE2");

                entity.Property(e => e.Checkdate3)
                    .HasColumnType("datetime")
                    .HasColumnName("CHECKDATE3");

                entity.Property(e => e.Checkno)
                    .HasMaxLength(75)
                    .HasColumnName("CHECKNO");

                entity.Property(e => e.Checkno2)
                    .HasMaxLength(75)
                    .HasColumnName("CHECKNO2");

                entity.Property(e => e.Checkno3)
                    .HasMaxLength(75)
                    .HasColumnName("CHECKNO3");

                entity.Property(e => e.Classid)
                    .HasMaxLength(75)
                    .HasColumnName("CLASSID");

                entity.Property(e => e.Cpnyid)
                    .HasMaxLength(75)
                    .HasColumnName("CPNYID");

                entity.Property(e => e.CreatedBy).HasMaxLength(50);

                entity.Property(e => e.CreatedOn).HasColumnType("datetime");

                entity.Property(e => e.CrtdDatetime)
                    .HasColumnType("datetime")
                    .HasColumnName("CRTD_DATETIME");

                entity.Property(e => e.CrtdUser)
                    .HasMaxLength(75)
                    .HasColumnName("CRTD_USER");

                entity.Property(e => e.CssLink)
                    .HasMaxLength(255)
                    .HasColumnName("css_link")
                    .IsFixedLength(true);

                entity.Property(e => e.CssLinkLines)
                    .HasMaxLength(255)
                    .HasColumnName("css_link_lines")
                    .IsFixedLength(true);

                entity.Property(e => e.Curyid)
                    .HasMaxLength(75)
                    .HasColumnName("CURYID");

                entity.Property(e => e.Curyrate).HasColumnName("CURYRATE");

                entity.Property(e => e.Descr)
                    .HasMaxLength(75)
                    .HasColumnName("DESCR");

                entity.Property(e => e.Description).HasMaxLength(2000);

                entity.Property(e => e.Display).HasMaxLength(100);

                entity.Property(e => e.Docnbr)
                    .HasMaxLength(75)
                    .HasColumnName("DOCNBR");

                entity.Property(e => e.EmpFiscyrAcct)
                    .HasMaxLength(250)
                    .HasColumnName("EMP_FISCYR_ACCT");

                entity.Property(e => e.EmployeeCode)
                    .HasMaxLength(75)
                    .HasColumnName("EMPLOYEE_CODE");

                entity.Property(e => e.FinalId)
                    .HasMaxLength(75)
                    .HasColumnName("FINAL_ID");

                entity.Property(e => e.Fiscyr)
                    .HasMaxLength(75)
                    .HasColumnName("FISCYR");

                entity.Property(e => e.FiscyrAcct)
                    .HasMaxLength(50)
                    .HasColumnName("FISCYR_ACCT");

                entity.Property(e => e.GrantNo).HasMaxLength(75);

                entity.Property(e => e.IcDistribution).HasColumnName("IC_DISTRIBUTION");

                entity.Property(e => e.Id)
                    .HasMaxLength(75)
                    .HasColumnName("ID");

                entity.Property(e => e.IdField)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("ID_FIELD");

                entity.Property(e => e.ImportedObjectUid)
                    .HasMaxLength(50)
                    .HasColumnName("ImportedObjectUID");

                entity.Property(e => e.InstallationUid).HasColumnName("InstallationUID");

                entity.Property(e => e.Jrnltype)
                    .HasMaxLength(75)
                    .HasColumnName("JRNLTYPE");

                entity.Property(e => e.Ledgerid)
                    .HasMaxLength(75)
                    .HasColumnName("LEDGERID");

                entity.Property(e => e.Lineid).HasColumnName("LINEID");

                entity.Property(e => e.Linenbr).HasColumnName("LINENBR");

                entity.Property(e => e.Lineref)
                    .HasMaxLength(75)
                    .HasColumnName("LINEREF");

                entity.Property(e => e.Lm2Code)
                    .HasMaxLength(75)
                    .HasColumnName("LM2_CODE");

                entity.Property(e => e.Lm2Description)
                    .HasMaxLength(75)
                    .HasColumnName("LM2 DESCRIPTION");

                entity.Property(e => e.Lm2Fiscyr)
                    .HasMaxLength(250)
                    .HasColumnName("LM2_FISCYR");

                entity.Property(e => e.Lm2FiscyrAcct)
                    .HasMaxLength(250)
                    .HasColumnName("LM2_FISCYR_ACCT");

                entity.Property(e => e.Lm2FiscyrEmpAcct)
                    .HasMaxLength(250)
                    .HasColumnName("LM2_FISCYR_EMP_ACCT");

                entity.Property(e => e.LrpcompanyId).HasColumnName("LRPCompanyID");

                entity.Property(e => e.LupdDatetime)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("LUPD_DATETIME");

                entity.Property(e => e.LupdUser)
                    .HasMaxLength(75)
                    .HasColumnName("LUPD_USER");

                entity.Property(e => e.Masterid)
                    .HasMaxLength(75)
                    .HasColumnName("MASTERID");

                entity.Property(e => e.Module)
                    .HasMaxLength(75)
                    .HasColumnName("MODULE");

                entity.Property(e => e.Multiplechecks1)
                    .HasMaxLength(75)
                    .HasColumnName("MULTIPLECHECKS_1");

                entity.Property(e => e.Multiplechecks2)
                    .HasMaxLength(75)
                    .HasColumnName("MULTIPLECHECKS_2");

                entity.Property(e => e.Name).HasMaxLength(100);

                entity.Property(e => e.NameAlias).HasMaxLength(100);

                entity.Property(e => e.Noteid).HasColumnName("NOTEID");

                entity.Property(e => e.ObjectUid).HasColumnName("ObjectUID");

                entity.Property(e => e.OldRecordId).HasColumnName("OldRecordID");

                entity.Property(e => e.Perent)
                    .HasMaxLength(75)
                    .HasColumnName("PERENT");

                entity.Property(e => e.Perpost)
                    .HasMaxLength(75)
                    .HasColumnName("PERPOST");

                entity.Property(e => e.Posted)
                    .HasMaxLength(75)
                    .HasColumnName("POSTED");

                entity.Property(e => e.RecordId).HasColumnName("RecordID");

                entity.Property(e => e.Refnbr)
                    .HasMaxLength(75)
                    .HasColumnName("REFNBR");

                entity.Property(e => e.SalesTaxAmount).HasColumnType("money");

                entity.Property(e => e.SalesTaxYesNoId).HasColumnName("SalesTax_YesNoID");

                entity.Property(e => e.Seg1)
                    .HasMaxLength(75)
                    .HasColumnName("SEG1");

                entity.Property(e => e.Seg10)
                    .HasMaxLength(75)
                    .HasColumnName("SEG10");

                entity.Property(e => e.Seg2)
                    .HasMaxLength(75)
                    .HasColumnName("SEG2");

                entity.Property(e => e.Seg3)
                    .HasMaxLength(75)
                    .HasColumnName("SEG3");

                entity.Property(e => e.Seg4)
                    .HasMaxLength(75)
                    .HasColumnName("SEG4");

                entity.Property(e => e.Seg5)
                    .HasMaxLength(75)
                    .HasColumnName("SEG5");

                entity.Property(e => e.Seg6)
                    .HasMaxLength(75)
                    .HasColumnName("SEG6");

                entity.Property(e => e.Seg7)
                    .HasMaxLength(75)
                    .HasColumnName("SEG7");

                entity.Property(e => e.Seg8)
                    .HasMaxLength(75)
                    .HasColumnName("SEG8");

                entity.Property(e => e.Seg9)
                    .HasMaxLength(75)
                    .HasColumnName("SEG9");

                entity.Property(e => e.Sub)
                    .HasMaxLength(75)
                    .HasColumnName("SUB");

                entity.Property(e => e.Trandate)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("TRANDATE");

                entity.Property(e => e.Trandesc)
                    .HasMaxLength(75)
                    .HasColumnName("TRANDESC");

                entity.Property(e => e.Trantype)
                    .HasMaxLength(75)
                    .HasColumnName("TRANTYPE");

                entity.Property(e => e.Tstamp)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("TSTAMP");

                entity.Property(e => e.UpdatedBy).HasMaxLength(50);

                entity.Property(e => e.UpdatedOn).HasColumnType("datetime");

                entity.Property(e => e.Userdefined1)
                    .HasMaxLength(75)
                    .HasColumnName("USERDEFINED_1");

                entity.Property(e => e.Userdefined2)
                    .HasMaxLength(75)
                    .HasColumnName("USERDEFINED_2");

                entity.Property(e => e.Vclassid)
                    .HasMaxLength(75)
                    .HasColumnName("VCLASSID");

                entity.Property(e => e.VendorFiscyrAcct)
                    .HasMaxLength(250)
                    .HasColumnName("VENDOR_FISCYR_ACCT");
            });

            modelBuilder.Entity<CssLrpgltransaction30>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("css_lrpgltransaction_30");

                entity.Property(e => e.Amount).HasColumnName("amount");

                entity.Property(e => e.Cpnyid)
                    .HasMaxLength(75)
                    .HasColumnName("CPNYID");

                entity.Property(e => e.FinalId)
                    .HasMaxLength(75)
                    .HasColumnName("FINAL_ID");

                entity.Property(e => e.Fiscyr)
                    .HasMaxLength(75)
                    .HasColumnName("fiscyr");
            });

            modelBuilder.Entity<CssLrpgltransaction30Check>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("css_lrpgltransaction_30_check");

                entity.Property(e => e.Amount).HasColumnName("amount");

                entity.Property(e => e.Checkno)
                    .HasMaxLength(75)
                    .HasColumnName("checkno");

                entity.Property(e => e.Cpnyid)
                    .HasMaxLength(75)
                    .HasColumnName("CPNYID");

                entity.Property(e => e.FinalId)
                    .HasMaxLength(75)
                    .HasColumnName("FINAL_ID");

                entity.Property(e => e.Fiscyr)
                    .HasMaxLength(75)
                    .HasColumnName("fiscyr");
            });

            modelBuilder.Entity<CssLrpgltransaction99>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("css_lrpgltransaction_99");

                entity.Property(e => e.Amount).HasColumnName("amount");

                entity.Property(e => e.Cpnyid)
                    .HasMaxLength(75)
                    .HasColumnName("CPNYID");

                entity.Property(e => e.Fiscyr)
                    .HasMaxLength(75)
                    .HasColumnName("fiscyr");

                entity.Property(e => e.Refnbr)
                    .HasMaxLength(75)
                    .HasColumnName("refnbr");
            });

            modelBuilder.Entity<CssLrpgltransaction99A>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("css_lrpgltransaction_99_a");

                entity.Property(e => e.Amount).HasColumnName("amount");

                entity.Property(e => e.Cpnyid)
                    .HasMaxLength(75)
                    .HasColumnName("CPNYID");

                entity.Property(e => e.Fiscyr)
                    .HasMaxLength(75)
                    .HasColumnName("fiscyr");

                entity.Property(e => e.Lm2Code)
                    .HasMaxLength(75)
                    .HasColumnName("lm2_code");

                entity.Property(e => e.Refnbr)
                    .HasMaxLength(75)
                    .HasColumnName("refnbr");
            });

            modelBuilder.Entity<CssLrpgltransactionA0002>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("css_LRPGLTransaction_a0002");

                entity.Property(e => e.Acct)
                    .HasMaxLength(75)
                    .HasColumnName("ACCT");

                entity.Property(e => e.Amount).HasColumnName("AMOUNT");

                entity.Property(e => e.Auditnbr)
                    .HasMaxLength(75)
                    .HasColumnName("AUDITNBR");

                entity.Property(e => e.Batnbr)
                    .HasMaxLength(75)
                    .HasColumnName("BATNBR");

                entity.Property(e => e.BdgaccountGroup)
                    .HasMaxLength(50)
                    .HasColumnName("BDGAccountGroup");

                entity.Property(e => e.BdgaccountGroupSubGroup)
                    .HasMaxLength(50)
                    .HasColumnName("BDGAccountGroup_SubGroup");

                entity.Property(e => e.BdgaccountGroupSubGroupSubGroup)
                    .HasMaxLength(50)
                    .HasColumnName("BDGAccountGroup_SubGroup_SubGroup");

                entity.Property(e => e.BdgaccountGroupSubGroupSubGroupSubGroup)
                    .HasMaxLength(50)
                    .HasColumnName("BDGAccountGroup_SubGroup_SubGroup_SubGroup");

                entity.Property(e => e.Bdgdepartment)
                    .HasMaxLength(50)
                    .HasColumnName("BDGDepartment");

                entity.Property(e => e.Checkdate)
                    .HasColumnType("datetime")
                    .HasColumnName("CHECKDATE");

                entity.Property(e => e.Checkdate2)
                    .HasColumnType("datetime")
                    .HasColumnName("CHECKDATE2");

                entity.Property(e => e.Checkdate3)
                    .HasColumnType("datetime")
                    .HasColumnName("CHECKDATE3");

                entity.Property(e => e.Checkno)
                    .HasMaxLength(75)
                    .HasColumnName("CHECKNO");

                entity.Property(e => e.Checkno2)
                    .HasMaxLength(75)
                    .HasColumnName("CHECKNO2");

                entity.Property(e => e.Checkno3)
                    .HasMaxLength(75)
                    .HasColumnName("CHECKNO3");

                entity.Property(e => e.Classid)
                    .HasMaxLength(75)
                    .HasColumnName("CLASSID");

                entity.Property(e => e.Cpnyid)
                    .HasMaxLength(75)
                    .HasColumnName("CPNYID");

                entity.Property(e => e.CreatedBy).HasMaxLength(50);

                entity.Property(e => e.CreatedOn).HasColumnType("datetime");

                entity.Property(e => e.CrtdDatetime)
                    .HasColumnType("datetime")
                    .HasColumnName("CRTD_DATETIME");

                entity.Property(e => e.CrtdUser)
                    .HasMaxLength(75)
                    .HasColumnName("CRTD_USER");

                entity.Property(e => e.CssLink)
                    .HasMaxLength(255)
                    .HasColumnName("css_link")
                    .IsFixedLength(true);

                entity.Property(e => e.CssLinkLines)
                    .HasMaxLength(255)
                    .HasColumnName("css_link_lines")
                    .IsFixedLength(true);

                entity.Property(e => e.Curyid)
                    .HasMaxLength(75)
                    .HasColumnName("CURYID");

                entity.Property(e => e.Curyrate).HasColumnName("CURYRATE");

                entity.Property(e => e.Descr)
                    .HasMaxLength(75)
                    .HasColumnName("DESCR");

                entity.Property(e => e.Description).HasMaxLength(2000);

                entity.Property(e => e.Display).HasMaxLength(100);

                entity.Property(e => e.Docnbr)
                    .HasMaxLength(75)
                    .HasColumnName("DOCNBR");

                entity.Property(e => e.EmpFiscyrAcct)
                    .HasMaxLength(250)
                    .HasColumnName("EMP_FISCYR_ACCT");

                entity.Property(e => e.EmployeeCode)
                    .HasMaxLength(75)
                    .HasColumnName("EMPLOYEE_CODE");

                entity.Property(e => e.FinalId)
                    .HasMaxLength(75)
                    .HasColumnName("FINAL_ID");

                entity.Property(e => e.Fiscyr)
                    .HasMaxLength(75)
                    .HasColumnName("FISCYR");

                entity.Property(e => e.FiscyrAcct)
                    .HasMaxLength(50)
                    .HasColumnName("FISCYR_ACCT");

                entity.Property(e => e.GrantNo).HasMaxLength(75);

                entity.Property(e => e.IcDistribution).HasColumnName("IC_DISTRIBUTION");

                entity.Property(e => e.Id)
                    .HasMaxLength(75)
                    .HasColumnName("ID");

                entity.Property(e => e.IdField)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("ID_FIELD");

                entity.Property(e => e.ImportedObjectUid)
                    .HasMaxLength(50)
                    .HasColumnName("ImportedObjectUID");

                entity.Property(e => e.InstallationUid).HasColumnName("InstallationUID");

                entity.Property(e => e.Jrnltype)
                    .HasMaxLength(75)
                    .HasColumnName("JRNLTYPE");

                entity.Property(e => e.Ledgerid)
                    .HasMaxLength(75)
                    .HasColumnName("LEDGERID");

                entity.Property(e => e.Lineid).HasColumnName("LINEID");

                entity.Property(e => e.Linenbr).HasColumnName("LINENBR");

                entity.Property(e => e.Lineref)
                    .HasMaxLength(75)
                    .HasColumnName("LINEREF");

                entity.Property(e => e.Lm2Code)
                    .HasMaxLength(75)
                    .HasColumnName("LM2_CODE");

                entity.Property(e => e.Lm2Description)
                    .HasMaxLength(75)
                    .HasColumnName("LM2 DESCRIPTION");

                entity.Property(e => e.Lm2Fiscyr)
                    .HasMaxLength(250)
                    .HasColumnName("LM2_FISCYR");

                entity.Property(e => e.Lm2FiscyrAcct)
                    .HasMaxLength(250)
                    .HasColumnName("LM2_FISCYR_ACCT");

                entity.Property(e => e.Lm2FiscyrEmpAcct)
                    .HasMaxLength(250)
                    .HasColumnName("LM2_FISCYR_EMP_ACCT");

                entity.Property(e => e.LrpcompanyId).HasColumnName("LRPCompanyID");

                entity.Property(e => e.LupdDatetime)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("LUPD_DATETIME");

                entity.Property(e => e.LupdUser)
                    .HasMaxLength(75)
                    .HasColumnName("LUPD_USER");

                entity.Property(e => e.Masterid)
                    .HasMaxLength(75)
                    .HasColumnName("MASTERID");

                entity.Property(e => e.Module)
                    .HasMaxLength(75)
                    .HasColumnName("MODULE");

                entity.Property(e => e.Month1).HasColumnName("month1");

                entity.Property(e => e.Multiplechecks1)
                    .HasMaxLength(75)
                    .HasColumnName("MULTIPLECHECKS_1");

                entity.Property(e => e.Multiplechecks2)
                    .HasMaxLength(75)
                    .HasColumnName("MULTIPLECHECKS_2");

                entity.Property(e => e.Name).HasMaxLength(100);

                entity.Property(e => e.NameAlias).HasMaxLength(100);

                entity.Property(e => e.Noteid).HasColumnName("NOTEID");

                entity.Property(e => e.ObjectUid).HasColumnName("ObjectUID");

                entity.Property(e => e.OldRecordId).HasColumnName("OldRecordID");

                entity.Property(e => e.Perent)
                    .HasMaxLength(75)
                    .HasColumnName("PERENT");

                entity.Property(e => e.Perpost)
                    .HasMaxLength(75)
                    .HasColumnName("PERPOST");

                entity.Property(e => e.Posted)
                    .HasMaxLength(75)
                    .HasColumnName("POSTED");

                entity.Property(e => e.RecordId)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("RecordID");

                entity.Property(e => e.Refnbr)
                    .HasMaxLength(75)
                    .HasColumnName("REFNBR");

                entity.Property(e => e.SalesTaxAmount).HasColumnType("money");

                entity.Property(e => e.SalesTaxYesNoId).HasColumnName("SalesTax_YesNoID");

                entity.Property(e => e.Seg1)
                    .HasMaxLength(75)
                    .HasColumnName("SEG1");

                entity.Property(e => e.Seg10)
                    .HasMaxLength(75)
                    .HasColumnName("SEG10");

                entity.Property(e => e.Seg2)
                    .HasMaxLength(75)
                    .HasColumnName("SEG2");

                entity.Property(e => e.Seg3)
                    .HasMaxLength(75)
                    .HasColumnName("SEG3");

                entity.Property(e => e.Seg4)
                    .HasMaxLength(75)
                    .HasColumnName("SEG4");

                entity.Property(e => e.Seg5)
                    .HasMaxLength(75)
                    .HasColumnName("SEG5");

                entity.Property(e => e.Seg6)
                    .HasMaxLength(75)
                    .HasColumnName("SEG6");

                entity.Property(e => e.Seg7)
                    .HasMaxLength(75)
                    .HasColumnName("SEG7");

                entity.Property(e => e.Seg8)
                    .HasMaxLength(75)
                    .HasColumnName("SEG8");

                entity.Property(e => e.Seg9)
                    .HasMaxLength(75)
                    .HasColumnName("SEG9");

                entity.Property(e => e.Sub)
                    .HasMaxLength(75)
                    .HasColumnName("SUB");

                entity.Property(e => e.Trandate)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("TRANDATE");

                entity.Property(e => e.Trandesc)
                    .HasMaxLength(75)
                    .HasColumnName("TRANDESC");

                entity.Property(e => e.Trantype)
                    .HasMaxLength(75)
                    .HasColumnName("TRANTYPE");

                entity.Property(e => e.Tstamp)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("TSTAMP");

                entity.Property(e => e.UpdatedBy).HasMaxLength(50);

                entity.Property(e => e.UpdatedOn).HasColumnType("datetime");

                entity.Property(e => e.Userdefined1)
                    .HasMaxLength(75)
                    .HasColumnName("USERDEFINED_1");

                entity.Property(e => e.Userdefined2)
                    .HasMaxLength(75)
                    .HasColumnName("USERDEFINED_2");

                entity.Property(e => e.Vclassid)
                    .HasMaxLength(75)
                    .HasColumnName("VCLASSID");

                entity.Property(e => e.VendorFiscyrAcct)
                    .HasMaxLength(250)
                    .HasColumnName("VENDOR_FISCYR_ACCT");
            });

            modelBuilder.Entity<CssLrpgltransactionActualForBudget>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("CSS_LRPGLTransaction_ACTUAL_FOR_BUDGET");

                entity.Property(e => e.Amount).HasColumnName("AMOUNT");

                entity.Property(e => e.BdgaccountGroup)
                    .HasMaxLength(50)
                    .HasColumnName("BDGAccountGroup");

                entity.Property(e => e.Bdgdepartment)
                    .HasMaxLength(50)
                    .HasColumnName("BDGDepartment");

                entity.Property(e => e.Fiscyr)
                    .HasMaxLength(75)
                    .HasColumnName("FISCYR");
            });

            modelBuilder.Entity<CssLrpgltransactionActualForBudgetTemp>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("CSS_LRPGLTransaction_ACTUAL_FOR_BUDGET_TEMP");

                entity.Property(e => e.Amount).HasColumnName("AMOUNT");

                entity.Property(e => e.BdgaccountGroup)
                    .HasMaxLength(50)
                    .HasColumnName("BDGAccountGroup");

                entity.Property(e => e.Bdgaccountgroupid)
                    .IsRequired()
                    .HasMaxLength(63)
                    .IsUnicode(false)
                    .HasColumnName("BDGACCOUNTGROUPID");

                entity.Property(e => e.Bdgdepartment)
                    .HasMaxLength(50)
                    .HasColumnName("BDGDepartment");

                entity.Property(e => e.BdgdepartmentId)
                    .IsRequired()
                    .HasMaxLength(63)
                    .IsUnicode(false)
                    .HasColumnName("BDGDepartmentID");
            });

            modelBuilder.Entity<CssLrpgltransactionAllA0001>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("css_LRPGLTransaction_all_a0001");

                entity.Property(e => e.Acct)
                    .HasMaxLength(75)
                    .HasColumnName("ACCT");

                entity.Property(e => e.Amount).HasColumnName("AMOUNT");

                entity.Property(e => e.Auditnbr)
                    .HasMaxLength(75)
                    .HasColumnName("AUDITNBR");

                entity.Property(e => e.Batnbr)
                    .HasMaxLength(75)
                    .HasColumnName("BATNBR");

                entity.Property(e => e.BdgaccountGroup)
                    .HasMaxLength(50)
                    .HasColumnName("BDGAccountGroup");

                entity.Property(e => e.BdgaccountGroupSubGroup)
                    .HasMaxLength(50)
                    .HasColumnName("BDGAccountGroup_SubGroup");

                entity.Property(e => e.BdgaccountGroupSubGroupSubGroup)
                    .HasMaxLength(50)
                    .HasColumnName("BDGAccountGroup_SubGroup_SubGroup");

                entity.Property(e => e.BdgaccountGroupSubGroupSubGroupSubGroup)
                    .HasMaxLength(50)
                    .HasColumnName("BDGAccountGroup_SubGroup_SubGroup_SubGroup");

                entity.Property(e => e.Bdgdepartment)
                    .HasMaxLength(50)
                    .HasColumnName("BDGDepartment");

                entity.Property(e => e.Checkdate)
                    .HasColumnType("datetime")
                    .HasColumnName("CHECKDATE");

                entity.Property(e => e.Checkdate2)
                    .HasColumnType("datetime")
                    .HasColumnName("CHECKDATE2");

                entity.Property(e => e.Checkdate3)
                    .HasColumnType("datetime")
                    .HasColumnName("CHECKDATE3");

                entity.Property(e => e.Checkno)
                    .HasMaxLength(75)
                    .HasColumnName("CHECKNO");

                entity.Property(e => e.Checkno2)
                    .HasMaxLength(75)
                    .HasColumnName("CHECKNO2");

                entity.Property(e => e.Checkno3)
                    .HasMaxLength(75)
                    .HasColumnName("CHECKNO3");

                entity.Property(e => e.Classid)
                    .HasMaxLength(75)
                    .HasColumnName("CLASSID");

                entity.Property(e => e.Cpnyid)
                    .HasMaxLength(75)
                    .HasColumnName("CPNYID");

                entity.Property(e => e.CreatedBy).HasMaxLength(50);

                entity.Property(e => e.CreatedOn).HasColumnType("datetime");

                entity.Property(e => e.CrtdDatetime)
                    .HasColumnType("datetime")
                    .HasColumnName("CRTD_DATETIME");

                entity.Property(e => e.CrtdUser)
                    .HasMaxLength(75)
                    .HasColumnName("CRTD_USER");

                entity.Property(e => e.CssLink)
                    .HasMaxLength(255)
                    .HasColumnName("css_link")
                    .IsFixedLength(true);

                entity.Property(e => e.CssLinkLines)
                    .HasMaxLength(255)
                    .HasColumnName("css_link_lines")
                    .IsFixedLength(true);

                entity.Property(e => e.Curyid)
                    .HasMaxLength(75)
                    .HasColumnName("CURYID");

                entity.Property(e => e.Curyrate).HasColumnName("CURYRATE");

                entity.Property(e => e.Descr)
                    .HasMaxLength(75)
                    .HasColumnName("DESCR");

                entity.Property(e => e.Description).HasMaxLength(2000);

                entity.Property(e => e.Display).HasMaxLength(100);

                entity.Property(e => e.Docnbr)
                    .HasMaxLength(75)
                    .HasColumnName("DOCNBR");

                entity.Property(e => e.EmpFiscyrAcct)
                    .HasMaxLength(250)
                    .HasColumnName("EMP_FISCYR_ACCT");

                entity.Property(e => e.EmployeeCode)
                    .HasMaxLength(75)
                    .HasColumnName("EMPLOYEE_CODE");

                entity.Property(e => e.FinalId)
                    .HasMaxLength(75)
                    .HasColumnName("FINAL_ID");

                entity.Property(e => e.Fiscyr)
                    .HasMaxLength(75)
                    .HasColumnName("FISCYR");

                entity.Property(e => e.FiscyrAcct)
                    .HasMaxLength(50)
                    .HasColumnName("FISCYR_ACCT");

                entity.Property(e => e.GrantNo).HasMaxLength(75);

                entity.Property(e => e.IcDistribution).HasColumnName("IC_DISTRIBUTION");

                entity.Property(e => e.Id)
                    .HasMaxLength(75)
                    .HasColumnName("ID");

                entity.Property(e => e.IdField)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("ID_FIELD");

                entity.Property(e => e.ImportedObjectUid)
                    .HasMaxLength(50)
                    .HasColumnName("ImportedObjectUID");

                entity.Property(e => e.InstallationUid).HasColumnName("InstallationUID");

                entity.Property(e => e.Jrnltype)
                    .HasMaxLength(75)
                    .HasColumnName("JRNLTYPE");

                entity.Property(e => e.Ledgerid)
                    .HasMaxLength(75)
                    .HasColumnName("LEDGERID");

                entity.Property(e => e.Lineid).HasColumnName("LINEID");

                entity.Property(e => e.Linenbr).HasColumnName("LINENBR");

                entity.Property(e => e.Lineref)
                    .HasMaxLength(75)
                    .HasColumnName("LINEREF");

                entity.Property(e => e.Lm2Code)
                    .HasMaxLength(75)
                    .HasColumnName("LM2_CODE");

                entity.Property(e => e.Lm2Description)
                    .HasMaxLength(75)
                    .HasColumnName("LM2 DESCRIPTION");

                entity.Property(e => e.Lm2Fiscyr)
                    .HasMaxLength(250)
                    .HasColumnName("LM2_FISCYR");

                entity.Property(e => e.Lm2FiscyrAcct)
                    .HasMaxLength(250)
                    .HasColumnName("LM2_FISCYR_ACCT");

                entity.Property(e => e.Lm2FiscyrEmpAcct)
                    .HasMaxLength(250)
                    .HasColumnName("LM2_FISCYR_EMP_ACCT");

                entity.Property(e => e.LrpcompanyId).HasColumnName("LRPCompanyID");

                entity.Property(e => e.LupdDatetime)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("LUPD_DATETIME");

                entity.Property(e => e.LupdUser)
                    .HasMaxLength(75)
                    .HasColumnName("LUPD_USER");

                entity.Property(e => e.Masterid)
                    .HasMaxLength(75)
                    .HasColumnName("MASTERID");

                entity.Property(e => e.Module)
                    .HasMaxLength(75)
                    .HasColumnName("MODULE");

                entity.Property(e => e.Multiplechecks1)
                    .HasMaxLength(75)
                    .HasColumnName("MULTIPLECHECKS_1");

                entity.Property(e => e.Multiplechecks2)
                    .HasMaxLength(75)
                    .HasColumnName("MULTIPLECHECKS_2");

                entity.Property(e => e.Name).HasMaxLength(100);

                entity.Property(e => e.NameAlias).HasMaxLength(100);

                entity.Property(e => e.Noteid).HasColumnName("NOTEID");

                entity.Property(e => e.ObjectUid).HasColumnName("ObjectUID");

                entity.Property(e => e.OldRecordId).HasColumnName("OldRecordID");

                entity.Property(e => e.Perent)
                    .HasMaxLength(75)
                    .HasColumnName("PERENT");

                entity.Property(e => e.Perpost)
                    .HasMaxLength(75)
                    .HasColumnName("PERPOST");

                entity.Property(e => e.Posted)
                    .HasMaxLength(75)
                    .HasColumnName("POSTED");

                entity.Property(e => e.RecordId)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("RecordID");

                entity.Property(e => e.Refnbr)
                    .HasMaxLength(75)
                    .HasColumnName("REFNBR");

                entity.Property(e => e.SalesTaxAmount).HasColumnType("money");

                entity.Property(e => e.SalesTaxYesNoId).HasColumnName("SalesTax_YesNoID");

                entity.Property(e => e.Seg1)
                    .HasMaxLength(75)
                    .HasColumnName("SEG1");

                entity.Property(e => e.Seg10)
                    .HasMaxLength(75)
                    .HasColumnName("SEG10");

                entity.Property(e => e.Seg2)
                    .HasMaxLength(75)
                    .HasColumnName("SEG2");

                entity.Property(e => e.Seg3)
                    .HasMaxLength(75)
                    .HasColumnName("SEG3");

                entity.Property(e => e.Seg4)
                    .HasMaxLength(75)
                    .HasColumnName("SEG4");

                entity.Property(e => e.Seg5)
                    .HasMaxLength(75)
                    .HasColumnName("SEG5");

                entity.Property(e => e.Seg6)
                    .HasMaxLength(75)
                    .HasColumnName("SEG6");

                entity.Property(e => e.Seg7)
                    .HasMaxLength(75)
                    .HasColumnName("SEG7");

                entity.Property(e => e.Seg8)
                    .HasMaxLength(75)
                    .HasColumnName("SEG8");

                entity.Property(e => e.Seg9)
                    .HasMaxLength(75)
                    .HasColumnName("SEG9");

                entity.Property(e => e.Sub)
                    .HasMaxLength(75)
                    .HasColumnName("SUB");

                entity.Property(e => e.Trandate)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("TRANDATE");

                entity.Property(e => e.Trandesc)
                    .HasMaxLength(75)
                    .HasColumnName("TRANDESC");

                entity.Property(e => e.Trantype)
                    .HasMaxLength(75)
                    .HasColumnName("TRANTYPE");

                entity.Property(e => e.Tstamp)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("TSTAMP");

                entity.Property(e => e.UpdatedBy).HasMaxLength(50);

                entity.Property(e => e.UpdatedOn).HasColumnType("datetime");

                entity.Property(e => e.Userdefined1)
                    .HasMaxLength(75)
                    .HasColumnName("USERDEFINED_1");

                entity.Property(e => e.Userdefined2)
                    .HasMaxLength(75)
                    .HasColumnName("USERDEFINED_2");

                entity.Property(e => e.Vclassid)
                    .HasMaxLength(75)
                    .HasColumnName("VCLASSID");

                entity.Property(e => e.VendorFiscyrAcct)
                    .HasMaxLength(250)
                    .HasColumnName("VENDOR_FISCYR_ACCT");
            });

            modelBuilder.Entity<CssLrpgltransactionBalancesView>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("css_LRPGLTransaction_balances_view");

                entity.Property(e => e.Amount).HasColumnName("amount");

                entity.Property(e => e.Cpnyid)
                    .HasMaxLength(75)
                    .HasColumnName("CPNYID");

                entity.Property(e => e.Fiscyr)
                    .HasMaxLength(75)
                    .HasColumnName("FISCYR");

                entity.Property(e => e.Refnbr)
                    .HasMaxLength(75)
                    .HasColumnName("REFNBR");
            });

            modelBuilder.Entity<CssLrpgltransactionMainView>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("css_lrpgltransaction_main_view");

                entity.Property(e => e.AccountCategory)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("Account_Category");

                entity.Property(e => e.AccountGroup)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("Account_group");

                entity.Property(e => e.Acct)
                    .HasMaxLength(75)
                    .HasColumnName("ACCT");

                entity.Property(e => e.Amount).HasColumnName("AMOUNT");

                entity.Property(e => e.Auditnbr)
                    .HasMaxLength(75)
                    .HasColumnName("AUDITNBR");

                entity.Property(e => e.Batnbr)
                    .HasMaxLength(75)
                    .HasColumnName("BATNBR");

                entity.Property(e => e.BdgaccountGroup)
                    .HasMaxLength(50)
                    .HasColumnName("BDGAccountGroup");

                entity.Property(e => e.BdgaccountGroupSubGroup)
                    .HasMaxLength(50)
                    .HasColumnName("BDGAccountGroup_SubGroup");

                entity.Property(e => e.BdgaccountGroupSubGroupSubGroup)
                    .HasMaxLength(50)
                    .HasColumnName("BDGAccountGroup_SubGroup_SubGroup");

                entity.Property(e => e.BdgaccountGroupSubGroupSubGroupSubGroup)
                    .HasMaxLength(50)
                    .HasColumnName("BDGAccountGroup_SubGroup_SubGroup_SubGroup");

                entity.Property(e => e.Bdgdepartment)
                    .HasMaxLength(50)
                    .HasColumnName("BDGDepartment");

                entity.Property(e => e.Checkdate)
                    .HasColumnType("datetime")
                    .HasColumnName("CHECKDATE");

                entity.Property(e => e.Checkdate2)
                    .HasColumnType("datetime")
                    .HasColumnName("CHECKDATE2");

                entity.Property(e => e.Checkdate3)
                    .HasColumnType("datetime")
                    .HasColumnName("CHECKDATE3");

                entity.Property(e => e.Checkno)
                    .HasMaxLength(75)
                    .HasColumnName("CHECKNO");

                entity.Property(e => e.Checkno2)
                    .HasMaxLength(75)
                    .HasColumnName("CHECKNO2");

                entity.Property(e => e.Checkno3)
                    .HasMaxLength(75)
                    .HasColumnName("CHECKNO3");

                entity.Property(e => e.Classid)
                    .HasMaxLength(75)
                    .HasColumnName("CLASSID");

                entity.Property(e => e.Cpnyid)
                    .HasMaxLength(75)
                    .HasColumnName("CPNYID");

                entity.Property(e => e.CreatedBy).HasMaxLength(50);

                entity.Property(e => e.CreatedOn).HasColumnType("datetime");

                entity.Property(e => e.CrtdDatetime)
                    .HasColumnType("datetime")
                    .HasColumnName("CRTD_DATETIME");

                entity.Property(e => e.CrtdUser)
                    .HasMaxLength(75)
                    .HasColumnName("CRTD_USER");

                entity.Property(e => e.CssLink)
                    .HasMaxLength(255)
                    .HasColumnName("css_link");

                entity.Property(e => e.CssLinkLines)
                    .HasMaxLength(255)
                    .HasColumnName("css_link_lines");

                entity.Property(e => e.Curyid)
                    .HasMaxLength(75)
                    .HasColumnName("CURYID");

                entity.Property(e => e.Curyrate).HasColumnName("CURYRATE");

                entity.Property(e => e.Descr)
                    .HasMaxLength(75)
                    .HasColumnName("DESCR");

                entity.Property(e => e.Description).HasMaxLength(2000);

                entity.Property(e => e.Display).HasMaxLength(100);

                entity.Property(e => e.Docnbr)
                    .HasMaxLength(75)
                    .HasColumnName("DOCNBR");

                entity.Property(e => e.EmployeeCode)
                    .HasMaxLength(75)
                    .HasColumnName("EMPLOYEE_CODE");

                entity.Property(e => e.Employeename)
                    .HasMaxLength(101)
                    .HasColumnName("employeename");

                entity.Property(e => e.FinalId)
                    .HasMaxLength(75)
                    .HasColumnName("FINAL_ID");

                entity.Property(e => e.Fiscyr)
                    .HasMaxLength(75)
                    .HasColumnName("FISCYR");

                entity.Property(e => e.IcDistribution).HasColumnName("IC_DISTRIBUTION");

                entity.Property(e => e.Id)
                    .HasMaxLength(75)
                    .HasColumnName("ID");

                entity.Property(e => e.IdField)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("ID_FIELD");

                entity.Property(e => e.ImportedObjectUid)
                    .HasMaxLength(50)
                    .HasColumnName("ImportedObjectUID");

                entity.Property(e => e.Jrnltype)
                    .HasMaxLength(75)
                    .HasColumnName("JRNLTYPE");

                entity.Property(e => e.Ledgerid)
                    .HasMaxLength(75)
                    .HasColumnName("LEDGERID");

                entity.Property(e => e.Lineid).HasColumnName("LINEID");

                entity.Property(e => e.Linenbr).HasColumnName("LINENBR");

                entity.Property(e => e.Lineref)
                    .HasMaxLength(75)
                    .HasColumnName("LINEREF");

                entity.Property(e => e.Lm2Code)
                    .HasMaxLength(75)
                    .HasColumnName("LM2_CODE");

                entity.Property(e => e.Lm2Description)
                    .HasMaxLength(75)
                    .HasColumnName("LM2 DESCRIPTION");

                entity.Property(e => e.LupdDatetime)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("LUPD_DATETIME");

                entity.Property(e => e.LupdUser)
                    .HasMaxLength(75)
                    .HasColumnName("LUPD_USER");

                entity.Property(e => e.Masterid)
                    .HasMaxLength(75)
                    .HasColumnName("MASTERID");

                entity.Property(e => e.Module)
                    .HasMaxLength(75)
                    .HasColumnName("MODULE");

                entity.Property(e => e.Multiplechecks1)
                    .HasMaxLength(75)
                    .HasColumnName("MULTIPLECHECKS_1");

                entity.Property(e => e.Multiplechecks2)
                    .HasMaxLength(75)
                    .HasColumnName("MULTIPLECHECKS_2");

                entity.Property(e => e.Name).HasMaxLength(100);

                entity.Property(e => e.NameAlias).HasMaxLength(100);

                entity.Property(e => e.Noteid).HasColumnName("NOTEID");

                entity.Property(e => e.OldRecordId).HasColumnName("OldRecordID");

                entity.Property(e => e.Perent)
                    .HasMaxLength(75)
                    .HasColumnName("PERENT");

                entity.Property(e => e.Perpost)
                    .HasMaxLength(75)
                    .HasColumnName("PERPOST");

                entity.Property(e => e.Posted)
                    .HasMaxLength(75)
                    .HasColumnName("POSTED");

                entity.Property(e => e.RecordId).HasColumnName("RecordID");

                entity.Property(e => e.Refnbr)
                    .HasMaxLength(75)
                    .HasColumnName("REFNBR");

                entity.Property(e => e.SalesTaxAmount).HasColumnType("money");

                entity.Property(e => e.Seg1)
                    .HasMaxLength(75)
                    .HasColumnName("SEG1");

                entity.Property(e => e.Seg2)
                    .HasMaxLength(75)
                    .HasColumnName("SEG2");

                entity.Property(e => e.Seg3)
                    .HasMaxLength(75)
                    .HasColumnName("SEG3");

                entity.Property(e => e.Seg4)
                    .HasMaxLength(75)
                    .HasColumnName("SEG4");

                entity.Property(e => e.Seg5)
                    .HasMaxLength(75)
                    .HasColumnName("SEG5");

                entity.Property(e => e.SortOrder1).HasColumnName("sort_order");

                entity.Property(e => e.Sub)
                    .HasMaxLength(75)
                    .HasColumnName("SUB");

                entity.Property(e => e.Trandate)
                    .HasColumnType("datetime")
                    .HasColumnName("TRANDATE");

                entity.Property(e => e.Trandesc)
                    .HasMaxLength(75)
                    .HasColumnName("TRANDESC");

                entity.Property(e => e.Trantype)
                    .HasMaxLength(75)
                    .HasColumnName("TRANTYPE");

                entity.Property(e => e.UpdatedBy).HasMaxLength(50);

                entity.Property(e => e.UpdatedOn).HasColumnType("datetime");

                entity.Property(e => e.Userdefined1)
                    .HasMaxLength(75)
                    .HasColumnName("USERDEFINED_1");

                entity.Property(e => e.Userdefined2)
                    .HasMaxLength(75)
                    .HasColumnName("USERDEFINED_2");

                entity.Property(e => e.Vclassid)
                    .HasMaxLength(75)
                    .HasColumnName("VCLASSID");
            });

            modelBuilder.Entity<CssLrpgltransactionSum>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("css_lrpgltransaction_sum");

                entity.Property(e => e.Amount).HasColumnName("amount");

                entity.Property(e => e.Cpnyid)
                    .HasMaxLength(75)
                    .HasColumnName("CPNYID");

                entity.Property(e => e.Fiscyr)
                    .HasMaxLength(75)
                    .HasColumnName("FISCYR");

                entity.Property(e => e.Lm2Code)
                    .HasMaxLength(75)
                    .HasColumnName("LM2_CODE");

                entity.Property(e => e.Refnbr)
                    .HasMaxLength(75)
                    .HasColumnName("REFNBR");
            });

            modelBuilder.Entity<CssLrpgltransactionSumCheck>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("css_lrpgltransaction_sum_check");

                entity.Property(e => e.Amount).HasColumnName("amount");

                entity.Property(e => e.Checkno)
                    .HasMaxLength(75)
                    .HasColumnName("CHECKNO");

                entity.Property(e => e.Cpnyid)
                    .HasMaxLength(75)
                    .HasColumnName("CPNYID");

                entity.Property(e => e.Fiscyr)
                    .HasMaxLength(75)
                    .HasColumnName("FISCYR");

                entity.Property(e => e.Lm2Code)
                    .HasMaxLength(75)
                    .HasColumnName("LM2_CODE");
            });

            modelBuilder.Entity<CssLrpgltransactionSumVendor>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("css_lrpgltransaction_sum_vendor");

                entity.Property(e => e.Amount).HasColumnName("amount");

                entity.Property(e => e.Cpnyid)
                    .HasMaxLength(75)
                    .HasColumnName("CPNYID");

                entity.Property(e => e.FinalId)
                    .HasMaxLength(75)
                    .HasColumnName("FINAL_ID");

                entity.Property(e => e.Fiscyr)
                    .HasMaxLength(75)
                    .HasColumnName("FISCYR");

                entity.Property(e => e.Lm2Code)
                    .HasMaxLength(75)
                    .HasColumnName("LM2_CODE");
            });

            modelBuilder.Entity<CssLrpgltransactionSummary>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("css_lrpgltransaction_summary");

                entity.Property(e => e.BdgaccountGroup)
                    .HasMaxLength(50)
                    .HasColumnName("BDGAccountGroup");

                entity.Property(e => e.BdgaccountGroupSubGroup)
                    .HasMaxLength(50)
                    .HasColumnName("BDGAccountGroup_SubGroup");

                entity.Property(e => e.BdgaccountGroupSubGroupSubGroup)
                    .HasMaxLength(50)
                    .HasColumnName("BDGAccountGroup_SubGroup_SubGroup");

                entity.Property(e => e.BdgaccountGroupSubGroupSubGroupSubGroup)
                    .HasMaxLength(50)
                    .HasColumnName("BDGAccountGroup_SubGroup_SubGroup_SubGroup");

                entity.Property(e => e.Cpnyid)
                    .HasMaxLength(75)
                    .HasColumnName("CPNYID");

                entity.Property(e => e.TranDate)
                    .HasMaxLength(37)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<CssLrpgltransactionWithLm2purpose>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("css_LRPGLTransaction_with_lm2purpose");

                entity.Property(e => e.Acct)
                    .HasMaxLength(75)
                    .HasColumnName("ACCT");

                entity.Property(e => e.Amount).HasColumnName("AMOUNT");

                entity.Property(e => e.Auditnbr)
                    .HasMaxLength(75)
                    .HasColumnName("AUDITNBR");

                entity.Property(e => e.Batnbr)
                    .HasMaxLength(75)
                    .HasColumnName("BATNBR");

                entity.Property(e => e.BdgaccountGroup)
                    .HasMaxLength(50)
                    .HasColumnName("BDGAccountGroup");

                entity.Property(e => e.BdgaccountGroupSubGroup)
                    .HasMaxLength(50)
                    .HasColumnName("BDGAccountGroup_SubGroup");

                entity.Property(e => e.BdgaccountGroupSubGroupSubGroup)
                    .HasMaxLength(50)
                    .HasColumnName("BDGAccountGroup_SubGroup_SubGroup");

                entity.Property(e => e.BdgaccountGroupSubGroupSubGroupSubGroup)
                    .HasMaxLength(50)
                    .HasColumnName("BDGAccountGroup_SubGroup_SubGroup_SubGroup");

                entity.Property(e => e.Bdgdepartment)
                    .HasMaxLength(50)
                    .HasColumnName("BDGDepartment");

                entity.Property(e => e.Checkdate)
                    .HasColumnType("datetime")
                    .HasColumnName("CHECKDATE");

                entity.Property(e => e.Checkdate2)
                    .HasColumnType("datetime")
                    .HasColumnName("CHECKDATE2");

                entity.Property(e => e.Checkdate3)
                    .HasColumnType("datetime")
                    .HasColumnName("CHECKDATE3");

                entity.Property(e => e.Checkno)
                    .HasMaxLength(75)
                    .HasColumnName("CHECKNO");

                entity.Property(e => e.Checkno2)
                    .HasMaxLength(75)
                    .HasColumnName("CHECKNO2");

                entity.Property(e => e.Checkno3)
                    .HasMaxLength(75)
                    .HasColumnName("CHECKNO3");

                entity.Property(e => e.Classid)
                    .HasMaxLength(75)
                    .HasColumnName("CLASSID");

                entity.Property(e => e.Cpnyid)
                    .HasMaxLength(75)
                    .HasColumnName("CPNYID");

                entity.Property(e => e.CreatedBy).HasMaxLength(50);

                entity.Property(e => e.CreatedOn).HasColumnType("datetime");

                entity.Property(e => e.CrtdDatetime)
                    .HasColumnType("datetime")
                    .HasColumnName("CRTD_DATETIME");

                entity.Property(e => e.CrtdUser)
                    .HasMaxLength(75)
                    .HasColumnName("CRTD_USER");

                entity.Property(e => e.CssLink)
                    .HasMaxLength(255)
                    .HasColumnName("css_link")
                    .IsFixedLength(true);

                entity.Property(e => e.CssLinkLines)
                    .HasMaxLength(255)
                    .HasColumnName("css_link_lines")
                    .IsFixedLength(true);

                entity.Property(e => e.Curyid)
                    .HasMaxLength(75)
                    .HasColumnName("CURYID");

                entity.Property(e => e.Curyrate).HasColumnName("CURYRATE");

                entity.Property(e => e.Descr)
                    .HasMaxLength(75)
                    .HasColumnName("DESCR");

                entity.Property(e => e.Description).HasMaxLength(2000);

                entity.Property(e => e.Display).HasMaxLength(100);

                entity.Property(e => e.Docnbr)
                    .HasMaxLength(75)
                    .HasColumnName("DOCNBR");

                entity.Property(e => e.EmpFiscyrAcct)
                    .HasMaxLength(250)
                    .HasColumnName("EMP_FISCYR_ACCT");

                entity.Property(e => e.EmployeeCode)
                    .HasMaxLength(75)
                    .HasColumnName("EMPLOYEE_CODE");

                entity.Property(e => e.FinalId)
                    .HasMaxLength(75)
                    .HasColumnName("FINAL_ID");

                entity.Property(e => e.Fiscyr)
                    .HasMaxLength(75)
                    .HasColumnName("FISCYR");

                entity.Property(e => e.FiscyrAcct)
                    .HasMaxLength(50)
                    .HasColumnName("FISCYR_ACCT");

                entity.Property(e => e.GrantNo).HasMaxLength(75);

                entity.Property(e => e.IcDistribution).HasColumnName("IC_DISTRIBUTION");

                entity.Property(e => e.Id)
                    .HasMaxLength(75)
                    .HasColumnName("ID");

                entity.Property(e => e.IdField)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("ID_FIELD");

                entity.Property(e => e.ImportedObjectUid)
                    .HasMaxLength(50)
                    .HasColumnName("ImportedObjectUID");

                entity.Property(e => e.InstallationUid).HasColumnName("InstallationUID");

                entity.Property(e => e.Jrnltype)
                    .HasMaxLength(75)
                    .HasColumnName("JRNLTYPE");

                entity.Property(e => e.Ledgerid)
                    .HasMaxLength(75)
                    .HasColumnName("LEDGERID");

                entity.Property(e => e.Lineid).HasColumnName("LINEID");

                entity.Property(e => e.Linenbr).HasColumnName("LINENBR");

                entity.Property(e => e.Lineref)
                    .HasMaxLength(75)
                    .HasColumnName("LINEREF");

                entity.Property(e => e.Lm2Code)
                    .HasMaxLength(75)
                    .HasColumnName("LM2_CODE");

                entity.Property(e => e.Lm2Description)
                    .HasMaxLength(75)
                    .HasColumnName("LM2 DESCRIPTION");

                entity.Property(e => e.Lm2Fiscyr)
                    .HasMaxLength(250)
                    .HasColumnName("LM2_FISCYR");

                entity.Property(e => e.Lm2FiscyrAcct)
                    .HasMaxLength(250)
                    .HasColumnName("LM2_FISCYR_ACCT");

                entity.Property(e => e.Lm2FiscyrEmpAcct)
                    .HasMaxLength(250)
                    .HasColumnName("LM2_FISCYR_EMP_ACCT");

                entity.Property(e => e.LrpcompanyId).HasColumnName("LRPCompanyID");

                entity.Property(e => e.LupdDatetime)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("LUPD_DATETIME");

                entity.Property(e => e.LupdUser)
                    .HasMaxLength(75)
                    .HasColumnName("LUPD_USER");

                entity.Property(e => e.Masterid)
                    .HasMaxLength(75)
                    .HasColumnName("MASTERID");

                entity.Property(e => e.Module)
                    .HasMaxLength(75)
                    .HasColumnName("MODULE");

                entity.Property(e => e.Multiplechecks1)
                    .HasMaxLength(75)
                    .HasColumnName("MULTIPLECHECKS_1");

                entity.Property(e => e.Multiplechecks2)
                    .HasMaxLength(75)
                    .HasColumnName("MULTIPLECHECKS_2");

                entity.Property(e => e.Name).HasMaxLength(100);

                entity.Property(e => e.NameAlias).HasMaxLength(100);

                entity.Property(e => e.Noteid).HasColumnName("NOTEID");

                entity.Property(e => e.ObjectUid).HasColumnName("ObjectUID");

                entity.Property(e => e.OldRecordId).HasColumnName("OldRecordID");

                entity.Property(e => e.Perent)
                    .HasMaxLength(75)
                    .HasColumnName("PERENT");

                entity.Property(e => e.Perpost)
                    .HasMaxLength(75)
                    .HasColumnName("PERPOST");

                entity.Property(e => e.Posted)
                    .HasMaxLength(75)
                    .HasColumnName("POSTED");

                entity.Property(e => e.Purpose)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.RecordId).HasColumnName("RecordID");

                entity.Property(e => e.Refnbr)
                    .HasMaxLength(75)
                    .HasColumnName("REFNBR");

                entity.Property(e => e.SalesTaxAmount).HasColumnType("money");

                entity.Property(e => e.SalesTaxYesNoId).HasColumnName("SalesTax_YesNoID");

                entity.Property(e => e.Seg1)
                    .HasMaxLength(75)
                    .HasColumnName("SEG1");

                entity.Property(e => e.Seg10)
                    .HasMaxLength(75)
                    .HasColumnName("SEG10");

                entity.Property(e => e.Seg2)
                    .HasMaxLength(75)
                    .HasColumnName("SEG2");

                entity.Property(e => e.Seg3)
                    .HasMaxLength(75)
                    .HasColumnName("SEG3");

                entity.Property(e => e.Seg4)
                    .HasMaxLength(75)
                    .HasColumnName("SEG4");

                entity.Property(e => e.Seg5)
                    .HasMaxLength(75)
                    .HasColumnName("SEG5");

                entity.Property(e => e.Seg6)
                    .HasMaxLength(75)
                    .HasColumnName("SEG6");

                entity.Property(e => e.Seg7)
                    .HasMaxLength(75)
                    .HasColumnName("SEG7");

                entity.Property(e => e.Seg8)
                    .HasMaxLength(75)
                    .HasColumnName("SEG8");

                entity.Property(e => e.Seg9)
                    .HasMaxLength(75)
                    .HasColumnName("SEG9");

                entity.Property(e => e.Sub)
                    .HasMaxLength(75)
                    .HasColumnName("SUB");

                entity.Property(e => e.Trandate)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("TRANDATE");

                entity.Property(e => e.Trandesc)
                    .HasMaxLength(75)
                    .HasColumnName("TRANDESC");

                entity.Property(e => e.Trantype)
                    .HasMaxLength(75)
                    .HasColumnName("TRANTYPE");

                entity.Property(e => e.Tstamp)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("TSTAMP");

                entity.Property(e => e.UpdatedBy).HasMaxLength(50);

                entity.Property(e => e.UpdatedOn).HasColumnType("datetime");

                entity.Property(e => e.Userdefined1)
                    .HasMaxLength(75)
                    .HasColumnName("USERDEFINED_1");

                entity.Property(e => e.Userdefined2)
                    .HasMaxLength(75)
                    .HasColumnName("USERDEFINED_2");

                entity.Property(e => e.Vclassid)
                    .HasMaxLength(75)
                    .HasColumnName("VCLASSID");

                entity.Property(e => e.VendorFiscyrAcct)
                    .HasMaxLength(250)
                    .HasColumnName("VENDOR_FISCYR_ACCT");
            });

            modelBuilder.Entity<CssLrpgltransactiongrid>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("css_lrpgltransactiongrid");

                entity.Property(e => e.AccountGroup).HasMaxLength(50);

                entity.Property(e => e.AcctDescription).HasMaxLength(75);

                entity.Property(e => e.AcctNoFull).HasMaxLength(75);

                entity.Property(e => e.AuditNo).HasMaxLength(75);

                entity.Property(e => e.BatchNo).HasMaxLength(75);

                entity.Property(e => e.Checkdate)
                    .HasColumnType("datetime")
                    .HasColumnName("CHECKDATE");

                entity.Property(e => e.Checkno)
                    .HasMaxLength(75)
                    .HasColumnName("CHECKNO");

                entity.Property(e => e.Company)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Dept).HasMaxLength(75);

                entity.Property(e => e.DocNumber).HasMaxLength(75);

                entity.Property(e => e.Employee).HasMaxLength(75);

                entity.Property(e => e.FiscalYearEnded).HasMaxLength(75);

                entity.Property(e => e.Fsdepartment)
                    .HasMaxLength(50)
                    .HasColumnName("FSDepartment");

                entity.Property(e => e.Fund).HasMaxLength(75);

                entity.Property(e => e.GlpostingDate)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("GLPostingDate");

                entity.Property(e => e.GrantNo).HasMaxLength(75);

                entity.Property(e => e.JeNo)
                    .HasMaxLength(75)
                    .HasColumnName("JE_No");

                entity.Property(e => e.LineDescription).HasMaxLength(75);

                entity.Property(e => e.Lm2description)
                    .HasMaxLength(75)
                    .HasColumnName("LM2Description");

                entity.Property(e => e.LrpcompanyId).HasColumnName("LRPCompanyID");

                entity.Property(e => e.Main).HasMaxLength(75);

                entity.Property(e => e.ObjectUid).HasColumnName("ObjectUID");

                entity.Property(e => e.Project).HasMaxLength(75);

                entity.Property(e => e.SubGroup).HasMaxLength(50);

                entity.Property(e => e.SubSubGroup).HasMaxLength(50);

                entity.Property(e => e.SubSubSubGroup).HasMaxLength(50);

                entity.Property(e => e.TransDescription).HasMaxLength(75);

                entity.Property(e => e.VendorName).HasMaxLength(100);

                entity.Property(e => e.VendorNo).HasMaxLength(75);
            });

            modelBuilder.Entity<CssLrpvendorVoucherChange>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("css_lrpvendor_voucher_change");

                entity.Property(e => e.Companyname)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnName("companyname");

                entity.Property(e => e.CreatedBy).HasMaxLength(50);

                entity.Property(e => e.CreatedOn).HasColumnType("datetime");

                entity.Property(e => e.LrpvendorVoucherId).HasColumnName("LRPVendor_VoucherID");

                entity.Property(e => e.VendorNo)
                    .IsRequired()
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<CssMatrixDefault>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("css_matrix_defaults");

                entity.Property(e => e.AccountMask)
                    .HasMaxLength(300)
                    .IsUnicode(false)
                    .HasColumnName("Account_Mask");

                entity.Property(e => e.CompanyCode)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("CompanyCOde");

                entity.Property(e => e.DepartmentDmg)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("Department_DMG");

                entity.Property(e => e.DepartmentGp)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("Department_GP");

                entity.Property(e => e.DescriptionGp)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("Description_GP");

                entity.Property(e => e.DexRowId)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("DEX_ROW_ID");

                entity.Property(e => e.Heading1Dmg)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("Heading_1_DMG");

                entity.Property(e => e.Heading2Dmg)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("Heading_2_DMG");

                entity.Property(e => e.Heading3Dmg)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("Heading_3_DMG");

                entity.Property(e => e.ReportGroupHeaderGp)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("Report_Group_Header_GP");

                entity.Property(e => e.RowDescriptionDmg)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("Row_Description_DMG");

                entity.Property(e => e.RowNoDmg)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("Row_NO_DMG");

                entity.Property(e => e.RowNoGp)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("Row_NO_GP");
            });

            modelBuilder.Entity<CssMissing>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("css_missing");

                entity.Property(e => e.Test)
                    .IsRequired()
                    .HasMaxLength(4)
                    .IsUnicode(false)
                    .HasColumnName("test");
            });

            modelBuilder.Entity<CssOaapGroupByExpenserptnumberCountProject>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("css_oaap_group_by_expenserptnumber_count_project");

                entity.Property(e => e.Test)
                    .IsRequired()
                    .HasMaxLength(4)
                    .IsUnicode(false)
                    .HasColumnName("test");
            });

            modelBuilder.Entity<CssOaapGroupByProject>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("css_oaap_group_by_project");

                entity.Property(e => e.Test)
                    .IsRequired()
                    .HasMaxLength(4)
                    .IsUnicode(false)
                    .HasColumnName("test");
            });

            modelBuilder.Entity<CssReportGroupRpttemp>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("css_ReportGroupRpttemp");

                entity.Property(e => e.AccountGroup).HasMaxLength(50);

                entity.Property(e => e.AccountGroupSubGroup)
                    .HasMaxLength(50)
                    .HasColumnName("AccountGroup_SubGroup");

                entity.Property(e => e.AccountGroupSubGroupSubGroup)
                    .HasMaxLength(50)
                    .HasColumnName("AccountGroup_SubGroup_SubGroup");

                entity.Property(e => e.AccountGroupSubGroupSubGroupSubGroup)
                    .HasMaxLength(50)
                    .HasColumnName("AccountGroup_SubGroup_SubGroup_SubGroup");

                entity.Property(e => e.Acct)
                    .HasMaxLength(50)
                    .HasColumnName("ACCT");

                entity.Property(e => e.Amount).HasColumnType("money");

                entity.Property(e => e.BdgaccountGroupId).HasColumnName("BDGAccountGroupID");

                entity.Property(e => e.BdgaccountGroupSubGroupId).HasColumnName("BDGAccountGroup_SubGroupID");

                entity.Property(e => e.BdgaccountGroupSubGroupSubGroupId).HasColumnName("BDGAccountGroup_SubGroup_SubGroupID");

                entity.Property(e => e.BdgaccountGroupSubGroupSubGroupSubGroupId).HasColumnName("BDGAccountGroup_SubGroup_SubGroup_SubGroupID");

                entity.Property(e => e.BdgdepartmentId).HasColumnName("BDGDepartmentID");

                entity.Property(e => e.BudgetAmount).HasColumnType("money");

                entity.Property(e => e.Department).HasMaxLength(50);

                entity.Property(e => e.LastYearAmount).HasColumnType("money");
            });

            modelBuilder.Entity<CssReportGroupRpttemp2>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("css_ReportGroupRpttemp2");

                entity.Property(e => e.AccountGroup).HasMaxLength(50);

                entity.Property(e => e.AccountGroupSubGroup)
                    .HasMaxLength(50)
                    .HasColumnName("AccountGroup_SubGroup");

                entity.Property(e => e.AccountGroupSubGroupSubGroup)
                    .HasMaxLength(50)
                    .HasColumnName("AccountGroup_SubGroup_SubGroup");

                entity.Property(e => e.AccountGroupSubGroupSubGroupSubGroup)
                    .HasMaxLength(50)
                    .HasColumnName("AccountGroup_SubGroup_SubGroup_SubGroup");

                entity.Property(e => e.Acct)
                    .HasMaxLength(50)
                    .HasColumnName("ACCT");

                entity.Property(e => e.Amount).HasColumnType("money");

                entity.Property(e => e.BdgaccountGroupId).HasColumnName("BDGAccountGroupID");

                entity.Property(e => e.BdgaccountGroupSubGroupId).HasColumnName("BDGAccountGroup_SubGroupID");

                entity.Property(e => e.BdgaccountGroupSubGroupSubGroupId).HasColumnName("BDGAccountGroup_SubGroup_SubGroupID");

                entity.Property(e => e.BdgaccountGroupSubGroupSubGroupSubGroupId).HasColumnName("BDGAccountGroup_SubGroup_SubGroup_SubGroupID");

                entity.Property(e => e.BdgdepartmentId).HasColumnName("BDGDepartmentID");

                entity.Property(e => e.BudgetAmount).HasColumnType("money");

                entity.Property(e => e.Department).HasMaxLength(50);

                entity.Property(e => e.LastYearAmount).HasColumnType("money");
            });

            modelBuilder.Entity<CssReportTotal>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("css_report_totals");

                entity.Property(e => e.Acct)
                    .HasMaxLength(75)
                    .HasColumnName("ACCT");

                entity.Property(e => e.AmountSum).HasColumnName("amount_sum");

                entity.Property(e => e.BdgaccountGroup)
                    .HasMaxLength(255)
                    .HasColumnName("BDGAccountGroup");

                entity.Property(e => e.BdgaccountGroupSubGroup)
                    .HasMaxLength(255)
                    .HasColumnName("BDGAccountGroup_SubGroup");

                entity.Property(e => e.BdgaccountGroupSubGroupSubGroup)
                    .HasMaxLength(255)
                    .HasColumnName("BDGAccountGroup_SubGroup_SubGroup");

                entity.Property(e => e.BdgaccountGroupSubGroupSubGroupSubGroup)
                    .HasMaxLength(255)
                    .HasColumnName("BDGAccountGroup_SubGroup_SubGroup_SubGroup");

                entity.Property(e => e.Bdgdepartment)
                    .HasMaxLength(50)
                    .HasColumnName("BDGDepartment");

                entity.Property(e => e.DepartmentGroupName)
                    .HasMaxLength(50)
                    .HasColumnName("DEPARTMENT GROUP NAME");

                entity.Property(e => e.Lm2Code)
                    .HasMaxLength(75)
                    .HasColumnName("LM2_CODE");

                entity.Property(e => e.Seg1)
                    .HasMaxLength(75)
                    .HasColumnName("SEG1");

                entity.Property(e => e.Seg2)
                    .HasMaxLength(75)
                    .HasColumnName("SEG2");

                entity.Property(e => e.Seg3)
                    .HasMaxLength(75)
                    .HasColumnName("SEG3");

                entity.Property(e => e.Seg4)
                    .HasMaxLength(75)
                    .HasColumnName("SEG4");

                entity.Property(e => e.Seg5)
                    .HasMaxLength(75)
                    .HasColumnName("SEG5");

                entity.Property(e => e.SortOrderDepartment).HasColumnName("SORT_ORDER_DEPARTMENT");

                entity.Property(e => e.Trandate)
                    .HasColumnType("datetime")
                    .HasColumnName("TRANDATE");

                entity.Property(e => e.YearRange)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnName("year_range");
            });

            modelBuilder.Entity<CssRm00101>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("css_rm00101");

                entity.Property(e => e.Test)
                    .IsRequired()
                    .HasMaxLength(4)
                    .IsUnicode(false)
                    .HasColumnName("test");
            });

            modelBuilder.Entity<CssSchemaGl00100Temp>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("CSS_SCHEMA_GL00100_TEMP");

                entity.Property(e => e.ColumnName)
                    .HasMaxLength(128)
                    .HasColumnName("COLUMN_NAME");
            });

            modelBuilder.Entity<CssSeg2Summary>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("css_seg2_summary");

                entity.Property(e => e.Fiscyr)
                    .HasMaxLength(75)
                    .HasColumnName("FISCYR");

                entity.Property(e => e.Lm2Code)
                    .HasMaxLength(75)
                    .HasColumnName("LM2_CODE");

                entity.Property(e => e.Seg2)
                    .HasMaxLength(75)
                    .HasColumnName("SEG2");
            });

            modelBuilder.Entity<CssSeg2SummaryStep2>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("css_seg2_summary_step2");

                entity.Property(e => e.Count1).HasColumnName("count1");

                entity.Property(e => e.Fiscyr)
                    .HasMaxLength(75)
                    .HasColumnName("FISCYR");

                entity.Property(e => e.Seg2)
                    .HasMaxLength(75)
                    .HasColumnName("SEG2");
            });

            modelBuilder.Entity<CssSelectBdgbudgetinfoDetail>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("CSS_SELECT_BDGBUDGETINFO_DETAIL");

                entity.Property(e => e.AnticipatedStartingMonthId).HasColumnName("AnticipatedStarting_MonthID");

                entity.Property(e => e.BdgaccountGroupId).HasColumnName("BDGAccountGroupID");

                entity.Property(e => e.BdgaccountGroupSubGroupId).HasColumnName("BDGAccountGroup_SubGroupID");

                entity.Property(e => e.BdgbudgetGroupTypeId).HasColumnName("BDGBudgetGroupTypeID");

                entity.Property(e => e.BdgbudgetInfoId).HasColumnName("BDGBudgetInfoID");

                entity.Property(e => e.BdgcommitteeTypeId).HasColumnName("BDGCommitteeTypeID");

                entity.Property(e => e.BdgemployeeCategoryId).HasColumnName("BDGEmployeeCategoryID");

                entity.Property(e => e.BdgemployeeId).HasColumnName("BDGEmployeeID");

                entity.Property(e => e.BdgemployeePositionId).HasColumnName("BDGEmployeePositionID");

                entity.Property(e => e.BdgemployeeStatusId).HasColumnName("BDGEmployeeStatusID");

                entity.Property(e => e.BdgemployeeTypeId).HasColumnName("BDGEmployeeTypeID");

                entity.Property(e => e.BdgemployeeUnitId).HasColumnName("BDGEmployeeUnitID");

                entity.Property(e => e.BdgemployeeUnitPositionId).HasColumnName("BDGEmployeeUnit_PositionID");

                entity.Property(e => e.BdgemployeeUnitPositionStepId).HasColumnName("BDGEmployeeUnit_Position_StepID");

                entity.Property(e => e.BdgmeetingStatusId).HasColumnName("BDGMeetingStatusID");

                entity.Property(e => e.BdgpositionTypeId).HasColumnName("BDGPositionTypeID");

                entity.Property(e => e.BdgprojectTypeId).HasColumnName("BDGProjectTypeID");

                entity.Property(e => e.BudgetAmount).HasColumnType("money");

                entity.Property(e => e.CreatedBy).HasMaxLength(50);

                entity.Property(e => e.CreatedOn).HasColumnType("datetime");

                entity.Property(e => e.CurrentYearBudgetAmount).HasColumnType("money");

                entity.Property(e => e.Description).HasMaxLength(2000);

                entity.Property(e => e.DetailAmount).HasColumnType("money");

                entity.Property(e => e.Display).HasMaxLength(250);

                entity.Property(e => e.FringeBdgbudgetInfoDetailId).HasColumnName("Fringe_BDGBudgetInfo_DetailID");

                entity.Property(e => e.ImportedObjectUid)
                    .HasMaxLength(50)
                    .HasColumnName("ImportedObjectUID");

                entity.Property(e => e.InstallationUid).HasColumnName("InstallationUID");

                entity.Property(e => e.LineNumber).HasMaxLength(50);

                entity.Property(e => e.MeetingLocation).HasMaxLength(50);

                entity.Property(e => e.MeetingStartDate).HasMaxLength(50);

                entity.Property(e => e.Name).HasMaxLength(250);

                entity.Property(e => e.NameAlias).HasMaxLength(250);

                entity.Property(e => e.NextYearBudgetAmount).HasColumnType("money");

                entity.Property(e => e.ObjectUid).HasColumnName("ObjectUID");

                entity.Property(e => e.OldBdgbudgetInfoId).HasColumnName("Old_BDGBudgetInfoID");

                entity.Property(e => e.OldRecordId).HasColumnName("OldRecordID");

                entity.Property(e => e.RecordId)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("RecordID");

                entity.Property(e => e.Salary).HasColumnType("money");

                entity.Property(e => e.TotalAmount).HasColumnType("money");

                entity.Property(e => e.UpdatedBy).HasMaxLength(50);

                entity.Property(e => e.UpdatedOn).HasColumnType("datetime");

                entity.Property(e => e.WeeklySalary).HasColumnType("money");

                entity.Property(e => e.WillBeUsingTaskForcesYesNoId).HasColumnName("WillBeUsingTaskForces_YesNoID");
            });

            modelBuilder.Entity<CssSetupVarTemp>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("CSS_SETUP_VAR_temp");

                entity.Property(e => e.ColumnName)
                    .HasMaxLength(263)
                    .HasColumnName("column_name");

                entity.Property(e => e.ColumnName1)
                    .HasMaxLength(185)
                    .HasColumnName("COLUMN_NAME1");

                entity.Property(e => e.Field)
                    .HasMaxLength(427)
                    .HasColumnName("field");

                entity.Property(e => e.OrdinalPosition).HasColumnName("ordinal_position");
            });

            modelBuilder.Entity<CssSetupVarTemp1>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("CSS_SETUP_VAR_temp1");

                entity.Property(e => e.Field)
                    .HasMaxLength(427)
                    .HasColumnName("field");

                entity.Property(e => e.Linenotemp).HasColumnName("linenotemp");

                entity.Property(e => e.OrdinalPosition).HasColumnName("ordinal_position");
            });

            modelBuilder.Entity<CssSyncGpWithInquiryStatus>(entity =>
            {
                entity.HasKey(e => e.Objectuid);

                entity.ToTable("css_sync_gp_with_inquiry_status");

                entity.Property(e => e.Objectuid).HasDefaultValueSql("(newid())");

                entity.Property(e => e.EndDate).HasColumnType("datetime");

                entity.Property(e => e.RecordId)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("RecordID");

                entity.Property(e => e.Startdate)
                    .HasColumnType("datetime")
                    .HasColumnName("startdate");

                entity.Property(e => e.Statusvalue).HasColumnName("statusvalue");
            });

            modelBuilder.Entity<CssSyncGpWithInquiryStatus1099>(entity =>
            {
                entity.HasKey(e => e.Objectuid);

                entity.ToTable("css_sync_gp_with_inquiry_status_1099");

                entity.Property(e => e.Objectuid).HasDefaultValueSql("(newid())");

                entity.Property(e => e.EndDate).HasColumnType("datetime");

                entity.Property(e => e.RecordId)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("RecordID");

                entity.Property(e => e.Startdate)
                    .HasColumnType("datetime")
                    .HasColumnName("startdate");

                entity.Property(e => e.Statusvalue).HasColumnName("statusvalue");
            });

            modelBuilder.Entity<CssTemp1099Step1>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("css_temp_1099_step1");

                entity.Property(e => e.DocumentAmount).HasColumnType("money");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnName("name");

                entity.Property(e => e.Periodid).HasColumnName("periodid");

                entity.Property(e => e.VendorNo)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Year1).HasColumnName("year1");

                entity.Property(e => e._1099boxno).HasColumnName("1099boxno");

                entity.Property(e => e._1099taxtype)
                    .HasMaxLength(50)
                    .HasColumnName("1099taxtype");
            });

            modelBuilder.Entity<CssTemp1099Step2>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("css_temp_1099_step2");

                entity.Property(e => e.DexRowId).HasColumnName("dex_row_id");

                entity.Property(e => e.DocumentAmount).HasColumnType("money");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnName("name");

                entity.Property(e => e.Periodid).HasColumnName("periodid");

                entity.Property(e => e.VendorNo)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Year1).HasColumnName("year1");

                entity.Property(e => e._1099boxno).HasColumnName("1099boxno");

                entity.Property(e => e._1099taxtype)
                    .HasMaxLength(50)
                    .HasColumnName("1099taxtype");
            });

            modelBuilder.Entity<CssTempGltransactionlineAddViewMax>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("CSS_TEMP_gltransactionline_add_view_max");

                entity.Property(e => e.Amount).HasColumnName("amount");

                entity.Property(e => e.Checkdate)
                    .HasColumnType("datetime")
                    .HasColumnName("CHECKDATE");

                entity.Property(e => e.Checkno)
                    .HasMaxLength(75)
                    .HasColumnName("CHECKNO");

                entity.Property(e => e.FinalId)
                    .HasMaxLength(75)
                    .HasColumnName("FINAL_ID");

                entity.Property(e => e.Fiscyr)
                    .HasMaxLength(75)
                    .HasColumnName("FISCYR");

                entity.Property(e => e.Jrnltype)
                    .HasMaxLength(75)
                    .HasColumnName("JRNLTYPE");

                entity.Property(e => e.Lm2Code)
                    .HasMaxLength(75)
                    .HasColumnName("LM2_CODE");
            });

            modelBuilder.Entity<CssTempImportContributions2>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("css_temp_import_contributions2");

                entity.Property(e => e.AccountNumber).HasMaxLength(255);

                entity.Property(e => e.Amount).HasColumnType("money");

                entity.Property(e => e.CheckDate).HasColumnType("datetime");

                entity.Property(e => e.CheckDate1).HasColumnType("datetime");

                entity.Property(e => e.CheckNo).HasMaxLength(255);

                entity.Property(e => e.CheckNumber).HasMaxLength(255);

                entity.Property(e => e.ContributionId).HasColumnName("ContributionID");

                entity.Property(e => e.DateReceived).HasMaxLength(255);

                entity.Property(e => e.DepositAmount).HasColumnType("money");

                entity.Property(e => e.DepositDate).HasColumnType("datetime");

                entity.Property(e => e.DepositDate1).HasColumnType("datetime");

                entity.Property(e => e.Description).HasMaxLength(255);

                entity.Property(e => e.Display).HasColumnType("money");

                entity.Property(e => e.ElectionCycle)
                    .HasMaxLength(255)
                    .HasColumnName("Election Cycle");

                entity.Property(e => e.ElectionQuarter)
                    .HasMaxLength(255)
                    .HasColumnName("Election Quarter");

                entity.Property(e => e.EndDate).HasMaxLength(255);

                entity.Property(e => e.FeccashAccountId)
                    .HasMaxLength(255)
                    .HasColumnName("FECCashAccountID");

                entity.Property(e => e.FeccompanyId)
                    .HasMaxLength(255)
                    .HasColumnName("FECCompanyID");

                entity.Property(e => e.FeccontributionSourceId)
                    .HasMaxLength(255)
                    .HasColumnName("FECContributionSourceID");

                entity.Property(e => e.FeccontributionStatusId)
                    .HasMaxLength(255)
                    .HasColumnName("FECContributionStatusID");

                entity.Property(e => e.FeccontributionTypeId)
                    .HasMaxLength(255)
                    .HasColumnName("FECContributionTypeID");

                entity.Property(e => e.FeclocalUnionId)
                    .HasMaxLength(255)
                    .HasColumnName("FECLocalUnionID");

                entity.Property(e => e.GpreferenceNo)
                    .HasMaxLength(255)
                    .HasColumnName("GPReferenceNo");

                entity.Property(e => e.LocalStateFedNumber)
                    .HasMaxLength(255)
                    .HasColumnName("Local/StateFedNumber");

                entity.Property(e => e.MemberTotal).HasColumnType("money");

                entity.Property(e => e.NameAlias).HasMaxLength(255);

                entity.Property(e => e.ObjectUid)
                    .HasColumnType("money")
                    .HasColumnName("ObjectUID");

                entity.Property(e => e.StartDate).HasColumnType("datetime");

                entity.Property(e => e.UploadDetail).HasMaxLength(255);
            });

            modelBuilder.Entity<CssTempviewBdgaccountGroupSubGroup>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("css_tempview_BDGAccountGroup_SubGroup");

                entity.Property(e => e.BdgaccountGroupId).HasColumnName("BDGAccountGroupID");

                entity.Property(e => e.Count1).HasColumnName("count1");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnName("name");
            });

            modelBuilder.Entity<CssTempviewBdgaccountGroupSubGroup2>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("css_tempview_BDGAccountGroup_SubGroup2");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnName("name");

                entity.Property(e => e.Name2)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnName("name2");

                entity.Property(e => e.Objectuid).HasColumnName("objectuid");
            });

            modelBuilder.Entity<CssTypeValue>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("CSS_TYPE_VALUES");

                entity.Property(e => e.DexRowId)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("DEX_ROW_ID");

                entity.Property(e => e.Type)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("TYPE");

                entity.Property(e => e.Value)
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<CssUpdateAllDataStatus>(entity =>
            {
                entity.HasKey(e => e.Objectuid);

                entity.ToTable("css_update_all_data_status");

                entity.Property(e => e.Objectuid).HasDefaultValueSql("(newid())");

                entity.Property(e => e.EndDate).HasColumnType("datetime");

                entity.Property(e => e.RecordId)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("RecordID");

                entity.Property(e => e.Startdate)
                    .HasColumnType("datetime")
                    .HasColumnName("startdate");

                entity.Property(e => e.Statusvalue).HasColumnName("statusvalue");
            });

            modelBuilder.Entity<CssVendorPurpose>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("css_vendor_purpose");

                entity.Property(e => e.CompanyCode)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.DexRowId)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("dex_row_id");

                entity.Property(e => e.DolPurpose)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("DOL_Purpose");

                entity.Property(e => e.ObjectUid).HasColumnName("ObjectUID");

                entity.Property(e => e.PurposeSource)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("Purpose_Source");

                entity.Property(e => e.ScheduleNo)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("Schedule_NO");

                entity.Property(e => e.VendorNo)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Csslistoftransactionpriortoupdate>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("csslistoftransactionpriortoupdate");

                entity.Property(e => e.Acct)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ACCT");

                entity.Property(e => e.Amount)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("AMOUNT");

                entity.Property(e => e.Auditnbr)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("AUDITNBR");

                entity.Property(e => e.Batnbr)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("BATNBR");

                entity.Property(e => e.CalculatedAmount)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Checkdate)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("CHECKDATE");

                entity.Property(e => e.Checkno)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("CHECKNO");

                entity.Property(e => e.Classid)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("CLASSID");

                entity.Property(e => e.Cpnyid)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("CPNYID");

                entity.Property(e => e.CrtdDatetime)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("CRTD_DATETIME");

                entity.Property(e => e.CrtdUser)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("CRTD_USER");

                entity.Property(e => e.CssLink)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("css_link");

                entity.Property(e => e.CssLinkLines)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("css_link_lines");

                entity.Property(e => e.Curyid)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("CURYID");

                entity.Property(e => e.Curyrate)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("CURYRATE");

                entity.Property(e => e.Descr)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("DESCR");

                entity.Property(e => e.Description)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Display)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Docnbr)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("DOCNBR");

                entity.Property(e => e.EmployeeCode)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("EMPLOYEE_CODE");

                entity.Property(e => e.FinalId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("FINAL_ID");

                entity.Property(e => e.Fiscyr)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("FISCYR");

                entity.Property(e => e.IcDistribution)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IC_DISTRIBUTION");

                entity.Property(e => e.Id)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ID");

                entity.Property(e => e.IdField)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ID_FIELD");

                entity.Property(e => e.ImportedObjectUid)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ImportedObjectUID");

                entity.Property(e => e.Jrnltype)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("JRNLTYPE");

                entity.Property(e => e.Ledgerid)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("LEDGERID");

                entity.Property(e => e.Lineid)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("LINEID");

                entity.Property(e => e.Linenbr)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("LINENBR");

                entity.Property(e => e.Lineref)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("LINEREF");

                entity.Property(e => e.Lm2Code)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("LM2_CODE");

                entity.Property(e => e.Lm2Description)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("LM2 DESCRIPTION");

                entity.Property(e => e.LupdDatetime)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("LUPD_DATETIME");

                entity.Property(e => e.LupdUser)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("LUPD_USER");

                entity.Property(e => e.Masterid)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("MASTERID");

                entity.Property(e => e.Module)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("MODULE");

                entity.Property(e => e.Name)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.NameAlias)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Noteid)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("NOTEID");

                entity.Property(e => e.OldRecordId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("OldRecordID");

                entity.Property(e => e.Perent)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("PERENT");

                entity.Property(e => e.Perpost)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("PERPOST");

                entity.Property(e => e.Posted)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("POSTED");

                entity.Property(e => e.RecordId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("RecordID");

                entity.Property(e => e.Refnbr)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("REFNBR");

                entity.Property(e => e.SalesTaxAmount)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.SalesTaxRate)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Seg1)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("SEG1");

                entity.Property(e => e.Seg10)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("SEG10");

                entity.Property(e => e.Seg2)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("SEG2");

                entity.Property(e => e.Seg3)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("SEG3");

                entity.Property(e => e.Seg4)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("SEG4");

                entity.Property(e => e.Seg5)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("SEG5");

                entity.Property(e => e.Seg6)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("SEG6");

                entity.Property(e => e.Seg7)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("SEG7");

                entity.Property(e => e.Seg8)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("SEG8");

                entity.Property(e => e.Seg9)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("SEG9");

                entity.Property(e => e.Sub)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("SUB");

                entity.Property(e => e.Trandate)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("TRANDATE");

                entity.Property(e => e.Trandesc)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("TRANDESC");

                entity.Property(e => e.Trantype)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("TRANTYPE");

                entity.Property(e => e.Userdefined1)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("USERDEFINED_1");

                entity.Property(e => e.Userdefined2)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("USERDEFINED_2");

                entity.Property(e => e.Vclassid)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("VCLASSID");
            });

            modelBuilder.Entity<CsstempBdgaccountGroupSubGroupSubgroup>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("csstemp_BDGAccountGroup_SubGroup_subgroup");

                entity.Property(e => e.AccountCode).HasMaxLength(50);

                entity.Property(e => e.BdgaccountGroupSubGroupId).HasColumnName("BDGAccountGroup_SubGroupID");

                entity.Property(e => e.CreatedBy).HasMaxLength(50);

                entity.Property(e => e.CreatedOn).HasColumnType("datetime");

                entity.Property(e => e.Description).HasMaxLength(2000);

                entity.Property(e => e.Display)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.ImportedObjectUid)
                    .HasMaxLength(50)
                    .HasColumnName("ImportedObjectUID");

                entity.Property(e => e.InstallationUid).HasColumnName("InstallationUID");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.NameAlias)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.ObjectUid).HasColumnName("ObjectUID");

                entity.Property(e => e.OldRecordId).HasColumnName("OldRecordID");

                entity.Property(e => e.ParentBdgaccountGroupSubGroupSubGroupId).HasColumnName("Parent_BDGAccountGroup_SubGroup_SubGroupID");

                entity.Property(e => e.RecordId)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("RecordID");

                entity.Property(e => e.UpdatedBy).HasMaxLength(50);

                entity.Property(e => e.UpdatedOn).HasColumnType("datetime");
            });

            modelBuilder.Entity<CsstempBdgreportGroupBdgglaccountMapping>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("csstemp_BDGReportGroup_BDGGLAccountMapping");

                entity.Property(e => e.AccountNo)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.BdgaccountGroupId).HasColumnName("BDGAccountGroupID");

                entity.Property(e => e.BdgaccountGroupSubGroupId).HasColumnName("BDGAccountGroup_SubGroupID");

                entity.Property(e => e.BdgaccountGroupSubGroupSubGroupId).HasColumnName("BDGAccountGroup_SubGroup_SubGroupID");

                entity.Property(e => e.BdgaccountGroupSubGroupSubGroupSubGroupId).HasColumnName("BDGAccountGroup_SubGroup_SubGroup_SubGroupID");

                entity.Property(e => e.BdgdepartmentId).HasColumnName("BDGDepartmentID");

                entity.Property(e => e.BdgreportGroupId).HasColumnName("BDGReportGroupID");

                entity.Property(e => e.CreatedBy).HasMaxLength(50);

                entity.Property(e => e.CreatedOn).HasColumnType("datetime");

                entity.Property(e => e.Description).HasMaxLength(2000);

                entity.Property(e => e.Display)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.ImportedObjectUid)
                    .HasMaxLength(50)
                    .HasColumnName("ImportedObjectUID");

                entity.Property(e => e.InstallationUid).HasColumnName("InstallationUID");

                entity.Property(e => e.MaskedAccountNo)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Name).HasMaxLength(50);

                entity.Property(e => e.NameAlias).HasMaxLength(50);

                entity.Property(e => e.ObjectUid).HasColumnName("ObjectUID");

                entity.Property(e => e.OldRecordId).HasColumnName("OldRecordID");

                entity.Property(e => e.RecordId)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("RecordID");

                entity.Property(e => e.UpdatedBy).HasMaxLength(50);

                entity.Property(e => e.UpdatedOn).HasColumnType("datetime");
            });

            modelBuilder.Entity<Department>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Department");

                entity.Property(e => e.Company)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CreatedOn).HasColumnType("datetime");

                entity.Property(e => e.DepartmentNo)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.Description)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.Display)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.GpStatus)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("gp_status");

                entity.Property(e => e.ImportedObjectUid)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ImportedObjectUID");

                entity.Property(e => e.InstallationUid).HasColumnName("InstallationUID");

                entity.Property(e => e.Lm2Disbursments)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("LM2_DISBURSMENTS");

                entity.Property(e => e.Lm2Receipts)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("LM2_RECEIPTS");

                entity.Property(e => e.Lm2disbursementCodeId).HasColumnName("LM2DisbursementCodeID");

                entity.Property(e => e.Lm2receiptCodeId).HasColumnName("LM2ReceiptCodeID");

                entity.Property(e => e.Name)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.NameAlias)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.OaId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("OA_ID");

                entity.Property(e => e.OaStatus)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("oa_status");

                entity.Property(e => e.ObjectUid).HasColumnName("ObjectUID");

                entity.Property(e => e.OldRecordId).HasColumnName("OldRecordID");

                entity.Property(e => e.RecordId)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("RecordID");

                entity.Property(e => e.UpdatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UpdatedOn).HasColumnType("datetime");
            });

            modelBuilder.Entity<DepartmentLrp>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("department_lrp");

                entity.Property(e => e.Company)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CreatedOn).HasColumnType("datetime");

                entity.Property(e => e.DepartmentNo)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.Description)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.Display)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.GpStatus)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("gp_status");

                entity.Property(e => e.ImportedObjectUid)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ImportedObjectUID");

                entity.Property(e => e.InstallationUid).HasColumnName("InstallationUID");

                entity.Property(e => e.Lm2Disbursments)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("LM2_DISBURSMENTS");

                entity.Property(e => e.Lm2Receipts)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("LM2_RECEIPTS");

                entity.Property(e => e.Lm2disbursementCodeId).HasColumnName("LM2DisbursementCodeID");

                entity.Property(e => e.Lm2receiptCodeId).HasColumnName("LM2ReceiptCodeID");

                entity.Property(e => e.Name)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.NameAlias)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.OaId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("OA_ID");

                entity.Property(e => e.OaStatus)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("oa_status");

                entity.Property(e => e.ObjectUid).HasColumnName("ObjectUID");

                entity.Property(e => e.OldRecordId).HasColumnName("OldRecordID");

                entity.Property(e => e.RecordId)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("RecordID");

                entity.Property(e => e.UpdatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UpdatedOn).HasColumnType("datetime");
            });

            modelBuilder.Entity<DistinctAcctTemp>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("distinct_acct_temp");

                entity.Property(e => e.Acct)
                    .HasMaxLength(75)
                    .HasColumnName("ACCT");

                entity.Property(e => e.Company)
                    .HasMaxLength(75)
                    .HasColumnName("company");
            });

            modelBuilder.Entity<Drilldown2>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("drilldown2");

                entity.Property(e => e.CreatedBy).HasMaxLength(50);

                entity.Property(e => e.CreatedOn).HasColumnType("datetime");

                entity.Property(e => e.Display).HasMaxLength(100);

                entity.Property(e => e.ImportedObjectUid)
                    .HasMaxLength(50)
                    .HasColumnName("ImportedObjectUID");

                entity.Property(e => e.InstallationUid).HasColumnName("InstallationUID");

                entity.Property(e => e.Name).HasMaxLength(100);

                entity.Property(e => e.NameAlias).HasMaxLength(100);

                entity.Property(e => e.ObjectUid).HasColumnName("ObjectUID");

                entity.Property(e => e.OldRecordId).HasColumnName("OldRecordID");

                entity.Property(e => e.PageLink).HasMaxLength(200);

                entity.Property(e => e.RecordId)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("RecordID");

                entity.Property(e => e.UpdatedBy).HasMaxLength(50);

                entity.Property(e => e.UpdatedOn).HasColumnType("datetime");

                entity.Property(e => e.UserAccountId).HasColumnName("UserAccountID");
            });

            modelBuilder.Entity<DropDownDisplay>(entity =>
            {
                entity.HasKey(e => e.ObjectUid);

                entity.ToTable("DropDownDisplay");

                entity.Property(e => e.ObjectUid)
                    .HasColumnName("ObjectUID")
                    .HasDefaultValueSql("(newid())");

                entity.Property(e => e.AdditionalFields).HasMaxLength(2000);

                entity.Property(e => e.CreatedBy).HasMaxLength(50);

                entity.Property(e => e.CreatedOn)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Description).HasMaxLength(2000);

                entity.Property(e => e.Display)
                    .HasMaxLength(50)
                    .HasComputedColumnSql("([Name])", false);

                entity.Property(e => e.DropDownNames).HasMaxLength(2000);

                entity.Property(e => e.ImportedObjectUid)
                    .HasMaxLength(50)
                    .HasColumnName("ImportedObjectUID");

                entity.Property(e => e.InstallationUid).HasColumnName("InstallationUID");

                entity.Property(e => e.Name).HasMaxLength(50);

                entity.Property(e => e.NameAlias).HasMaxLength(50);

                entity.Property(e => e.OldRecordId).HasColumnName("OldRecordID");

                entity.Property(e => e.PageLinks).HasMaxLength(2000);

                entity.Property(e => e.RecordId)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("RecordID");

                entity.Property(e => e.SortOrder).HasDefaultValueSql("((100))");

                entity.Property(e => e.TableOrViewName).HasMaxLength(100);

                entity.Property(e => e.UpdatedBy).HasMaxLength(50);

                entity.Property(e => e.UpdatedOn).HasColumnType("datetime");
            });

            modelBuilder.Entity<DropDownDisplayGrid>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("DropDownDisplayGrid");

                entity.Property(e => e.AdditionalFields).HasMaxLength(2000);

                entity.Property(e => e.DropDownNames).HasMaxLength(2000);

                entity.Property(e => e.Name).HasMaxLength(50);

                entity.Property(e => e.ObjectUid).HasColumnName("ObjectUID");

                entity.Property(e => e.PageLinks).HasMaxLength(2000);

                entity.Property(e => e.TableOrViewName).HasMaxLength(100);
            });

            modelBuilder.Entity<DropDownFilter>(entity =>
            {
                entity.HasKey(e => e.ObjectUid);

                entity.ToTable("DropDownFilter");

                entity.Property(e => e.ObjectUid)
                    .HasColumnName("ObjectUID")
                    .HasDefaultValueSql("(newid())");

                entity.Property(e => e.ComparisonOperator).HasMaxLength(10);

                entity.Property(e => e.CreatedBy).HasMaxLength(50);

                entity.Property(e => e.CreatedOn)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Description).HasMaxLength(2000);

                entity.Property(e => e.Display)
                    .HasMaxLength(50)
                    .HasComputedColumnSql("([Name])", false);

                entity.Property(e => e.DropDownNames).HasMaxLength(2000);

                entity.Property(e => e.DropDownTableNames).HasMaxLength(2000);

                entity.Property(e => e.FilterColumn).HasMaxLength(100);

                entity.Property(e => e.FilterValueLocation).HasMaxLength(50);

                entity.Property(e => e.ImportedObjectUid)
                    .HasMaxLength(50)
                    .HasColumnName("ImportedObjectUID");

                entity.Property(e => e.InstallationUid).HasColumnName("InstallationUID");

                entity.Property(e => e.Name).HasMaxLength(50);

                entity.Property(e => e.NameAlias).HasMaxLength(50);

                entity.Property(e => e.OldRecordId).HasColumnName("OldRecordID");

                entity.Property(e => e.PageLinks).HasMaxLength(2000);

                entity.Property(e => e.PageTableNames).HasMaxLength(2000);

                entity.Property(e => e.RecordId)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("RecordID");

                entity.Property(e => e.SortOrder).HasDefaultValueSql("((100))");

                entity.Property(e => e.UpdatedBy).HasMaxLength(50);

                entity.Property(e => e.UpdatedOn).HasColumnType("datetime");
            });

            modelBuilder.Entity<DropDownFilterGrid>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("DropDownFilterGrid");

                entity.Property(e => e.ComparisonOperator).HasMaxLength(10);

                entity.Property(e => e.DropDownNames).HasMaxLength(2000);

                entity.Property(e => e.DropDownTableNames).HasMaxLength(2000);

                entity.Property(e => e.FilterColumn).HasMaxLength(100);

                entity.Property(e => e.FilterValueLocation).HasMaxLength(50);

                entity.Property(e => e.Name).HasMaxLength(50);

                entity.Property(e => e.ObjectUid).HasColumnName("ObjectUID");

                entity.Property(e => e.PageLinks).HasMaxLength(2000);

                entity.Property(e => e.PageTableNames).HasMaxLength(2000);
            });

            modelBuilder.Entity<DropDownSetting>(entity =>
            {
                entity.HasKey(e => e.ObjectUid);

                entity.ToTable("DropDownSetting");

                entity.Property(e => e.ObjectUid)
                    .HasColumnName("ObjectUID")
                    .HasDefaultValueSql("(newid())");

                entity.Property(e => e.AdditionalFields).HasMaxLength(2000);

                entity.Property(e => e.CreatedBy).HasMaxLength(50);

                entity.Property(e => e.CreatedOn)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Description).HasMaxLength(2000);

                entity.Property(e => e.Display)
                    .HasMaxLength(50)
                    .HasComputedColumnSql("([Name])", false);

                entity.Property(e => e.DropDownNames).HasMaxLength(2000);

                entity.Property(e => e.DropDownTableNames).HasMaxLength(2000);

                entity.Property(e => e.FilterControlId)
                    .HasMaxLength(2000)
                    .HasColumnName("FilterControlID");

                entity.Property(e => e.ImportedObjectUid)
                    .HasMaxLength(50)
                    .HasColumnName("ImportedObjectUID");

                entity.Property(e => e.InstallationUid).HasColumnName("InstallationUID");

                entity.Property(e => e.Name).HasMaxLength(50);

                entity.Property(e => e.NameAlias).HasMaxLength(50);

                entity.Property(e => e.OldRecordId).HasColumnName("OldRecordID");

                entity.Property(e => e.PageLinks).HasMaxLength(2000);

                entity.Property(e => e.PageTableNames).HasMaxLength(2000);

                entity.Property(e => e.RecordId)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("RecordID");

                entity.Property(e => e.SortOrder).HasDefaultValueSql("((100))");

                entity.Property(e => e.TableOrViewName).HasMaxLength(100);

                entity.Property(e => e.UpdatedBy).HasMaxLength(50);

                entity.Property(e => e.UpdatedOn).HasColumnType("datetime");
            });

            modelBuilder.Entity<DropDownSettingGrid>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("DropDownSettingGrid");

                entity.Property(e => e.AdditionalFields).HasMaxLength(2000);

                entity.Property(e => e.DropDownNames).HasMaxLength(2000);

                entity.Property(e => e.DropDownTableNames).HasMaxLength(2000);

                entity.Property(e => e.FilterControlId)
                    .HasMaxLength(2000)
                    .HasColumnName("FilterControlID");

                entity.Property(e => e.Name).HasMaxLength(50);

                entity.Property(e => e.ObjectUid).HasColumnName("ObjectUID");

                entity.Property(e => e.PageLinks).HasMaxLength(2000);

                entity.Property(e => e.PageTableNames).HasMaxLength(2000);

                entity.Property(e => e.TableOrViewName).HasMaxLength(100);
            });

            modelBuilder.Entity<DuplicateMaskingDetailGrid>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("DuplicateMaskingDetailGrid");

                entity.Property(e => e.AccountGroup).HasMaxLength(50);

                entity.Property(e => e.AccountNo)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.BdgreportGroupDuplicateMaskingId).HasColumnName("BDGReportGroup_DuplicateMaskingID");

                entity.Property(e => e.Department).HasMaxLength(50);

                entity.Property(e => e.ObjectUid).HasColumnName("ObjectUID");

                entity.Property(e => e.SubGroup).HasMaxLength(50);

                entity.Property(e => e.SubSubGroup).HasMaxLength(50);

                entity.Property(e => e.SubSubSubGroup).HasMaxLength(50);
            });

            modelBuilder.Entity<DuplicateMaskingGrid>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("DuplicateMaskingGrid");

                entity.Property(e => e.Acct)
                    .HasMaxLength(50)
                    .HasColumnName("ACCT");

                entity.Property(e => e.ObjectUid).HasColumnName("ObjectUID");
            });

            modelBuilder.Entity<Duplrpgltranstion>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("duplrpgltranstion");

                entity.Property(e => e.Count1).HasColumnName("count1");

                entity.Property(e => e.Fiscyr)
                    .HasMaxLength(75)
                    .HasColumnName("fiscyr");

                entity.Property(e => e.IdField)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("ID_FIELD");

                entity.Property(e => e.Maxrecordid).HasColumnName("maxrecordid");
            });

            modelBuilder.Entity<DynamicCode>(entity =>
            {
                entity.HasKey(e => e.ObjectUid);

                entity.ToTable("DynamicCode");

                entity.Property(e => e.ObjectUid)
                    .HasColumnName("ObjectUID")
                    .HasDefaultValueSql("(newid())");

                entity.Property(e => e.Args1).HasMaxLength(50);

                entity.Property(e => e.Args2).HasMaxLength(50);

                entity.Property(e => e.Args3).HasMaxLength(50);

                entity.Property(e => e.Args4).HasMaxLength(50);

                entity.Property(e => e.Args5).HasMaxLength(50);

                entity.Property(e => e.ArgsName1).HasMaxLength(50);

                entity.Property(e => e.ArgsName2).HasMaxLength(50);

                entity.Property(e => e.ArgsName3).HasMaxLength(50);

                entity.Property(e => e.ArgsName4).HasMaxLength(50);

                entity.Property(e => e.ArgsName5).HasMaxLength(50);

                entity.Property(e => e.CreatedBy).HasMaxLength(50);

                entity.Property(e => e.CreatedOn)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Display)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasComputedColumnSql("([Name])", false);

                entity.Property(e => e.ImportedObjectUid)
                    .HasMaxLength(50)
                    .HasColumnName("ImportedObjectUID");

                entity.Property(e => e.InstallationUid).HasColumnName("InstallationUID");

                entity.Property(e => e.Language)
                    .IsRequired()
                    .HasMaxLength(20);

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.NameAlias)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.OldRecordId).HasColumnName("OldRecordID");

                entity.Property(e => e.RecordId)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("RecordID");

                entity.Property(e => e.SortOrder).HasDefaultValueSql("((100))");

                entity.Property(e => e.UpdatedBy).HasMaxLength(50);

                entity.Property(e => e.UpdatedOn).HasColumnType("datetime");
            });

            modelBuilder.Entity<DynamicCodeGrid>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("DynamicCodeGrid");

                entity.Property(e => e.Args1).HasMaxLength(50);

                entity.Property(e => e.Args2).HasMaxLength(50);

                entity.Property(e => e.Args3).HasMaxLength(50);

                entity.Property(e => e.Args4).HasMaxLength(50);

                entity.Property(e => e.Args5).HasMaxLength(50);

                entity.Property(e => e.ArgsName1).HasMaxLength(50);

                entity.Property(e => e.ArgsName2).HasMaxLength(50);

                entity.Property(e => e.ArgsName3).HasMaxLength(50);

                entity.Property(e => e.ArgsName4).HasMaxLength(50);

                entity.Property(e => e.ArgsName5).HasMaxLength(50);

                entity.Property(e => e.Language)
                    .IsRequired()
                    .HasMaxLength(20);

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.ObjectUid).HasColumnName("ObjectUID");
            });

            modelBuilder.Entity<DynamicField>(entity =>
            {
                entity.HasKey(e => e.ObjectUid);

                entity.ToTable("DynamicField");

                entity.Property(e => e.ObjectUid)
                    .HasColumnName("ObjectUID")
                    .HasDefaultValueSql("(newid())");

                entity.Property(e => e.CreatedBy).HasMaxLength(50);

                entity.Property(e => e.CreatedOn)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Description).HasMaxLength(2000);

                entity.Property(e => e.Display)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasComputedColumnSql("([Name])", false);

                entity.Property(e => e.DynamicFieldTypeId).HasColumnName("DynamicFieldTypeID");

                entity.Property(e => e.ImportedObjectUid)
                    .HasMaxLength(50)
                    .HasColumnName("ImportedObjectUID");

                entity.Property(e => e.InstallationUid).HasColumnName("InstallationUID");

                entity.Property(e => e.ModuleId).HasColumnName("ModuleID");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.NameAlias)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.OldRecordId).HasColumnName("OldRecordID");

                entity.Property(e => e.PossibleValue).HasMaxLength(50);

                entity.Property(e => e.RecordId)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("RecordID");

                entity.Property(e => e.SortOrder).HasDefaultValueSql("((100))");

                entity.Property(e => e.UpdatedBy).HasMaxLength(50);

                entity.Property(e => e.UpdatedOn).HasColumnType("datetime");

                entity.HasOne(d => d.DynamicFieldType)
                    .WithMany(p => p.DynamicFields)
                    .HasForeignKey(d => d.DynamicFieldTypeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_DynamicField_DynamicFieldType");

                entity.HasOne(d => d.Module)
                    .WithMany(p => p.DynamicFields)
                    .HasForeignKey(d => d.ModuleId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_DynamicField_Module");
            });

            modelBuilder.Entity<DynamicFieldGrid>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("DynamicFieldGrid");

                entity.Property(e => e.ModuleId).HasColumnName("ModuleID");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.ObjectUid).HasColumnName("ObjectUID");

                entity.Property(e => e.PossibleValues).HasMaxLength(50);

                entity.Property(e => e.Type)
                    .IsRequired()
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<DynamicFieldList>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("DynamicFieldList");

                entity.Property(e => e.DynamicFieldType)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Module).HasMaxLength(100);

                entity.Property(e => e.ModuleId).HasColumnName("ModuleID");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.ObjectUid).HasColumnName("ObjectUID");

                entity.Property(e => e.PossibleValue).HasMaxLength(50);
            });

            modelBuilder.Entity<DynamicFieldType>(entity =>
            {
                entity.HasKey(e => e.ObjectUid);

                entity.ToTable("DynamicFieldType");

                entity.Property(e => e.ObjectUid)
                    .HasColumnName("ObjectUID")
                    .HasDefaultValueSql("(newid())");

                entity.Property(e => e.CreatedBy).HasMaxLength(50);

                entity.Property(e => e.CreatedOn)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Description).HasMaxLength(2000);

                entity.Property(e => e.Display)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasComputedColumnSql("([Name])", false);

                entity.Property(e => e.ImportedObjectUid)
                    .HasMaxLength(50)
                    .HasColumnName("ImportedObjectUID");

                entity.Property(e => e.InstallationUid).HasColumnName("InstallationUID");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.NameAlias)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.OldRecordId).HasColumnName("OldRecordID");

                entity.Property(e => e.RecordId)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("RecordID");

                entity.Property(e => e.SortOrder).HasDefaultValueSql("((100))");

                entity.Property(e => e.UpdatedBy).HasMaxLength(50);

                entity.Property(e => e.UpdatedOn).HasColumnType("datetime");
            });

            modelBuilder.Entity<DynamicFieldTypeGrid>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("DynamicFieldTypeGrid");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.ObjectUid).HasColumnName("ObjectUID");
            });

            modelBuilder.Entity<DynamicFieldValue>(entity =>
            {
                entity.HasKey(e => e.ObjectUid);

                entity.ToTable("DynamicField_Value");

                entity.Property(e => e.ObjectUid)
                    .HasColumnName("ObjectUID")
                    .HasDefaultValueSql("(newid())");

                entity.Property(e => e.CreatedBy).HasMaxLength(50);

                entity.Property(e => e.CreatedOn)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Description).HasMaxLength(2000);

                entity.Property(e => e.Display)
                    .HasMaxLength(50)
                    .HasComputedColumnSql("([Name])", false);

                entity.Property(e => e.DynamicFieldId).HasColumnName("DynamicFieldID");

                entity.Property(e => e.ImportedObjectUid)
                    .HasMaxLength(50)
                    .HasColumnName("ImportedObjectUID");

                entity.Property(e => e.InstallationUid).HasColumnName("InstallationUID");

                entity.Property(e => e.Name).HasMaxLength(50);

                entity.Property(e => e.NameAlias).HasMaxLength(50);

                entity.Property(e => e.OldRecordId).HasColumnName("OldRecordID");

                entity.Property(e => e.RecordId)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("RecordID");

                entity.Property(e => e.ReferenceId).HasColumnName("ReferenceID");

                entity.Property(e => e.SortOrder).HasDefaultValueSql("((100))");

                entity.Property(e => e.UpdatedBy).HasMaxLength(50);

                entity.Property(e => e.UpdatedOn).HasColumnType("datetime");

                entity.HasOne(d => d.DynamicField)
                    .WithMany(p => p.DynamicFieldValues)
                    .HasForeignKey(d => d.DynamicFieldId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_DynamicField_Value_DynamicField");
            });

            modelBuilder.Entity<DynamicFieldValueGrid>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("DynamicField_ValueGrid");

                entity.Property(e => e.DynamicFieldId).HasColumnName("DynamicFieldID");

                entity.Property(e => e.ObjectUid).HasColumnName("ObjectUID");
            });

            modelBuilder.Entity<EmailTemplate>(entity =>
            {
                entity.HasKey(e => e.ObjectUid);

                entity.ToTable("EmailTemplate");

                entity.Property(e => e.ObjectUid)
                    .HasColumnName("ObjectUID")
                    .HasDefaultValueSql("(newid())");

                entity.Property(e => e.CreatedBy).HasMaxLength(50);

                entity.Property(e => e.CreatedOn)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasMaxLength(2000);

                entity.Property(e => e.Display)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasComputedColumnSql("([Name])", false);

                entity.Property(e => e.ImportedObjectUid)
                    .HasMaxLength(50)
                    .HasColumnName("ImportedObjectUID");

                entity.Property(e => e.InstallationUid).HasColumnName("InstallationUID");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.NameAlias)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.NotificationTypeId).HasColumnName("NotificationTypeID");

                entity.Property(e => e.OldRecordId).HasColumnName("OldRecordID");

                entity.Property(e => e.RecordId)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("RecordID");

                entity.Property(e => e.SortOrder).HasDefaultValueSql("((100))");

                entity.Property(e => e.Subject)
                    .IsRequired()
                    .HasMaxLength(250);

                entity.Property(e => e.ToBcc)
                    .HasMaxLength(500)
                    .HasColumnName("ToBCC");

                entity.Property(e => e.ToCc)
                    .HasMaxLength(500)
                    .HasColumnName("ToCC");

                entity.Property(e => e.UpdatedBy).HasMaxLength(50);

                entity.Property(e => e.UpdatedOn).HasColumnType("datetime");

                entity.HasOne(d => d.NotificationType)
                    .WithMany(p => p.EmailTemplates)
                    .HasForeignKey(d => d.NotificationTypeId)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("FK_EmailTemplate_NotificationType");
            });

            modelBuilder.Entity<EmailTemplateGrid>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("EmailTemplateGrid");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.NotificationType).HasMaxLength(50);

                entity.Property(e => e.ObjectUid).HasColumnName("ObjectUID");

                entity.Property(e => e.Subject)
                    .IsRequired()
                    .HasMaxLength(250);

                entity.Property(e => e.ToBcc)
                    .HasMaxLength(500)
                    .HasColumnName("ToBCC");

                entity.Property(e => e.ToCc)
                    .HasMaxLength(500)
                    .HasColumnName("ToCC");
            });

            modelBuilder.Entity<Employee>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Employee");

                entity.Property(e => e.Company)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsFixedLength(true);

                entity.Property(e => e.CreatedBy).HasMaxLength(50);

                entity.Property(e => e.CreatedOn).HasColumnType("datetime");

                entity.Property(e => e.Description).HasMaxLength(2000);

                entity.Property(e => e.Display).HasMaxLength(50);

                entity.Property(e => e.EmployeeNo)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.FirstName)
                    .HasMaxLength(50)
                    .HasColumnName("First_name");

                entity.Property(e => e.GpStatus)
                    .HasMaxLength(50)
                    .HasColumnName("gp_status");

                entity.Property(e => e.ImportedObjectUid)
                    .HasMaxLength(50)
                    .HasColumnName("ImportedObjectUID");

                entity.Property(e => e.InstallationUid).HasColumnName("InstallationUID");

                entity.Property(e => e.LastName)
                    .HasMaxLength(50)
                    .HasColumnName("Last_Name");

                entity.Property(e => e.Lm2disbursementCodeId).HasColumnName("LM2DisbursementCodeID");

                entity.Property(e => e.Lm2receiptCodeId).HasColumnName("LM2ReceiptCodeID");

                entity.Property(e => e.MiddleName)
                    .HasMaxLength(50)
                    .HasColumnName("Middle_Name");

                entity.Property(e => e.Name).HasMaxLength(50);

                entity.Property(e => e.NameAlias).HasMaxLength(50);

                entity.Property(e => e.NameCombined)
                    .HasMaxLength(150)
                    .HasColumnName("Name_combined");

                entity.Property(e => e.OaStatus)
                    .HasMaxLength(50)
                    .HasColumnName("oa_status");

                entity.Property(e => e.ObjectUid).HasColumnName("ObjectUID");

                entity.Property(e => e.OldRecordId).HasColumnName("OldRecordID");

                entity.Property(e => e.RecordId)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("RecordID");

                entity.Property(e => e.UpdatedBy).HasMaxLength(50);

                entity.Property(e => e.UpdatedOn).HasColumnType("datetime");
            });

            modelBuilder.Entity<EmployeeLrp>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("employee_lrp");

                entity.Property(e => e.Company)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsFixedLength(true);

                entity.Property(e => e.CreatedBy).HasMaxLength(50);

                entity.Property(e => e.CreatedOn).HasColumnType("datetime");

                entity.Property(e => e.Description).HasMaxLength(2000);

                entity.Property(e => e.Display).HasMaxLength(50);

                entity.Property(e => e.EmployeeNo)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.FirstName)
                    .HasMaxLength(50)
                    .HasColumnName("First_name");

                entity.Property(e => e.GpStatus)
                    .HasMaxLength(50)
                    .HasColumnName("gp_status");

                entity.Property(e => e.ImportedObjectUid)
                    .HasMaxLength(50)
                    .HasColumnName("ImportedObjectUID");

                entity.Property(e => e.InstallationUid).HasColumnName("InstallationUID");

                entity.Property(e => e.LastName)
                    .HasMaxLength(50)
                    .HasColumnName("Last_Name");

                entity.Property(e => e.Lm2disbursementCodeId).HasColumnName("LM2DisbursementCodeID");

                entity.Property(e => e.Lm2receiptCodeId).HasColumnName("LM2ReceiptCodeID");

                entity.Property(e => e.MiddleName)
                    .HasMaxLength(50)
                    .HasColumnName("Middle_Name");

                entity.Property(e => e.Name).HasMaxLength(50);

                entity.Property(e => e.NameAlias).HasMaxLength(50);

                entity.Property(e => e.NameCombined)
                    .HasMaxLength(150)
                    .HasColumnName("Name_combined");

                entity.Property(e => e.OaStatus)
                    .HasMaxLength(50)
                    .HasColumnName("oa_status");

                entity.Property(e => e.ObjectUid).HasColumnName("ObjectUID");

                entity.Property(e => e.OldRecordId).HasColumnName("OldRecordID");

                entity.Property(e => e.RecordId)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("RecordID");

                entity.Property(e => e.UpdatedBy).HasMaxLength(50);

                entity.Property(e => e.UpdatedOn).HasColumnType("datetime");
            });

            modelBuilder.Entity<EquipmentRentalBdgbudgetInfoDetailGrid>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("EquipmentRentalBDGBudgetInfo_DetailGrid");

                entity.Property(e => e.BdgbudgetInfoId).HasColumnName("BDGBudgetInfoID");

                entity.Property(e => e.BudgetAmount)
                    .HasColumnType("money")
                    .HasColumnName("Budget Amount($)");

                entity.Property(e => e.CommitteeType).HasMaxLength(50);

                entity.Property(e => e.CurrentYearBudgetAmount)
                    .HasColumnType("money")
                    .HasColumnName("Current Year Budget Amount($)");

                entity.Property(e => e.NextYearBudgetAmount)
                    .HasColumnType("money")
                    .HasColumnName("Next Year Budget Amount($)");

                entity.Property(e => e.ObjectUid).HasColumnName("ObjectUID");

                entity.Property(e => e.Subject).HasMaxLength(250);

                entity.Property(e => e.WillBeUsingTaskForces).HasMaxLength(10);
            });

            modelBuilder.Entity<ErrorLog>(entity =>
            {
                entity.HasKey(e => e.ObjectUid);

                entity.ToTable("ErrorLog");

                entity.Property(e => e.ObjectUid)
                    .HasColumnName("ObjectUID")
                    .HasDefaultValueSql("(newid())");

                entity.Property(e => e.CreatedBy).HasMaxLength(50);

                entity.Property(e => e.CreatedOn)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Description).HasMaxLength(250);

                entity.Property(e => e.Display)
                    .HasMaxLength(250)
                    .HasComputedColumnSql("([Description])", false);

                entity.Property(e => e.ImportedObjectUid)
                    .HasMaxLength(50)
                    .HasColumnName("ImportedObjectUID");

                entity.Property(e => e.InstallationUid).HasColumnName("InstallationUID");

                entity.Property(e => e.Name).HasMaxLength(50);

                entity.Property(e => e.NameAlias).HasMaxLength(50);

                entity.Property(e => e.OldRecordId).HasColumnName("OldRecordID");

                entity.Property(e => e.PageLink).HasMaxLength(50);

                entity.Property(e => e.RecordId)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("RecordID");

                entity.Property(e => e.SortOrder).HasDefaultValueSql("((100))");

                entity.Property(e => e.Source).HasMaxLength(1000);

                entity.Property(e => e.StackTrace).HasMaxLength(3000);

                entity.Property(e => e.UpdatedBy).HasMaxLength(50);

                entity.Property(e => e.UpdatedOn).HasColumnType("datetime");
            });

            modelBuilder.Entity<EventTrigger>(entity =>
            {
                entity.HasKey(e => e.ObjectUid);

                entity.ToTable("EventTrigger");

                entity.Property(e => e.ObjectUid)
                    .HasColumnName("ObjectUID")
                    .HasDefaultValueSql("(newid())");

                entity.Property(e => e.CreatedBy).HasMaxLength(50);

                entity.Property(e => e.CreatedOn)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Description).HasMaxLength(2000);

                entity.Property(e => e.Display)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasComputedColumnSql("([Name])", false);

                entity.Property(e => e.DynamicCodeId).HasColumnName("DynamicCodeID");

                entity.Property(e => e.ImportedObjectUid)
                    .HasMaxLength(50)
                    .HasColumnName("ImportedObjectUID");

                entity.Property(e => e.InstallationUid).HasColumnName("InstallationUID");

                entity.Property(e => e.LastError).HasMaxLength(4000);

                entity.Property(e => e.LastRan).HasColumnType("datetime");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.NameAlias)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.OldRecordId).HasColumnName("OldRecordID");

                entity.Property(e => e.RecordId)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("RecordID");

                entity.Property(e => e.Sequence).HasDefaultValueSql("((100))");

                entity.Property(e => e.UpdatedBy).HasMaxLength(50);

                entity.Property(e => e.UpdatedOn).HasColumnType("datetime");

                entity.HasOne(d => d.DynamicCode)
                    .WithMany(p => p.EventTriggers)
                    .HasForeignKey(d => d.DynamicCodeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_EventTrigger_DynamicCode");
            });

            modelBuilder.Entity<EventTriggerGrid>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("EventTriggerGrid");

                entity.Property(e => e.DynamicCode)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.LastError).HasMaxLength(4000);

                entity.Property(e => e.LastRan).HasColumnType("datetime");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.ObjectUid).HasColumnName("ObjectUID");
            });

            modelBuilder.Entity<ExecutiveSummaryReport>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ExecutiveSummaryReport");

                entity.Property(e => e.ApprovedBudget).HasColumnType("money");

                entity.Property(e => e.Committees).HasColumnType("money");

                entity.Property(e => e.Department)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.DepartmentGroup)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.DepartmentNumber).HasMaxLength(50);

                entity.Property(e => e.Fringes).HasColumnType("money");

                entity.Property(e => e.Meetings).HasColumnType("money");

                entity.Property(e => e.OtherAdmin).HasColumnType("money");

                entity.Property(e => e.Others).HasColumnType("money");

                entity.Property(e => e.PreviousYearCode).HasMaxLength(50);

                entity.Property(e => e.ProjectsPublications).HasColumnType("money");

                entity.Property(e => e.Salaries).HasColumnType("money");

                entity.Property(e => e.YearCode).HasMaxLength(50);

                entity.Property(e => e.YearSetupId).HasColumnName("YearSetupID");
            });

            modelBuilder.Entity<ExpenseBdgbudgetInfoDetailGrid>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ExpenseBDGBudgetInfo_DetailGrid");

                entity.Property(e => e.BdgbudgetInfoId).HasColumnName("BDGBudgetInfoID");

                entity.Property(e => e.BudgetAmount)
                    .HasColumnType("money")
                    .HasColumnName("Budget Amount($)");

                entity.Property(e => e.CurrentYearBudgetAmount)
                    .HasColumnType("money")
                    .HasColumnName("Current Year Budget Amount($)");

                entity.Property(e => e.NextYearBudgetAmount)
                    .HasColumnType("money")
                    .HasColumnName("Next Year Budget Amount($)");

                entity.Property(e => e.ObjectUid).HasColumnName("ObjectUID");

                entity.Property(e => e.Subject).HasMaxLength(250);
            });

            modelBuilder.Entity<ExpenseHotelHousingBdgbudgetInfoDetailGrid>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ExpenseHotelHousingBDGBudgetInfo_DetailGrid");

                entity.Property(e => e.BdgbudgetInfoId).HasColumnName("BDGBudgetInfoID");

                entity.Property(e => e.BudgetAmount)
                    .HasColumnType("money")
                    .HasColumnName("Budget Amount($)");

                entity.Property(e => e.CurrentYearBudgetAmount)
                    .HasColumnType("money")
                    .HasColumnName("Current Year Budget Amount($)");

                entity.Property(e => e.NextYearBudgetAmount)
                    .HasColumnType("money")
                    .HasColumnName("Next Year Budget Amount($)");

                entity.Property(e => e.ObjectUid).HasColumnName("ObjectUID");

                entity.Property(e => e.Subject).HasMaxLength(250);
            });

            modelBuilder.Entity<ExpenseTransportationBdgbudgetInfoDetailGrid>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ExpenseTransportationBDGBudgetInfo_DetailGrid");

                entity.Property(e => e.BdgbudgetInfoId).HasColumnName("BDGBudgetInfoID");

                entity.Property(e => e.BudgetAmount)
                    .HasColumnType("money")
                    .HasColumnName("Budget Amount($)");

                entity.Property(e => e.CurrentYearBudgetAmount)
                    .HasColumnType("money")
                    .HasColumnName("Current Year Budget Amount($)");

                entity.Property(e => e.NextYearBudgetAmount)
                    .HasColumnType("money")
                    .HasColumnName("Next Year Budget Amount($)");

                entity.Property(e => e.ObjectUid).HasColumnName("ObjectUID");

                entity.Property(e => e.Subject).HasMaxLength(250);
            });

            modelBuilder.Entity<FecbatchStatus>(entity =>
            {
                entity.HasKey(e => e.ObjectUid);

                entity.ToTable("FECBatchStatus");

                entity.Property(e => e.ObjectUid)
                    .HasColumnName("ObjectUID")
                    .HasDefaultValueSql("(newid())");

                entity.Property(e => e.CreatedBy).HasMaxLength(50);

                entity.Property(e => e.CreatedOn)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Description).HasMaxLength(2000);

                entity.Property(e => e.Display)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasComputedColumnSql("([Name])", false);

                entity.Property(e => e.ImportedObjectUid)
                    .HasMaxLength(50)
                    .HasColumnName("ImportedObjectUID");

                entity.Property(e => e.InstallationUid).HasColumnName("InstallationUID");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.NameAlias)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.OldRecordId).HasColumnName("OldRecordID");

                entity.Property(e => e.RecordId)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("RecordID");

                entity.Property(e => e.SortOrder).HasDefaultValueSql("((100))");

                entity.Property(e => e.UpdatedBy).HasMaxLength(50);

                entity.Property(e => e.UpdatedOn).HasColumnType("datetime");
            });

            modelBuilder.Entity<FecbatchStatusGrid>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("FECBatchStatusGrid");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.ObjectUid).HasColumnName("ObjectUID");
            });

            modelBuilder.Entity<Feccandidate>(entity =>
            {
                entity.HasKey(e => e.ObjectUid);

                entity.ToTable("FECCandidate");

                entity.Property(e => e.ObjectUid)
                    .HasColumnName("ObjectUID")
                    .HasDefaultValueSql("(newid())");

                entity.Property(e => e.AddressLineI).HasMaxLength(100);

                entity.Property(e => e.AddressLineIi)
                    .HasMaxLength(100)
                    .HasColumnName("AddressLineII");

                entity.Property(e => e.CandidateIdentification).HasMaxLength(20);

                entity.Property(e => e.City).HasMaxLength(50);

                entity.Property(e => e.CountryStateId).HasColumnName("Country_StateID");

                entity.Property(e => e.CreatedBy).HasMaxLength(50);

                entity.Property(e => e.CreatedOn)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.CurrentDistrict).HasMaxLength(50);

                entity.Property(e => e.Description).HasMaxLength(2000);

                entity.Property(e => e.Display)
                    .IsRequired()
                    .HasMaxLength(54)
                    .HasComputedColumnSql("(([Name]+' ')+case when [IsInactive]<>(0) then '(I)' else '' end)", false);

                entity.Property(e => e.ElectionCountryStateId).HasColumnName("Election_Country_StateID");

                entity.Property(e => e.ElectionDistrict)
                    .HasMaxLength(5)
                    .HasColumnName("Election_District");

                entity.Property(e => e.ElectionOtherIdentification)
                    .HasMaxLength(20)
                    .HasColumnName("Election_OtherIdentification");

                entity.Property(e => e.Email)
                    .HasMaxLength(50)
                    .HasColumnName("EMail");

                entity.Property(e => e.Fax).HasMaxLength(20);

                entity.Property(e => e.FeccandidateStatusId).HasColumnName("FECCandidateStatusID");

                entity.Property(e => e.FeccandidateTypeId).HasColumnName("FECCandidateTypeID");

                entity.Property(e => e.FeccompanyId).HasColumnName("FECCompanyID");

                entity.Property(e => e.FecelectionOfficeId).HasColumnName("FECElectionOfficeID");

                entity.Property(e => e.Filler).HasMaxLength(3);

                entity.Property(e => e.FillerIi)
                    .HasMaxLength(3)
                    .HasColumnName("FillerII");

                entity.Property(e => e.ImportedObjectUid)
                    .HasMaxLength(50)
                    .HasColumnName("ImportedObjectUID");

                entity.Property(e => e.InstallationUid).HasColumnName("InstallationUID");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.NameAlias)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.OldRecordId).HasColumnName("OldRecordID");

                entity.Property(e => e.PartyDesignationI).HasMaxLength(3);

                entity.Property(e => e.PartyDesignationIii)
                    .HasMaxLength(3)
                    .HasColumnName("PartyDesignationIII");

                entity.Property(e => e.Phone).HasMaxLength(20);

                entity.Property(e => e.PostalCode).HasMaxLength(20);

                entity.Property(e => e.PrincipalCampaignComm).HasMaxLength(20);

                entity.Property(e => e.RecordId)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("RecordID");

                entity.Property(e => e.SortOrder).HasDefaultValueSql("((100))");

                entity.Property(e => e.UpdatedBy).HasMaxLength(50);

                entity.Property(e => e.UpdatedOn).HasColumnType("datetime");

                entity.Property(e => e.YearOfElection).HasMaxLength(50);

                entity.HasOne(d => d.CountryState)
                    .WithMany(p => p.FeccandidateCountryStates)
                    .HasForeignKey(d => d.CountryStateId)
                    .HasConstraintName("FK_FECCandidate_Country_StateID_Country_State");

                entity.HasOne(d => d.ElectionCountryState)
                    .WithMany(p => p.FeccandidateElectionCountryStates)
                    .HasForeignKey(d => d.ElectionCountryStateId)
                    .HasConstraintName("FK_FECCandidate_Election_Country_StateID_Country_State");

                entity.HasOne(d => d.FeccandidateStatus)
                    .WithMany(p => p.Feccandidates)
                    .HasForeignKey(d => d.FeccandidateStatusId)
                    .HasConstraintName("FK_FECCandidate_FECCandidateStatusID_FECCandidateStatus");

                entity.HasOne(d => d.FeccandidateType)
                    .WithMany(p => p.Feccandidates)
                    .HasForeignKey(d => d.FeccandidateTypeId)
                    .HasConstraintName("FK_FECCandidate_FECCandidateTypeID_FECCandidateType");

                entity.HasOne(d => d.Feccompany)
                    .WithMany(p => p.Feccandidates)
                    .HasForeignKey(d => d.FeccompanyId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_FECCandidate_FECCompanyID_FECCompany");

                entity.HasOne(d => d.FecelectionOffice)
                    .WithMany(p => p.Feccandidates)
                    .HasForeignKey(d => d.FecelectionOfficeId)
                    .HasConstraintName("FK_FECCandidate_FECElectionOfficeID_FECElectionOffice");
            });

            modelBuilder.Entity<FeccandidateGrid>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("FECCandidateGrid");

                entity.Property(e => e.AddressLineI).HasMaxLength(100);

                entity.Property(e => e.AddressLineIi)
                    .HasMaxLength(100)
                    .HasColumnName("AddressLineII");

                entity.Property(e => e.CandidateIdentification).HasMaxLength(20);

                entity.Property(e => e.CandidateStatus).HasMaxLength(50);

                entity.Property(e => e.CandidateType).HasMaxLength(50);

                entity.Property(e => e.City).HasMaxLength(50);

                entity.Property(e => e.Company)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.CurrentDistrict).HasMaxLength(50);

                entity.Property(e => e.ElectionDistrict).HasMaxLength(5);

                entity.Property(e => e.ElectionOffice).HasMaxLength(50);

                entity.Property(e => e.ElectionOtherIdentification)
                    .HasMaxLength(20)
                    .HasColumnName("Election_OtherIdentification");

                entity.Property(e => e.ElectionState).HasMaxLength(50);

                entity.Property(e => e.Email)
                    .HasMaxLength(50)
                    .HasColumnName("EMail");

                entity.Property(e => e.Fax).HasMaxLength(20);

                entity.Property(e => e.FeccompanyId).HasColumnName("FECCompanyID");

                entity.Property(e => e.Filler).HasMaxLength(3);

                entity.Property(e => e.FillerIi)
                    .HasMaxLength(3)
                    .HasColumnName("FillerII");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.ObjectUid).HasColumnName("ObjectUID");

                entity.Property(e => e.PartyDesignationI).HasMaxLength(3);

                entity.Property(e => e.PartyDesignationIii)
                    .HasMaxLength(3)
                    .HasColumnName("PartyDesignationIII");

                entity.Property(e => e.Phone).HasMaxLength(20);

                entity.Property(e => e.PostalCode).HasMaxLength(20);

                entity.Property(e => e.PrincipalCampaignComm).HasMaxLength(20);

                entity.Property(e => e.State).HasMaxLength(50);

                entity.Property(e => e.YearOfElection).HasMaxLength(50);
            });

            modelBuilder.Entity<FeccandidateStatus>(entity =>
            {
                entity.HasKey(e => e.ObjectUid);

                entity.ToTable("FECCandidateStatus");

                entity.Property(e => e.ObjectUid)
                    .HasColumnName("ObjectUID")
                    .HasDefaultValueSql("(newid())");

                entity.Property(e => e.CreatedBy).HasMaxLength(50);

                entity.Property(e => e.CreatedOn)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Description).HasMaxLength(2000);

                entity.Property(e => e.Display)
                    .IsRequired()
                    .HasMaxLength(54)
                    .HasComputedColumnSql("(([Name]+' ')+case when [IsInactive]<>(0) then '(I)' else '' end)", false);

                entity.Property(e => e.ImportedObjectUid)
                    .HasMaxLength(50)
                    .HasColumnName("ImportedObjectUID");

                entity.Property(e => e.InstallationUid).HasColumnName("InstallationUID");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.NameAlias)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.OldRecordId).HasColumnName("OldRecordID");

                entity.Property(e => e.RecordId)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("RecordID");

                entity.Property(e => e.SortOrder).HasDefaultValueSql("((100))");

                entity.Property(e => e.UpdatedBy).HasMaxLength(50);

                entity.Property(e => e.UpdatedOn).HasColumnType("datetime");
            });

            modelBuilder.Entity<FeccandidateStatusGrid>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("FECCandidateStatusGrid");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.ObjectUid).HasColumnName("ObjectUID");
            });

            modelBuilder.Entity<FeccandidateType>(entity =>
            {
                entity.HasKey(e => e.ObjectUid);

                entity.ToTable("FECCandidateType");

                entity.Property(e => e.ObjectUid)
                    .HasColumnName("ObjectUID")
                    .HasDefaultValueSql("(newid())");

                entity.Property(e => e.CreatedBy).HasMaxLength(50);

                entity.Property(e => e.CreatedOn)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Description).HasMaxLength(2000);

                entity.Property(e => e.Display)
                    .IsRequired()
                    .HasMaxLength(54)
                    .HasComputedColumnSql("(([Name]+' ')+case when [IsInactive]<>(0) then '(I)' else '' end)", false);

                entity.Property(e => e.ImportedObjectUid)
                    .HasMaxLength(50)
                    .HasColumnName("ImportedObjectUID");

                entity.Property(e => e.InstallationUid).HasColumnName("InstallationUID");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.NameAlias)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.OldRecordId).HasColumnName("OldRecordID");

                entity.Property(e => e.RecordId)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("RecordID");

                entity.Property(e => e.SortOrder).HasDefaultValueSql("((100))");

                entity.Property(e => e.UpdatedBy).HasMaxLength(50);

                entity.Property(e => e.UpdatedOn).HasColumnType("datetime");
            });

            modelBuilder.Entity<FeccandidateTypeGrid>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("FECCandidateTypeGrid");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.ObjectUid).HasColumnName("ObjectUID");
            });

            modelBuilder.Entity<FeccashAccount>(entity =>
            {
                entity.HasKey(e => e.ObjectUid);

                entity.ToTable("FECCashAccount");

                entity.Property(e => e.ObjectUid)
                    .HasColumnName("ObjectUID")
                    .HasDefaultValueSql("(newid())");

                entity.Property(e => e.CreatedBy).HasMaxLength(50);

                entity.Property(e => e.CreatedOn)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Description).HasMaxLength(2000);

                entity.Property(e => e.Display)
                    .IsRequired()
                    .HasMaxLength(54)
                    .HasComputedColumnSql("(([Name]+' ')+case when [IsInactive]<>(0) then '(I)' else '' end)", false);

                entity.Property(e => e.FeccompanyId).HasColumnName("FECCompanyID");

                entity.Property(e => e.FeccontributionTypeId).HasColumnName("FECContributionTypeID");

                entity.Property(e => e.GlaccountNumber)
                    .HasMaxLength(50)
                    .HasColumnName("GLAccountNumber");

                entity.Property(e => e.GpaccountName)
                    .HasMaxLength(50)
                    .HasColumnName("GPAccountName");

                entity.Property(e => e.GpcheckBook)
                    .HasMaxLength(50)
                    .HasColumnName("GPCheckBook");

                entity.Property(e => e.ImportedObjectUid)
                    .HasMaxLength(50)
                    .HasColumnName("ImportedObjectUID");

                entity.Property(e => e.InstallationUid).HasColumnName("InstallationUID");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.NameAlias)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.OldRecordId).HasColumnName("OldRecordID");

                entity.Property(e => e.RecordId)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("RecordID");

                entity.Property(e => e.SortOrder).HasDefaultValueSql("((100))");

                entity.Property(e => e.UpdatedBy).HasMaxLength(50);

                entity.Property(e => e.UpdatedOn).HasColumnType("datetime");

                entity.HasOne(d => d.Feccompany)
                    .WithMany(p => p.FeccashAccounts)
                    .HasForeignKey(d => d.FeccompanyId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_FECCashAccount_FECCompanyID_FECCompany");

                entity.HasOne(d => d.FeccontributionType)
                    .WithMany(p => p.FeccashAccounts)
                    .HasForeignKey(d => d.FeccontributionTypeId)
                    .HasConstraintName("FK_FECCashAccount_FECContributionTypeID_FECContributionType");
            });

            modelBuilder.Entity<FeccashAccountGrid>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("FECCashAccountGrid");

                entity.Property(e => e.Company)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.ContributionType).HasMaxLength(50);

                entity.Property(e => e.FeccompanyId).HasColumnName("FECCompanyID");

                entity.Property(e => e.GlaccountNumber)
                    .HasMaxLength(50)
                    .HasColumnName("GLAccountNumber");

                entity.Property(e => e.GpaccountName)
                    .HasMaxLength(50)
                    .HasColumnName("GPAccountName");

                entity.Property(e => e.GpcheckBook)
                    .HasMaxLength(50)
                    .HasColumnName("GPCheckBook");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.ObjectUid).HasColumnName("ObjectUID");
            });

            modelBuilder.Entity<Feccommittee>(entity =>
            {
                entity.HasKey(e => e.ObjectUid);

                entity.ToTable("FECCommittee");

                entity.Property(e => e.ObjectUid)
                    .HasColumnName("ObjectUID")
                    .HasDefaultValueSql("(newid())");

                entity.Property(e => e.AddressLineI).HasMaxLength(100);

                entity.Property(e => e.AddressLineIi)
                    .HasMaxLength(100)
                    .HasColumnName("AddressLineII");

                entity.Property(e => e.CandidateIdentification).HasMaxLength(50);

                entity.Property(e => e.City).HasMaxLength(50);

                entity.Property(e => e.CommitteeIdentification).HasMaxLength(50);

                entity.Property(e => e.ConnectedOrganizationName).HasMaxLength(50);

                entity.Property(e => e.CountryStateId).HasColumnName("Country_StateID");

                entity.Property(e => e.CreatedBy).HasMaxLength(50);

                entity.Property(e => e.CreatedOn)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Description).HasMaxLength(2000);

                entity.Property(e => e.Designation).HasMaxLength(50);

                entity.Property(e => e.Display)
                    .IsRequired()
                    .HasMaxLength(104)
                    .HasComputedColumnSql("(([Name]+' ')+case when [IsInactive]<>(0) then '(I)' else '' end)", false);

                entity.Property(e => e.Email)
                    .HasMaxLength(50)
                    .HasColumnName("EMail");

                entity.Property(e => e.Fax).HasMaxLength(20);

                entity.Property(e => e.FeccommitteeTypeId).HasColumnName("FECCommitteeTypeID");

                entity.Property(e => e.FeccompanyId).HasColumnName("FECCompanyID");

                entity.Property(e => e.FecfilingFrequencyId).HasColumnName("FECFilingFrequencyID");

                entity.Property(e => e.FecinterestGroupCategoryId).HasColumnName("FECInterestGroupCategoryID");

                entity.Property(e => e.ImportedObjectUid)
                    .HasMaxLength(50)
                    .HasColumnName("ImportedObjectUID");

                entity.Property(e => e.InstallationUid).HasColumnName("InstallationUID");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.NameAlias)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.OldRecordId).HasColumnName("OldRecordID");

                entity.Property(e => e.Party).HasMaxLength(50);

                entity.Property(e => e.Phone).HasMaxLength(20);

                entity.Property(e => e.PostalCode).HasMaxLength(20);

                entity.Property(e => e.RecordId)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("RecordID");

                entity.Property(e => e.SortOrder).HasDefaultValueSql("((100))");

                entity.Property(e => e.TreasurerName).HasMaxLength(50);

                entity.Property(e => e.UpdatedBy).HasMaxLength(50);

                entity.Property(e => e.UpdatedOn).HasColumnType("datetime");

                entity.HasOne(d => d.CountryState)
                    .WithMany(p => p.Feccommittees)
                    .HasForeignKey(d => d.CountryStateId)
                    .HasConstraintName("FK_FECCommittee_Country_StateID_Country_State");

                entity.HasOne(d => d.FeccommitteeType)
                    .WithMany(p => p.Feccommittees)
                    .HasForeignKey(d => d.FeccommitteeTypeId)
                    .HasConstraintName("FK_FECCommittee_FECCommitteeTypeID_FECCommitteeType");

                entity.HasOne(d => d.Feccompany)
                    .WithMany(p => p.Feccommittees)
                    .HasForeignKey(d => d.FeccompanyId)
                    .HasConstraintName("FK_FECCommittee_FECCompanyID_FECCompany");

                entity.HasOne(d => d.FecfilingFrequency)
                    .WithMany(p => p.Feccommittees)
                    .HasForeignKey(d => d.FecfilingFrequencyId)
                    .HasConstraintName("FK_FECCommittee_FECFilingFrequencyID_FECFilingFrequency");

                entity.HasOne(d => d.FecinterestGroupCategory)
                    .WithMany(p => p.Feccommittees)
                    .HasForeignKey(d => d.FecinterestGroupCategoryId)
                    .HasConstraintName("FK_FECCommittee_FECInterestGroupCategoryID_FECInterestGroupCategory");
            });

            modelBuilder.Entity<FeccommitteeGrid>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("FECCommitteeGrid");

                entity.Property(e => e.AddressLineI).HasMaxLength(100);

                entity.Property(e => e.AddressLineIi)
                    .HasMaxLength(100)
                    .HasColumnName("AddressLineII");

                entity.Property(e => e.CandidateIdentification).HasMaxLength(50);

                entity.Property(e => e.City).HasMaxLength(50);

                entity.Property(e => e.CommitteeIdentification).HasMaxLength(50);

                entity.Property(e => e.CommitteeType).HasMaxLength(50);

                entity.Property(e => e.ConnectedOrganizationName).HasMaxLength(50);

                entity.Property(e => e.Designation).HasMaxLength(50);

                entity.Property(e => e.Email)
                    .HasMaxLength(50)
                    .HasColumnName("EMail");

                entity.Property(e => e.Fax).HasMaxLength(20);

                entity.Property(e => e.FeccompanyId).HasColumnName("FECCompanyID");

                entity.Property(e => e.FilingFrequency).HasMaxLength(50);

                entity.Property(e => e.InterestGroupCategory).HasMaxLength(50);

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.ObjectUid).HasColumnName("ObjectUID");

                entity.Property(e => e.Party).HasMaxLength(50);

                entity.Property(e => e.Phone).HasMaxLength(20);

                entity.Property(e => e.PostalCode).HasMaxLength(20);

                entity.Property(e => e.State).HasMaxLength(50);

                entity.Property(e => e.TreasurerName).HasMaxLength(50);
            });

            modelBuilder.Entity<FeccommitteeType>(entity =>
            {
                entity.HasKey(e => e.ObjectUid);

                entity.ToTable("FECCommitteeType");

                entity.Property(e => e.ObjectUid)
                    .HasColumnName("ObjectUID")
                    .HasDefaultValueSql("(newid())");

                entity.Property(e => e.CreatedBy).HasMaxLength(50);

                entity.Property(e => e.CreatedOn)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Description).HasMaxLength(2000);

                entity.Property(e => e.Display)
                    .IsRequired()
                    .HasMaxLength(54)
                    .HasComputedColumnSql("(([Name]+' ')+case when [IsInactive]<>(0) then '(I)' else '' end)", false);

                entity.Property(e => e.ImportedObjectUid)
                    .HasMaxLength(50)
                    .HasColumnName("ImportedObjectUID");

                entity.Property(e => e.InstallationUid).HasColumnName("InstallationUID");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.NameAlias)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.OldRecordId).HasColumnName("OldRecordID");

                entity.Property(e => e.RecordId)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("RecordID");

                entity.Property(e => e.SortOrder).HasDefaultValueSql("((100))");

                entity.Property(e => e.UpdatedBy).HasMaxLength(50);

                entity.Property(e => e.UpdatedOn).HasColumnType("datetime");
            });

            modelBuilder.Entity<FeccommitteeTypeGrid>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("FECCommitteeTypeGrid");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.ObjectUid).HasColumnName("ObjectUID");
            });

            modelBuilder.Entity<Feccompany>(entity =>
            {
                entity.HasKey(e => e.ObjectUid);

                entity.ToTable("FECCompany");

                entity.Property(e => e.ObjectUid)
                    .HasColumnName("ObjectUID")
                    .HasDefaultValueSql("(newid())");

                entity.Property(e => e.AddressLineI).HasMaxLength(100);

                entity.Property(e => e.AddressLineIi)
                    .HasMaxLength(100)
                    .HasColumnName("AddressLineII");

                entity.Property(e => e.AddressLineIii)
                    .HasMaxLength(100)
                    .HasColumnName("AddressLineIII");

                entity.Property(e => e.City).HasMaxLength(50);

                entity.Property(e => e.Code)
                    .IsRequired()
                    .HasMaxLength(10)
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.CountryId).HasColumnName("CountryID");

                entity.Property(e => e.CountryStateId).HasColumnName("Country_StateID");

                entity.Property(e => e.CreatedBy).HasMaxLength(50);

                entity.Property(e => e.CreatedOn)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DefaultFeccontributionTypeId).HasColumnName("Default_FECContributionTypeID");

                entity.Property(e => e.Description).HasMaxLength(2000);

                entity.Property(e => e.Display)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasComputedColumnSql("([Name])", false);

                entity.Property(e => e.FecBdgreportGroupId).HasColumnName("FEC_BDGReportGroupID");

                entity.Property(e => e.ImportedObjectUid)
                    .HasMaxLength(50)
                    .HasColumnName("ImportedObjectUID");

                entity.Property(e => e.InstallationUid).HasColumnName("InstallationUID");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.NameAlias)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.OldRecordId).HasColumnName("OldRecordID");

                entity.Property(e => e.ParentFeccompanyId).HasColumnName("Parent_FECCompanyID");

                entity.Property(e => e.Phone).HasMaxLength(20);

                entity.Property(e => e.PostalCode).HasMaxLength(20);

                entity.Property(e => e.RecordId)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("RecordID");

                entity.Property(e => e.SortOrder).HasDefaultValueSql("((100))");

                entity.Property(e => e.UpdatedBy).HasMaxLength(50);

                entity.Property(e => e.UpdatedOn).HasColumnType("datetime");

                entity.HasOne(d => d.Country)
                    .WithMany(p => p.Feccompanies)
                    .HasForeignKey(d => d.CountryId)
                    .HasConstraintName("FK_FECCompany_CountryID_Country");

                entity.HasOne(d => d.CountryState)
                    .WithMany(p => p.Feccompanies)
                    .HasForeignKey(d => d.CountryStateId)
                    .HasConstraintName("FK_FECCompany_Country_StateID_Country_State");

                entity.HasOne(d => d.DefaultFeccontributionType)
                    .WithMany(p => p.Feccompanies)
                    .HasForeignKey(d => d.DefaultFeccontributionTypeId)
                    .HasConstraintName("FK_FECCompany_Default_FECContributionTypeID_FECContributionType");

                entity.HasOne(d => d.FecBdgreportGroup)
                    .WithMany(p => p.Feccompanies)
                    .HasForeignKey(d => d.FecBdgreportGroupId)
                    .HasConstraintName("FK_FECCompany_FEC_BDGReportGroupID_BDGReportGroup");

                entity.HasOne(d => d.ParentFeccompany)
                    .WithMany(p => p.InverseParentFeccompany)
                    .HasForeignKey(d => d.ParentFeccompanyId)
                    .HasConstraintName("FK_FECCompany_Parent_FECCompanyID_FECCompany");
            });

            modelBuilder.Entity<FeccompanyFecsegment>(entity =>
            {
                entity.HasKey(e => e.ObjectUid);

                entity.ToTable("FECCompany_FECSegment");

                entity.Property(e => e.ObjectUid)
                    .HasColumnName("ObjectUID")
                    .HasDefaultValueSql("(newid())");

                entity.Property(e => e.CreatedBy).HasMaxLength(50);

                entity.Property(e => e.CreatedOn)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Description).HasMaxLength(2000);

                entity.Property(e => e.Display)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasComputedColumnSql("([Name])", false);

                entity.Property(e => e.FeccompanyId).HasColumnName("FECCompanyID");

                entity.Property(e => e.FecsegmentId).HasColumnName("FECSegmentID");

                entity.Property(e => e.ImportedObjectUid)
                    .HasMaxLength(50)
                    .HasColumnName("ImportedObjectUID");

                entity.Property(e => e.InstallationUid).HasColumnName("InstallationUID");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.NameAlias)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.OldRecordId).HasColumnName("OldRecordID");

                entity.Property(e => e.RecordId)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("RecordID");

                entity.Property(e => e.SortOrder).HasDefaultValueSql("((100))");

                entity.Property(e => e.UpdatedBy).HasMaxLength(50);

                entity.Property(e => e.UpdatedOn).HasColumnType("datetime");

                entity.HasOne(d => d.Feccompany)
                    .WithMany(p => p.FeccompanyFecsegments)
                    .HasForeignKey(d => d.FeccompanyId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_FECCompany_FECSegment_FECCompanyID_FECCompany");

                entity.HasOne(d => d.Fecsegment)
                    .WithMany(p => p.FeccompanyFecsegments)
                    .HasForeignKey(d => d.FecsegmentId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_FECCompany_FECSegment_FECSegmentID_FECSegment");
            });

            modelBuilder.Entity<FeccompanyFecsegmentGrid>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("FECCompany_FECSegmentGrid");

                entity.Property(e => e.FeccompanyId).HasColumnName("FECCompanyID");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.ObjectUid).HasColumnName("ObjectUID");

                entity.Property(e => e.Segment)
                    .IsRequired()
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<FeccompanyFecsegmentValue>(entity =>
            {
                entity.HasKey(e => e.ObjectUid);

                entity.ToTable("FECCompany_FECSegmentValue");

                entity.Property(e => e.ObjectUid)
                    .HasColumnName("ObjectUID")
                    .HasDefaultValueSql("(newid())");

                entity.Property(e => e.AdditionalInfo).HasMaxLength(2000);

                entity.Property(e => e.CreatedBy).HasMaxLength(50);

                entity.Property(e => e.CreatedOn)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Description).HasMaxLength(2000);

                entity.Property(e => e.Display)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasComputedColumnSql("([Name])", false);

                entity.Property(e => e.FeccompanyFecsegmentId).HasColumnName("FECCompany_FECSegmentID");

                entity.Property(e => e.FeccompanyId).HasColumnName("FECCompanyID");

                entity.Property(e => e.FecsegmentId).HasColumnName("FECSegmentID");

                entity.Property(e => e.ImportedObjectUid)
                    .HasMaxLength(50)
                    .HasColumnName("ImportedObjectUID");

                entity.Property(e => e.InstallationUid).HasColumnName("InstallationUID");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.NameAlias)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.OldRecordId).HasColumnName("OldRecordID");

                entity.Property(e => e.RecordId)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("RecordID");

                entity.Property(e => e.SortOrder).HasDefaultValueSql("((100))");

                entity.Property(e => e.UpdatedBy).HasMaxLength(50);

                entity.Property(e => e.UpdatedOn).HasColumnType("datetime");

                entity.HasOne(d => d.FeccompanyFecsegment)
                    .WithMany(p => p.FeccompanyFecsegmentValues)
                    .HasForeignKey(d => d.FeccompanyFecsegmentId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_FECCompany_FECSegmentValue_FECCompany_FECSegmentID_FECCompany_FECSegment");

                entity.HasOne(d => d.Feccompany)
                    .WithMany(p => p.FeccompanyFecsegmentValues)
                    .HasForeignKey(d => d.FeccompanyId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_FECCompany_FECSegmentValue_FECCompanyID_FECCompany");

                entity.HasOne(d => d.Fecsegment)
                    .WithMany(p => p.FeccompanyFecsegmentValues)
                    .HasForeignKey(d => d.FecsegmentId)
                    .HasConstraintName("FK_FECCompany_FECSegmentValue_FECSegmentID_FECSegment");
            });

            modelBuilder.Entity<FeccompanyFecsegmentValueGrid>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("FECCompany_FECSegmentValueGrid");

                entity.Property(e => e.Description).HasMaxLength(2000);

                entity.Property(e => e.FeccompanyId).HasColumnName("FECCompanyID");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.ObjectUid).HasColumnName("ObjectUID");

                entity.Property(e => e.Segment)
                    .IsRequired()
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<FeccompanyFecsegmentValueTemp>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("FECCompany_FECSegmentValue_TEMP");

                entity.Property(e => e.AdditionalInfo)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.CreatedBy)
                    .IsRequired()
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.CreatedOn).HasColumnType("datetime");

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false);

                entity.Property(e => e.FeccompanyFecsegmentId).HasColumnName("FECCompany_FECSegmentID");

                entity.Property(e => e.FeccompanyId).HasColumnName("FECCompanyID");

                entity.Property(e => e.FecsegmentId).HasColumnName("FECSegmentID");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(67)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.NameAlias)
                    .IsRequired()
                    .HasMaxLength(67)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Statusid)
                    .IsRequired()
                    .HasMaxLength(16)
                    .IsUnicode(false)
                    .HasColumnName("STATUSID");
            });

            modelBuilder.Entity<FeccompanyGrid>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("FECCompanyGrid");

                entity.Property(e => e.AddressLineI).HasMaxLength(100);

                entity.Property(e => e.AddressLineIi)
                    .HasMaxLength(100)
                    .HasColumnName("AddressLineII");

                entity.Property(e => e.AddressLineIii)
                    .HasMaxLength(100)
                    .HasColumnName("AddressLineIII");

                entity.Property(e => e.City).HasMaxLength(50);

                entity.Property(e => e.Code)
                    .IsRequired()
                    .HasMaxLength(10);

                entity.Property(e => e.Country).HasMaxLength(50);

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.ObjectUid).HasColumnName("ObjectUID");

                entity.Property(e => e.ParentCompany).HasMaxLength(50);

                entity.Property(e => e.Phone).HasMaxLength(20);

                entity.Property(e => e.PostalCode).HasMaxLength(20);

                entity.Property(e => e.State).HasMaxLength(50);
            });

            modelBuilder.Entity<Feccontribution>(entity =>
            {
                entity.HasKey(e => e.ObjectUid);

                entity.ToTable("FECContribution");

                entity.Property(e => e.ObjectUid)
                    .HasColumnName("ObjectUID")
                    .HasDefaultValueSql("(newid())");

                entity.Property(e => e.CheckDate).HasColumnType("datetime");

                entity.Property(e => e.CheckNo).HasMaxLength(20);

                entity.Property(e => e.CreatedBy).HasMaxLength(50);

                entity.Property(e => e.CreatedOn)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DateReceived).HasColumnType("datetime");

                entity.Property(e => e.DepositAmount).HasColumnType("money");

                entity.Property(e => e.DepositDate).HasColumnType("datetime");

                entity.Property(e => e.Description).HasMaxLength(2000);

                entity.Property(e => e.Display)
                    .HasMaxLength(20)
                    .HasComputedColumnSql("([CheckNo])", false);

                entity.Property(e => e.EndDate).HasColumnType("datetime");

                entity.Property(e => e.FeccashAccountId).HasColumnName("FECCashAccountID");

                entity.Property(e => e.FeccompanyId).HasColumnName("FECCompanyID");

                entity.Property(e => e.FeccontributionSourceId).HasColumnName("FECContributionSourceID");

                entity.Property(e => e.FeccontributionStatusId).HasColumnName("FECContributionStatusID");

                entity.Property(e => e.FeccontributionTypeId).HasColumnName("FECContributionTypeID");

                entity.Property(e => e.FeclocalUnionId).HasColumnName("FECLocalUnionID");

                entity.Property(e => e.GpreferenceNo)
                    .HasMaxLength(20)
                    .HasColumnName("GPReferenceNo");

                entity.Property(e => e.ImportedObjectUid)
                    .HasMaxLength(50)
                    .HasColumnName("ImportedObjectUID");

                entity.Property(e => e.InstallationUid).HasColumnName("InstallationUID");

                entity.Property(e => e.MemberTotal)
                    .HasColumnType("money")
                    .HasComputedColumnSql("([dbo].[GetMemberContributionTotal]([ObjectUID]))", false);

                entity.Property(e => e.Name).HasMaxLength(50);

                entity.Property(e => e.NameAlias).HasMaxLength(50);

                entity.Property(e => e.OldRecordId).HasColumnName("OldRecordID");

                entity.Property(e => e.ProcessDate).HasColumnType("datetime");

                entity.Property(e => e.RecordId)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("RecordID");

                entity.Property(e => e.SortOrder).HasDefaultValueSql("((100))");

                entity.Property(e => e.StartDate).HasColumnType("datetime");

                entity.Property(e => e.UpdatedBy).HasMaxLength(50);

                entity.Property(e => e.UpdatedOn).HasColumnType("datetime");

                entity.Property(e => e.UploadDetail).HasColumnType("image");

                entity.HasOne(d => d.FeccashAccount)
                    .WithMany(p => p.Feccontributions)
                    .HasForeignKey(d => d.FeccashAccountId)
                    .HasConstraintName("FK_FECContribution_FECCashAccountID_FECCashAccount");

                entity.HasOne(d => d.Feccompany)
                    .WithMany(p => p.Feccontributions)
                    .HasForeignKey(d => d.FeccompanyId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_FECContribution_FECCompanyID_FECCompany");

                entity.HasOne(d => d.FeccontributionSource)
                    .WithMany(p => p.Feccontributions)
                    .HasForeignKey(d => d.FeccontributionSourceId)
                    .HasConstraintName("FK_FECContribution_FECContributionSourceID_FECContributionSource");

                entity.HasOne(d => d.FeccontributionStatus)
                    .WithMany(p => p.Feccontributions)
                    .HasForeignKey(d => d.FeccontributionStatusId)
                    .HasConstraintName("FK_FECContribution_FECContributionStatusID_FECContributionStatus");

                entity.HasOne(d => d.FeccontributionType)
                    .WithMany(p => p.Feccontributions)
                    .HasForeignKey(d => d.FeccontributionTypeId)
                    .HasConstraintName("FK_FECContribution_FECContributionTypeID_FECContributionType");

                entity.HasOne(d => d.FeclocalUnion)
                    .WithMany(p => p.Feccontributions)
                    .HasForeignKey(d => d.FeclocalUnionId)
                    .HasConstraintName("FK_FECContribution_FECLocalUnionID_FECLocalUnion");
            });

            modelBuilder.Entity<FeccontributionDetail>(entity =>
            {
                entity.HasKey(e => e.ObjectUid);

                entity.ToTable("FECContribution_Detail");

                entity.Property(e => e.ObjectUid)
                    .HasColumnName("ObjectUID")
                    .HasDefaultValueSql("(newid())");

                entity.Property(e => e.AddressLineI).HasMaxLength(100);

                entity.Property(e => e.AddressLineIi)
                    .HasMaxLength(100)
                    .HasColumnName("AddressLineII");

                entity.Property(e => e.AdjustmentFeccontributionDetailId).HasColumnName("Adjustment_FECContribution_DetailID");

                entity.Property(e => e.City).HasMaxLength(50);

                entity.Property(e => e.ContributionAmount).HasColumnType("money");

                entity.Property(e => e.CountryStateId).HasColumnName("Country_StateID");

                entity.Property(e => e.CreatedBy).HasMaxLength(50);

                entity.Property(e => e.CreatedOn)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Description).HasMaxLength(2000);

                entity.Property(e => e.Display)
                    .HasMaxLength(50)
                    .HasComputedColumnSql("([Name])", false);

                entity.Property(e => e.EmailPrimary).HasMaxLength(50);

                entity.Property(e => e.Employer).HasMaxLength(50);

                entity.Property(e => e.FeccontributionId).HasColumnName("FECContributionID");

                entity.Property(e => e.FeclocalUnionId).HasColumnName("FECLocalUnionID");

                entity.Property(e => e.FecmemberId).HasColumnName("FECMemberID");

                entity.Property(e => e.FecpaymentFrequencyId).HasColumnName("FECPaymentFrequencyID");

                entity.Property(e => e.FirstName).HasMaxLength(50);

                entity.Property(e => e.ImportedObjectUid)
                    .HasMaxLength(50)
                    .HasColumnName("ImportedObjectUID");

                entity.Property(e => e.InstallationUid).HasColumnName("InstallationUID");

                entity.Property(e => e.JobTitle).HasMaxLength(50);

                entity.Property(e => e.LastName).HasMaxLength(50);

                entity.Property(e => e.MemberCode).HasMaxLength(20);

                entity.Property(e => e.MiddleName).HasMaxLength(2);

                entity.Property(e => e.Name).HasMaxLength(50);

                entity.Property(e => e.NameAlias).HasMaxLength(50);

                entity.Property(e => e.OldRecordId).HasColumnName("OldRecordID");

                entity.Property(e => e.PaymentAmount).HasColumnType("money");

                entity.Property(e => e.PhoneHome).HasMaxLength(50);

                entity.Property(e => e.PostalCode).HasMaxLength(20);

                entity.Property(e => e.Prefix).HasMaxLength(50);

                entity.Property(e => e.RecordId)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("RecordID");

                entity.Property(e => e.SortOrder).HasDefaultValueSql("((100))");

                entity.Property(e => e.UpdatedBy).HasMaxLength(50);

                entity.Property(e => e.UpdatedOn).HasColumnType("datetime");

                entity.HasOne(d => d.AdjustmentFeccontributionDetail)
                    .WithMany(p => p.InverseAdjustmentFeccontributionDetail)
                    .HasForeignKey(d => d.AdjustmentFeccontributionDetailId)
                    .HasConstraintName("FK_FECContribution_Detail_Adjustment_FECContribution_DetailID_FECContribution_Detail");

                entity.HasOne(d => d.CountryState)
                    .WithMany(p => p.FeccontributionDetails)
                    .HasForeignKey(d => d.CountryStateId)
                    .HasConstraintName("FK_FECContribution_Detail_Country_StateID_Country_State");

                entity.HasOne(d => d.Feccontribution)
                    .WithMany(p => p.FeccontributionDetails)
                    .HasForeignKey(d => d.FeccontributionId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_FECContribution_Detail_FECContributionID_FECContribution");

                entity.HasOne(d => d.FeclocalUnion)
                    .WithMany(p => p.FeccontributionDetails)
                    .HasForeignKey(d => d.FeclocalUnionId)
                    .HasConstraintName("FK_FECContribution_Detail_FECLocalUnionID_FECLocalUnion");

                entity.HasOne(d => d.Fecmember)
                    .WithMany(p => p.FeccontributionDetails)
                    .HasForeignKey(d => d.FecmemberId)
                    .HasConstraintName("FK_FECContribution_Detail_FECMemberID_FECMember");

                entity.HasOne(d => d.FecpaymentFrequency)
                    .WithMany(p => p.FeccontributionDetails)
                    .HasForeignKey(d => d.FecpaymentFrequencyId)
                    .HasConstraintName("FK_FECContribution_Detail_FECPaymentFrequencyID_FECPaymentFrequency");
            });

            modelBuilder.Entity<FeccontributionDetailGrid>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("FECContribution_DetailGrid");

                entity.Property(e => e.AddressLineI).HasMaxLength(100);

                entity.Property(e => e.AddressLineIi)
                    .HasMaxLength(100)
                    .HasColumnName("AddressLineII");

                entity.Property(e => e.AdjustmentFeccontributionDetailId).HasColumnName("Adjustment_FECContribution_DetailID");

                entity.Property(e => e.City).HasMaxLength(50);

                entity.Property(e => e.ContributionAmount).HasColumnType("money");

                entity.Property(e => e.EmailPrimary).HasMaxLength(50);

                entity.Property(e => e.Employer).HasMaxLength(50);

                entity.Property(e => e.FeccontributionId).HasColumnName("FECContributionID");

                entity.Property(e => e.FirstName).HasMaxLength(50);

                entity.Property(e => e.IsAdjustment)
                    .IsRequired()
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.JobTitle).HasMaxLength(50);

                entity.Property(e => e.LastName).HasMaxLength(50);

                entity.Property(e => e.LocalUnion).HasMaxLength(50);

                entity.Property(e => e.Member).HasMaxLength(125);

                entity.Property(e => e.MemberCode).HasMaxLength(20);

                entity.Property(e => e.MiddleName).HasMaxLength(2);

                entity.Property(e => e.ObjectUid).HasColumnName("ObjectUID");

                entity.Property(e => e.PhoneHome).HasMaxLength(50);

                entity.Property(e => e.PostalCode).HasMaxLength(20);

                entity.Property(e => e.Prefix).HasMaxLength(50);

                entity.Property(e => e.State).HasMaxLength(50);
            });

            modelBuilder.Entity<FeccontributionGrid>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("FECContributionGrid");

                entity.Property(e => e.Batchno)
                    .HasMaxLength(80)
                    .HasColumnName("BATCHNO");

                entity.Property(e => e.CashAccount).HasMaxLength(50);

                entity.Property(e => e.CheckDate).HasColumnType("datetime");

                entity.Property(e => e.CheckNo).HasMaxLength(20);

                entity.Property(e => e.Company)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.ContributionSource).HasMaxLength(50);

                entity.Property(e => e.ContributionStatus).HasMaxLength(50);

                entity.Property(e => e.ContributionType).HasMaxLength(50);

                entity.Property(e => e.CreatedBy).HasMaxLength(50);

                entity.Property(e => e.CreatedOn).HasColumnType("datetime");

                entity.Property(e => e.DateReceived).HasColumnType("datetime");

                entity.Property(e => e.DepositAmount).HasColumnType("money");

                entity.Property(e => e.DepositDate).HasColumnType("datetime");

                entity.Property(e => e.EndDate).HasColumnType("datetime");

                entity.Property(e => e.FeccompanyId).HasColumnName("FECCompanyID");

                entity.Property(e => e.GpreferenceNo)
                    .HasMaxLength(20)
                    .HasColumnName("GPReferenceNo");

                entity.Property(e => e.LocalUnion).HasMaxLength(10);

                entity.Property(e => e.MemberTotal).HasColumnType("money");

                entity.Property(e => e.ObjectUid).HasColumnName("ObjectUID");

                entity.Property(e => e.RecordId).HasColumnName("RecordID");

                entity.Property(e => e.StartDate).HasColumnType("datetime");

                entity.Property(e => e.UploadDetail).HasColumnType("image");
            });

            modelBuilder.Entity<FeccontributionLimit>(entity =>
            {
                entity.HasKey(e => e.ObjectUid);

                entity.ToTable("FECContributionLimit");

                entity.Property(e => e.ObjectUid)
                    .HasColumnName("ObjectUID")
                    .HasDefaultValueSql("(newid())");

                entity.Property(e => e.CreatedBy).HasMaxLength(50);

                entity.Property(e => e.CreatedOn)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Description).HasMaxLength(2000);

                entity.Property(e => e.Display)
                    .HasMaxLength(54)
                    .HasComputedColumnSql("(([Name]+' ')+case when [IsInactive]<>(0) then '(I)' else '' end)", false);

                entity.Property(e => e.FeccontributorCategoryId).HasColumnName("FECContributorCategoryID");

                entity.Property(e => e.ImportedObjectUid)
                    .HasMaxLength(50)
                    .HasColumnName("ImportedObjectUID");

                entity.Property(e => e.InstallationUid).HasColumnName("InstallationUID");

                entity.Property(e => e.LimitToEachCandidateCommitteePerElection).HasColumnType("money");

                entity.Property(e => e.LimitToNationalPartyCommitteePerYear).HasColumnType("money");

                entity.Property(e => e.LimitToOtherPoliticalCommitteePerYear).HasColumnType("money");

                entity.Property(e => e.LimitToStateDistrictLocalCommitteePerYear).HasColumnType("money");

                entity.Property(e => e.Name).HasMaxLength(50);

                entity.Property(e => e.NameAlias).HasMaxLength(50);

                entity.Property(e => e.OldRecordId).HasColumnName("OldRecordID");

                entity.Property(e => e.RecordId)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("RecordID");

                entity.Property(e => e.SortOrder).HasDefaultValueSql("((100))");

                entity.Property(e => e.SpecialLimitToSenateCandidatePerCampaign).HasColumnType("money");

                entity.Property(e => e.SpecialOverallBiennialLimitToAllCandidates).HasColumnType("money");

                entity.Property(e => e.SpecialOverallBiennialLimitToPacandParties)
                    .HasColumnType("money")
                    .HasColumnName("SpecialOverallBiennialLimitToPACAndParties");

                entity.Property(e => e.UpdatedBy).HasMaxLength(50);

                entity.Property(e => e.UpdatedOn).HasColumnType("datetime");

                entity.HasOne(d => d.FeccontributorCategory)
                    .WithMany(p => p.FeccontributionLimits)
                    .HasForeignKey(d => d.FeccontributorCategoryId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_FECContributionLimit_FECContributorCategoryID_FECContributorCategory");
            });

            modelBuilder.Entity<FeccontributionLimitGrid>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("FECContributionLimitGrid");

                entity.Property(e => e.ContributorCategory)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.LimitToEachCandidateCommitteePerElection).HasColumnType("money");

                entity.Property(e => e.LimitToNationalPartyCommitteePerYear).HasColumnType("money");

                entity.Property(e => e.LimitToOtherPoliticalCommitteePerYear).HasColumnType("money");

                entity.Property(e => e.LimitToStateDistrictLocalCommitteePerYear).HasColumnType("money");

                entity.Property(e => e.ObjectUid).HasColumnName("ObjectUID");

                entity.Property(e => e.SpecialLimitToSenateCandidatePerCampaign).HasColumnType("money");

                entity.Property(e => e.SpecialOverallBiennialLimitToAllCandidates).HasColumnType("money");

                entity.Property(e => e.SpecialOverallBiennialLimitToPacandParties)
                    .HasColumnType("money")
                    .HasColumnName("SpecialOverallBiennialLimitToPACAndParties");
            });

            modelBuilder.Entity<FeccontributionSource>(entity =>
            {
                entity.HasKey(e => e.ObjectUid);

                entity.ToTable("FECContributionSource");

                entity.Property(e => e.ObjectUid)
                    .HasColumnName("ObjectUID")
                    .HasDefaultValueSql("(newid())");

                entity.Property(e => e.CreatedBy).HasMaxLength(50);

                entity.Property(e => e.CreatedOn)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Description).HasMaxLength(2000);

                entity.Property(e => e.Display)
                    .IsRequired()
                    .HasMaxLength(54)
                    .HasComputedColumnSql("(([Name]+' ')+case when [IsInactive]<>(0) then '(I)' else '' end)", false);

                entity.Property(e => e.FeccompanyId).HasColumnName("FECCompanyID");

                entity.Property(e => e.ImportedObjectUid)
                    .HasMaxLength(50)
                    .HasColumnName("ImportedObjectUID");

                entity.Property(e => e.InstallationUid).HasColumnName("InstallationUID");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.NameAlias)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.OldRecordId).HasColumnName("OldRecordID");

                entity.Property(e => e.RecordId)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("RecordID");

                entity.Property(e => e.SortOrder).HasDefaultValueSql("((100))");

                entity.Property(e => e.UpdatedBy).HasMaxLength(50);

                entity.Property(e => e.UpdatedOn).HasColumnType("datetime");

                entity.HasOne(d => d.Feccompany)
                    .WithMany(p => p.FeccontributionSources)
                    .HasForeignKey(d => d.FeccompanyId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_FECContributionSource_FECCompanyID_FECCompany");
            });

            modelBuilder.Entity<FeccontributionSourceGrid>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("FECContributionSourceGrid");

                entity.Property(e => e.Company)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.FeccompanyId).HasColumnName("FECCompanyID");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.ObjectUid).HasColumnName("ObjectUID");
            });

            modelBuilder.Entity<FeccontributionStatus>(entity =>
            {
                entity.HasKey(e => e.ObjectUid);

                entity.ToTable("FECContributionStatus");

                entity.Property(e => e.ObjectUid)
                    .HasColumnName("ObjectUID")
                    .HasDefaultValueSql("(newid())");

                entity.Property(e => e.CreatedBy).HasMaxLength(50);

                entity.Property(e => e.CreatedOn)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Description).HasMaxLength(2000);

                entity.Property(e => e.Display)
                    .IsRequired()
                    .HasMaxLength(54)
                    .HasComputedColumnSql("(([Name]+' ')+case when [IsInactive]<>(0) then '(I)' else '' end)", false);

                entity.Property(e => e.ImportedObjectUid)
                    .HasMaxLength(50)
                    .HasColumnName("ImportedObjectUID");

                entity.Property(e => e.InstallationUid).HasColumnName("InstallationUID");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.NameAlias)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.OldRecordId).HasColumnName("OldRecordID");

                entity.Property(e => e.RecordId)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("RecordID");

                entity.Property(e => e.SortOrder).HasDefaultValueSql("((100))");

                entity.Property(e => e.UpdatedBy).HasMaxLength(50);

                entity.Property(e => e.UpdatedOn).HasColumnType("datetime");
            });

            modelBuilder.Entity<FeccontributionStatusGrid>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("FECContributionStatusGrid");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.ObjectUid).HasColumnName("ObjectUID");
            });

            modelBuilder.Entity<FeccontributionType>(entity =>
            {
                entity.HasKey(e => e.ObjectUid);

                entity.ToTable("FECContributionType");

                entity.Property(e => e.ObjectUid)
                    .HasColumnName("ObjectUID")
                    .HasDefaultValueSql("(newid())");

                entity.Property(e => e.CreatedBy).HasMaxLength(50);

                entity.Property(e => e.CreatedOn)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Description).HasMaxLength(2000);

                entity.Property(e => e.Display)
                    .IsRequired()
                    .HasMaxLength(54)
                    .HasComputedColumnSql("(([Name]+' ')+case when [IsInactive]<>(0) then '(I)' else '' end)", false);

                entity.Property(e => e.ImportedObjectUid)
                    .HasMaxLength(50)
                    .HasColumnName("ImportedObjectUID");

                entity.Property(e => e.InstallationUid).HasColumnName("InstallationUID");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.NameAlias)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.OldRecordId).HasColumnName("OldRecordID");

                entity.Property(e => e.RecordId)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("RecordID");

                entity.Property(e => e.SortOrder).HasDefaultValueSql("((100))");

                entity.Property(e => e.UpdatedBy).HasMaxLength(50);

                entity.Property(e => e.UpdatedOn).HasColumnType("datetime");
            });

            modelBuilder.Entity<FeccontributionTypeGrid>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("FECContributionTypeGrid");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.ObjectUid).HasColumnName("ObjectUID");
            });

            modelBuilder.Entity<FeccontributorCategory>(entity =>
            {
                entity.HasKey(e => e.ObjectUid);

                entity.ToTable("FECContributorCategory");

                entity.Property(e => e.ObjectUid)
                    .HasColumnName("ObjectUID")
                    .HasDefaultValueSql("(newid())");

                entity.Property(e => e.CreatedBy).HasMaxLength(50);

                entity.Property(e => e.CreatedOn)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Description).HasMaxLength(2000);

                entity.Property(e => e.Display)
                    .IsRequired()
                    .HasMaxLength(54)
                    .HasComputedColumnSql("(([Name]+' ')+case when [IsInactive]<>(0) then '(I)' else '' end)", false);

                entity.Property(e => e.ImportedObjectUid)
                    .HasMaxLength(50)
                    .HasColumnName("ImportedObjectUID");

                entity.Property(e => e.InstallationUid).HasColumnName("InstallationUID");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.NameAlias)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.OldRecordId).HasColumnName("OldRecordID");

                entity.Property(e => e.RecordId)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("RecordID");

                entity.Property(e => e.SortOrder).HasDefaultValueSql("((100))");

                entity.Property(e => e.UpdatedBy).HasMaxLength(50);

                entity.Property(e => e.UpdatedOn).HasColumnType("datetime");
            });

            modelBuilder.Entity<FeccontributorCategoryGrid>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("FECContributorCategoryGrid");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.ObjectUid).HasColumnName("ObjectUID");
            });

            modelBuilder.Entity<FecdisbursementType>(entity =>
            {
                entity.HasKey(e => e.ObjectUid);

                entity.ToTable("FECDisbursementType");

                entity.Property(e => e.ObjectUid)
                    .HasColumnName("ObjectUID")
                    .HasDefaultValueSql("(newid())");

                entity.Property(e => e.CreatedBy).HasMaxLength(50);

                entity.Property(e => e.CreatedOn)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Description).HasMaxLength(2000);

                entity.Property(e => e.Display)
                    .IsRequired()
                    .HasMaxLength(54)
                    .HasComputedColumnSql("(([Name]+' ')+case when [IsInactive]<>(0) then '(I)' else '' end)", false);

                entity.Property(e => e.FeccompanyId).HasColumnName("FECCompanyID");

                entity.Property(e => e.ImportedObjectUid)
                    .HasMaxLength(50)
                    .HasColumnName("ImportedObjectUID");

                entity.Property(e => e.InstallationUid).HasColumnName("InstallationUID");

                entity.Property(e => e.IsFec).HasColumnName("IsFEC");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.NameAlias)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.OldRecordId).HasColumnName("OldRecordID");

                entity.Property(e => e.RecordId)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("RecordID");

                entity.Property(e => e.Segment10FeccompanyFecsegmentValueId).HasColumnName("Segment10_FECCompany_FECSegmentValueID");

                entity.Property(e => e.Segment1FeccompanyFecsegmentValueId).HasColumnName("Segment1_FECCompany_FECSegmentValueID");

                entity.Property(e => e.Segment2FeccompanyFecsegmentValueId).HasColumnName("Segment2_FECCompany_FECSegmentValueID");

                entity.Property(e => e.Segment3FeccompanyFecsegmentValueId).HasColumnName("Segment3_FECCompany_FECSegmentValueID");

                entity.Property(e => e.Segment4FeccompanyFecsegmentValueId).HasColumnName("Segment4_FECCompany_FECSegmentValueID");

                entity.Property(e => e.Segment5FeccompanyFecsegmentValueId).HasColumnName("Segment5_FECCompany_FECSegmentValueID");

                entity.Property(e => e.Segment6FeccompanyFecsegmentValueId).HasColumnName("Segment6_FECCompany_FECSegmentValueID");

                entity.Property(e => e.Segment7FeccompanyFecsegmentValueId).HasColumnName("Segment7_FECCompany_FECSegmentValueID");

                entity.Property(e => e.Segment8FeccompanyFecsegmentValueId).HasColumnName("Segment8_FECCompany_FECSegmentValueID");

                entity.Property(e => e.Segment9FeccompanyFecsegmentValueId).HasColumnName("Segment9_FECCompany_FECSegmentValueID");

                entity.Property(e => e.SortOrder).HasDefaultValueSql("((100))");

                entity.Property(e => e.UpdatedBy).HasMaxLength(50);

                entity.Property(e => e.UpdatedOn).HasColumnType("datetime");

                entity.HasOne(d => d.Feccompany)
                    .WithMany(p => p.FecdisbursementTypes)
                    .HasForeignKey(d => d.FeccompanyId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_FECDisbursementType_FECCompanyID_FECCompany");

                entity.HasOne(d => d.Segment10FeccompanyFecsegmentValue)
                    .WithMany(p => p.FecdisbursementTypeSegment10FeccompanyFecsegmentValues)
                    .HasForeignKey(d => d.Segment10FeccompanyFecsegmentValueId)
                    .HasConstraintName("FK_FECDisbursementType_Segment10_FECCompany_FECSegmentValueID_FECCompany_FECSegmentValue");

                entity.HasOne(d => d.Segment1FeccompanyFecsegmentValue)
                    .WithMany(p => p.FecdisbursementTypeSegment1FeccompanyFecsegmentValues)
                    .HasForeignKey(d => d.Segment1FeccompanyFecsegmentValueId)
                    .HasConstraintName("FK_FECDisbursementType_Segment1_FECCompany_FECSegmentValueID_FECCompany_FECSegmentValue");

                entity.HasOne(d => d.Segment2FeccompanyFecsegmentValue)
                    .WithMany(p => p.FecdisbursementTypeSegment2FeccompanyFecsegmentValues)
                    .HasForeignKey(d => d.Segment2FeccompanyFecsegmentValueId)
                    .HasConstraintName("FK_FECDisbursementType_Segment2_FECCompany_FECSegmentValueID_FECCompany_FECSegmentValue");

                entity.HasOne(d => d.Segment3FeccompanyFecsegmentValue)
                    .WithMany(p => p.FecdisbursementTypeSegment3FeccompanyFecsegmentValues)
                    .HasForeignKey(d => d.Segment3FeccompanyFecsegmentValueId)
                    .HasConstraintName("FK_FECDisbursementType_Segment3_FECCompany_FECSegmentValueID_FECCompany_FECSegmentValue");

                entity.HasOne(d => d.Segment4FeccompanyFecsegmentValue)
                    .WithMany(p => p.FecdisbursementTypeSegment4FeccompanyFecsegmentValues)
                    .HasForeignKey(d => d.Segment4FeccompanyFecsegmentValueId)
                    .HasConstraintName("FK_FECDisbursementType_Segment4_FECCompany_FECSegmentValueID_FECCompany_FECSegmentValue");

                entity.HasOne(d => d.Segment5FeccompanyFecsegmentValue)
                    .WithMany(p => p.FecdisbursementTypeSegment5FeccompanyFecsegmentValues)
                    .HasForeignKey(d => d.Segment5FeccompanyFecsegmentValueId)
                    .HasConstraintName("FK_FECDisbursementType_Segment5_FECCompany_FECSegmentValueID_FECCompany_FECSegmentValue");

                entity.HasOne(d => d.Segment6FeccompanyFecsegmentValue)
                    .WithMany(p => p.FecdisbursementTypeSegment6FeccompanyFecsegmentValues)
                    .HasForeignKey(d => d.Segment6FeccompanyFecsegmentValueId)
                    .HasConstraintName("FK_FECDisbursementType_Segment6_FECCompany_FECSegmentValueID_FECCompany_FECSegmentValue");

                entity.HasOne(d => d.Segment7FeccompanyFecsegmentValue)
                    .WithMany(p => p.FecdisbursementTypeSegment7FeccompanyFecsegmentValues)
                    .HasForeignKey(d => d.Segment7FeccompanyFecsegmentValueId)
                    .HasConstraintName("FK_FECDisbursementType_Segment7_FECCompany_FECSegmentValueID_FECCompany_FECSegmentValue");

                entity.HasOne(d => d.Segment8FeccompanyFecsegmentValue)
                    .WithMany(p => p.FecdisbursementTypeSegment8FeccompanyFecsegmentValues)
                    .HasForeignKey(d => d.Segment8FeccompanyFecsegmentValueId)
                    .HasConstraintName("FK_FECDisbursementType_Segment8_FECCompany_FECSegmentValueID_FECCompany_FECSegmentValue");

                entity.HasOne(d => d.Segment9FeccompanyFecsegmentValue)
                    .WithMany(p => p.FecdisbursementTypeSegment9FeccompanyFecsegmentValues)
                    .HasForeignKey(d => d.Segment9FeccompanyFecsegmentValueId)
                    .HasConstraintName("FK_FECDisbursementType_Segment9_FECCompany_FECSegmentValueID_FECCompany_FECSegmentValue");
            });

            modelBuilder.Entity<FecdisbursementTypeFecdistributionType>(entity =>
            {
                entity.HasKey(e => e.ObjectUid);

                entity.ToTable("FECDisbursementType_FECDistributionType");

                entity.Property(e => e.ObjectUid)
                    .HasColumnName("ObjectUID")
                    .HasDefaultValueSql("(newid())");

                entity.Property(e => e.CreatedBy).HasMaxLength(50);

                entity.Property(e => e.CreatedOn)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Description).HasMaxLength(2000);

                entity.Property(e => e.Display)
                    .HasMaxLength(50)
                    .HasComputedColumnSql("([Name])", false);

                entity.Property(e => e.FecdisbursementTypeId).HasColumnName("FECDisbursementTypeID");

                entity.Property(e => e.FecdistributionTypeId).HasColumnName("FECDistributionTypeID");

                entity.Property(e => e.ImportedObjectUid)
                    .HasMaxLength(50)
                    .HasColumnName("ImportedObjectUID");

                entity.Property(e => e.InstallationUid).HasColumnName("InstallationUID");

                entity.Property(e => e.Name).HasMaxLength(50);

                entity.Property(e => e.NameAlias).HasMaxLength(50);

                entity.Property(e => e.OldRecordId).HasColumnName("OldRecordID");

                entity.Property(e => e.RecordId)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("RecordID");

                entity.Property(e => e.SortOrder).HasDefaultValueSql("((100))");

                entity.Property(e => e.UpdatedBy).HasMaxLength(50);

                entity.Property(e => e.UpdatedOn).HasColumnType("datetime");

                entity.HasOne(d => d.FecdisbursementType)
                    .WithMany(p => p.FecdisbursementTypeFecdistributionTypes)
                    .HasForeignKey(d => d.FecdisbursementTypeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_FECDisbursementType_FECDistributionType_FECDisbursementTypeID_FECDisbursementType");

                entity.HasOne(d => d.FecdistributionType)
                    .WithMany(p => p.FecdisbursementTypeFecdistributionTypes)
                    .HasForeignKey(d => d.FecdistributionTypeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_FECDisbursementType_FECDistributionType_FECDistributionTypeID_FECDistributionType");
            });

            modelBuilder.Entity<FecdisbursementTypeFecdistributionTypeGrid>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("FECDisbursementType_FECDistributionTypeGrid");

                entity.Property(e => e.DistributionType)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.FecdisbursementTypeId).HasColumnName("FECDisbursementTypeID");

                entity.Property(e => e.ObjectUid).HasColumnName("ObjectUID");
            });

            modelBuilder.Entity<FecdisbursementTypeGrid>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("FECDisbursementTypeGrid");

                entity.Property(e => e.Company)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.FeccompanyId).HasColumnName("FECCompanyID");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.ObjectUid).HasColumnName("ObjectUID");
            });

            modelBuilder.Entity<Fecdistribution>(entity =>
            {
                entity.HasKey(e => e.ObjectUid);

                entity.ToTable("FECDistribution");

                entity.Property(e => e.ObjectUid)
                    .HasColumnName("ObjectUID")
                    .HasDefaultValueSql("(newid())");

                entity.Property(e => e.AccountIdentifier).HasMaxLength(20);

                entity.Property(e => e.AmountRemaining).HasColumnType("money");

                entity.Property(e => e.BatchNo).HasMaxLength(50);

                entity.Property(e => e.CandidateOrCommitteeAddressI).HasMaxLength(100);

                entity.Property(e => e.CandidateOrCommitteeAddressIi)
                    .HasMaxLength(100)
                    .HasColumnName("CandidateOrCommitteeAddressII");

                entity.Property(e => e.CandidateOrCommitteeCity).HasMaxLength(20);

                entity.Property(e => e.CandidateOrCommitteeCountryStateId).HasColumnName("CandidateOrCommittee_Country_StateID");

                entity.Property(e => e.CandidateOrCommitteeEmail)
                    .HasMaxLength(50)
                    .HasColumnName("CandidateOrCommitteeEMail");

                entity.Property(e => e.CandidateOrCommitteeFax).HasMaxLength(20);

                entity.Property(e => e.CandidateOrCommitteePhone).HasMaxLength(20);

                entity.Property(e => e.CandidateOrCommitteePostalCode).HasMaxLength(20);

                entity.Property(e => e.CheckAmount).HasColumnType("money");

                entity.Property(e => e.CheckDate).HasColumnType("datetime");

                entity.Property(e => e.CheckNo).HasMaxLength(20);

                entity.Property(e => e.ControlAmount).HasColumnType("money");

                entity.Property(e => e.CreatedBy).HasMaxLength(50);

                entity.Property(e => e.CreatedOn)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Description).HasMaxLength(2000);

                entity.Property(e => e.Display)
                    .HasMaxLength(20)
                    .HasComputedColumnSql("([VoucherNo])", false);

                entity.Property(e => e.DistributionDate).HasColumnType("datetime");

                entity.Property(e => e.DocumentAmount).HasColumnType("money");

                entity.Property(e => e.DocumentDate).HasColumnType("datetime");

                entity.Property(e => e.DocumentNo).HasMaxLength(20);

                entity.Property(e => e.ElectionCountryStateId).HasColumnName("Election_Country_StateID");

                entity.Property(e => e.ElectionDistrict)
                    .HasMaxLength(5)
                    .HasColumnName("Election_District");

                entity.Property(e => e.ElectionOtherDescription).HasMaxLength(2000);

                entity.Property(e => e.ElectionOtherIdentification)
                    .HasMaxLength(20)
                    .HasColumnName("Election_OtherIdentification");

                entity.Property(e => e.FecBdgaccountGroupId).HasColumnName("FEC_BDGAccountGroupID");

                entity.Property(e => e.FecBdgdepartmentId).HasColumnName("FEC_BDGDepartmentID");

                entity.Property(e => e.FecLrpten99BoxNoId).HasColumnName("FEC_LRPTen99BoxNoID");

                entity.Property(e => e.FecLrpten99TaxTypeId).HasColumnName("FEC_LRPTen99TaxTypeID");

                entity.Property(e => e.FecUserAccountId).HasColumnName("FEC_UserAccountID");

                entity.Property(e => e.FecbatchStatusId).HasColumnName("FECBatchStatusID");

                entity.Property(e => e.FeccandidateId).HasColumnName("FECCandidateID");

                entity.Property(e => e.FeccommitteeId).HasColumnName("FECCommitteeID");

                entity.Property(e => e.FeccompanyId).HasColumnName("FECCompanyID");

                entity.Property(e => e.FecdisbursementTypeId).HasColumnName("FECDisbursementTypeID");

                entity.Property(e => e.FecdistributionStatusId).HasColumnName("FECDistributionStatusID");

                entity.Property(e => e.FecdistributionTypeId).HasColumnName("FECDistributionTypeID");

                entity.Property(e => e.FecelectionOfficeId).HasColumnName("FECElectionOfficeID");

                entity.Property(e => e.FecelectionTypeId).HasColumnName("FECElectionTypeID");

                entity.Property(e => e.FecexpenseCategoryId).HasColumnName("FECExpenseCategoryID");

                entity.Property(e => e.FecvendorId).HasColumnName("FECVendorID");

                entity.Property(e => e.Idno)
                    .HasMaxLength(50)
                    .HasColumnName("IDNo");

                entity.Property(e => e.ImportedObjectUid)
                    .HasMaxLength(50)
                    .HasColumnName("ImportedObjectUID");

                entity.Property(e => e.InstallationUid).HasColumnName("InstallationUID");

                entity.Property(e => e.MailingAddressI).HasMaxLength(100);

                entity.Property(e => e.MailingAddressIi)
                    .HasMaxLength(100)
                    .HasColumnName("MailingAddressII");

                entity.Property(e => e.MailingCity).HasMaxLength(50);

                entity.Property(e => e.MailingCountryStateId).HasColumnName("Mailing_Country_StateID");

                entity.Property(e => e.MailingEmail)
                    .HasMaxLength(50)
                    .HasColumnName("MailingEMail");

                entity.Property(e => e.MailingFax).HasMaxLength(20);

                entity.Property(e => e.MailingPhone).HasMaxLength(20);

                entity.Property(e => e.MailingPostalCode).HasMaxLength(20);

                entity.Property(e => e.Name).HasMaxLength(50);

                entity.Property(e => e.NameAlias).HasMaxLength(50);

                entity.Property(e => e.OldRecordId).HasColumnName("OldRecordID");

                entity.Property(e => e.RecordId)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("RecordID");

                entity.Property(e => e.SortOrder).HasDefaultValueSql("((100))");

                entity.Property(e => e.UpdatedBy).HasMaxLength(50);

                entity.Property(e => e.UpdatedOn).HasColumnType("datetime");

                entity.Property(e => e.VendorAddressI).HasMaxLength(100);

                entity.Property(e => e.VendorAddressIi)
                    .HasMaxLength(100)
                    .HasColumnName("VendorAddressII");

                entity.Property(e => e.VendorCity).HasMaxLength(50);

                entity.Property(e => e.VendorCountryStateId).HasColumnName("Vendor_Country_StateID");

                entity.Property(e => e.VendorEmail)
                    .HasMaxLength(50)
                    .HasColumnName("VendorEMail");

                entity.Property(e => e.VendorFax).HasMaxLength(20);

                entity.Property(e => e.VendorName).HasMaxLength(50);

                entity.Property(e => e.VendorPhone).HasMaxLength(20);

                entity.Property(e => e.VendorPostalCode).HasMaxLength(20);

                entity.Property(e => e.VoucherNo).HasMaxLength(20);

                entity.HasOne(d => d.CandidateOrCommitteeCountryState)
                    .WithMany(p => p.FecdistributionCandidateOrCommitteeCountryStates)
                    .HasForeignKey(d => d.CandidateOrCommitteeCountryStateId)
                    .HasConstraintName("FK_FECDistribution_CandidateOrCommittee_Country_StateID_Country_State");

                entity.HasOne(d => d.ElectionCountryState)
                    .WithMany(p => p.FecdistributionElectionCountryStates)
                    .HasForeignKey(d => d.ElectionCountryStateId)
                    .HasConstraintName("FK_FECDistribution_Election_Country_StateID_Country_State");

                entity.HasOne(d => d.FecBdgaccountGroup)
                    .WithMany(p => p.Fecdistributions)
                    .HasForeignKey(d => d.FecBdgaccountGroupId)
                    .HasConstraintName("FK_FECDistribution_FEC_BDGAccountGroupID_BDGAccountGroup");

                entity.HasOne(d => d.FecBdgdepartment)
                    .WithMany(p => p.Fecdistributions)
                    .HasForeignKey(d => d.FecBdgdepartmentId)
                    .HasConstraintName("FK_FECDistribution_FEC_BDGDepartmentID_BDGDepartment");

                entity.HasOne(d => d.FecLrpten99BoxNo)
                    .WithMany(p => p.Fecdistributions)
                    .HasForeignKey(d => d.FecLrpten99BoxNoId)
                    .HasConstraintName("FK_FECDistribution_FEC_LRPTen99BoxNoID_LRPTen99BoxNo");

                entity.HasOne(d => d.FecLrpten99TaxType)
                    .WithMany(p => p.Fecdistributions)
                    .HasForeignKey(d => d.FecLrpten99TaxTypeId)
                    .HasConstraintName("FK_FECDistribution_FEC_LRPTen99TaxTypeID_LRPTen99TaxType");

                entity.HasOne(d => d.FecUserAccount)
                    .WithMany(p => p.Fecdistributions)
                    .HasForeignKey(d => d.FecUserAccountId)
                    .HasConstraintName("FK_FECDistribution_FEC_UserAccountID_UserAccount");

                entity.HasOne(d => d.FecbatchStatus)
                    .WithMany(p => p.Fecdistributions)
                    .HasForeignKey(d => d.FecbatchStatusId)
                    .HasConstraintName("FK_FECDistribution_FECBatchStatusID_FECBatchStatus");

                entity.HasOne(d => d.Feccandidate)
                    .WithMany(p => p.Fecdistributions)
                    .HasForeignKey(d => d.FeccandidateId)
                    .HasConstraintName("FK_FECDistribution_FECCandidateID_FECCandidate");

                entity.HasOne(d => d.Feccommittee)
                    .WithMany(p => p.Fecdistributions)
                    .HasForeignKey(d => d.FeccommitteeId)
                    .HasConstraintName("FK_FECDistribution_FECCommitteeID_FECCommittee");

                entity.HasOne(d => d.Feccompany)
                    .WithMany(p => p.Fecdistributions)
                    .HasForeignKey(d => d.FeccompanyId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_FECDistribution_FECCompanyID_FECCompany");

                entity.HasOne(d => d.FecdisbursementType)
                    .WithMany(p => p.Fecdistributions)
                    .HasForeignKey(d => d.FecdisbursementTypeId)
                    .HasConstraintName("FK_FECDistribution_FECDisbursementTypeID_FECDisbursementType");

                entity.HasOne(d => d.FecdistributionStatus)
                    .WithMany(p => p.Fecdistributions)
                    .HasForeignKey(d => d.FecdistributionStatusId)
                    .HasConstraintName("FK_FECDistribution_FECDistributionStatusID_FECDistributionStatus");

                entity.HasOne(d => d.FecdistributionType)
                    .WithMany(p => p.Fecdistributions)
                    .HasForeignKey(d => d.FecdistributionTypeId)
                    .HasConstraintName("FK_FECDistribution_FECDistributionTypeID_FECDistributionType");

                entity.HasOne(d => d.FecelectionOffice)
                    .WithMany(p => p.Fecdistributions)
                    .HasForeignKey(d => d.FecelectionOfficeId)
                    .HasConstraintName("FK_FECDistribution_FECElectionOfficeID_FECElectionOffice");

                entity.HasOne(d => d.FecelectionType)
                    .WithMany(p => p.Fecdistributions)
                    .HasForeignKey(d => d.FecelectionTypeId)
                    .HasConstraintName("FK_FECDistribution_FECElectionTypeID_FECElectionType");

                entity.HasOne(d => d.FecexpenseCategory)
                    .WithMany(p => p.Fecdistributions)
                    .HasForeignKey(d => d.FecexpenseCategoryId)
                    .HasConstraintName("FK_FECDistribution_FECExpenseCategoryID_FECExpenseCategory");

                entity.HasOne(d => d.Fecvendor)
                    .WithMany(p => p.Fecdistributions)
                    .HasForeignKey(d => d.FecvendorId)
                    .HasConstraintName("FK_FECDistribution_FECVendorID_FECVendor");

                entity.HasOne(d => d.MailingCountryState)
                    .WithMany(p => p.FecdistributionMailingCountryStates)
                    .HasForeignKey(d => d.MailingCountryStateId)
                    .HasConstraintName("FK_FECDistribution_Mailing_Country_StateID_Country_State");

                entity.HasOne(d => d.VendorCountryState)
                    .WithMany(p => p.FecdistributionVendorCountryStates)
                    .HasForeignKey(d => d.VendorCountryStateId)
                    .HasConstraintName("FK_FECDistribution_Vendor_Country_StateID_Country_State");
            });

            modelBuilder.Entity<FecdistributionDetail>(entity =>
            {
                entity.HasKey(e => e.ObjectUid);

                entity.ToTable("FECDistribution_Detail");

                entity.Property(e => e.ObjectUid)
                    .HasColumnName("ObjectUID")
                    .HasDefaultValueSql("(newid())");

                entity.Property(e => e.AccountNumber).HasMaxLength(50);

                entity.Property(e => e.CreatedBy).HasMaxLength(50);

                entity.Property(e => e.CreatedOn)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Description).HasMaxLength(2000);

                entity.Property(e => e.Display)
                    .HasMaxLength(20)
                    .HasComputedColumnSql("([VoucherNo])", false);

                entity.Property(e => e.ElectionCodeId).HasColumnName("ElectionCodeID");

                entity.Property(e => e.ElectionOtherDescription).HasMaxLength(2000);

                entity.Property(e => e.ExpenditureAmount).HasColumnType("money");

                entity.Property(e => e.ExpenditurePurpose).HasMaxLength(2000);

                entity.Property(e => e.FecBdgaccountGroupId).HasColumnName("FEC_BDGAccountGroupID");

                entity.Property(e => e.FecBdgaccountGroupSubGroupId).HasColumnName("FEC_BDGAccountGroup_SubGroupID");

                entity.Property(e => e.FecBdgaccountGroupSubGroupSubGroupId).HasColumnName("FEC_BDGAccountGroup_SubGroup_SubGroupID");

                entity.Property(e => e.FecBdgaccountGroupSubGroupSubGroupSubGroupId).HasColumnName("FEC_BDGAccountGroup_SubGroup_SubGroup_SubGroupID");

                entity.Property(e => e.FecBdgdepartmentId).HasColumnName("FEC_BDGDepartmentID");

                entity.Property(e => e.FecBdggltransactionId).HasColumnName("FEC_BDGGLTransactionID");

                entity.Property(e => e.FecLrpcodeId).HasColumnName("FEC_LRPCodeID");

                entity.Property(e => e.FecdistributionId).HasColumnName("FECDistributionID");

                entity.Property(e => e.FecelectionTypeId).HasColumnName("FECElectionTypeID");

                entity.Property(e => e.FecexpenseCategoryId).HasColumnName("FECExpenseCategoryID");

                entity.Property(e => e.ImportedObjectUid)
                    .HasMaxLength(50)
                    .HasColumnName("ImportedObjectUID");

                entity.Property(e => e.InstallationUid).HasColumnName("InstallationUID");

                entity.Property(e => e.Name).HasMaxLength(50);

                entity.Property(e => e.NameAlias).HasMaxLength(50);

                entity.Property(e => e.OldRecordId).HasColumnName("OldRecordID");

                entity.Property(e => e.RecordId)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("RecordID");

                entity.Property(e => e.Segment10FeccompanyFecsegmentValueId).HasColumnName("Segment10_FECCompany_FECSegmentValueID");

                entity.Property(e => e.Segment1FeccompanyFecsegmentValueId).HasColumnName("Segment1_FECCompany_FECSegmentValueID");

                entity.Property(e => e.Segment2FeccompanyFecsegmentValueId).HasColumnName("Segment2_FECCompany_FECSegmentValueID");

                entity.Property(e => e.Segment3FeccompanyFecsegmentValueId).HasColumnName("Segment3_FECCompany_FECSegmentValueID");

                entity.Property(e => e.Segment4FeccompanyFecsegmentValueId).HasColumnName("Segment4_FECCompany_FECSegmentValueID");

                entity.Property(e => e.Segment5FeccompanyFecsegmentValueId).HasColumnName("Segment5_FECCompany_FECSegmentValueID");

                entity.Property(e => e.Segment6FeccompanyFecsegmentValueId).HasColumnName("Segment6_FECCompany_FECSegmentValueID");

                entity.Property(e => e.Segment7FeccompanyFecsegmentValueId).HasColumnName("Segment7_FECCompany_FECSegmentValueID");

                entity.Property(e => e.Segment8FeccompanyFecsegmentValueId).HasColumnName("Segment8_FECCompany_FECSegmentValueID");

                entity.Property(e => e.Segment9FeccompanyFecsegmentValueId).HasColumnName("Segment9_FECCompany_FECSegmentValueID");

                entity.Property(e => e.SortOrder).HasDefaultValueSql("((100))");

                entity.Property(e => e.UpdatedBy).HasMaxLength(50);

                entity.Property(e => e.UpdatedOn).HasColumnType("datetime");

                entity.Property(e => e.VoucherNo).HasMaxLength(20);

                entity.HasOne(d => d.FecBdgaccountGroup)
                    .WithMany(p => p.FecdistributionDetails)
                    .HasForeignKey(d => d.FecBdgaccountGroupId)
                    .HasConstraintName("FK_FECDistribution_Detail_FEC_BDGAccountGroupID_BDGAccountGroup");

                entity.HasOne(d => d.FecBdgaccountGroupSubGroup)
                    .WithMany(p => p.FecdistributionDetails)
                    .HasForeignKey(d => d.FecBdgaccountGroupSubGroupId)
                    .HasConstraintName("FK_FECDistribution_Detail_FEC_BDGAccountGroup_SubGroupID_BDGAccountGroup_SubGroup");

                entity.HasOne(d => d.FecBdgaccountGroupSubGroupSubGroup)
                    .WithMany(p => p.FecdistributionDetails)
                    .HasForeignKey(d => d.FecBdgaccountGroupSubGroupSubGroupId)
                    .HasConstraintName("FK_FECDistribution_Detail_FEC_BDGAccountGroup_SubGroup_SubGroupID_BDGAccountGroup_SubGroup_SubGroup");

                entity.HasOne(d => d.FecBdgaccountGroupSubGroupSubGroupSubGroup)
                    .WithMany(p => p.FecdistributionDetails)
                    .HasForeignKey(d => d.FecBdgaccountGroupSubGroupSubGroupSubGroupId)
                    .HasConstraintName("FK_FECDistribution_Detail_FEC_BDGAccountGroup_SubGroup_SubGroup_SubGroupID_BDGAccountGroup_SubGroup_SubGroup_SubGroup");

                entity.HasOne(d => d.FecBdgdepartment)
                    .WithMany(p => p.FecdistributionDetails)
                    .HasForeignKey(d => d.FecBdgdepartmentId)
                    .HasConstraintName("FK_FECDistribution_Detail_FEC_BDGDepartmentID_BDGDepartment");

                entity.HasOne(d => d.FecBdggltransaction)
                    .WithMany(p => p.FecdistributionDetails)
                    .HasForeignKey(d => d.FecBdggltransactionId)
                    .HasConstraintName("FK_FECDistribution_Detail_FEC_BDGGLTransactionID_BDGGLTransaction");

                entity.HasOne(d => d.FecLrpcode)
                    .WithMany(p => p.FecdistributionDetails)
                    .HasForeignKey(d => d.FecLrpcodeId)
                    .HasConstraintName("FK_FECDistribution_Detail_FEC_LRPCodeID_LRPCode");

                entity.HasOne(d => d.Fecdistribution)
                    .WithMany(p => p.FecdistributionDetails)
                    .HasForeignKey(d => d.FecdistributionId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_FECDistribution_Detail_FECDistributionID_FECDistribution");

                entity.HasOne(d => d.FecelectionType)
                    .WithMany(p => p.FecdistributionDetails)
                    .HasForeignKey(d => d.FecelectionTypeId)
                    .HasConstraintName("FK_FECDistribution_Detail_FECElectionTypeID_FECElectionType");

                entity.HasOne(d => d.FecexpenseCategory)
                    .WithMany(p => p.FecdistributionDetails)
                    .HasForeignKey(d => d.FecexpenseCategoryId)
                    .HasConstraintName("FK_FECDistribution_Detail_FECExpenseCategoryID_FECExpenseCategory");

                entity.HasOne(d => d.Segment10FeccompanyFecsegmentValue)
                    .WithMany(p => p.FecdistributionDetailSegment10FeccompanyFecsegmentValues)
                    .HasForeignKey(d => d.Segment10FeccompanyFecsegmentValueId)
                    .HasConstraintName("FK_FECDistribution_Detail_Segment10_FECCompany_FECSegmentValueID_FECCompany_FECSegmentValue");

                entity.HasOne(d => d.Segment1FeccompanyFecsegmentValue)
                    .WithMany(p => p.FecdistributionDetailSegment1FeccompanyFecsegmentValues)
                    .HasForeignKey(d => d.Segment1FeccompanyFecsegmentValueId)
                    .HasConstraintName("FK_FECDistribution_Detail_Segment1_FECCompany_FECSegmentValueID_FECCompany_FECSegmentValue");

                entity.HasOne(d => d.Segment2FeccompanyFecsegmentValue)
                    .WithMany(p => p.FecdistributionDetailSegment2FeccompanyFecsegmentValues)
                    .HasForeignKey(d => d.Segment2FeccompanyFecsegmentValueId)
                    .HasConstraintName("FK_FECDistribution_Detail_Segment2_FECCompany_FECSegmentValueID_FECCompany_FECSegmentValue");

                entity.HasOne(d => d.Segment3FeccompanyFecsegmentValue)
                    .WithMany(p => p.FecdistributionDetailSegment3FeccompanyFecsegmentValues)
                    .HasForeignKey(d => d.Segment3FeccompanyFecsegmentValueId)
                    .HasConstraintName("FK_FECDistribution_Detail_Segment3_FECCompany_FECSegmentValueID_FECCompany_FECSegmentValue");

                entity.HasOne(d => d.Segment4FeccompanyFecsegmentValue)
                    .WithMany(p => p.FecdistributionDetailSegment4FeccompanyFecsegmentValues)
                    .HasForeignKey(d => d.Segment4FeccompanyFecsegmentValueId)
                    .HasConstraintName("FK_FECDistribution_Detail_Segment4_FECCompany_FECSegmentValueID_FECCompany_FECSegmentValue");

                entity.HasOne(d => d.Segment5FeccompanyFecsegmentValue)
                    .WithMany(p => p.FecdistributionDetailSegment5FeccompanyFecsegmentValues)
                    .HasForeignKey(d => d.Segment5FeccompanyFecsegmentValueId)
                    .HasConstraintName("FK_FECDistribution_Detail_Segment5_FECCompany_FECSegmentValueID_FECCompany_FECSegmentValue");

                entity.HasOne(d => d.Segment6FeccompanyFecsegmentValue)
                    .WithMany(p => p.FecdistributionDetailSegment6FeccompanyFecsegmentValues)
                    .HasForeignKey(d => d.Segment6FeccompanyFecsegmentValueId)
                    .HasConstraintName("FK_FECDistribution_Detail_Segment6_FECCompany_FECSegmentValueID_FECCompany_FECSegmentValue");

                entity.HasOne(d => d.Segment7FeccompanyFecsegmentValue)
                    .WithMany(p => p.FecdistributionDetailSegment7FeccompanyFecsegmentValues)
                    .HasForeignKey(d => d.Segment7FeccompanyFecsegmentValueId)
                    .HasConstraintName("FK_FECDistribution_Detail_Segment7_FECCompany_FECSegmentValueID_FECCompany_FECSegmentValue");

                entity.HasOne(d => d.Segment8FeccompanyFecsegmentValue)
                    .WithMany(p => p.FecdistributionDetailSegment8FeccompanyFecsegmentValues)
                    .HasForeignKey(d => d.Segment8FeccompanyFecsegmentValueId)
                    .HasConstraintName("FK_FECDistribution_Detail_Segment8_FECCompany_FECSegmentValueID_FECCompany_FECSegmentValue");

                entity.HasOne(d => d.Segment9FeccompanyFecsegmentValue)
                    .WithMany(p => p.FecdistributionDetailSegment9FeccompanyFecsegmentValues)
                    .HasForeignKey(d => d.Segment9FeccompanyFecsegmentValueId)
                    .HasConstraintName("FK_FECDistribution_Detail_Segment9_FECCompany_FECSegmentValueID_FECCompany_FECSegmentValue");
            });

            modelBuilder.Entity<FecdistributionDetailGrid>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("FECDistribution_DetailGrid");

                entity.Property(e => e.AccountGroup).HasMaxLength(50);

                entity.Property(e => e.Department).HasMaxLength(50);

                entity.Property(e => e.ElectionOtherDescription).HasMaxLength(2000);

                entity.Property(e => e.ElectionType).HasMaxLength(50);

                entity.Property(e => e.ExpenditureAmount).HasColumnType("money");

                entity.Property(e => e.ExpenditurePurpose).HasMaxLength(2000);

                entity.Property(e => e.ExpenseCategory).HasMaxLength(50);

                entity.Property(e => e.FecdistributionId).HasColumnName("FECDistributionID");

                entity.Property(e => e.InvoiceNo).HasMaxLength(20);

                entity.Property(e => e.ObjectUid).HasColumnName("ObjectUID");

                entity.Property(e => e.SubGroup).HasMaxLength(50);

                entity.Property(e => e.SubSubGroup).HasMaxLength(50);

                entity.Property(e => e.SubSubSubGroup).HasMaxLength(50);
            });

            modelBuilder.Entity<FecdistributionGrid>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("FECDistributionGrid");

                entity.Property(e => e.AccountIdentifier).HasMaxLength(20);

                entity.Property(e => e.AmountToBePaid).HasColumnType("money");

                entity.Property(e => e.BatchNo).HasMaxLength(50);

                entity.Property(e => e.Candidate).HasMaxLength(50);

                entity.Property(e => e.CandidateOrCommitteeAddressI).HasMaxLength(100);

                entity.Property(e => e.CandidateOrCommitteeAddressIi)
                    .HasMaxLength(100)
                    .HasColumnName("CandidateOrCommitteeAddressII");

                entity.Property(e => e.CandidateOrCommitteeCity).HasMaxLength(20);

                entity.Property(e => e.CandidateOrCommitteeCountryState)
                    .HasMaxLength(50)
                    .HasColumnName("CandidateOrCommittee_Country_State");

                entity.Property(e => e.CandidateOrCommitteeEmail)
                    .HasMaxLength(50)
                    .HasColumnName("CandidateOrCommitteeEMail");

                entity.Property(e => e.CandidateOrCommitteeFax).HasMaxLength(20);

                entity.Property(e => e.CandidateOrCommitteePhone).HasMaxLength(20);

                entity.Property(e => e.CandidateOrCommitteePostalCode).HasMaxLength(20);

                entity.Property(e => e.CheckAmount).HasColumnType("money");

                entity.Property(e => e.CheckDate).HasColumnType("datetime");

                entity.Property(e => e.CheckNo).HasMaxLength(20);

                entity.Property(e => e.Committee).HasMaxLength(100);

                entity.Property(e => e.Company)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.ControlAmount).HasColumnType("money");

                entity.Property(e => e.DisbursementType).HasMaxLength(50);

                entity.Property(e => e.DistributionStatus).HasMaxLength(50);

                entity.Property(e => e.DistributionType).HasMaxLength(50);

                entity.Property(e => e.ElectionCountryState)
                    .HasMaxLength(50)
                    .HasColumnName("Election_Country_State");

                entity.Property(e => e.ElectionDistrict)
                    .HasMaxLength(5)
                    .HasColumnName("Election_District");

                entity.Property(e => e.ElectionOffice).HasMaxLength(50);

                entity.Property(e => e.ElectionOtherDescription).HasMaxLength(2000);

                entity.Property(e => e.ElectionOtherIdentification)
                    .HasMaxLength(20)
                    .HasColumnName("Election_OtherIdentification");

                entity.Property(e => e.ElectionType).HasMaxLength(50);

                entity.Property(e => e.ExpenseCategory).HasMaxLength(50);

                entity.Property(e => e.FecBdgdepartmentId).HasColumnName("FEC_BDGDepartmentID");

                entity.Property(e => e.FecUserAccountId).HasColumnName("FEC_UserAccountID");

                entity.Property(e => e.FeccompanyId).HasColumnName("FECCompanyID");

                entity.Property(e => e.Idno)
                    .HasMaxLength(50)
                    .HasColumnName("IDNo");

                entity.Property(e => e.InvoiceDate).HasColumnType("datetime");

                entity.Property(e => e.InvoiceNo).HasMaxLength(20);

                entity.Property(e => e.MailingAddressI).HasMaxLength(100);

                entity.Property(e => e.MailingAddressIi)
                    .HasMaxLength(100)
                    .HasColumnName("MailingAddressII");

                entity.Property(e => e.MailingCity).HasMaxLength(50);

                entity.Property(e => e.MailingCountryState)
                    .HasMaxLength(50)
                    .HasColumnName("Mailing_Country_State");

                entity.Property(e => e.MailingEmail)
                    .HasMaxLength(50)
                    .HasColumnName("MailingEMail");

                entity.Property(e => e.MailingFax).HasMaxLength(20);

                entity.Property(e => e.MailingPhone).HasMaxLength(20);

                entity.Property(e => e.MailingPostalCode).HasMaxLength(20);

                entity.Property(e => e.ObjectUid).HasColumnName("ObjectUID");

                entity.Property(e => e.PostingDate).HasColumnType("datetime");

                entity.Property(e => e.Vendor).HasMaxLength(100);

                entity.Property(e => e.VendorAddressI).HasMaxLength(100);

                entity.Property(e => e.VendorAddressIi)
                    .HasMaxLength(100)
                    .HasColumnName("VendorAddressII");

                entity.Property(e => e.VendorCity).HasMaxLength(50);

                entity.Property(e => e.VendorCountryState)
                    .HasMaxLength(50)
                    .HasColumnName("Vendor_Country_State");

                entity.Property(e => e.VendorEmail)
                    .HasMaxLength(50)
                    .HasColumnName("VendorEMail");

                entity.Property(e => e.VendorFax).HasMaxLength(20);

                entity.Property(e => e.VendorName).HasMaxLength(50);

                entity.Property(e => e.VendorPhone).HasMaxLength(20);

                entity.Property(e => e.VendorPostalCode).HasMaxLength(20);

                entity.Property(e => e.VoucherNo).HasMaxLength(20);
            });

            modelBuilder.Entity<FecdistributionLimit>(entity =>
            {
                entity.HasKey(e => e.ObjectUid);

                entity.ToTable("FECDistributionLimit");

                entity.Property(e => e.ObjectUid)
                    .HasColumnName("ObjectUID")
                    .HasDefaultValueSql("(newid())");

                entity.Property(e => e.Amount).HasColumnType("money");

                entity.Property(e => e.CreatedBy).HasMaxLength(50);

                entity.Property(e => e.CreatedOn)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Description).HasMaxLength(2000);

                entity.Property(e => e.Display)
                    .HasMaxLength(50)
                    .HasComputedColumnSql("([Name])", false);

                entity.Property(e => e.FecdistributionLimitTypeId).HasColumnName("FECDistributionLimitTypeID");

                entity.Property(e => e.ImportedObjectUid)
                    .HasMaxLength(50)
                    .HasColumnName("ImportedObjectUID");

                entity.Property(e => e.InstallationUid).HasColumnName("InstallationUID");

                entity.Property(e => e.Name).HasMaxLength(50);

                entity.Property(e => e.NameAlias).HasMaxLength(50);

                entity.Property(e => e.OldRecordId).HasColumnName("OldRecordID");

                entity.Property(e => e.RecordId)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("RecordID");

                entity.Property(e => e.SortOrder).HasDefaultValueSql("((100))");

                entity.Property(e => e.UpdatedBy).HasMaxLength(50);

                entity.Property(e => e.UpdatedOn).HasColumnType("datetime");

                entity.Property(e => e.Year)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.HasOne(d => d.FecdistributionLimitType)
                    .WithMany(p => p.FecdistributionLimits)
                    .HasForeignKey(d => d.FecdistributionLimitTypeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_FECDistributionLimit_FECDistributionLimitType");
            });

            modelBuilder.Entity<FecdistributionLimitGrid>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("FECDistributionLimitGrid");

                entity.Property(e => e.Amount).HasColumnType("money");

                entity.Property(e => e.DistributionLimitType)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.ObjectUid).HasColumnName("ObjectUID");

                entity.Property(e => e.Year)
                    .IsRequired()
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<FecdistributionLimitType>(entity =>
            {
                entity.HasKey(e => e.ObjectUid);

                entity.ToTable("FECDistributionLimitType");

                entity.Property(e => e.ObjectUid)
                    .HasColumnName("ObjectUID")
                    .HasDefaultValueSql("(newid())");

                entity.Property(e => e.CreatedBy).HasMaxLength(50);

                entity.Property(e => e.CreatedOn)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Description).HasMaxLength(2000);

                entity.Property(e => e.Display)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasComputedColumnSql("([Name])", false);

                entity.Property(e => e.ImportedObjectUid)
                    .HasMaxLength(50)
                    .HasColumnName("ImportedObjectUID");

                entity.Property(e => e.InstallationUid).HasColumnName("InstallationUID");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.NameAlias)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.OldRecordId).HasColumnName("OldRecordID");

                entity.Property(e => e.RecordId)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("RecordID");

                entity.Property(e => e.SortOrder).HasDefaultValueSql("((100))");

                entity.Property(e => e.UpdatedBy).HasMaxLength(50);

                entity.Property(e => e.UpdatedOn).HasColumnType("datetime");
            });

            modelBuilder.Entity<FecdistributionLimitTypeGrid>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("FECDistributionLimitTypeGrid");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.ObjectUid).HasColumnName("ObjectUID");
            });

            modelBuilder.Entity<FecdistributionStatus>(entity =>
            {
                entity.HasKey(e => e.ObjectUid);

                entity.ToTable("FECDistributionStatus");

                entity.Property(e => e.ObjectUid)
                    .HasColumnName("ObjectUID")
                    .HasDefaultValueSql("(newid())");

                entity.Property(e => e.CreatedBy).HasMaxLength(50);

                entity.Property(e => e.CreatedOn)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Description).HasMaxLength(2000);

                entity.Property(e => e.Display)
                    .IsRequired()
                    .HasMaxLength(54)
                    .HasComputedColumnSql("(([Name]+' ')+case when [IsInactive]<>(0) then '(I)' else '' end)", false);

                entity.Property(e => e.ImportedObjectUid)
                    .HasMaxLength(50)
                    .HasColumnName("ImportedObjectUID");

                entity.Property(e => e.InstallationUid).HasColumnName("InstallationUID");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.NameAlias)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.OldRecordId).HasColumnName("OldRecordID");

                entity.Property(e => e.RecordId)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("RecordID");

                entity.Property(e => e.SortOrder).HasDefaultValueSql("((100))");

                entity.Property(e => e.UpdatedBy).HasMaxLength(50);

                entity.Property(e => e.UpdatedOn).HasColumnType("datetime");
            });

            modelBuilder.Entity<FecdistributionStatusGrid>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("FECDistributionStatusGrid");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.ObjectUid).HasColumnName("ObjectUID");
            });

            modelBuilder.Entity<FecdistributionStatusStatus>(entity =>
            {
                entity.HasKey(e => e.ObjectUid);

                entity.ToTable("FECDistributionStatus_Status");

                entity.Property(e => e.ObjectUid)
                    .HasColumnName("ObjectUID")
                    .HasDefaultValueSql("(newid())");

                entity.Property(e => e.AllowedFecdistributionStatusId).HasColumnName("Allowed_FECDistributionStatusID");

                entity.Property(e => e.CreatedBy).HasMaxLength(50);

                entity.Property(e => e.CreatedOn)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Description).HasMaxLength(2000);

                entity.Property(e => e.Display).HasMaxLength(50);

                entity.Property(e => e.FecdistributionStatusId).HasColumnName("FECDistributionStatusID");

                entity.Property(e => e.ImportedObjectUid)
                    .HasMaxLength(50)
                    .HasColumnName("ImportedObjectUID");

                entity.Property(e => e.InstallationUid).HasColumnName("InstallationUID");

                entity.Property(e => e.Name).HasMaxLength(50);

                entity.Property(e => e.NameAlias).HasMaxLength(50);

                entity.Property(e => e.OldRecordId).HasColumnName("OldRecordID");

                entity.Property(e => e.RecordId)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("RecordID");

                entity.Property(e => e.SortOrder).HasDefaultValueSql("((100))");

                entity.Property(e => e.UpdatedBy).HasMaxLength(50);

                entity.Property(e => e.UpdatedOn).HasColumnType("datetime");

                entity.HasOne(d => d.AllowedFecdistributionStatus)
                    .WithMany(p => p.FecdistributionStatusStatusAllowedFecdistributionStatuses)
                    .HasForeignKey(d => d.AllowedFecdistributionStatusId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_FECDistributionStatus_Status_Allowed_FECDistributionStatusID_FECDistributionStatus");

                entity.HasOne(d => d.FecdistributionStatus)
                    .WithMany(p => p.FecdistributionStatusStatusFecdistributionStatuses)
                    .HasForeignKey(d => d.FecdistributionStatusId)
                    .HasConstraintName("FK_FECDistributionStatus_Status_FECDistributionStatus");
            });

            modelBuilder.Entity<FecdistributionStatusStatusGrid>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("FECDistributionStatus_StatusGrid");

                entity.Property(e => e.AllowedStatus)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.FecdistributionStatusId).HasColumnName("FECDistributionStatusID");

                entity.Property(e => e.ObjectUid).HasColumnName("ObjectUID");
            });

            modelBuilder.Entity<FecdistributionType>(entity =>
            {
                entity.HasKey(e => e.ObjectUid);

                entity.ToTable("FECDistributionType");

                entity.Property(e => e.ObjectUid)
                    .HasColumnName("ObjectUID")
                    .HasDefaultValueSql("(newid())");

                entity.Property(e => e.CreatedBy).HasMaxLength(50);

                entity.Property(e => e.CreatedOn)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Description).HasMaxLength(2000);

                entity.Property(e => e.Display)
                    .IsRequired()
                    .HasMaxLength(53)
                    .HasComputedColumnSql("([Name]+case when [IsInactive]<>(0) then '(I)' else '' end)", false);

                entity.Property(e => e.ImportedObjectUid)
                    .HasMaxLength(50)
                    .HasColumnName("ImportedObjectUID");

                entity.Property(e => e.InstallationUid).HasColumnName("InstallationUID");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.NameAlias)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.OldRecordId).HasColumnName("OldRecordID");

                entity.Property(e => e.RecordId)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("RecordID");

                entity.Property(e => e.SortOrder).HasDefaultValueSql("((100))");

                entity.Property(e => e.UpdatedBy).HasMaxLength(50);

                entity.Property(e => e.UpdatedOn).HasColumnType("datetime");
            });

            modelBuilder.Entity<FecdistributionTypeGrid>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("FECDistributionTypeGrid");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.ObjectUid).HasColumnName("ObjectUID");
            });

            modelBuilder.Entity<FecelectionOffice>(entity =>
            {
                entity.HasKey(e => e.ObjectUid);

                entity.ToTable("FECElectionOffice");

                entity.Property(e => e.ObjectUid)
                    .HasColumnName("ObjectUID")
                    .HasDefaultValueSql("(newid())");

                entity.Property(e => e.CreatedBy).HasMaxLength(50);

                entity.Property(e => e.CreatedOn)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Description).HasMaxLength(2000);

                entity.Property(e => e.Display)
                    .IsRequired()
                    .HasMaxLength(54)
                    .HasComputedColumnSql("(([Name]+' ')+case when [IsInactive]<>(0) then '(I)' else '' end)", false);

                entity.Property(e => e.ImportedObjectUid)
                    .HasMaxLength(50)
                    .HasColumnName("ImportedObjectUID");

                entity.Property(e => e.InstallationUid).HasColumnName("InstallationUID");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.NameAlias)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.OldRecordId).HasColumnName("OldRecordID");

                entity.Property(e => e.RecordId)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("RecordID");

                entity.Property(e => e.SortOrder).HasDefaultValueSql("((100))");

                entity.Property(e => e.UpdatedBy).HasMaxLength(50);

                entity.Property(e => e.UpdatedOn).HasColumnType("datetime");
            });

            modelBuilder.Entity<FecelectionOfficeGrid>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("FECElectionOfficeGrid");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.ObjectUid).HasColumnName("ObjectUID");
            });

            modelBuilder.Entity<FecelectionType>(entity =>
            {
                entity.HasKey(e => e.ObjectUid);

                entity.ToTable("FECElectionType");

                entity.Property(e => e.ObjectUid)
                    .HasColumnName("ObjectUID")
                    .HasDefaultValueSql("(newid())");

                entity.Property(e => e.CreatedBy).HasMaxLength(50);

                entity.Property(e => e.CreatedOn)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Description).HasMaxLength(2000);

                entity.Property(e => e.Display)
                    .IsRequired()
                    .HasMaxLength(54)
                    .HasComputedColumnSql("(([Name]+' ')+case when [IsInactive]<>(0) then '(I)' else '' end)", false);

                entity.Property(e => e.ImportedObjectUid)
                    .HasMaxLength(50)
                    .HasColumnName("ImportedObjectUID");

                entity.Property(e => e.InstallationUid).HasColumnName("InstallationUID");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.NameAlias)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.OldRecordId).HasColumnName("OldRecordID");

                entity.Property(e => e.RecordId)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("RecordID");

                entity.Property(e => e.SortOrder).HasDefaultValueSql("((100))");

                entity.Property(e => e.UpdatedBy).HasMaxLength(50);

                entity.Property(e => e.UpdatedOn).HasColumnType("datetime");
            });

            modelBuilder.Entity<FecelectionTypeGrid>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("FECElectionTypeGrid");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.ObjectUid).HasColumnName("ObjectUID");
            });

            modelBuilder.Entity<FecexpenseCategory>(entity =>
            {
                entity.HasKey(e => e.ObjectUid);

                entity.ToTable("FECExpenseCategory");

                entity.Property(e => e.ObjectUid)
                    .HasColumnName("ObjectUID")
                    .HasDefaultValueSql("(newid())");

                entity.Property(e => e.CreatedBy).HasMaxLength(50);

                entity.Property(e => e.CreatedOn)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Description).HasMaxLength(2000);

                entity.Property(e => e.Display)
                    .IsRequired()
                    .HasMaxLength(54)
                    .HasComputedColumnSql("(([Name]+' ')+case when [IsInactive]<>(0) then '(I)' else '' end)", false);

                entity.Property(e => e.FeccompanyId).HasColumnName("FECCompanyID");

                entity.Property(e => e.ImportedObjectUid)
                    .HasMaxLength(50)
                    .HasColumnName("ImportedObjectUID");

                entity.Property(e => e.InstallationUid).HasColumnName("InstallationUID");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.NameAlias)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.OldRecordId).HasColumnName("OldRecordID");

                entity.Property(e => e.RecordId)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("RecordID");

                entity.Property(e => e.Segment10FeccompanyFecsegmentValueId).HasColumnName("Segment10_FECCompany_FECSegmentValueID");

                entity.Property(e => e.Segment1FeccompanyFecsegmentValueId).HasColumnName("Segment1_FECCompany_FECSegmentValueID");

                entity.Property(e => e.Segment2FeccompanyFecsegmentValueId).HasColumnName("Segment2_FECCompany_FECSegmentValueID");

                entity.Property(e => e.Segment3FeccompanyFecsegmentValueId).HasColumnName("Segment3_FECCompany_FECSegmentValueID");

                entity.Property(e => e.Segment4FeccompanyFecsegmentValueId).HasColumnName("Segment4_FECCompany_FECSegmentValueID");

                entity.Property(e => e.Segment5FeccompanyFecsegmentValueId).HasColumnName("Segment5_FECCompany_FECSegmentValueID");

                entity.Property(e => e.Segment6FeccompanyFecsegmentValueId).HasColumnName("Segment6_FECCompany_FECSegmentValueID");

                entity.Property(e => e.Segment7FeccompanyFecsegmentValueId).HasColumnName("Segment7_FECCompany_FECSegmentValueID");

                entity.Property(e => e.Segment8FeccompanyFecsegmentValueId).HasColumnName("Segment8_FECCompany_FECSegmentValueID");

                entity.Property(e => e.Segment9FeccompanyFecsegmentValueId).HasColumnName("Segment9_FECCompany_FECSegmentValueID");

                entity.Property(e => e.SortOrder).HasDefaultValueSql("((100))");

                entity.Property(e => e.UpdatedBy).HasMaxLength(50);

                entity.Property(e => e.UpdatedOn).HasColumnType("datetime");

                entity.HasOne(d => d.Feccompany)
                    .WithMany(p => p.FecexpenseCategories)
                    .HasForeignKey(d => d.FeccompanyId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_FECExpenseCategory_FECCompanyID_FECCompany");

                entity.HasOne(d => d.Segment10FeccompanyFecsegmentValue)
                    .WithMany(p => p.FecexpenseCategorySegment10FeccompanyFecsegmentValues)
                    .HasForeignKey(d => d.Segment10FeccompanyFecsegmentValueId)
                    .HasConstraintName("FK_FECExpenseCategory_Segment10_FECCompany_FECSegmentValueID_FECCompany_FECSegmentValue");

                entity.HasOne(d => d.Segment1FeccompanyFecsegmentValue)
                    .WithMany(p => p.FecexpenseCategorySegment1FeccompanyFecsegmentValues)
                    .HasForeignKey(d => d.Segment1FeccompanyFecsegmentValueId)
                    .HasConstraintName("FK_FECExpenseCategory_Segment1_FECCompany_FECSegmentValueID_FECCompany_FECSegmentValue");

                entity.HasOne(d => d.Segment2FeccompanyFecsegmentValue)
                    .WithMany(p => p.FecexpenseCategorySegment2FeccompanyFecsegmentValues)
                    .HasForeignKey(d => d.Segment2FeccompanyFecsegmentValueId)
                    .HasConstraintName("FK_FECExpenseCategory_Segment2_FECCompany_FECSegmentValueID_FECCompany_FECSegmentValue");

                entity.HasOne(d => d.Segment3FeccompanyFecsegmentValue)
                    .WithMany(p => p.FecexpenseCategorySegment3FeccompanyFecsegmentValues)
                    .HasForeignKey(d => d.Segment3FeccompanyFecsegmentValueId)
                    .HasConstraintName("FK_FECExpenseCategory_Segment3_FECCompany_FECSegmentValueID_FECCompany_FECSegmentValue");

                entity.HasOne(d => d.Segment4FeccompanyFecsegmentValue)
                    .WithMany(p => p.FecexpenseCategorySegment4FeccompanyFecsegmentValues)
                    .HasForeignKey(d => d.Segment4FeccompanyFecsegmentValueId)
                    .HasConstraintName("FK_FECExpenseCategory_Segment4_FECCompany_FECSegmentValueID_FECCompany_FECSegmentValue");

                entity.HasOne(d => d.Segment5FeccompanyFecsegmentValue)
                    .WithMany(p => p.FecexpenseCategorySegment5FeccompanyFecsegmentValues)
                    .HasForeignKey(d => d.Segment5FeccompanyFecsegmentValueId)
                    .HasConstraintName("FK_FECExpenseCategory_Segment5_FECCompany_FECSegmentValueID_FECCompany_FECSegmentValue");

                entity.HasOne(d => d.Segment6FeccompanyFecsegmentValue)
                    .WithMany(p => p.FecexpenseCategorySegment6FeccompanyFecsegmentValues)
                    .HasForeignKey(d => d.Segment6FeccompanyFecsegmentValueId)
                    .HasConstraintName("FK_FECExpenseCategory_Segment6_FECCompany_FECSegmentValueID_FECCompany_FECSegmentValue");

                entity.HasOne(d => d.Segment7FeccompanyFecsegmentValue)
                    .WithMany(p => p.FecexpenseCategorySegment7FeccompanyFecsegmentValues)
                    .HasForeignKey(d => d.Segment7FeccompanyFecsegmentValueId)
                    .HasConstraintName("FK_FECExpenseCategory_Segment7_FECCompany_FECSegmentValueID_FECCompany_FECSegmentValue");

                entity.HasOne(d => d.Segment8FeccompanyFecsegmentValue)
                    .WithMany(p => p.FecexpenseCategorySegment8FeccompanyFecsegmentValues)
                    .HasForeignKey(d => d.Segment8FeccompanyFecsegmentValueId)
                    .HasConstraintName("FK_FECExpenseCategory_Segment8_FECCompany_FECSegmentValueID_FECCompany_FECSegmentValue");

                entity.HasOne(d => d.Segment9FeccompanyFecsegmentValue)
                    .WithMany(p => p.FecexpenseCategorySegment9FeccompanyFecsegmentValues)
                    .HasForeignKey(d => d.Segment9FeccompanyFecsegmentValueId)
                    .HasConstraintName("FK_FECExpenseCategory_Segment9_FECCompany_FECSegmentValueID_FECCompany_FECSegmentValue");
            });

            modelBuilder.Entity<FecexpenseCategoryFecsegmentValue>(entity =>
            {
                entity.HasKey(e => e.ObjectUid);

                entity.ToTable("FECExpenseCategory_FECSegmentValue");

                entity.Property(e => e.ObjectUid)
                    .HasColumnName("ObjectUID")
                    .HasDefaultValueSql("(newid())");

                entity.Property(e => e.CreatedBy).HasMaxLength(50);

                entity.Property(e => e.CreatedOn)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Description).HasMaxLength(2000);

                entity.Property(e => e.Display)
                    .HasMaxLength(50)
                    .HasComputedColumnSql("([Name])", false);

                entity.Property(e => e.FeccompanyFecsegmentId).HasColumnName("FECCompany_FECSegmentID");

                entity.Property(e => e.FeccompanyFecsegmentValueId).HasColumnName("FECCompany_FECSegmentValueID");

                entity.Property(e => e.FecexpenseCategoryId).HasColumnName("FECExpenseCategoryID");

                entity.Property(e => e.FecsegmentId).HasColumnName("FECSegmentID");

                entity.Property(e => e.ImportedObjectUid)
                    .HasMaxLength(50)
                    .HasColumnName("ImportedObjectUID");

                entity.Property(e => e.InstallationUid).HasColumnName("InstallationUID");

                entity.Property(e => e.Name).HasMaxLength(50);

                entity.Property(e => e.NameAlias).HasMaxLength(50);

                entity.Property(e => e.OldRecordId).HasColumnName("OldRecordID");

                entity.Property(e => e.RecordId)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("RecordID");

                entity.Property(e => e.SortOrder).HasDefaultValueSql("((100))");

                entity.Property(e => e.UpdatedBy).HasMaxLength(50);

                entity.Property(e => e.UpdatedOn).HasColumnType("datetime");

                entity.HasOne(d => d.FeccompanyFecsegment)
                    .WithMany(p => p.FecexpenseCategoryFecsegmentValues)
                    .HasForeignKey(d => d.FeccompanyFecsegmentId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_FECExpenseCategory_FECSegmentValue_FECCompany_FECSegmentID_FECCompany_FECSegment");

                entity.HasOne(d => d.FeccompanyFecsegmentValue)
                    .WithMany(p => p.FecexpenseCategoryFecsegmentValues)
                    .HasForeignKey(d => d.FeccompanyFecsegmentValueId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_FECExpenseCategory_FECSegmentValue_FECCompany_FECSegmentValueID_FECCompany_FECSegmentValue");

                entity.HasOne(d => d.FecexpenseCategory)
                    .WithMany(p => p.FecexpenseCategoryFecsegmentValues)
                    .HasForeignKey(d => d.FecexpenseCategoryId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_FECExpenseCategory_FECSegmentValue_FECExpenseCategoryID_FECExpenseCategory");

                entity.HasOne(d => d.Fecsegment)
                    .WithMany(p => p.FecexpenseCategoryFecsegmentValues)
                    .HasForeignKey(d => d.FecsegmentId)
                    .HasConstraintName("FK_FECExpenseCategory_FECSegmentValue_FECSegmentID_FECSegment");
            });

            modelBuilder.Entity<FecexpenseCategoryFecsegmentValueGrid>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("FECExpenseCategory_FECSegmentValueGrid");

                entity.Property(e => e.FeccompanyFecsegmentId).HasColumnName("FECCompany_FECSegmentID");

                entity.Property(e => e.FeccompanyFecsegmentValueId).HasColumnName("FECCompany_FECSegmentValueID");

                entity.Property(e => e.FecexpenseCategoryId).HasColumnName("FECExpenseCategoryID");

                entity.Property(e => e.FecsegmentId).HasColumnName("FECSegmentID");

                entity.Property(e => e.ObjectUid).HasColumnName("ObjectUID");

                entity.Property(e => e.Segment)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Value)
                    .IsRequired()
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<FecexpenseCategoryGrid>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("FECExpenseCategoryGrid");

                entity.Property(e => e.Company)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.FeccompanyId).HasColumnName("FECCompanyID");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.ObjectUid).HasColumnName("ObjectUID");
            });

            modelBuilder.Entity<FecfilingFrequency>(entity =>
            {
                entity.HasKey(e => e.ObjectUid);

                entity.ToTable("FECFilingFrequency");

                entity.Property(e => e.ObjectUid)
                    .HasColumnName("ObjectUID")
                    .HasDefaultValueSql("(newid())");

                entity.Property(e => e.CreatedBy).HasMaxLength(50);

                entity.Property(e => e.CreatedOn)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Description).HasMaxLength(2000);

                entity.Property(e => e.Display)
                    .IsRequired()
                    .HasMaxLength(54)
                    .HasComputedColumnSql("(([Name]+' ')+case when [IsInactive]<>(0) then '(I)' else '' end)", false);

                entity.Property(e => e.FeccompanyId).HasColumnName("FECCompanyID");

                entity.Property(e => e.ImportedObjectUid)
                    .HasMaxLength(50)
                    .HasColumnName("ImportedObjectUID");

                entity.Property(e => e.InstallationUid).HasColumnName("InstallationUID");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.NameAlias)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.OldRecordId).HasColumnName("OldRecordID");

                entity.Property(e => e.RecordId)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("RecordID");

                entity.Property(e => e.SortOrder).HasDefaultValueSql("((100))");

                entity.Property(e => e.UpdatedBy).HasMaxLength(50);

                entity.Property(e => e.UpdatedOn).HasColumnType("datetime");

                entity.HasOne(d => d.Feccompany)
                    .WithMany(p => p.FecfilingFrequencies)
                    .HasForeignKey(d => d.FeccompanyId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_FECFilingFrequency_FECCompanyID_FECCompany");
            });

            modelBuilder.Entity<FecfilingFrequencyGrid>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("FECFilingFrequencyGrid");

                entity.Property(e => e.Company)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.FeccompanyId).HasColumnName("FECCompanyID");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.ObjectUid).HasColumnName("ObjectUID");
            });

            modelBuilder.Entity<FecinterestGroupCategory>(entity =>
            {
                entity.HasKey(e => e.ObjectUid);

                entity.ToTable("FECInterestGroupCategory");

                entity.Property(e => e.ObjectUid)
                    .HasColumnName("ObjectUID")
                    .HasDefaultValueSql("(newid())");

                entity.Property(e => e.CreatedBy).HasMaxLength(50);

                entity.Property(e => e.CreatedOn)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Description).HasMaxLength(2000);

                entity.Property(e => e.Display)
                    .IsRequired()
                    .HasMaxLength(54)
                    .HasComputedColumnSql("(([Name]+' ')+case when [IsInactive]<>(0) then '(I)' else '' end)", false);

                entity.Property(e => e.FeccompanyId).HasColumnName("FECCompanyID");

                entity.Property(e => e.ImportedObjectUid)
                    .HasMaxLength(50)
                    .HasColumnName("ImportedObjectUID");

                entity.Property(e => e.InstallationUid).HasColumnName("InstallationUID");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.NameAlias)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.OldRecordId).HasColumnName("OldRecordID");

                entity.Property(e => e.RecordId)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("RecordID");

                entity.Property(e => e.SortOrder).HasDefaultValueSql("((100))");

                entity.Property(e => e.UpdatedBy).HasMaxLength(50);

                entity.Property(e => e.UpdatedOn).HasColumnType("datetime");

                entity.HasOne(d => d.Feccompany)
                    .WithMany(p => p.FecinterestGroupCategories)
                    .HasForeignKey(d => d.FeccompanyId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_FECInterestGroupCategory_FECCompanyID_FECCompany");
            });

            modelBuilder.Entity<FecinterestGroupCategoryGrid>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("FECInterestGroupCategoryGrid");

                entity.Property(e => e.Company)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.FeccompanyId).HasColumnName("FECCompanyID");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.ObjectUid).HasColumnName("ObjectUID");
            });

            modelBuilder.Entity<FeclocalUnion>(entity =>
            {
                entity.HasKey(e => e.ObjectUid);

                entity.ToTable("FECLocalUnion");

                entity.Property(e => e.ObjectUid)
                    .HasColumnName("ObjectUID")
                    .HasDefaultValueSql("(newid())");

                entity.Property(e => e.AddressLineI).HasMaxLength(100);

                entity.Property(e => e.AddressLineIi)
                    .HasMaxLength(100)
                    .HasColumnName("AddressLineII");

                entity.Property(e => e.City).HasMaxLength(50);

                entity.Property(e => e.CountryStateId).HasColumnName("Country_StateID");

                entity.Property(e => e.CreatedBy).HasMaxLength(50);

                entity.Property(e => e.CreatedOn)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Description).HasMaxLength(2000);

                entity.Property(e => e.Display)
                    .HasMaxLength(65)
                    .HasComputedColumnSql("((([number]+'-')+([Name]+' '))+case when [IsInactive]<>(0) then '(I)' else '' end)", false);

                entity.Property(e => e.FeccompanyId).HasColumnName("FECCompanyID");

                entity.Property(e => e.ImportedObjectUid)
                    .HasMaxLength(50)
                    .HasColumnName("ImportedObjectUID");

                entity.Property(e => e.InstallationUid).HasColumnName("InstallationUID");

                entity.Property(e => e.Name).HasMaxLength(50);

                entity.Property(e => e.NameAlias).HasMaxLength(50);

                entity.Property(e => e.Number)
                    .IsRequired()
                    .HasMaxLength(10);

                entity.Property(e => e.OldRecordId).HasColumnName("OldRecordID");

                entity.Property(e => e.PostalCode).HasMaxLength(20);

                entity.Property(e => e.RecordId)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("RecordID");

                entity.Property(e => e.SortOrder).HasDefaultValueSql("((100))");

                entity.Property(e => e.UpdatedBy).HasMaxLength(50);

                entity.Property(e => e.UpdatedOn).HasColumnType("datetime");

                entity.HasOne(d => d.CountryState)
                    .WithMany(p => p.FeclocalUnions)
                    .HasForeignKey(d => d.CountryStateId)
                    .HasConstraintName("FK_FECLocalUnion_Country_StateID_Country_State");

                entity.HasOne(d => d.Feccompany)
                    .WithMany(p => p.FeclocalUnions)
                    .HasForeignKey(d => d.FeccompanyId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_FECLocalUnion_FECCompanyID_FECCompany");
            });

            modelBuilder.Entity<FeclocalUnionGrid>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("FECLocalUnionGrid");

                entity.Property(e => e.AddressLineI).HasMaxLength(100);

                entity.Property(e => e.AddressLineIi)
                    .HasMaxLength(100)
                    .HasColumnName("AddressLineII");

                entity.Property(e => e.City).HasMaxLength(50);

                entity.Property(e => e.Company)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Description).HasMaxLength(2000);

                entity.Property(e => e.FeccompanyId).HasColumnName("FECCompanyID");

                entity.Property(e => e.Name).HasMaxLength(50);

                entity.Property(e => e.Number)
                    .IsRequired()
                    .HasMaxLength(10);

                entity.Property(e => e.ObjectUid).HasColumnName("ObjectUID");

                entity.Property(e => e.PostalCode).HasMaxLength(20);

                entity.Property(e => e.State).HasMaxLength(50);
            });

            modelBuilder.Entity<Fecmember>(entity =>
            {
                entity.HasKey(e => e.ObjectUid);

                entity.ToTable("FECMember");

                entity.Property(e => e.ObjectUid)
                    .HasColumnName("ObjectUID")
                    .HasDefaultValueSql("(newid())");

                entity.Property(e => e.AddressLineI).HasMaxLength(100);

                entity.Property(e => e.AddressLineIi)
                    .HasMaxLength(100)
                    .HasColumnName("AddressLineII");

                entity.Property(e => e.City).HasMaxLength(50);

                entity.Property(e => e.CountryStateId).HasColumnName("Country_StateID");

                entity.Property(e => e.CreatedBy).HasMaxLength(50);

                entity.Property(e => e.CreatedOn)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Description).HasMaxLength(2000);

                entity.Property(e => e.Display)
                    .HasMaxLength(125)
                    .HasComputedColumnSql("(coalesce(((([MemberCode]+' - ')+[LastName])+', ')+[FirstName],([LastName]+', ')+[FirstName]))", false);

                entity.Property(e => e.EmailPrimary).HasMaxLength(50);

                entity.Property(e => e.Employer).HasMaxLength(50);

                entity.Property(e => e.FeccompanyId).HasColumnName("FECCompanyID");

                entity.Property(e => e.FeclocalUnionId).HasColumnName("FECLocalUnionID");

                entity.Property(e => e.FecpaymentFrequencyId).HasColumnName("FECPaymentFrequencyID");

                entity.Property(e => e.FirstName)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.ImportedObjectUid)
                    .HasMaxLength(50)
                    .HasColumnName("ImportedObjectUID");

                entity.Property(e => e.InstallationUid).HasColumnName("InstallationUID");

                entity.Property(e => e.JobTitle).HasMaxLength(50);

                entity.Property(e => e.LastName)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.MemberCode).HasMaxLength(20);

                entity.Property(e => e.MiddleName).HasMaxLength(2);

                entity.Property(e => e.Name).HasMaxLength(50);

                entity.Property(e => e.NameAlias).HasMaxLength(50);

                entity.Property(e => e.OldRecordId).HasColumnName("OldRecordID");

                entity.Property(e => e.PaymentAmount).HasColumnType("money");

                entity.Property(e => e.PhoneHome).HasMaxLength(50);

                entity.Property(e => e.PostalCode).HasMaxLength(20);

                entity.Property(e => e.Prefix).HasMaxLength(50);

                entity.Property(e => e.RecordId)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("RecordID");

                entity.Property(e => e.SortOrder).HasDefaultValueSql("((100))");

                entity.Property(e => e.UpdatedBy).HasMaxLength(50);

                entity.Property(e => e.UpdatedOn).HasColumnType("datetime");

                entity.HasOne(d => d.CountryState)
                    .WithMany(p => p.Fecmembers)
                    .HasForeignKey(d => d.CountryStateId)
                    .HasConstraintName("FK_FECMember_Country_StateID_Country_State");

                entity.HasOne(d => d.Feccompany)
                    .WithMany(p => p.Fecmembers)
                    .HasForeignKey(d => d.FeccompanyId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_FECMember_FECCompanyID_FECCompany");

                entity.HasOne(d => d.FeclocalUnion)
                    .WithMany(p => p.Fecmembers)
                    .HasForeignKey(d => d.FeclocalUnionId)
                    .HasConstraintName("FK_FECMember_FECLocalUnionID_FECLocalUnion");

                entity.HasOne(d => d.FecpaymentFrequency)
                    .WithMany(p => p.Fecmembers)
                    .HasForeignKey(d => d.FecpaymentFrequencyId)
                    .HasConstraintName("FK_FECMember_FECPaymentFrequencyID_FECPaymentFrequency");
            });

            modelBuilder.Entity<FecmemberGrid>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("FECMemberGrid");

                entity.Property(e => e.AddressLineI).HasMaxLength(100);

                entity.Property(e => e.AddressLineIi)
                    .HasMaxLength(100)
                    .HasColumnName("AddressLineII");

                entity.Property(e => e.City).HasMaxLength(50);

                entity.Property(e => e.Company)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.EmailPrimary).HasMaxLength(50);

                entity.Property(e => e.Employer).HasMaxLength(50);

                entity.Property(e => e.FeccompanyId).HasColumnName("FECCompanyID");

                entity.Property(e => e.FirstName)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.JobTitle).HasMaxLength(50);

                entity.Property(e => e.LastName)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.LocalUnion).HasMaxLength(10);

                entity.Property(e => e.MemberCode).HasMaxLength(20);

                entity.Property(e => e.MiddleName).HasMaxLength(2);

                entity.Property(e => e.Name).HasMaxLength(125);

                entity.Property(e => e.ObjectUid).HasColumnName("ObjectUID");

                entity.Property(e => e.PhoneHome).HasMaxLength(50);

                entity.Property(e => e.PostalCode).HasMaxLength(20);

                entity.Property(e => e.Prefix).HasMaxLength(50);

                entity.Property(e => e.State).HasMaxLength(50);
            });

            modelBuilder.Entity<FecmemeberMissing>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("fecmemeber_missing");

                entity.Property(e => e.AddressLineI).HasMaxLength(100);

                entity.Property(e => e.AddressLineIi)
                    .HasMaxLength(100)
                    .HasColumnName("AddressLineII");

                entity.Property(e => e.City).HasMaxLength(50);

                entity.Property(e => e.CountryStateId).HasColumnName("Country_StateID");

                entity.Property(e => e.CreatedBy).HasMaxLength(50);

                entity.Property(e => e.CreatedOn).HasColumnType("datetime");

                entity.Property(e => e.Description).HasMaxLength(2000);

                entity.Property(e => e.Display).HasMaxLength(125);

                entity.Property(e => e.Distname)
                    .HasMaxLength(50)
                    .HasColumnName("distname");

                entity.Property(e => e.EmailPrimary).HasMaxLength(50);

                entity.Property(e => e.Employer).HasMaxLength(50);

                entity.Property(e => e.FeccompanyId).HasColumnName("FECCompanyID");

                entity.Property(e => e.FeclocalUnionId).HasColumnName("FECLocalUnionID");

                entity.Property(e => e.FecpaymentFrequencyId).HasColumnName("FECPaymentFrequencyID");

                entity.Property(e => e.FirstName)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.ImportedObjectUid)
                    .HasMaxLength(50)
                    .HasColumnName("ImportedObjectUID");

                entity.Property(e => e.InstallationUid).HasColumnName("InstallationUID");

                entity.Property(e => e.JobTitle).HasMaxLength(50);

                entity.Property(e => e.LastName)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.MemberCode).HasMaxLength(20);

                entity.Property(e => e.MiddleName).HasMaxLength(2);

                entity.Property(e => e.Name).HasMaxLength(50);

                entity.Property(e => e.NameAlias).HasMaxLength(50);

                entity.Property(e => e.Number)
                    .IsRequired()
                    .HasMaxLength(10);

                entity.Property(e => e.ObjectUid).HasColumnName("ObjectUID");

                entity.Property(e => e.OldRecordId).HasColumnName("OldRecordID");

                entity.Property(e => e.PaymentAmount).HasColumnType("money");

                entity.Property(e => e.PhoneHome).HasMaxLength(50);

                entity.Property(e => e.PostalCode).HasMaxLength(20);

                entity.Property(e => e.Prefix).HasMaxLength(50);

                entity.Property(e => e.RecordId).HasColumnName("RecordID");

                entity.Property(e => e.UpdatedBy).HasMaxLength(50);

                entity.Property(e => e.UpdatedOn).HasColumnType("datetime");
            });

            modelBuilder.Entity<FecpaymentFrequency>(entity =>
            {
                entity.HasKey(e => e.ObjectUid);

                entity.ToTable("FECPaymentFrequency");

                entity.Property(e => e.ObjectUid)
                    .HasColumnName("ObjectUID")
                    .HasDefaultValueSql("(newid())");

                entity.Property(e => e.CreatedBy).HasMaxLength(50);

                entity.Property(e => e.CreatedOn)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Description).HasMaxLength(2000);

                entity.Property(e => e.Display)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasComputedColumnSql("([Name])", false);

                entity.Property(e => e.ImportedObjectUid)
                    .HasMaxLength(50)
                    .HasColumnName("ImportedObjectUID");

                entity.Property(e => e.InstallationUid).HasColumnName("InstallationUID");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.NameAlias)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.OldRecordId).HasColumnName("OldRecordID");

                entity.Property(e => e.RecordId)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("RecordID");

                entity.Property(e => e.SortOrder).HasDefaultValueSql("((100))");

                entity.Property(e => e.UpdatedBy).HasMaxLength(50);

                entity.Property(e => e.UpdatedOn).HasColumnType("datetime");
            });

            modelBuilder.Entity<FecpaymentFrequencyGrid>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("FECPaymentFrequencyGrid");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.ObjectUid).HasColumnName("ObjectUID");
            });

            modelBuilder.Entity<Fecreport>(entity =>
            {
                entity.HasKey(e => e.ObjectUid);

                entity.ToTable("FECReport");

                entity.Property(e => e.ObjectUid)
                    .HasColumnName("ObjectUID")
                    .HasDefaultValueSql("(newid())");

                entity.Property(e => e.CreatedBy).HasMaxLength(50);

                entity.Property(e => e.CreatedOn)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Dbname)
                    .HasMaxLength(50)
                    .HasColumnName("DBName");

                entity.Property(e => e.Description).HasMaxLength(2000);

                entity.Property(e => e.Display)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasComputedColumnSql("([NameAlias])", false);

                entity.Property(e => e.FeccompanyId).HasColumnName("FECCompanyID");

                entity.Property(e => e.ImportedObjectUid)
                    .HasMaxLength(50)
                    .HasColumnName("ImportedObjectUID");

                entity.Property(e => e.InstallationUid).HasColumnName("InstallationUID");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.NameAlias)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.OldRecordId).HasColumnName("OldRecordID");

                entity.Property(e => e.Password).HasMaxLength(50);

                entity.Property(e => e.RecordId)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("RecordID");

                entity.Property(e => e.ReportFile)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.ServerName).HasMaxLength(50);

                entity.Property(e => e.SortOrder).HasDefaultValueSql("((100))");

                entity.Property(e => e.UpdatedBy).HasMaxLength(50);

                entity.Property(e => e.UpdatedOn).HasColumnType("datetime");

                entity.Property(e => e.Username).HasMaxLength(50);

                entity.HasOne(d => d.Feccompany)
                    .WithMany(p => p.Fecreports)
                    .HasForeignKey(d => d.FeccompanyId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_FECReport_FECCompanyID_FECCompany");
            });

            modelBuilder.Entity<FecreportGrid>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("FECReportGrid");

                entity.Property(e => e.Dbname)
                    .HasMaxLength(50)
                    .HasColumnName("DBName");

                entity.Property(e => e.Feccompany)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnName("FECCompany");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.ObjectUid).HasColumnName("ObjectUID");

                entity.Property(e => e.Password).HasMaxLength(50);

                entity.Property(e => e.ReportFile)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.ServerName).HasMaxLength(50);

                entity.Property(e => e.Username).HasMaxLength(50);
            });

            modelBuilder.Entity<Fecsegment>(entity =>
            {
                entity.HasKey(e => e.ObjectUid);

                entity.ToTable("FECSegment");

                entity.Property(e => e.ObjectUid)
                    .HasColumnName("ObjectUID")
                    .HasDefaultValueSql("(newid())");

                entity.Property(e => e.CreatedBy).HasMaxLength(50);

                entity.Property(e => e.CreatedOn)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Description).HasMaxLength(2000);

                entity.Property(e => e.Display)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasComputedColumnSql("([Name])", false);

                entity.Property(e => e.ImportedObjectUid)
                    .HasMaxLength(50)
                    .HasColumnName("ImportedObjectUID");

                entity.Property(e => e.InstallationUid).HasColumnName("InstallationUID");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.NameAlias)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.OldRecordId).HasColumnName("OldRecordID");

                entity.Property(e => e.RecordId)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("RecordID");

                entity.Property(e => e.SortOrder).HasDefaultValueSql("((100))");

                entity.Property(e => e.UpdatedBy).HasMaxLength(50);

                entity.Property(e => e.UpdatedOn).HasColumnType("datetime");
            });

            modelBuilder.Entity<FecsegmentGrid>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("FECSegmentGrid");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.ObjectUid).HasColumnName("ObjectUID");
            });

            modelBuilder.Entity<Fecvendor>(entity =>
            {
                entity.HasKey(e => e.ObjectUid);

                entity.ToTable("FECVendor");

                entity.Property(e => e.ObjectUid)
                    .HasColumnName("ObjectUID")
                    .HasDefaultValueSql("(newid())");

                entity.Property(e => e.AddressLineI).HasMaxLength(100);

                entity.Property(e => e.AddressLineIi)
                    .HasMaxLength(100)
                    .HasColumnName("AddressLineII");

                entity.Property(e => e.City).HasMaxLength(50);

                entity.Property(e => e.ContactName).HasMaxLength(100);

                entity.Property(e => e.CountryId).HasColumnName("CountryID");

                entity.Property(e => e.CountryStateId).HasColumnName("Country_StateID");

                entity.Property(e => e.CreatedBy).HasMaxLength(50);

                entity.Property(e => e.CreatedOn)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Description).HasMaxLength(2000);

                entity.Property(e => e.Display)
                    .IsRequired()
                    .HasMaxLength(100)
                    .HasComputedColumnSql("([Name])", false);

                entity.Property(e => e.Email)
                    .HasMaxLength(50)
                    .HasColumnName("EMail");

                entity.Property(e => e.Fax).HasMaxLength(20);

                entity.Property(e => e.FecLrpten99BoxNoId).HasColumnName("FEC_LRPTen99BoxNoID");

                entity.Property(e => e.FecLrpten99TaxTypeId).HasColumnName("FEC_LRPTen99TaxTypeID");

                entity.Property(e => e.FeccompanyId).HasColumnName("FECCompanyID");

                entity.Property(e => e.FecvendorSourceId).HasColumnName("FECVendorSourceID");

                entity.Property(e => e.ImportedObjectUid)
                    .HasMaxLength(50)
                    .HasColumnName("ImportedObjectUID");

                entity.Property(e => e.InstallationUid).HasColumnName("InstallationUID");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.NameAlias)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.OldRecordId).HasColumnName("OldRecordID");

                entity.Property(e => e.Phone).HasMaxLength(50);

                entity.Property(e => e.PostalCode).HasMaxLength(20);

                entity.Property(e => e.RecordId)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("RecordID");

                entity.Property(e => e.SortOrder).HasDefaultValueSql("((100))");

                entity.Property(e => e.TaxId)
                    .HasMaxLength(50)
                    .HasColumnName("TaxID");

                entity.Property(e => e.UpdatedBy).HasMaxLength(50);

                entity.Property(e => e.UpdatedOn).HasColumnType("datetime");

                entity.Property(e => e.VendorIdentification).HasMaxLength(20);

                entity.HasOne(d => d.Country)
                    .WithMany(p => p.Fecvendors)
                    .HasForeignKey(d => d.CountryId)
                    .HasConstraintName("FK_FECVendor_Country");

                entity.HasOne(d => d.CountryState)
                    .WithMany(p => p.Fecvendors)
                    .HasForeignKey(d => d.CountryStateId)
                    .HasConstraintName("FK_FECVendor_Country_StateID_Country_State");

                entity.HasOne(d => d.FecLrpten99BoxNo)
                    .WithMany(p => p.Fecvendors)
                    .HasForeignKey(d => d.FecLrpten99BoxNoId)
                    .HasConstraintName("FK_FECVendor_FEC_LRPTen99BoxNoID_LRPTen99BoxNo");

                entity.HasOne(d => d.FecLrpten99TaxType)
                    .WithMany(p => p.Fecvendors)
                    .HasForeignKey(d => d.FecLrpten99TaxTypeId)
                    .HasConstraintName("FK_FECVendor_FEC_LRPTen99TaxTypeID_LRPTen99TaxType");

                entity.HasOne(d => d.Feccompany)
                    .WithMany(p => p.Fecvendors)
                    .HasForeignKey(d => d.FeccompanyId)
                    .HasConstraintName("FK_FECVendor_FECCompany");

                entity.HasOne(d => d.FecvendorSource)
                    .WithMany(p => p.Fecvendors)
                    .HasForeignKey(d => d.FecvendorSourceId)
                    .HasConstraintName("FK_FECVendor_FECVendorSourceID_FECVendorSource");
            });

            modelBuilder.Entity<FecvendorDistributionGrid>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("FECVendorDistributionGrid");

                entity.Property(e => e.AccountIdentifier).HasMaxLength(20);

                entity.Property(e => e.AmountToBePaid).HasColumnType("money");

                entity.Property(e => e.BatchNo).HasMaxLength(50);

                entity.Property(e => e.Candidate).HasMaxLength(50);

                entity.Property(e => e.CandidateOrCommitteeAddressI).HasMaxLength(100);

                entity.Property(e => e.CandidateOrCommitteeAddressIi)
                    .HasMaxLength(100)
                    .HasColumnName("CandidateOrCommitteeAddressII");

                entity.Property(e => e.CandidateOrCommitteeCity).HasMaxLength(20);

                entity.Property(e => e.CandidateOrCommitteeCountryState)
                    .HasMaxLength(50)
                    .HasColumnName("CandidateOrCommittee_Country_State");

                entity.Property(e => e.CandidateOrCommitteeEmail)
                    .HasMaxLength(50)
                    .HasColumnName("CandidateOrCommitteeEMail");

                entity.Property(e => e.CandidateOrCommitteeFax).HasMaxLength(20);

                entity.Property(e => e.CandidateOrCommitteePhone).HasMaxLength(20);

                entity.Property(e => e.CandidateOrCommitteePostalCode).HasMaxLength(20);

                entity.Property(e => e.CheckAmount).HasColumnType("money");

                entity.Property(e => e.CheckDate).HasColumnType("datetime");

                entity.Property(e => e.CheckNo).HasMaxLength(20);

                entity.Property(e => e.Committee).HasMaxLength(100);

                entity.Property(e => e.Company)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.ControlAmount).HasColumnType("money");

                entity.Property(e => e.DisbursementType).HasMaxLength(50);

                entity.Property(e => e.DistributionStatus).HasMaxLength(50);

                entity.Property(e => e.DistributionType).HasMaxLength(50);

                entity.Property(e => e.ElectionCountryState)
                    .HasMaxLength(50)
                    .HasColumnName("Election_Country_State");

                entity.Property(e => e.ElectionDistrict)
                    .HasMaxLength(5)
                    .HasColumnName("Election_District");

                entity.Property(e => e.ElectionOffice).HasMaxLength(50);

                entity.Property(e => e.ElectionOtherDescription).HasMaxLength(2000);

                entity.Property(e => e.ElectionOtherIdentification)
                    .HasMaxLength(20)
                    .HasColumnName("Election_OtherIdentification");

                entity.Property(e => e.ElectionType).HasMaxLength(50);

                entity.Property(e => e.ExpenseCategory).HasMaxLength(50);

                entity.Property(e => e.FecBdgdepartmentId).HasColumnName("FEC_BDGDepartmentID");

                entity.Property(e => e.FecUserAccountId).HasColumnName("FEC_UserAccountID");

                entity.Property(e => e.FeccompanyId).HasColumnName("FECCompanyID");

                entity.Property(e => e.Idno)
                    .HasMaxLength(50)
                    .HasColumnName("IDNo");

                entity.Property(e => e.InvoiceDate).HasColumnType("datetime");

                entity.Property(e => e.InvoiceNo).HasMaxLength(20);

                entity.Property(e => e.MailingAddressI).HasMaxLength(100);

                entity.Property(e => e.MailingAddressIi)
                    .HasMaxLength(100)
                    .HasColumnName("MailingAddressII");

                entity.Property(e => e.MailingCity).HasMaxLength(50);

                entity.Property(e => e.MailingCountryState)
                    .HasMaxLength(50)
                    .HasColumnName("Mailing_Country_State");

                entity.Property(e => e.MailingEmail)
                    .HasMaxLength(50)
                    .HasColumnName("MailingEMail");

                entity.Property(e => e.MailingFax).HasMaxLength(20);

                entity.Property(e => e.MailingPhone).HasMaxLength(20);

                entity.Property(e => e.MailingPostalCode).HasMaxLength(20);

                entity.Property(e => e.ObjectUid).HasColumnName("ObjectUID");

                entity.Property(e => e.PostingDate).HasColumnType("datetime");

                entity.Property(e => e.Vendor).HasMaxLength(100);

                entity.Property(e => e.VendorAddressI).HasMaxLength(100);

                entity.Property(e => e.VendorAddressIi)
                    .HasMaxLength(100)
                    .HasColumnName("VendorAddressII");

                entity.Property(e => e.VendorCity).HasMaxLength(50);

                entity.Property(e => e.VendorCountryState)
                    .HasMaxLength(50)
                    .HasColumnName("Vendor_Country_State");

                entity.Property(e => e.VendorEmail)
                    .HasMaxLength(50)
                    .HasColumnName("VendorEMail");

                entity.Property(e => e.VendorFax).HasMaxLength(20);

                entity.Property(e => e.VendorName).HasMaxLength(50);

                entity.Property(e => e.VendorPhone).HasMaxLength(20);

                entity.Property(e => e.VendorPostalCode).HasMaxLength(20);

                entity.Property(e => e.VoucherNo).HasMaxLength(20);
            });

            modelBuilder.Entity<FecvendorGrid>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("FECVendorGrid");

                entity.Property(e => e.AddressLineI).HasMaxLength(100);

                entity.Property(e => e.AddressLineIi)
                    .HasMaxLength(100)
                    .HasColumnName("AddressLineII");

                entity.Property(e => e.City).HasMaxLength(50);

                entity.Property(e => e.Email)
                    .HasMaxLength(50)
                    .HasColumnName("EMail");

                entity.Property(e => e.Fax).HasMaxLength(20);

                entity.Property(e => e.FeccompanyId).HasColumnName("FECCompanyID");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.ObjectUid).HasColumnName("ObjectUID");

                entity.Property(e => e.Phone).HasMaxLength(50);

                entity.Property(e => e.PostalCode).HasMaxLength(20);

                entity.Property(e => e.State).HasMaxLength(50);

                entity.Property(e => e.VendorIdentification).HasMaxLength(20);
            });

            modelBuilder.Entity<FecvendorSource>(entity =>
            {
                entity.HasKey(e => e.ObjectUid);

                entity.ToTable("FECVendorSource");

                entity.Property(e => e.ObjectUid)
                    .HasColumnName("ObjectUID")
                    .HasDefaultValueSql("(newid())");

                entity.Property(e => e.CreatedBy).HasMaxLength(50);

                entity.Property(e => e.CreatedOn)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Description).HasMaxLength(2000);

                entity.Property(e => e.Display)
                    .IsRequired()
                    .HasMaxLength(54)
                    .HasComputedColumnSql("(([Name]+' ')+case when [IsInactive]<>(0) then '(I)' else '' end)", false);

                entity.Property(e => e.ImportedObjectUid)
                    .HasMaxLength(50)
                    .HasColumnName("ImportedObjectUID");

                entity.Property(e => e.InstallationUid).HasColumnName("InstallationUID");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.NameAlias)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.OldRecordId).HasColumnName("OldRecordID");

                entity.Property(e => e.RecordId)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("RecordID");

                entity.Property(e => e.SortOrder).HasDefaultValueSql("((100))");

                entity.Property(e => e.UpdatedBy).HasMaxLength(50);

                entity.Property(e => e.UpdatedOn).HasColumnType("datetime");
            });

            modelBuilder.Entity<FecvendorSourceGrid>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("FECVendorSourceGrid");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.ObjectUid).HasColumnName("ObjectUID");
            });

            modelBuilder.Entity<FkrelationshipList>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("FKRelationshipList");

                entity.Property(e => e.ColOrder).HasColumnName("Col Order");

                entity.Property(e => e.DeleteRule)
                    .HasMaxLength(11)
                    .IsUnicode(false)
                    .HasColumnName("DELETE_RULE");

                entity.Property(e => e.FkColumn)
                    .HasMaxLength(128)
                    .HasColumnName("FK column");

                entity.Property(e => e.FkName)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasColumnName("FK Name");

                entity.Property(e => e.FkTable)
                    .IsRequired()
                    .HasMaxLength(257)
                    .HasColumnName("FK table");

                entity.Property(e => e.PkColumn)
                    .HasMaxLength(128)
                    .HasColumnName("PK column");

                entity.Property(e => e.PkTable)
                    .IsRequired()
                    .HasMaxLength(257)
                    .HasColumnName("PK table");

                entity.Property(e => e.UpdateRule)
                    .HasMaxLength(11)
                    .IsUnicode(false)
                    .HasColumnName("UPDATE_RULE");
            });

            modelBuilder.Entity<FringeAdjustmentBdgbudgetInfoDetailGrid>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("FringeAdjustmentBDGBudgetInfo_DetailGrid");

                entity.Property(e => e.BdgbudgetInfoId).HasColumnName("BDGBudgetInfoID");

                entity.Property(e => e.BudgetAmount)
                    .HasColumnType("money")
                    .HasColumnName("Budget Amount($)");

                entity.Property(e => e.CurrentYearBudgetAmount)
                    .HasColumnType("money")
                    .HasColumnName("Current Year Budget Amount($)");

                entity.Property(e => e.NextYearBudgetAmount)
                    .HasColumnType("money")
                    .HasColumnName("Next Year Budget Amount($)");

                entity.Property(e => e.ObjectUid).HasColumnName("ObjectUID");

                entity.Property(e => e.Subject).HasMaxLength(250);

                entity.Property(e => e.Type).HasMaxLength(50);
            });

            modelBuilder.Entity<FringeEmployeeBdgbudgetInfoDetailGrid>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("FringeEmployeeBDGBudgetInfo_DetailGrid");

                entity.Property(e => e.BdgbudgetInfoId).HasColumnName("BDGBudgetInfoID");

                entity.Property(e => e.BudgetAmount)
                    .HasColumnType("money")
                    .HasColumnName("Budget Amount($)");

                entity.Property(e => e.CurrentYearBudgetAmount)
                    .HasColumnType("money")
                    .HasColumnName("Current Year Budget Amount($)");

                entity.Property(e => e.Name).HasMaxLength(50);

                entity.Property(e => e.NextYearBudgetAmount)
                    .HasColumnType("money")
                    .HasColumnName("Next Year Budget Amount($)");

                entity.Property(e => e.ObjectUid).HasColumnName("ObjectUID");

                entity.Property(e => e.Position).HasMaxLength(50);

                entity.Property(e => e.Salary)
                    .HasColumnType("money")
                    .HasColumnName("Salary($)");

                entity.Property(e => e.Status).HasMaxLength(50);

                entity.Property(e => e.Unit).HasMaxLength(50);
            });

            modelBuilder.Entity<FringeInternBdgbudgetInfoDetailGrid>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("FringeInternBDGBudgetInfo_DetailGrid");

                entity.Property(e => e.BdgbudgetInfoId).HasColumnName("BDGBudgetInfoID");

                entity.Property(e => e.BudgetAmount)
                    .HasColumnType("money")
                    .HasColumnName("Budget Amount($)");

                entity.Property(e => e.CurrentYearBudgetAmount)
                    .HasColumnType("money")
                    .HasColumnName("Current Year Budget Amount($)");

                entity.Property(e => e.NextYearBudgetAmount)
                    .HasColumnType("money")
                    .HasColumnName("Next Year Budget Amount($)");

                entity.Property(e => e.ObjectUid).HasColumnName("ObjectUID");

                entity.Property(e => e.OfWeeks).HasColumnName("#OfWeeks");

                entity.Property(e => e.OfWeeksInNextYear).HasColumnName("#OfWeeksInNextYear");

                entity.Property(e => e.Subject).HasMaxLength(250);

                entity.Property(e => e.WeeklySalary)
                    .HasColumnType("money")
                    .HasColumnName("Weekly Salary($)");
            });

            modelBuilder.Entity<FringeOpenPositionBdgbudgetInfoDetailGrid>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("FringeOpenPositionBDGBudgetInfo_DetailGrid");

                entity.Property(e => e.AnticipatedStartingMonth).HasMaxLength(50);

                entity.Property(e => e.BdgbudgetInfoId).HasColumnName("BDGBudgetInfoID");

                entity.Property(e => e.BudgetAmount)
                    .HasColumnType("money")
                    .HasColumnName("Budget Amount($)");

                entity.Property(e => e.CreatedOn).HasColumnType("datetime");

                entity.Property(e => e.CurrentYearBudgetAmount)
                    .HasColumnType("money")
                    .HasColumnName("Current Year Budget Amount($)");

                entity.Property(e => e.NextYearBudgetAmount)
                    .HasColumnType("money")
                    .HasColumnName("Next Year Budget Amount($)");

                entity.Property(e => e.ObjectUid).HasColumnName("ObjectUID");

                entity.Property(e => e.PositionType).HasMaxLength(50);

                entity.Property(e => e.RecordId).HasColumnName("RecordID");

                entity.Property(e => e.Salary)
                    .HasColumnType("money")
                    .HasColumnName("Salary($)");

                entity.Property(e => e.Step).HasMaxLength(50);

                entity.Property(e => e.Unit).HasMaxLength(50);

                entity.Property(e => e.UnitPosition).HasMaxLength(50);
            });

            modelBuilder.Entity<FringeOvertimeBdgbudgetInfoDetailGrid>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("FringeOvertimeBDGBudgetInfo_DetailGrid");

                entity.Property(e => e.BdgbudgetInfoId).HasColumnName("BDGBudgetInfoID");

                entity.Property(e => e.BudgetAmount)
                    .HasColumnType("money")
                    .HasColumnName("Budget Amount($)");

                entity.Property(e => e.CurrentYearBudgetAmount)
                    .HasColumnType("money")
                    .HasColumnName("Current Year Budget Amount($)");

                entity.Property(e => e.NextYearBudgetAmount)
                    .HasColumnType("money")
                    .HasColumnName("Next Year Budget Amount($)");

                entity.Property(e => e.ObjectUid).HasColumnName("ObjectUID");

                entity.Property(e => e.Subject).HasMaxLength(250);
            });

            modelBuilder.Entity<FringeSabbaticalBdgbudgetInfoDetailGrid>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("FringeSabbaticalBDGBudgetInfo_DetailGrid");

                entity.Property(e => e.BdgbudgetInfoId).HasColumnName("BDGBudgetInfoID");

                entity.Property(e => e.BudgetAmount)
                    .HasColumnType("money")
                    .HasColumnName("Budget Amount($)");

                entity.Property(e => e.CurrentYearBudgetAmount)
                    .HasColumnType("money")
                    .HasColumnName("Current Year Budget Amount($)");

                entity.Property(e => e.Employee).HasMaxLength(50);

                entity.Property(e => e.NextYearBudgetAmount)
                    .HasColumnType("money")
                    .HasColumnName("Next Year Budget Amount($)");

                entity.Property(e => e.ObjectUid).HasColumnName("ObjectUID");

                entity.Property(e => e.OfMonthsOnSabbatical).HasColumnName("#OfMonthsOnSabbatical");

                entity.Property(e => e.OfMonthsOnSabbaticalInNextYear).HasColumnName("#OfMonthsOnSabbaticalInNextYear");

                entity.Property(e => e.Salary)
                    .HasColumnType("money")
                    .HasColumnName("Salary($)");
            });

            modelBuilder.Entity<FsRowGroupingLrp>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("FS_ROW_GROUPING_lrp");

                entity.Property(e => e.Accatnum).HasColumnName("accatnum");

                entity.Property(e => e.Companycode)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("COMPANYCODE");

                entity.Property(e => e.Department)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.DexRowId)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("DEX_ROW_ID");

                entity.Property(e => e.LongDescription)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("long_description");

                entity.Property(e => e.LookupValue)
                    .HasMaxLength(163)
                    .IsUnicode(false)
                    .HasColumnName("Lookup_value");

                entity.Property(e => e.RowNoFrx)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("Row_NO_FRX");

                entity.Property(e => e.ShortDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("short_description");

                entity.Property(e => e.Status)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("STATUS");
            });

            modelBuilder.Entity<Fund>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("fund");

                entity.Property(e => e.Company)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsFixedLength(true);

                entity.Property(e => e.CreatedBy).HasMaxLength(50);

                entity.Property(e => e.CreatedOn).HasColumnType("datetime");

                entity.Property(e => e.Description).HasMaxLength(2000);

                entity.Property(e => e.Display).HasMaxLength(50);

                entity.Property(e => e.FundNo)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.GpStatus)
                    .HasMaxLength(50)
                    .HasColumnName("gp_status");

                entity.Property(e => e.ImportedObjectUid)
                    .HasMaxLength(50)
                    .HasColumnName("ImportedObjectUID");

                entity.Property(e => e.InstallationUid).HasColumnName("InstallationUID");

                entity.Property(e => e.Lm2disbursementCodeId).HasColumnName("LM2DisbursementCodeID");

                entity.Property(e => e.Lm2receiptCodeId).HasColumnName("LM2ReceiptCodeID");

                entity.Property(e => e.Name).HasMaxLength(50);

                entity.Property(e => e.NameAlias).HasMaxLength(50);

                entity.Property(e => e.OaStatus)
                    .HasMaxLength(50)
                    .HasColumnName("oa_status");

                entity.Property(e => e.ObjectUid).HasColumnName("ObjectUID");

                entity.Property(e => e.OldRecordId).HasColumnName("OldRecordID");

                entity.Property(e => e.RecordId)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("RecordID");

                entity.Property(e => e.UpdatedBy).HasMaxLength(50);

                entity.Property(e => e.UpdatedOn).HasColumnType("datetime");
            });

            modelBuilder.Entity<Gl20000Temp>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("gl20000_temp");

                entity.Property(e => e.Accatdsc)
                    .IsRequired()
                    .HasMaxLength(85)
                    .IsUnicode(false)
                    .HasColumnName("ACCATDSC");

                entity.Property(e => e.Actdescr)
                    .IsRequired()
                    .HasMaxLength(85)
                    .IsUnicode(false)
                    .HasColumnName("actdescr");

                entity.Property(e => e.Actindx).HasColumnName("ACTINDX");

                entity.Property(e => e.Actnumbr1)
                    .IsRequired()
                    .HasMaxLength(13)
                    .IsUnicode(false)
                    .HasColumnName("actnumbr_1");

                entity.Property(e => e.Actnumbr10)
                    .IsRequired()
                    .HasMaxLength(13)
                    .IsUnicode(false)
                    .HasColumnName("actnumbr_10");

                entity.Property(e => e.Actnumbr2)
                    .IsRequired()
                    .HasMaxLength(13)
                    .IsUnicode(false)
                    .HasColumnName("actnumbr_2");

                entity.Property(e => e.Actnumbr3)
                    .IsRequired()
                    .HasMaxLength(13)
                    .IsUnicode(false)
                    .HasColumnName("actnumbr_3");

                entity.Property(e => e.Actnumbr4)
                    .IsRequired()
                    .HasMaxLength(13)
                    .IsUnicode(false)
                    .HasColumnName("actnumbr_4");

                entity.Property(e => e.Actnumbr5)
                    .IsRequired()
                    .HasMaxLength(13)
                    .IsUnicode(false)
                    .HasColumnName("actnumbr_5");

                entity.Property(e => e.Actnumbr6)
                    .IsRequired()
                    .HasMaxLength(13)
                    .IsUnicode(false)
                    .HasColumnName("actnumbr_6");

                entity.Property(e => e.Actnumbr7)
                    .IsRequired()
                    .HasMaxLength(13)
                    .IsUnicode(false)
                    .HasColumnName("actnumbr_7");

                entity.Property(e => e.Actnumbr8)
                    .IsRequired()
                    .HasMaxLength(13)
                    .IsUnicode(false)
                    .HasColumnName("actnumbr_8");

                entity.Property(e => e.Actnumbr9)
                    .IsRequired()
                    .HasMaxLength(13)
                    .IsUnicode(false)
                    .HasColumnName("actnumbr_9");

                entity.Property(e => e.Actnumst)
                    .IsRequired()
                    .HasMaxLength(85)
                    .IsUnicode(false)
                    .HasColumnName("actnumst");

                entity.Property(e => e.AdjustmentTransaction).HasColumnName("Adjustment_Transaction");

                entity.Property(e => e.Apprvldt)
                    .HasColumnType("datetime")
                    .HasColumnName("APPRVLDT");

                entity.Property(e => e.Aprvluserid)
                    .IsRequired()
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("APRVLUSERID")
                    .IsFixedLength(true);

                entity.Property(e => e.BackOutJe).HasColumnName("Back_Out_JE");

                entity.Property(e => e.BackOutJeYear).HasColumnName("Back_Out_JE_Year");

                entity.Property(e => e.CorrectingJe).HasColumnName("Correcting_JE");

                entity.Property(e => e.CorrectingJeYear).HasColumnName("Correcting_JE_Year");

                entity.Property(e => e.CorrespondingUnit)
                    .IsRequired()
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Cpnyid)
                    .IsRequired()
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("CPNYID");

                entity.Property(e => e.Crdtamnt)
                    .HasColumnType("numeric(19, 5)")
                    .HasColumnName("CRDTAMNT");

                entity.Property(e => e.Curncyid)
                    .IsRequired()
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("CURNCYID")
                    .IsFixedLength(true);

                entity.Property(e => e.Currnidx).HasColumnName("CURRNIDX");

                entity.Property(e => e.Debitamt)
                    .HasColumnType("numeric(19, 5)")
                    .HasColumnName("DEBITAMT");

                entity.Property(e => e.Denxrate)
                    .HasColumnType("numeric(19, 7)")
                    .HasColumnName("DENXRATE");

                entity.Property(e => e.DexRowId)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("DEX_ROW_ID");

                entity.Property(e => e.DexRowTs)
                    .HasColumnType("datetime")
                    .HasColumnName("DEX_ROW_TS");

                entity.Property(e => e.Docdate)
                    .HasColumnType("datetime")
                    .HasColumnName("DOCDATE");

                entity.Property(e => e.Dscriptn)
                    .IsRequired()
                    .HasMaxLength(31)
                    .IsUnicode(false)
                    .HasColumnName("DSCRIPTN")
                    .IsFixedLength(true);

                entity.Property(e => e.DtaGlStatus).HasColumnName("DTA_GL_Status");

                entity.Property(e => e.DtaIndex)
                    .HasColumnType("numeric(19, 5)")
                    .HasColumnName("DTA_Index");

                entity.Property(e => e.Exchdate)
                    .HasColumnType("datetime")
                    .HasColumnName("EXCHDATE");

                entity.Property(e => e.Exgtblid)
                    .IsRequired()
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("EXGTBLID")
                    .IsFixedLength(true);

                entity.Property(e => e.Ictrx).HasColumnName("ICTRX");

                entity.Property(e => e.IdField)
                    .HasMaxLength(98)
                    .IsUnicode(false)
                    .HasColumnName("ID_FIELD");

                entity.Property(e => e.Jrnentry).HasColumnName("JRNENTRY");

                entity.Property(e => e.Lastuser)
                    .IsRequired()
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("LASTUSER")
                    .IsFixedLength(true);

                entity.Property(e => e.LedgerId).HasColumnName("Ledger_ID");

                entity.Property(e => e.Lstdtedt)
                    .HasColumnType("datetime")
                    .HasColumnName("LSTDTEDT");

                entity.Property(e => e.Mctrxstt).HasColumnName("MCTRXSTT");

                entity.Property(e => e.Noteindx)
                    .HasColumnType("numeric(19, 5)")
                    .HasColumnName("NOTEINDX");

                entity.Property(e => e.Openyear).HasColumnName("OPENYEAR");

                entity.Property(e => e.Orcomid)
                    .IsRequired()
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("ORCOMID")
                    .IsFixedLength(true);

                entity.Property(e => e.Orcrdamt)
                    .HasColumnType("numeric(19, 5)")
                    .HasColumnName("ORCRDAMT");

                entity.Property(e => e.Orctrnum)
                    .IsRequired()
                    .HasMaxLength(21)
                    .IsUnicode(false)
                    .HasColumnName("ORCTRNUM")
                    .IsFixedLength(true);

                entity.Property(e => e.Ordbtamt)
                    .HasColumnType("numeric(19, 5)")
                    .HasColumnName("ORDBTAMT");

                entity.Property(e => e.Ordocnum)
                    .IsRequired()
                    .HasMaxLength(21)
                    .IsUnicode(false)
                    .HasColumnName("ORDOCNUM")
                    .IsFixedLength(true);

                entity.Property(e => e.Orgnatyp).HasColumnName("ORGNATYP");

                entity.Property(e => e.Orgntsrc)
                    .IsRequired()
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("ORGNTSRC")
                    .IsFixedLength(true);

                entity.Property(e => e.OrigDtaseries).HasColumnName("OrigDTASeries");

                entity.Property(e => e.OriginalJe).HasColumnName("Original_JE");

                entity.Property(e => e.OriginalJeSeqNum)
                    .HasColumnType("numeric(19, 5)")
                    .HasColumnName("Original_JE_Seq_Num");

                entity.Property(e => e.OriginalJeYear).HasColumnName("Original_JE_Year");

                entity.Property(e => e.Originje).HasColumnName("ORIGINJE");

                entity.Property(e => e.Ormstrid)
                    .IsRequired()
                    .HasMaxLength(31)
                    .IsUnicode(false)
                    .HasColumnName("ORMSTRID")
                    .IsFixedLength(true);

                entity.Property(e => e.Ormstrnm)
                    .IsRequired()
                    .HasMaxLength(65)
                    .IsUnicode(false)
                    .HasColumnName("ORMSTRNM")
                    .IsFixedLength(true);

                entity.Property(e => e.Orpstddt)
                    .HasColumnType("datetime")
                    .HasColumnName("ORPSTDDT");

                entity.Property(e => e.Ortrxsrc)
                    .IsRequired()
                    .HasMaxLength(13)
                    .IsUnicode(false)
                    .HasColumnName("ORTRXSRC")
                    .IsFixedLength(true);

                entity.Property(e => e.Ortrxtyp).HasColumnName("ORTRXTYP");

                entity.Property(e => e.Periodid).HasColumnName("PERIODID");

                entity.Property(e => e.Polldtrx).HasColumnName("POLLDTRX");

                entity.Property(e => e.Ppsgnmbr).HasColumnName("PPSGNMBR");

                entity.Property(e => e.Pstgnmbr).HasColumnName("PSTGNMBR");

                entity.Property(e => e.Qkofset).HasColumnName("QKOFSET");

                entity.Property(e => e.Ratetpid)
                    .IsRequired()
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("RATETPID")
                    .IsFixedLength(true);

                entity.Property(e => e.Rctrxseq)
                    .HasColumnType("numeric(19, 5)")
                    .HasColumnName("RCTRXSEQ");

                entity.Property(e => e.Refrence)
                    .IsRequired()
                    .HasMaxLength(31)
                    .IsUnicode(false)
                    .HasColumnName("REFRENCE")
                    .IsFixedLength(true);

                entity.Property(e => e.Rtclcmtd).HasColumnName("RTCLCMTD");

                entity.Property(e => e.Seqnumbr).HasColumnName("SEQNUMBR");

                entity.Property(e => e.Series).HasColumnName("SERIES");

                entity.Property(e => e.Sourcdoc)
                    .IsRequired()
                    .HasMaxLength(11)
                    .IsUnicode(false)
                    .HasColumnName("SOURCDOC")
                    .IsFixedLength(true);

                entity.Property(e => e.Status)
                    .IsRequired()
                    .HasMaxLength(12)
                    .IsUnicode(false)
                    .HasColumnName("status");

                entity.Property(e => e.Time1)
                    .HasColumnType("datetime")
                    .HasColumnName("TIME1");

                entity.Property(e => e.Trxdate)
                    .HasColumnType("datetime")
                    .HasColumnName("TRXDATE");

                entity.Property(e => e.Trxsorce)
                    .IsRequired()
                    .HasMaxLength(13)
                    .IsUnicode(false)
                    .HasColumnName("TRXSORCE")
                    .IsFixedLength(true);

                entity.Property(e => e.Uswhpstd)
                    .IsRequired()
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("USWHPSTD")
                    .IsFixedLength(true);

                entity.Property(e => e.Vendname)
                    .IsRequired()
                    .HasMaxLength(85)
                    .IsUnicode(false)
                    .HasColumnName("VENDNAME");

                entity.Property(e => e.Vndclsid)
                    .IsRequired()
                    .HasMaxLength(85)
                    .IsUnicode(false)
                    .HasColumnName("vndclsid");

                entity.Property(e => e.Voided).HasColumnName("VOIDED");

                entity.Property(e => e.Xchgrate)
                    .HasColumnType("numeric(19, 7)")
                    .HasColumnName("XCHGRATE");
            });

            modelBuilder.Entity<Gl30000Temp>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("gl30000_temp");

                entity.Property(e => e.Accatdsc)
                    .IsRequired()
                    .HasMaxLength(70)
                    .IsUnicode(false)
                    .HasColumnName("ACCATDSC");

                entity.Property(e => e.Actdescr)
                    .IsRequired()
                    .HasMaxLength(70)
                    .IsUnicode(false)
                    .HasColumnName("actdescr");

                entity.Property(e => e.Actindx).HasColumnName("ACTINDX");

                entity.Property(e => e.Actnumbr1)
                    .IsRequired()
                    .HasMaxLength(7)
                    .IsUnicode(false)
                    .HasColumnName("actnumbr_1");

                entity.Property(e => e.Actnumbr2)
                    .IsRequired()
                    .HasMaxLength(7)
                    .IsUnicode(false)
                    .HasColumnName("actnumbr_2");

                entity.Property(e => e.Actnumbr3)
                    .IsRequired()
                    .HasMaxLength(7)
                    .IsUnicode(false)
                    .HasColumnName("actnumbr_3");

                entity.Property(e => e.Actnumbr4)
                    .IsRequired()
                    .HasMaxLength(7)
                    .IsUnicode(false)
                    .HasColumnName("actnumbr_4");

                entity.Property(e => e.Actnumbr5)
                    .IsRequired()
                    .HasMaxLength(7)
                    .IsUnicode(false)
                    .HasColumnName("actnumbr_5");

                entity.Property(e => e.Actnumst)
                    .IsRequired()
                    .HasMaxLength(70)
                    .IsUnicode(false)
                    .HasColumnName("actnumst");

                entity.Property(e => e.AdjustmentTransaction).HasColumnName("Adjustment_Transaction");

                entity.Property(e => e.Apprvldt)
                    .HasColumnType("datetime")
                    .HasColumnName("APPRVLDT");

                entity.Property(e => e.Aprvluserid)
                    .IsRequired()
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("APRVLUSERID")
                    .IsFixedLength(true);

                entity.Property(e => e.BackOutJe).HasColumnName("Back_Out_JE");

                entity.Property(e => e.BackOutJeYear).HasColumnName("Back_Out_JE_Year");

                entity.Property(e => e.CorrectingJe).HasColumnName("Correcting_JE");

                entity.Property(e => e.CorrectingJeYear).HasColumnName("Correcting_JE_Year");

                entity.Property(e => e.CorrespondingUnit)
                    .IsRequired()
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Cpnyid)
                    .IsRequired()
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("CPNYID");

                entity.Property(e => e.Crdtamnt)
                    .HasColumnType("numeric(19, 5)")
                    .HasColumnName("CRDTAMNT");

                entity.Property(e => e.Curncyid)
                    .IsRequired()
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("CURNCYID")
                    .IsFixedLength(true);

                entity.Property(e => e.Currnidx).HasColumnName("CURRNIDX");

                entity.Property(e => e.Debitamt)
                    .HasColumnType("numeric(19, 5)")
                    .HasColumnName("DEBITAMT");

                entity.Property(e => e.Denxrate)
                    .HasColumnType("numeric(19, 7)")
                    .HasColumnName("DENXRATE");

                entity.Property(e => e.DexRowId)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("DEX_ROW_ID");

                entity.Property(e => e.DexRowTs)
                    .HasColumnType("datetime")
                    .HasColumnName("DEX_ROW_TS");

                entity.Property(e => e.Docdate)
                    .HasColumnType("datetime")
                    .HasColumnName("DOCDATE");

                entity.Property(e => e.Dscriptn)
                    .IsRequired()
                    .HasMaxLength(31)
                    .IsUnicode(false)
                    .HasColumnName("DSCRIPTN")
                    .IsFixedLength(true);

                entity.Property(e => e.DtaGlStatus).HasColumnName("DTA_GL_Status");

                entity.Property(e => e.DtaIndex)
                    .HasColumnType("numeric(19, 5)")
                    .HasColumnName("DTA_Index");

                entity.Property(e => e.Exchdate)
                    .HasColumnType("datetime")
                    .HasColumnName("EXCHDATE");

                entity.Property(e => e.Exgtblid)
                    .IsRequired()
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("EXGTBLID")
                    .IsFixedLength(true);

                entity.Property(e => e.Hstyear).HasColumnName("HSTYEAR");

                entity.Property(e => e.Ictrx).HasColumnName("ICTRX");

                entity.Property(e => e.IdField)
                    .HasMaxLength(98)
                    .IsUnicode(false)
                    .HasColumnName("ID_FIELD");

                entity.Property(e => e.Jrnentry).HasColumnName("JRNENTRY");

                entity.Property(e => e.Lastuser)
                    .IsRequired()
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("LASTUSER")
                    .IsFixedLength(true);

                entity.Property(e => e.LedgerId).HasColumnName("Ledger_ID");

                entity.Property(e => e.Lstdtedt)
                    .HasColumnType("datetime")
                    .HasColumnName("LSTDTEDT");

                entity.Property(e => e.Mctrxstt).HasColumnName("MCTRXSTT");

                entity.Property(e => e.Noteindx)
                    .HasColumnType("numeric(19, 5)")
                    .HasColumnName("NOTEINDX");

                entity.Property(e => e.Orcomid)
                    .IsRequired()
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("ORCOMID")
                    .IsFixedLength(true);

                entity.Property(e => e.Orcrdamt)
                    .HasColumnType("numeric(19, 5)")
                    .HasColumnName("ORCRDAMT");

                entity.Property(e => e.Orctrnum)
                    .IsRequired()
                    .HasMaxLength(21)
                    .IsUnicode(false)
                    .HasColumnName("ORCTRNUM")
                    .IsFixedLength(true);

                entity.Property(e => e.Ordbtamt)
                    .HasColumnType("numeric(19, 5)")
                    .HasColumnName("ORDBTAMT");

                entity.Property(e => e.Ordocnum)
                    .IsRequired()
                    .HasMaxLength(21)
                    .IsUnicode(false)
                    .HasColumnName("ORDOCNUM")
                    .IsFixedLength(true);

                entity.Property(e => e.Orgnatyp).HasColumnName("ORGNATYP");

                entity.Property(e => e.Orgntsrc)
                    .IsRequired()
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("ORGNTSRC")
                    .IsFixedLength(true);

                entity.Property(e => e.OrigDtaseries).HasColumnName("OrigDTASeries");

                entity.Property(e => e.OriginalJe).HasColumnName("Original_JE");

                entity.Property(e => e.OriginalJeSeqNum)
                    .HasColumnType("numeric(19, 5)")
                    .HasColumnName("Original_JE_Seq_Num");

                entity.Property(e => e.OriginalJeYear).HasColumnName("Original_JE_Year");

                entity.Property(e => e.Originje).HasColumnName("ORIGINJE");

                entity.Property(e => e.Ormstrid)
                    .IsRequired()
                    .HasMaxLength(31)
                    .IsUnicode(false)
                    .HasColumnName("ORMSTRID")
                    .IsFixedLength(true);

                entity.Property(e => e.Ormstrnm)
                    .IsRequired()
                    .HasMaxLength(65)
                    .IsUnicode(false)
                    .HasColumnName("ORMSTRNM")
                    .IsFixedLength(true);

                entity.Property(e => e.Orpstddt)
                    .HasColumnType("datetime")
                    .HasColumnName("ORPSTDDT");

                entity.Property(e => e.Ortrxsrc)
                    .IsRequired()
                    .HasMaxLength(13)
                    .IsUnicode(false)
                    .HasColumnName("ORTRXSRC")
                    .IsFixedLength(true);

                entity.Property(e => e.Ortrxtyp).HasColumnName("ORTRXTYP");

                entity.Property(e => e.Periodid).HasColumnName("PERIODID");

                entity.Property(e => e.Polldtrx).HasColumnName("POLLDTRX");

                entity.Property(e => e.Ppsgnmbr).HasColumnName("PPSGNMBR");

                entity.Property(e => e.Pstgnmbr).HasColumnName("PSTGNMBR");

                entity.Property(e => e.Qkofset).HasColumnName("QKOFSET");

                entity.Property(e => e.Ratetpid)
                    .IsRequired()
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("RATETPID")
                    .IsFixedLength(true);

                entity.Property(e => e.Rctrxseq)
                    .HasColumnType("numeric(19, 5)")
                    .HasColumnName("RCTRXSEQ");

                entity.Property(e => e.Refrence)
                    .IsRequired()
                    .HasMaxLength(31)
                    .IsUnicode(false)
                    .HasColumnName("REFRENCE")
                    .IsFixedLength(true);

                entity.Property(e => e.Rtclcmtd).HasColumnName("RTCLCMTD");

                entity.Property(e => e.Seqnumbr).HasColumnName("SEQNUMBR");

                entity.Property(e => e.Series).HasColumnName("SERIES");

                entity.Property(e => e.Sourcdoc)
                    .IsRequired()
                    .HasMaxLength(11)
                    .IsUnicode(false)
                    .HasColumnName("SOURCDOC")
                    .IsFixedLength(true);

                entity.Property(e => e.Status)
                    .IsRequired()
                    .HasMaxLength(12)
                    .IsUnicode(false)
                    .HasColumnName("status");

                entity.Property(e => e.Time1)
                    .HasColumnType("datetime")
                    .HasColumnName("TIME1");

                entity.Property(e => e.Trxdate)
                    .HasColumnType("datetime")
                    .HasColumnName("TRXDATE");

                entity.Property(e => e.Trxsorce)
                    .IsRequired()
                    .HasMaxLength(13)
                    .IsUnicode(false)
                    .HasColumnName("TRXSORCE")
                    .IsFixedLength(true);

                entity.Property(e => e.Uswhpstd)
                    .IsRequired()
                    .HasMaxLength(15)
                    .IsUnicode(false)
                    .HasColumnName("USWHPSTD")
                    .IsFixedLength(true);

                entity.Property(e => e.Vendname)
                    .IsRequired()
                    .HasMaxLength(70)
                    .IsUnicode(false)
                    .HasColumnName("VENDNAME");

                entity.Property(e => e.Vndclsid)
                    .IsRequired()
                    .HasMaxLength(70)
                    .IsUnicode(false)
                    .HasColumnName("vndclsid");

                entity.Property(e => e.Voided).HasColumnName("VOIDED");

                entity.Property(e => e.Xchgrate)
                    .HasColumnType("numeric(19, 7)")
                    .HasColumnName("XCHGRATE");
            });

            modelBuilder.Entity<GlobalSecurity>(entity =>
            {
                entity.HasKey(e => e.ObjectUid);

                entity.ToTable("GlobalSecurity");

                entity.Property(e => e.ObjectUid)
                    .HasColumnName("ObjectUID")
                    .HasDefaultValueSql("(newid())");

                entity.Property(e => e.CreatedBy).HasMaxLength(50);

                entity.Property(e => e.CreatedOn)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Description).HasMaxLength(2000);

                entity.Property(e => e.Display)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasComputedColumnSql("([Name])", false);

                entity.Property(e => e.ImportedObjectUid)
                    .HasMaxLength(50)
                    .HasColumnName("ImportedObjectUID");

                entity.Property(e => e.InstallationUid).HasColumnName("InstallationUID");

                entity.Property(e => e.IsPasswordLowercase)
                    .IsRequired()
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.IsPasswordNumeric)
                    .IsRequired()
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.IsPasswordUppercase)
                    .IsRequired()
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.NameAlias)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.OldRecordId).HasColumnName("OldRecordID");

                entity.Property(e => e.PasswordLength).HasDefaultValueSql("((8))");

                entity.Property(e => e.RecordId)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("RecordID");

                entity.Property(e => e.SortOrder).HasDefaultValueSql("((100))");

                entity.Property(e => e.TableCsv).HasColumnName("TableCSV");

                entity.Property(e => e.TablePdf).HasColumnName("TablePDF");

                entity.Property(e => e.UpdatedBy).HasMaxLength(50);

                entity.Property(e => e.UpdatedOn).HasColumnType("datetime");

                entity.Property(e => e.UsernameLength).HasDefaultValueSql("((8))");
            });

            modelBuilder.Entity<GlobalSecurityGrid>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("GlobalSecurityGrid");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.ObjectUid).HasColumnName("ObjectUID");

                entity.Property(e => e.TableCsv).HasColumnName("TableCSV");

                entity.Property(e => e.TablePdf).HasColumnName("TablePDF");
            });

            modelBuilder.Entity<GltransactionLine>(entity =>
            {
                entity.HasKey(e => e.ObjectUid);

                entity.ToTable("GLTransactionLine");

                entity.Property(e => e.ObjectUid)
                    .HasColumnName("ObjectUID")
                    .HasDefaultValueSql("(newid())");

                entity.Property(e => e.Address)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CheckNumber)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.City)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Code)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CodeId).HasColumnName("CodeID");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CreatedOn)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Description)
                    .HasMaxLength(2000)
                    .IsUnicode(false);

                entity.Property(e => e.Display)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasComputedColumnSql("([Name])", false);

                entity.Property(e => e.GlyearCodeId).HasColumnName("GLYearCodeID");

                entity.Property(e => e.Id)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ID");

                entity.Property(e => e.ImportedObjectUid)
                    .HasMaxLength(50)
                    .HasColumnName("ImportedObjectUID");

                entity.Property(e => e.InstallationUid).HasColumnName("InstallationUID");

                entity.Property(e => e.ItemizedAmount).HasColumnType("money");

                entity.Property(e => e.Name)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.NameAlias)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.NonItemizedAmount).HasColumnType("money");

                entity.Property(e => e.OldRecordId).HasColumnName("OldRecordID");

                entity.Property(e => e.PaymentDate).HasColumnType("datetime");

                entity.Property(e => e.PostalCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Purpose)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.PurposeDefault)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("Purpose_Default");

                entity.Property(e => e.PurposePriorYear)
                    .HasMaxLength(2000)
                    .IsUnicode(false)
                    .HasColumnName("Purpose_Prior_Year");

                entity.Property(e => e.RecordId)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("RecordID");

                entity.Property(e => e.RoomOrBox)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.SortOrder).HasDefaultValueSql("((100))");

                entity.Property(e => e.State)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.TotalAmount).HasColumnType("money");

                entity.Property(e => e.Type)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UpdatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UpdatedOn).HasColumnType("datetime");

                entity.Property(e => e.Year)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.YearSetupId).HasColumnName("YearSetupID");

                entity.HasOne(d => d.YearSetup)
                    .WithMany(p => p.GltransactionLines)
                    .HasForeignKey(d => d.YearSetupId)
                    .HasConstraintName("FK_GLTransactionLine_YearSetupID_YearSetup");
            });

            modelBuilder.Entity<GltransactionLineSummaryView>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("GLTransactionLine_summary_view");

                entity.Property(e => e.Code)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Id)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ID");

                entity.Property(e => e.ItemizedAmount).HasColumnType("money");

                entity.Property(e => e.NonItemizedAmount).HasColumnType("money");

                entity.Property(e => e.Year)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("year");
            });

            modelBuilder.Entity<GltransactionSummary>(entity =>
            {
                entity.HasKey(e => e.ObjectUid);

                entity.ToTable("GLTransactionSummary");

                entity.Property(e => e.ObjectUid)
                    .HasColumnName("ObjectUID")
                    .HasDefaultValueSql("(newid())");

                entity.Property(e => e.Address).HasMaxLength(50);

                entity.Property(e => e.CheckNumber).HasMaxLength(50);

                entity.Property(e => e.City).HasMaxLength(50);

                entity.Property(e => e.Code).HasMaxLength(50);

                entity.Property(e => e.CodeId).HasColumnName("CodeID");

                entity.Property(e => e.Cpnyid)
                    .HasMaxLength(50)
                    .HasColumnName("cpnyid");

                entity.Property(e => e.CreatedBy).HasMaxLength(50);

                entity.Property(e => e.CreatedOn)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Description).HasMaxLength(2000);

                entity.Property(e => e.Display)
                    .HasMaxLength(50)
                    .HasComputedColumnSql("([Name])", false);

                entity.Property(e => e.GlyearCodeId).HasColumnName("GLYearCodeID");

                entity.Property(e => e.Id)
                    .HasMaxLength(50)
                    .HasColumnName("ID");

                entity.Property(e => e.ImportedObjectUid)
                    .HasMaxLength(50)
                    .HasColumnName("ImportedObjectUID");

                entity.Property(e => e.InstallationUid).HasColumnName("InstallationUID");

                entity.Property(e => e.ItemizedAmount).HasColumnType("money");

                entity.Property(e => e.Name).HasMaxLength(50);

                entity.Property(e => e.NameAlias).HasMaxLength(50);

                entity.Property(e => e.NonItemizedAmount).HasColumnType("money");

                entity.Property(e => e.OldRecordId).HasColumnName("OldRecordID");

                entity.Property(e => e.PaymentDate).HasColumnType("datetime");

                entity.Property(e => e.PostalCode).HasMaxLength(50);

                entity.Property(e => e.Purpose).HasMaxLength(50);

                entity.Property(e => e.RecordId)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("RecordID");

                entity.Property(e => e.RoomOrBox).HasMaxLength(50);

                entity.Property(e => e.SortOrder).HasDefaultValueSql("((100))");

                entity.Property(e => e.State).HasMaxLength(50);

                entity.Property(e => e.TotalAmount).HasColumnType("money");

                entity.Property(e => e.Type).HasMaxLength(50);

                entity.Property(e => e.UpdatedBy).HasMaxLength(50);

                entity.Property(e => e.UpdatedOn).HasColumnType("datetime");

                entity.Property(e => e.Year).HasMaxLength(50);

                entity.Property(e => e.YearSetupId).HasColumnName("YearSetupID");
            });

            modelBuilder.Entity<GltransactionlineAddView>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("gltransactionline_add_view");

                entity.Property(e => e.Amount).HasColumnName("amount");

                entity.Property(e => e.Checkdate)
                    .HasColumnType("datetime")
                    .HasColumnName("CHECKDATE");

                entity.Property(e => e.Checkno)
                    .HasMaxLength(75)
                    .HasColumnName("CHECKNO");

                entity.Property(e => e.Cpnyid)
                    .HasMaxLength(75)
                    .HasColumnName("CPNYID");

                entity.Property(e => e.FinalId)
                    .HasMaxLength(75)
                    .HasColumnName("FINAL_ID");

                entity.Property(e => e.Fiscyr)
                    .HasMaxLength(75)
                    .HasColumnName("FISCYR");

                entity.Property(e => e.Jrnltype)
                    .HasMaxLength(75)
                    .HasColumnName("JRNLTYPE");

                entity.Property(e => e.Lm2Code)
                    .HasMaxLength(75)
                    .HasColumnName("LM2_CODE");

                entity.Property(e => e.LrpcompanyId).HasColumnName("LRPCompanyID");
            });

            modelBuilder.Entity<GltransactionlineAddViewMax>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("gltransactionline_add_view_max");

                entity.Property(e => e.Amount).HasColumnName("amount");

                entity.Property(e => e.Checkdate)
                    .HasColumnType("datetime")
                    .HasColumnName("CHECKDATE");

                entity.Property(e => e.Checkno)
                    .HasMaxLength(75)
                    .HasColumnName("CHECKNO");

                entity.Property(e => e.FinalId)
                    .HasMaxLength(75)
                    .HasColumnName("FINAL_ID");

                entity.Property(e => e.Fiscyr)
                    .HasMaxLength(75)
                    .HasColumnName("FISCYR");

                entity.Property(e => e.Jrnltype)
                    .HasMaxLength(75)
                    .HasColumnName("JRNLTYPE");

                entity.Property(e => e.Lm2Code)
                    .HasMaxLength(75)
                    .HasColumnName("LM2_CODE");
            });

            modelBuilder.Entity<GltransactionlineAddViewMax2>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("gltransactionline_add_view_max_2");

                entity.Property(e => e.Amount).HasColumnName("amount");

                entity.Property(e => e.Checkdate)
                    .HasColumnType("datetime")
                    .HasColumnName("CHECKDATE");

                entity.Property(e => e.Checkno)
                    .HasMaxLength(75)
                    .HasColumnName("CHECKNO");

                entity.Property(e => e.FinalId)
                    .HasMaxLength(75)
                    .HasColumnName("FINAL_ID");

                entity.Property(e => e.Fiscyr)
                    .HasMaxLength(75)
                    .HasColumnName("FISCYR");

                entity.Property(e => e.Jrnltype)
                    .HasMaxLength(75)
                    .HasColumnName("JRNLTYPE");

                entity.Property(e => e.Lm2Code)
                    .HasMaxLength(75)
                    .HasColumnName("LM2_CODE");

                entity.Property(e => e.Lm2Description)
                    .HasMaxLength(75)
                    .HasColumnName("LM2 DESCRIPTION");
            });

            modelBuilder.Entity<GltransactionsummaryAddView>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("gltransactionsummary_add_view");

                entity.Property(e => e.Amount).HasColumnName("amount");

                entity.Property(e => e.Cpnyid)
                    .HasMaxLength(75)
                    .HasColumnName("CPNYID");

                entity.Property(e => e.FinalId)
                    .HasMaxLength(75)
                    .HasColumnName("FINAL_ID");

                entity.Property(e => e.Fiscyr)
                    .HasMaxLength(75)
                    .HasColumnName("FISCYR");

                entity.Property(e => e.Lm2Code)
                    .HasMaxLength(75)
                    .HasColumnName("LM2_CODE");

                entity.Property(e => e.LrpcompanyId).HasColumnName("LRPCompanyID");
            });

            modelBuilder.Entity<Gridlayout>(entity =>
            {
                entity.ToTable("gridlayouts");

                entity.Property(e => e.Id)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("id")
                    .HasDefaultValueSql("(newid())");

                entity.Property(e => e.Creator)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("creator");

                entity.Property(e => e.Gridid)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("gridid");

                entity.Property(e => e.Ispublic)
                    .HasColumnName("ispublic")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Layout)
                    .IsUnicode(false)
                    .HasColumnName("layout");

                entity.Property(e => e.Layoutname)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("layoutname");

                entity.Property(e => e.Userid)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("userid");
            });

            modelBuilder.Entity<HelpCard>(entity =>
            {
                entity.HasKey(e => e.ObjectUid);

                entity.ToTable("HelpCard");

                entity.Property(e => e.ObjectUid)
                    .HasColumnName("ObjectUID")
                    .HasDefaultValueSql("(newid())");

                entity.Property(e => e.CreatedBy).HasMaxLength(50);

                entity.Property(e => e.CreatedOn)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasMaxLength(2000);

                entity.Property(e => e.Display)
                    .IsRequired()
                    .HasMaxLength(100)
                    .HasComputedColumnSql("([Name])", false);

                entity.Property(e => e.ImportedObjectUid)
                    .HasMaxLength(50)
                    .HasColumnName("ImportedObjectUID");

                entity.Property(e => e.InstallationUid).HasColumnName("InstallationUID");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.NameAlias)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.OldRecordId).HasColumnName("OldRecordID");

                entity.Property(e => e.RecordId)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("RecordID");

                entity.Property(e => e.SortOrder).HasDefaultValueSql("((100))");

                entity.Property(e => e.UpdatedBy).HasMaxLength(50);

                entity.Property(e => e.UpdatedOn).HasColumnType("datetime");
            });

            modelBuilder.Entity<HelpCardGrid>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("HelpCardGrid");

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasMaxLength(2000);

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.ObjectUid).HasColumnName("ObjectUID");
            });

            modelBuilder.Entity<HelpCardList>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("HelpCardList");

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasMaxLength(2000);

                entity.Property(e => e.HelpCardId).HasColumnName("HelpCardID");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.PageId).HasColumnName("PageID");

                entity.Property(e => e.PageLink).HasMaxLength(200);
            });

            modelBuilder.Entity<Installation>(entity =>
            {
                entity.HasKey(e => e.ObjectUid);

                entity.ToTable("Installation");

                entity.Property(e => e.ObjectUid)
                    .HasColumnName("ObjectUID")
                    .HasDefaultValueSql("(newid())");

                entity.Property(e => e.CreatedBy).HasMaxLength(50);

                entity.Property(e => e.CreatedOn)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Description).HasMaxLength(250);

                entity.Property(e => e.Display)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasComputedColumnSql("([Name])", false);

                entity.Property(e => e.ImportedObjectUid)
                    .HasMaxLength(50)
                    .HasColumnName("ImportedObjectUID");

                entity.Property(e => e.InstallationUid).HasColumnName("InstallationUID");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.NameAlias)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.OldRecordId).HasColumnName("OldRecordID");

                entity.Property(e => e.RecordId)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("RecordID");

                entity.Property(e => e.ServerDetail).HasMaxLength(250);

                entity.Property(e => e.SortOrder).HasDefaultValueSql("((100))");

                entity.Property(e => e.UpdatedBy).HasMaxLength(50);

                entity.Property(e => e.UpdatedOn).HasColumnType("datetime");
            });

            modelBuilder.Entity<IzendaAdHocReport>(entity =>
            {
                entity.HasKey(e => e.ObjectUid);

                entity.ToTable("IzendaAdHocReport");

                entity.Property(e => e.ObjectUid)
                    .HasColumnName("ObjectUID")
                    .HasDefaultValueSql("(newid())");

                entity.Property(e => e.CreatedBy).HasMaxLength(50);

                entity.Property(e => e.CreatedOn)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Description).HasMaxLength(2000);

                entity.Property(e => e.Display)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasComputedColumnSql("([Name])", false);

                entity.Property(e => e.ImportedObjectUid)
                    .HasMaxLength(50)
                    .HasColumnName("ImportedObjectUID");

                entity.Property(e => e.InstallationUid).HasColumnName("InstallationUID");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.NameAlias)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.OldRecordId).HasColumnName("OldRecordID");

                entity.Property(e => e.RecordId)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("RecordID");

                entity.Property(e => e.SortOrder).HasDefaultValueSql("((100))");

                entity.Property(e => e.UpdatedBy).HasMaxLength(50);

                entity.Property(e => e.UpdatedOn).HasColumnType("datetime");

                entity.Property(e => e.Xml)
                    .HasColumnType("ntext")
                    .HasColumnName("XML");
            });

            modelBuilder.Entity<Language>(entity =>
            {
                entity.HasKey(e => e.ObjectUid);

                entity.ToTable("Language");

                entity.Property(e => e.ObjectUid)
                    .HasColumnName("ObjectUID")
                    .HasDefaultValueSql("(newid())");

                entity.Property(e => e.CreatedBy).HasMaxLength(50);

                entity.Property(e => e.CreatedOn)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Description).HasMaxLength(2000);

                entity.Property(e => e.Display)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasComputedColumnSql("([Name])", false);

                entity.Property(e => e.ImportedObjectUid)
                    .HasMaxLength(50)
                    .HasColumnName("ImportedObjectUID");

                entity.Property(e => e.InstallationUid).HasColumnName("InstallationUID");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.NameAlias)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.OldRecordId).HasColumnName("OldRecordID");

                entity.Property(e => e.RecordId)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("RecordID");

                entity.Property(e => e.SortOrder).HasDefaultValueSql("((100))");

                entity.Property(e => e.UpdatedBy).HasMaxLength(50);

                entity.Property(e => e.UpdatedOn).HasColumnType("datetime");
            });

            modelBuilder.Entity<LegalServiceBdgbudgetInfoDetailGrid>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("LegalServiceBDGBudgetInfo_DetailGrid");

                entity.Property(e => e.BdgbudgetInfoId).HasColumnName("BDGBudgetInfoID");

                entity.Property(e => e.BudgetAmount)
                    .HasColumnType("money")
                    .HasColumnName("Budget Amount($)");

                entity.Property(e => e.CurrentYearBudgetAmount)
                    .HasColumnType("money")
                    .HasColumnName("Current Year Budget Amount($)");

                entity.Property(e => e.NextYearBudgetAmount)
                    .HasColumnType("money")
                    .HasColumnName("Next Year Budget Amount($)");

                entity.Property(e => e.ObjectUid).HasColumnName("ObjectUID");

                entity.Property(e => e.Subject).HasMaxLength(250);
            });

            modelBuilder.Entity<LoadError>(entity =>
            {
                entity.HasKey(e => e.ObjectUid);

                entity.Property(e => e.ObjectUid)
                    .HasColumnName("ObjectUID")
                    .HasDefaultValueSql("(newid())");

                entity.Property(e => e.CreatedBy).HasMaxLength(50);

                entity.Property(e => e.CreatedOn)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Description).HasMaxLength(2000);

                entity.Property(e => e.Display)
                    .HasMaxLength(50)
                    .HasComputedColumnSql("([Name])", false);

                entity.Property(e => e.ErrorCodeId).HasColumnName("ErrorCodeID");

                entity.Property(e => e.ErrorColumnId).HasColumnName("ErrorColumnID");

                entity.Property(e => e.ErrorDate)
                    .HasColumnType("smalldatetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.ErrorDescription).HasMaxLength(1000);

                entity.Property(e => e.ErrorDetails).HasMaxLength(1000);

                entity.Property(e => e.ErrorPackage).HasMaxLength(100);

                entity.Property(e => e.ErrorTask).HasMaxLength(100);

                entity.Property(e => e.ImportedObjectUid)
                    .HasMaxLength(50)
                    .HasColumnName("ImportedObjectUID");

                entity.Property(e => e.InstallationUid).HasColumnName("InstallationUID");

                entity.Property(e => e.Name).HasMaxLength(50);

                entity.Property(e => e.NameAlias).HasMaxLength(50);

                entity.Property(e => e.OldRecordId).HasColumnName("OldRecordID");

                entity.Property(e => e.RecordId).HasColumnName("RecordID");

                entity.Property(e => e.SortOrder).HasDefaultValueSql("((100))");

                entity.Property(e => e.UpdatedBy).HasMaxLength(50);

                entity.Property(e => e.UpdatedOn).HasColumnType("datetime");
            });

            modelBuilder.Entity<Localisation>(entity =>
            {
                entity.HasKey(e => e.ObjectUid);

                entity.ToTable("Localisation");

                entity.Property(e => e.ObjectUid)
                    .HasColumnName("ObjectUID")
                    .HasDefaultValueSql("(newid())");

                entity.Property(e => e.CreatedBy).HasMaxLength(50);

                entity.Property(e => e.CreatedOn)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Description).HasMaxLength(2000);

                entity.Property(e => e.Display)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasComputedColumnSql("([Name])", false);

                entity.Property(e => e.ImportedObjectUid)
                    .HasMaxLength(50)
                    .HasColumnName("ImportedObjectUID");

                entity.Property(e => e.InstallationUid).HasColumnName("InstallationUID");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.NameAlias)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.OldRecordId).HasColumnName("OldRecordID");

                entity.Property(e => e.RecordId)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("RecordID");

                entity.Property(e => e.SortOrder).HasDefaultValueSql("((100))");

                entity.Property(e => e.UpdatedBy).HasMaxLength(50);

                entity.Property(e => e.UpdatedOn).HasColumnType("datetime");
            });

            modelBuilder.Entity<LocalisationGrid>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("LocalisationGrid");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.ObjectUid).HasColumnName("ObjectUID");
            });

            modelBuilder.Entity<Lrpcode>(entity =>
            {
                entity.HasKey(e => e.ObjectUid);

                entity.ToTable("LRPCode");

                entity.Property(e => e.ObjectUid)
                    .HasColumnName("ObjectUID")
                    .HasDefaultValueSql("(newid())");

                entity.Property(e => e.CreatedBy).HasMaxLength(50);

                entity.Property(e => e.CreatedOn)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Description).HasMaxLength(2000);

                entity.Property(e => e.Display)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasComputedColumnSql("([Name])", false);

                entity.Property(e => e.ImportedObjectUid)
                    .HasMaxLength(50)
                    .HasColumnName("ImportedObjectUID");

                entity.Property(e => e.InstallationUid).HasColumnName("InstallationUID");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.NameAlias)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.OldRecordId).HasColumnName("OldRecordID");

                entity.Property(e => e.RecordId)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("RecordID");

                entity.Property(e => e.SortOrder).HasDefaultValueSql("((100))");

                entity.Property(e => e.UpdatedBy).HasMaxLength(50);

                entity.Property(e => e.UpdatedOn).HasColumnType("datetime");
            });

            modelBuilder.Entity<LrpcodeGrid>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("LRPCodeGrid");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.ObjectUid).HasColumnName("ObjectUID");
            });

            modelBuilder.Entity<LrpcodeLrpreport>(entity =>
            {
                entity.HasKey(e => e.ObjectUid);

                entity.ToTable("LRPCode_LRPReport");

                entity.Property(e => e.ObjectUid)
                    .HasColumnName("ObjectUID")
                    .HasDefaultValueSql("(newid())");

                entity.Property(e => e.CreatedBy).HasMaxLength(50);

                entity.Property(e => e.CreatedOn)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Description).HasMaxLength(2000);

                entity.Property(e => e.Display)
                    .HasMaxLength(50)
                    .HasComputedColumnSql("([Name])", false);

                entity.Property(e => e.ImportedObjectUid)
                    .HasMaxLength(50)
                    .HasColumnName("ImportedObjectUID");

                entity.Property(e => e.InstallationUid).HasColumnName("InstallationUID");

                entity.Property(e => e.LrpcodeId).HasColumnName("LRPCodeID");

                entity.Property(e => e.LrpreportId).HasColumnName("LRPReportID");

                entity.Property(e => e.Name).HasMaxLength(50);

                entity.Property(e => e.NameAlias).HasMaxLength(50);

                entity.Property(e => e.OldRecordId).HasColumnName("OldRecordID");

                entity.Property(e => e.RecordId)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("RecordID");

                entity.Property(e => e.SortOrder).HasDefaultValueSql("((100))");

                entity.Property(e => e.UpdatedBy).HasMaxLength(50);

                entity.Property(e => e.UpdatedOn).HasColumnType("datetime");

                entity.HasOne(d => d.Lrpcode)
                    .WithMany(p => p.LrpcodeLrpreports)
                    .HasForeignKey(d => d.LrpcodeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_LRPCode_LRPReport_LRPCodeID_LRPCode");

                entity.HasOne(d => d.Lrpreport)
                    .WithMany(p => p.LrpcodeLrpreports)
                    .HasForeignKey(d => d.LrpreportId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_LRPCode_LRPReport_LRPReportID_LRPReport");
            });

            modelBuilder.Entity<LrpcodeLrpreportGrid>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("LRPCode_LRPReportGrid");

                entity.Property(e => e.LrpcodeId).HasColumnName("LRPCodeID");

                entity.Property(e => e.ObjectUid).HasColumnName("ObjectUID");

                entity.Property(e => e.Report)
                    .IsRequired()
                    .HasMaxLength(50);
            });



            modelBuilder.Entity<Lrpcompany>(entity =>
            {
                entity.HasKey(e => e.ObjectUid);

                entity.ToTable("LRPCompany");

                entity.HasIndex(e => e.ParentLrpcompanyId, "iParent_LRPCompanyID_LRPCompany");

                entity.Property(e => e.ObjectUid)
                    .HasColumnName("ObjectUID")
                    .HasDefaultValueSql("(newid())");

                entity.Property(e => e.AddressLineI).HasMaxLength(100);

                entity.Property(e => e.AddressLineIi)
                    .HasMaxLength(100)
                    .HasColumnName("AddressLineII");

                entity.Property(e => e.AddressLineIii)
                    .HasMaxLength(100)
                    .HasColumnName("AddressLineIII");

                entity.Property(e => e.City).HasMaxLength(50);

                entity.Property(e => e.Code)
                    .IsRequired()
                    .HasMaxLength(10)
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.CountryId).HasColumnName("CountryID");

                entity.Property(e => e.CountryStateId).HasColumnName("Country_StateID");

                entity.Property(e => e.CreatedBy).HasMaxLength(50);

                entity.Property(e => e.CreatedOn)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Description).HasMaxLength(2000);

                entity.Property(e => e.Display)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasComputedColumnSql("([Name])", false);

                entity.Property(e => e.ImportedObjectUid)
                    .HasMaxLength(50)
                    .HasColumnName("ImportedObjectUID");

                entity.Property(e => e.InstallationUid).HasColumnName("InstallationUID");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.NameAlias)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.OldRecordId).HasColumnName("OldRecordID");

                entity.Property(e => e.ParentLrpcompanyId).HasColumnName("Parent_LRPCompanyID");

                entity.Property(e => e.Phone).HasMaxLength(20);

                entity.Property(e => e.PostalCode).HasMaxLength(20);

                entity.Property(e => e.RecordId)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("RecordID");

                entity.Property(e => e.SortOrder).HasDefaultValueSql("((100))");

                entity.Property(e => e.UpdatedBy).HasMaxLength(50);

                entity.Property(e => e.UpdatedOn).HasColumnType("datetime");

                entity.HasOne(d => d.Country)
                    .WithMany(p => p.Lrpcompanies)
                    .HasForeignKey(d => d.CountryId)
                    .HasConstraintName("FK_LRPCompany_CountryID_Country");

                entity.HasOne(d => d.CountryState)
                    .WithMany(p => p.Lrpcompanies)
                    .HasForeignKey(d => d.CountryStateId)
                    .HasConstraintName("FK_LRPCompany_Country_StateID_Country_State");

                entity.HasOne(d => d.ParentLrpcompany)
                    .WithMany(p => p.InverseParentLrpcompany)
                    .HasForeignKey(d => d.ParentLrpcompanyId)
                    .HasConstraintName("FK_LRPCompany_Parent_LRPCompanyID_LRPCompany");
            });
            //modelBuilder.Entity<Lrpcompany>().Ignore(i => i.ObjectUid);

            modelBuilder.Entity<LrpcompanyGrid>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("LRPCompanyGrid");

                entity.Property(e => e.AddressLineI).HasMaxLength(100);

                entity.Property(e => e.AddressLineIi)
                    .HasMaxLength(100)
                    .HasColumnName("AddressLineII");

                entity.Property(e => e.AddressLineIii)
                    .HasMaxLength(100)
                    .HasColumnName("AddressLineIII");

                entity.Property(e => e.City).HasMaxLength(50);

                entity.Property(e => e.Code)
                    .IsRequired()
                    .HasMaxLength(10);

                entity.Property(e => e.Country).HasMaxLength(50);

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.ObjectUid).HasColumnName("ObjectUID");

                entity.Property(e => e.ParentCompany).HasMaxLength(50);

                entity.Property(e => e.Phone).HasMaxLength(20);

                entity.Property(e => e.PostalCode).HasMaxLength(20);

                entity.Property(e => e.State).HasMaxLength(50);
            });

            modelBuilder.Entity<LrpcostCenter>(entity =>
            {
                entity.HasKey(e => e.ObjectUid);

                entity.ToTable("LRPCostCenter");

                entity.Property(e => e.ObjectUid)
                    .HasColumnName("ObjectUID")
                    .HasDefaultValueSql("(newid())");

                entity.Property(e => e.CreatedBy).HasMaxLength(50);

                entity.Property(e => e.CreatedOn)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Description).HasMaxLength(2000);

                entity.Property(e => e.Display)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasComputedColumnSql("([Name])", false);

                entity.Property(e => e.ImportedObjectUid)
                    .HasMaxLength(50)
                    .HasColumnName("ImportedObjectUID");

                entity.Property(e => e.InstallationUid).HasColumnName("InstallationUID");

                entity.Property(e => e.Lrplm2disbursementCodeId).HasColumnName("LRPLM2DisbursementCodeID");

                entity.Property(e => e.Lrplm2receiptCodeId).HasColumnName("LRPLM2ReceiptCodeID");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.NameAlias)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.OldRecordId).HasColumnName("OldRecordID");

                entity.Property(e => e.RecordId)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("RecordID");

                entity.Property(e => e.SortOrder).HasDefaultValueSql("((100))");

                entity.Property(e => e.UpdatedBy).HasMaxLength(50);

                entity.Property(e => e.UpdatedOn).HasColumnType("datetime");

                entity.HasOne(d => d.Lrplm2disbursementCode)
                    .WithMany(p => p.LrpcostCenters)
                    .HasForeignKey(d => d.Lrplm2disbursementCodeId)
                    .HasConstraintName("FK_LRPCostCenter_LRPLM2DisbursementCodeID_LRPLM2DisbursementCode");

                entity.HasOne(d => d.Lrplm2receiptCode)
                    .WithMany(p => p.LrpcostCenters)
                    .HasForeignKey(d => d.Lrplm2receiptCodeId)
                    .HasConstraintName("FK_LRPCostCenter_LRPLM2ReceiptCodeID_LRPLM2ReceiptCode");
            });

            modelBuilder.Entity<LrpcostCenterGrid>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("LRPCostCenterGrid");

                entity.Property(e => e.Lm2disbursementCode)
                    .HasMaxLength(50)
                    .HasColumnName("LM2DisbursementCode");

                entity.Property(e => e.Lm2receiptCode)
                    .HasMaxLength(50)
                    .HasColumnName("LM2ReceiptCode");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.ObjectUid).HasColumnName("ObjectUID");
            });

            modelBuilder.Entity<Lrpdepartment>(entity =>
            {
                entity.HasKey(e => e.ObjectUid);

                entity.ToTable("LRPDepartment");

                entity.Property(e => e.ObjectUid)
                    .HasColumnName("ObjectUID")
                    .HasDefaultValueSql("(newid())");

                entity.Property(e => e.CreatedBy).HasMaxLength(50);

                entity.Property(e => e.CreatedOn)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DepartmentNo)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Description).HasMaxLength(2000);

                entity.Property(e => e.Display)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasComputedColumnSql("([Name])", false);

                entity.Property(e => e.ImportedObjectUid)
                    .HasMaxLength(50)
                    .HasColumnName("ImportedObjectUID");

                entity.Property(e => e.InstallationUid).HasColumnName("InstallationUID");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.NameAlias)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.OldRecordId).HasColumnName("OldRecordID");

                entity.Property(e => e.RecordId)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("RecordID");

                entity.Property(e => e.SortOrder).HasDefaultValueSql("((100))");

                entity.Property(e => e.UpdatedBy).HasMaxLength(50);

                entity.Property(e => e.UpdatedOn).HasColumnType("datetime");
            });

            modelBuilder.Entity<LrpdepartmentGrid>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("LRPDepartmentGrid");

                entity.Property(e => e.DepartmentNo)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.ObjectUid).HasColumnName("ObjectUID");
            });

            modelBuilder.Entity<LrpdocumentType>(entity =>
            {
                entity.HasKey(e => e.ObjectUid);

                entity.ToTable("LRPDocumentType");

                entity.Property(e => e.ObjectUid)
                    .HasColumnName("ObjectUID")
                    .HasDefaultValueSql("(newid())");

                entity.Property(e => e.CreatedBy).HasMaxLength(50);

                entity.Property(e => e.CreatedOn)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Description).HasMaxLength(2000);

                entity.Property(e => e.Display)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasComputedColumnSql("([Name])", false);

                entity.Property(e => e.ImportedObjectUid)
                    .HasMaxLength(50)
                    .HasColumnName("ImportedObjectUID");

                entity.Property(e => e.InstallationUid).HasColumnName("InstallationUID");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.NameAlias)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.OldRecordId).HasColumnName("OldRecordID");

                entity.Property(e => e.RecordId)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("RecordID");

                entity.Property(e => e.SortOrder).HasDefaultValueSql("((100))");

                entity.Property(e => e.UpdatedBy).HasMaxLength(50);

                entity.Property(e => e.UpdatedOn).HasColumnType("datetime");
            });

            modelBuilder.Entity<LrpdocumentTypeGrid>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("LRPDocumentTypeGrid");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.ObjectUid).HasColumnName("ObjectUID");
            });

            modelBuilder.Entity<Lrpemployee>(entity =>
            {
                entity.HasKey(e => e.ObjectUid);

                entity.ToTable("LRPEmployee");

                entity.Property(e => e.ObjectUid)
                    .HasColumnName("ObjectUID")
                    .HasDefaultValueSql("(newid())");

                entity.Property(e => e.CreatedBy).HasMaxLength(50);

                entity.Property(e => e.CreatedOn)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Description).HasMaxLength(2000);

                entity.Property(e => e.Display)
                    .HasMaxLength(50)
                    .HasComputedColumnSql("([Name])", false);

                entity.Property(e => e.EffectiveDate).HasColumnType("datetime");

                entity.Property(e => e.Email).HasMaxLength(50);

                entity.Property(e => e.EmployeeNo)
                    .IsRequired()
                    .HasMaxLength(20);

                entity.Property(e => e.FirstName)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.HireDate).HasColumnType("datetime");

                entity.Property(e => e.ImportedObjectUid)
                    .HasMaxLength(50)
                    .HasColumnName("ImportedObjectUID");

                entity.Property(e => e.InstallationUid).HasColumnName("InstallationUID");

                entity.Property(e => e.JobTitle)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.LastName)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Login).HasMaxLength(50);

                entity.Property(e => e.LrpcostCenterId).HasColumnName("LRPCostCenterID");

                entity.Property(e => e.LrpdepartmentId).HasColumnName("LRPDepartmentID");

                entity.Property(e => e.LrpemployeeStatusId).HasColumnName("LRPEmployeeStatusID");

                entity.Property(e => e.LrpemployeeTypeId).HasColumnName("LRPEmployeeTypeID");

                entity.Property(e => e.MiddleName).HasMaxLength(15);

                entity.Property(e => e.Name).HasMaxLength(50);

                entity.Property(e => e.NameAlias).HasMaxLength(50);

                entity.Property(e => e.OldRecordId).HasColumnName("OldRecordID");

                entity.Property(e => e.RecordId)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("RecordID");

                entity.Property(e => e.SortOrder).HasDefaultValueSql("((100))");

                entity.Property(e => e.TermDate).HasColumnType("datetime");

                entity.Property(e => e.UpdatedBy).HasMaxLength(50);

                entity.Property(e => e.UpdatedOn).HasColumnType("datetime");

                entity.HasOne(d => d.LrpcostCenter)
                    .WithMany(p => p.Lrpemployees)
                    .HasForeignKey(d => d.LrpcostCenterId)
                    .HasConstraintName("FK_LRPEmployee_LRPCostCenterID_LRPCostCenter");

                entity.HasOne(d => d.Lrpdepartment)
                    .WithMany(p => p.Lrpemployees)
                    .HasForeignKey(d => d.LrpdepartmentId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_LRPEmployee_LRPDepartmentID_LRPDepartment");

                entity.HasOne(d => d.LrpemployeeStatus)
                    .WithMany(p => p.Lrpemployees)
                    .HasForeignKey(d => d.LrpemployeeStatusId)
                    .HasConstraintName("FK_LRPEmployee_LRPEmployeeStatusID_LRPEmployeeStatus");

                entity.HasOne(d => d.LrpemployeeType)
                    .WithMany(p => p.Lrpemployees)
                    .HasForeignKey(d => d.LrpemployeeTypeId)
                    .HasConstraintName("FK_LRPEmployee_LRPEmployeeTypeID_LRPEmployeeType");
            });

            modelBuilder.Entity<LrpemployeeGrid>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("LRPEmployeeGrid");

                entity.Property(e => e.CostCenter).HasMaxLength(50);

                entity.Property(e => e.Department)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.EffectiveDate).HasColumnType("datetime");

                entity.Property(e => e.Email).HasMaxLength(50);

                entity.Property(e => e.EmployeeNo)
                    .IsRequired()
                    .HasMaxLength(20);

                entity.Property(e => e.EmployeeStatus).HasMaxLength(50);

                entity.Property(e => e.EmployeeType).HasMaxLength(50);

                entity.Property(e => e.FirstName)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.HireDate).HasColumnType("datetime");

                entity.Property(e => e.JobTitle)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.LastName)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Login).HasMaxLength(50);

                entity.Property(e => e.MiddleName)
                    .IsRequired()
                    .HasMaxLength(15);

                entity.Property(e => e.ObjectUid).HasColumnName("ObjectUID");

                entity.Property(e => e.TermDate).HasColumnType("datetime");
            });

            modelBuilder.Entity<LrpemployeeStatus>(entity =>
            {
                entity.HasKey(e => e.ObjectUid);

                entity.ToTable("LRPEmployeeStatus");

                entity.Property(e => e.ObjectUid)
                    .HasColumnName("ObjectUID")
                    .HasDefaultValueSql("(newid())");

                entity.Property(e => e.CreatedBy).HasMaxLength(50);

                entity.Property(e => e.CreatedOn)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Description).HasMaxLength(2000);

                entity.Property(e => e.Display)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasComputedColumnSql("([Name])", false);

                entity.Property(e => e.ImportedObjectUid)
                    .HasMaxLength(50)
                    .HasColumnName("ImportedObjectUID");

                entity.Property(e => e.InstallationUid).HasColumnName("InstallationUID");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.NameAlias)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.OldRecordId).HasColumnName("OldRecordID");

                entity.Property(e => e.RecordId)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("RecordID");

                entity.Property(e => e.SortOrder).HasDefaultValueSql("((100))");

                entity.Property(e => e.UpdatedBy).HasMaxLength(50);

                entity.Property(e => e.UpdatedOn).HasColumnType("datetime");
            });

            modelBuilder.Entity<LrpemployeeStatusGrid>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("LRPEmployeeStatusGrid");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.ObjectUid).HasColumnName("ObjectUID");
            });

            modelBuilder.Entity<LrpemployeeType>(entity =>
            {
                entity.HasKey(e => e.ObjectUid);

                entity.ToTable("LRPEmployeeType");

                entity.Property(e => e.ObjectUid)
                    .HasColumnName("ObjectUID")
                    .HasDefaultValueSql("(newid())");

                entity.Property(e => e.CreatedBy).HasMaxLength(50);

                entity.Property(e => e.CreatedOn)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Description).HasMaxLength(2000);

                entity.Property(e => e.Display)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasComputedColumnSql("([Name])", false);

                entity.Property(e => e.ImportedObjectUid)
                    .HasMaxLength(50)
                    .HasColumnName("ImportedObjectUID");

                entity.Property(e => e.InstallationUid).HasColumnName("InstallationUID");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.NameAlias)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.OldRecordId).HasColumnName("OldRecordID");

                entity.Property(e => e.RecordId)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("RecordID");

                entity.Property(e => e.SortOrder).HasDefaultValueSql("((100))");

                entity.Property(e => e.UpdatedBy).HasMaxLength(50);

                entity.Property(e => e.UpdatedOn).HasColumnType("datetime");
            });

            modelBuilder.Entity<LrpemployeeTypeGrid>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("LRPEmployeeTypeGrid");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.ObjectUid).HasColumnName("ObjectUID");
            });

            modelBuilder.Entity<LrpfinancialStatementGroup>(entity =>
            {
                entity.HasKey(e => e.ObjectUid);

                entity.ToTable("LRPFinancialStatementGroup");

                entity.Property(e => e.ObjectUid)
                    .HasColumnName("ObjectUID")
                    .HasDefaultValueSql("(newid())");

                entity.Property(e => e.CreatedBy).HasMaxLength(50);

                entity.Property(e => e.CreatedOn)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Description).HasMaxLength(2000);

                entity.Property(e => e.Display)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasComputedColumnSql("([Name])", false);

                entity.Property(e => e.ImportedObjectUid)
                    .HasMaxLength(50)
                    .HasColumnName("ImportedObjectUID");

                entity.Property(e => e.InstallationUid).HasColumnName("InstallationUID");

                entity.Property(e => e.LrpcostCenterId).HasColumnName("LRPCostCenterID");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.NameAlias)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.OldRecordId).HasColumnName("OldRecordID");

                entity.Property(e => e.RecordId)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("RecordID");

                entity.Property(e => e.SortOrder).HasDefaultValueSql("((100))");

                entity.Property(e => e.UpdatedBy).HasMaxLength(50);

                entity.Property(e => e.UpdatedOn).HasColumnType("datetime");

                entity.HasOne(d => d.LrpcostCenter)
                    .WithMany(p => p.LrpfinancialStatementGroups)
                    .HasForeignKey(d => d.LrpcostCenterId)
                    .HasConstraintName("FK_LRPFinancialStatementGroup_LRPCostCenterID_LRPCostCenter");
            });

            modelBuilder.Entity<LrpfinancialStatementGroupGrid>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("LRPFinancialStatementGroupGrid");

                entity.Property(e => e.CostCenter).HasMaxLength(50);

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.ObjectUid).HasColumnName("ObjectUID");
            });

            modelBuilder.Entity<LrpgltranactionProject>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("lrpgltranaction_project");

                entity.Property(e => e.Acct)
                    .HasMaxLength(75)
                    .HasColumnName("ACCT");

                entity.Property(e => e.Amount).HasColumnName("AMOUNT");

                entity.Property(e => e.Auditnbr)
                    .HasMaxLength(75)
                    .HasColumnName("AUDITNBR");

                entity.Property(e => e.Batnbr)
                    .HasMaxLength(75)
                    .HasColumnName("BATNBR");

                entity.Property(e => e.BdgaccountGroup)
                    .HasMaxLength(50)
                    .HasColumnName("BDGAccountGroup");

                entity.Property(e => e.BdgaccountGroupId).HasColumnName("BDGAccountGroupID");

                entity.Property(e => e.BdgaccountGroupSubGroup)
                    .HasMaxLength(50)
                    .HasColumnName("BDGAccountGroup_SubGroup");

                entity.Property(e => e.BdgaccountGroupSubGroupSubGroup)
                    .HasMaxLength(50)
                    .HasColumnName("BDGAccountGroup_SubGroup_SubGroup");

                entity.Property(e => e.BdgaccountGroupSubGroupSubGroupSubGroup)
                    .HasMaxLength(50)
                    .HasColumnName("BDGAccountGroup_SubGroup_SubGroup_SubGroup");

                entity.Property(e => e.Bdgdepartment)
                    .HasMaxLength(50)
                    .HasColumnName("BDGDepartment");

                entity.Property(e => e.BdgdepartmentId2).HasColumnName("BDGDepartmentID2");

                entity.Property(e => e.Checkdate)
                    .HasColumnType("datetime")
                    .HasColumnName("CHECKDATE");

                entity.Property(e => e.Checkdate2)
                    .HasColumnType("datetime")
                    .HasColumnName("CHECKDATE2");

                entity.Property(e => e.Checkdate3)
                    .HasColumnType("datetime")
                    .HasColumnName("CHECKDATE3");

                entity.Property(e => e.Checkno)
                    .HasMaxLength(75)
                    .HasColumnName("CHECKNO");

                entity.Property(e => e.Checkno2)
                    .HasMaxLength(75)
                    .HasColumnName("CHECKNO2");

                entity.Property(e => e.Checkno3)
                    .HasMaxLength(75)
                    .HasColumnName("CHECKNO3");

                entity.Property(e => e.Classid)
                    .HasMaxLength(75)
                    .HasColumnName("CLASSID");

                entity.Property(e => e.Cpnyid)
                    .HasMaxLength(75)
                    .HasColumnName("CPNYID");

                entity.Property(e => e.CreatedBy).HasMaxLength(50);

                entity.Property(e => e.CreatedOn).HasColumnType("datetime");

                entity.Property(e => e.CrtdDatetime)
                    .HasColumnType("datetime")
                    .HasColumnName("CRTD_DATETIME");

                entity.Property(e => e.CrtdUser)
                    .HasMaxLength(75)
                    .HasColumnName("CRTD_USER");

                entity.Property(e => e.CssLink)
                    .HasMaxLength(255)
                    .HasColumnName("css_link")
                    .IsFixedLength(true);

                entity.Property(e => e.CssLinkLines)
                    .HasMaxLength(255)
                    .HasColumnName("css_link_lines")
                    .IsFixedLength(true);

                entity.Property(e => e.Curyid)
                    .HasMaxLength(75)
                    .HasColumnName("CURYID");

                entity.Property(e => e.Curyrate).HasColumnName("CURYRATE");

                entity.Property(e => e.Descr)
                    .HasMaxLength(75)
                    .HasColumnName("DESCR");

                entity.Property(e => e.Description).HasMaxLength(2000);

                entity.Property(e => e.Display).HasMaxLength(100);

                entity.Property(e => e.Docnbr)
                    .HasMaxLength(75)
                    .HasColumnName("DOCNBR");

                entity.Property(e => e.EmpFiscyrAcct)
                    .HasMaxLength(250)
                    .HasColumnName("EMP_FISCYR_ACCT");

                entity.Property(e => e.EmployeeCode)
                    .HasMaxLength(75)
                    .HasColumnName("EMPLOYEE_CODE");

                entity.Property(e => e.FinalId)
                    .HasMaxLength(75)
                    .HasColumnName("FINAL_ID");

                entity.Property(e => e.Fiscyr)
                    .HasMaxLength(75)
                    .HasColumnName("FISCYR");

                entity.Property(e => e.FiscyrAcct)
                    .HasMaxLength(50)
                    .HasColumnName("FISCYR_ACCT");

                entity.Property(e => e.GrantNo).HasMaxLength(75);

                entity.Property(e => e.IcDistribution).HasColumnName("IC_DISTRIBUTION");

                entity.Property(e => e.Id)
                    .HasMaxLength(75)
                    .HasColumnName("ID");

                entity.Property(e => e.IdField)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("ID_FIELD");

                entity.Property(e => e.ImportedObjectUid)
                    .HasMaxLength(50)
                    .HasColumnName("ImportedObjectUID");

                entity.Property(e => e.InstallationUid).HasColumnName("InstallationUID");

                entity.Property(e => e.Jrnltype)
                    .HasMaxLength(75)
                    .HasColumnName("JRNLTYPE");

                entity.Property(e => e.Ledgerid)
                    .HasMaxLength(75)
                    .HasColumnName("LEDGERID");

                entity.Property(e => e.Lineid).HasColumnName("LINEID");

                entity.Property(e => e.Linenbr).HasColumnName("LINENBR");

                entity.Property(e => e.Lineref)
                    .HasMaxLength(75)
                    .HasColumnName("LINEREF");

                entity.Property(e => e.Lm2Code)
                    .HasMaxLength(75)
                    .HasColumnName("LM2_CODE");

                entity.Property(e => e.Lm2Description)
                    .HasMaxLength(75)
                    .HasColumnName("LM2 DESCRIPTION");

                entity.Property(e => e.Lm2Fiscyr)
                    .HasMaxLength(250)
                    .HasColumnName("LM2_FISCYR");

                entity.Property(e => e.Lm2FiscyrAcct)
                    .HasMaxLength(250)
                    .HasColumnName("LM2_FISCYR_ACCT");

                entity.Property(e => e.Lm2FiscyrEmpAcct)
                    .HasMaxLength(250)
                    .HasColumnName("LM2_FISCYR_EMP_ACCT");

                entity.Property(e => e.LrpcompanyId).HasColumnName("LRPCompanyID");

                entity.Property(e => e.LupdDatetime)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("LUPD_DATETIME");

                entity.Property(e => e.LupdUser)
                    .HasMaxLength(75)
                    .HasColumnName("LUPD_USER");

                entity.Property(e => e.Masterid)
                    .HasMaxLength(75)
                    .HasColumnName("MASTERID");

                entity.Property(e => e.Module)
                    .HasMaxLength(75)
                    .HasColumnName("MODULE");

                entity.Property(e => e.Multiplechecks1)
                    .HasMaxLength(75)
                    .HasColumnName("MULTIPLECHECKS_1");

                entity.Property(e => e.Multiplechecks2)
                    .HasMaxLength(75)
                    .HasColumnName("MULTIPLECHECKS_2");

                entity.Property(e => e.Name).HasMaxLength(100);

                entity.Property(e => e.NameAlias).HasMaxLength(100);

                entity.Property(e => e.Noteid).HasColumnName("NOTEID");

                entity.Property(e => e.ObjectUid).HasColumnName("ObjectUID");

                entity.Property(e => e.OldRecordId).HasColumnName("OldRecordID");

                entity.Property(e => e.Perent)
                    .HasMaxLength(75)
                    .HasColumnName("PERENT");

                entity.Property(e => e.Perpost)
                    .HasMaxLength(75)
                    .HasColumnName("PERPOST");

                entity.Property(e => e.Posted)
                    .HasMaxLength(75)
                    .HasColumnName("POSTED");

                entity.Property(e => e.RecordId)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("RecordID");

                entity.Property(e => e.Refnbr)
                    .HasMaxLength(75)
                    .HasColumnName("REFNBR");

                entity.Property(e => e.SalesTaxAmount).HasColumnType("money");

                entity.Property(e => e.SalesTaxYesNoId).HasColumnName("SalesTax_YesNoID");

                entity.Property(e => e.Seg1)
                    .HasMaxLength(75)
                    .HasColumnName("SEG1");

                entity.Property(e => e.Seg10)
                    .HasMaxLength(75)
                    .HasColumnName("SEG10");

                entity.Property(e => e.Seg2)
                    .HasMaxLength(75)
                    .HasColumnName("SEG2");

                entity.Property(e => e.Seg3)
                    .HasMaxLength(75)
                    .HasColumnName("SEG3");

                entity.Property(e => e.Seg4)
                    .HasMaxLength(75)
                    .HasColumnName("SEG4");

                entity.Property(e => e.Seg5)
                    .HasMaxLength(75)
                    .HasColumnName("SEG5");

                entity.Property(e => e.Seg6)
                    .HasMaxLength(75)
                    .HasColumnName("SEG6");

                entity.Property(e => e.Seg7)
                    .HasMaxLength(75)
                    .HasColumnName("SEG7");

                entity.Property(e => e.Seg8)
                    .HasMaxLength(75)
                    .HasColumnName("SEG8");

                entity.Property(e => e.Seg9)
                    .HasMaxLength(75)
                    .HasColumnName("SEG9");

                entity.Property(e => e.Sub)
                    .HasMaxLength(75)
                    .HasColumnName("SUB");

                entity.Property(e => e.Trandate)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("TRANDATE");

                entity.Property(e => e.Trandesc)
                    .HasMaxLength(75)
                    .HasColumnName("TRANDESC");

                entity.Property(e => e.Trantype)
                    .HasMaxLength(75)
                    .HasColumnName("TRANTYPE");

                entity.Property(e => e.Tstamp)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("TSTAMP");

                entity.Property(e => e.UpdatedBy).HasMaxLength(50);

                entity.Property(e => e.UpdatedOn).HasColumnType("datetime");

                entity.Property(e => e.Userdefined1)
                    .HasMaxLength(75)
                    .HasColumnName("USERDEFINED_1");

                entity.Property(e => e.Userdefined2)
                    .HasMaxLength(75)
                    .HasColumnName("USERDEFINED_2");

                entity.Property(e => e.Vclassid)
                    .HasMaxLength(75)
                    .HasColumnName("VCLASSID");

                entity.Property(e => e.VendorFiscyrAcct)
                    .HasMaxLength(250)
                    .HasColumnName("VENDOR_FISCYR_ACCT");

                entity.Property(e => e.YearSetupId).HasColumnName("YearSetupID");
            });

            modelBuilder.Entity<Lrpgltransaction>(entity =>
            {
                entity.HasKey(e => e.ObjectUid);

                entity.ToTable("LRPGLTransaction");

                entity.Property(e => e.ObjectUid)
                    .HasColumnName("ObjectUID")
                    .HasDefaultValueSql("(newid())");

                entity.Property(e => e.Acct)
                    .HasMaxLength(75)
                    .HasColumnName("ACCT");

                entity.Property(e => e.Amount).HasColumnName("AMOUNT");

                entity.Property(e => e.Auditnbr)
                    .HasMaxLength(75)
                    .HasColumnName("AUDITNBR");

                entity.Property(e => e.Batnbr)
                    .HasMaxLength(75)
                    .HasColumnName("BATNBR");

                entity.Property(e => e.BdgaccountGroup)
                    .HasMaxLength(50)
                    .HasColumnName("BDGAccountGroup");

                entity.Property(e => e.BdgaccountGroupId).HasColumnName("BDGAccountGroupID");

                entity.Property(e => e.BdgaccountGroupSubGroup)
                    .HasMaxLength(50)
                    .HasColumnName("BDGAccountGroup_SubGroup");

                entity.Property(e => e.BdgaccountGroupSubGroupSubGroup)
                    .HasMaxLength(50)
                    .HasColumnName("BDGAccountGroup_SubGroup_SubGroup");

                entity.Property(e => e.BdgaccountGroupSubGroupSubGroupSubGroup)
                    .HasMaxLength(50)
                    .HasColumnName("BDGAccountGroup_SubGroup_SubGroup_SubGroup");

                entity.Property(e => e.Bdgdepartment)
                    .HasMaxLength(50)
                    .HasColumnName("BDGDepartment");

                entity.Property(e => e.BdgdepartmentId2).HasColumnName("BDGDepartmentID2");

                entity.Property(e => e.CalculatedAmount).HasComputedColumnSql("([salestaxamount]*[salestaxrate])", false);

                entity.Property(e => e.Checkdate)
                    .HasColumnType("datetime")
                    .HasColumnName("CHECKDATE");

                entity.Property(e => e.Checkdate2)
                    .HasColumnType("datetime")
                    .HasColumnName("CHECKDATE2");

                entity.Property(e => e.Checkdate3)
                    .HasColumnType("datetime")
                    .HasColumnName("CHECKDATE3");

                entity.Property(e => e.Checkno)
                    .HasMaxLength(75)
                    .HasColumnName("CHECKNO");

                entity.Property(e => e.Checkno2)
                    .HasMaxLength(75)
                    .HasColumnName("CHECKNO2");

                entity.Property(e => e.Checkno3)
                    .HasMaxLength(75)
                    .HasColumnName("CHECKNO3");

                entity.Property(e => e.Classid)
                    .HasMaxLength(75)
                    .HasColumnName("CLASSID");

                entity.Property(e => e.Cpnyid)
                    .HasMaxLength(75)
                    .HasColumnName("CPNYID");

                entity.Property(e => e.CreatedBy).HasMaxLength(50);

                entity.Property(e => e.CreatedOn)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.CrtdDatetime)
                    .HasColumnType("datetime")
                    .HasColumnName("CRTD_DATETIME");

                entity.Property(e => e.CrtdUser)
                    .HasMaxLength(75)
                    .HasColumnName("CRTD_USER");

                entity.Property(e => e.CssLink)
                    .HasMaxLength(255)
                    .HasColumnName("css_link")
                    .IsFixedLength(true);

                entity.Property(e => e.CssLinkLines)
                    .HasMaxLength(255)
                    .HasColumnName("css_link_lines")
                    .IsFixedLength(true);

                entity.Property(e => e.Curyid)
                    .HasMaxLength(75)
                    .HasColumnName("CURYID");

                entity.Property(e => e.Curyrate).HasColumnName("CURYRATE");

                entity.Property(e => e.Descr)
                    .HasMaxLength(75)
                    .HasColumnName("DESCR");

                entity.Property(e => e.Description).HasMaxLength(2000);

                entity.Property(e => e.Display)
                    .HasMaxLength(100)
                    .HasComputedColumnSql("([Name])", false);

                entity.Property(e => e.Docnbr)
                    .HasMaxLength(75)
                    .HasColumnName("DOCNBR");

                entity.Property(e => e.EmpFiscyrAcct)
                    .HasMaxLength(250)
                    .HasColumnName("EMP_FISCYR_ACCT");

                entity.Property(e => e.EmployeeCode)
                    .HasMaxLength(75)
                    .HasColumnName("EMPLOYEE_CODE");

                entity.Property(e => e.FinalId)
                    .HasMaxLength(75)
                    .HasColumnName("FINAL_ID");

                entity.Property(e => e.Fiscyr)
                    .HasMaxLength(75)
                    .HasColumnName("FISCYR");

                entity.Property(e => e.FiscyrAcct)
                    .HasMaxLength(50)
                    .HasColumnName("FISCYR_ACCT");

                entity.Property(e => e.GrantNo).HasMaxLength(75);

                entity.Property(e => e.IcDistribution).HasColumnName("IC_DISTRIBUTION");

                entity.Property(e => e.Id)
                    .HasMaxLength(75)
                    .HasColumnName("ID");

                entity.Property(e => e.IdField)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("ID_FIELD");

                entity.Property(e => e.ImportedObjectUid)
                    .HasMaxLength(50)
                    .HasColumnName("ImportedObjectUID");

                entity.Property(e => e.InstallationUid).HasColumnName("InstallationUID");

                entity.Property(e => e.Jrnltype)
                    .HasMaxLength(75)
                    .HasColumnName("JRNLTYPE");

                entity.Property(e => e.Ledgerid)
                    .HasMaxLength(75)
                    .HasColumnName("LEDGERID");

                entity.Property(e => e.Lineid).HasColumnName("LINEID");

                entity.Property(e => e.Linenbr).HasColumnName("LINENBR");

                entity.Property(e => e.Lineref)
                    .HasMaxLength(75)
                    .HasColumnName("LINEREF");

                entity.Property(e => e.Lm2Code)
                    .HasMaxLength(75)
                    .HasColumnName("LM2_CODE");

                entity.Property(e => e.Lm2Description)
                    .HasMaxLength(75)
                    .HasColumnName("LM2 DESCRIPTION");

                entity.Property(e => e.Lm2Fiscyr)
                    .HasMaxLength(250)
                    .HasColumnName("LM2_FISCYR");

                entity.Property(e => e.Lm2FiscyrAcct)
                    .HasMaxLength(250)
                    .HasColumnName("LM2_FISCYR_ACCT");

                entity.Property(e => e.Lm2FiscyrEmpAcct)
                    .HasMaxLength(250)
                    .HasColumnName("LM2_FISCYR_EMP_ACCT");

                entity.Property(e => e.LrpcompanyId).HasColumnName("LRPCompanyID");

                entity.Property(e => e.LupdDatetime)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("LUPD_DATETIME");

                entity.Property(e => e.LupdUser)
                    .HasMaxLength(75)
                    .HasColumnName("LUPD_USER");

                entity.Property(e => e.Masterid)
                    .HasMaxLength(75)
                    .HasColumnName("MASTERID");

                entity.Property(e => e.Module)
                    .HasMaxLength(75)
                    .HasColumnName("MODULE");

                entity.Property(e => e.Multiplechecks1)
                    .HasMaxLength(75)
                    .HasColumnName("MULTIPLECHECKS_1");

                entity.Property(e => e.Multiplechecks2)
                    .HasMaxLength(75)
                    .HasColumnName("MULTIPLECHECKS_2");

                entity.Property(e => e.Name).HasMaxLength(100);

                entity.Property(e => e.NameAlias).HasMaxLength(100);

                entity.Property(e => e.Noteid).HasColumnName("NOTEID");

                entity.Property(e => e.OldRecordId).HasColumnName("OldRecordID");

                entity.Property(e => e.Perent)
                    .HasMaxLength(75)
                    .HasColumnName("PERENT");

                entity.Property(e => e.Perpost)
                    .HasMaxLength(75)
                    .HasColumnName("PERPOST");

                entity.Property(e => e.Posted)
                    .HasMaxLength(75)
                    .HasColumnName("POSTED");

                entity.Property(e => e.RecordId)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("RecordID");

                entity.Property(e => e.Refnbr)
                    .HasMaxLength(75)
                    .HasColumnName("REFNBR");

                entity.Property(e => e.SalesTaxAmount).HasColumnType("money");

                entity.Property(e => e.SalesTaxYesNoId).HasColumnName("SalesTax_YesNoID");

                entity.Property(e => e.Seg1)
                    .HasMaxLength(75)
                    .HasColumnName("SEG1");

                entity.Property(e => e.Seg10)
                    .HasMaxLength(75)
                    .HasColumnName("SEG10");

                entity.Property(e => e.Seg2)
                    .HasMaxLength(75)
                    .HasColumnName("SEG2");

                entity.Property(e => e.Seg3)
                    .HasMaxLength(75)
                    .HasColumnName("SEG3");

                entity.Property(e => e.Seg4)
                    .HasMaxLength(75)
                    .HasColumnName("SEG4");

                entity.Property(e => e.Seg5)
                    .HasMaxLength(75)
                    .HasColumnName("SEG5");

                entity.Property(e => e.Seg6)
                    .HasMaxLength(75)
                    .HasColumnName("SEG6");

                entity.Property(e => e.Seg7)
                    .HasMaxLength(75)
                    .HasColumnName("SEG7");

                entity.Property(e => e.Seg8)
                    .HasMaxLength(75)
                    .HasColumnName("SEG8");

                entity.Property(e => e.Seg9)
                    .HasMaxLength(75)
                    .HasColumnName("SEG9");

                entity.Property(e => e.SortOrder).HasDefaultValueSql("((100))");

                entity.Property(e => e.Sub)
                    .HasMaxLength(75)
                    .HasColumnName("SUB");

                entity.Property(e => e.Trandate)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("TRANDATE");

                entity.Property(e => e.Trandesc)
                    .HasMaxLength(75)
                    .HasColumnName("TRANDESC");

                entity.Property(e => e.Trantype)
                    .HasMaxLength(75)
                    .HasColumnName("TRANTYPE");

                entity.Property(e => e.Tstamp)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("TSTAMP");

                entity.Property(e => e.UpdatedBy).HasMaxLength(50);

                entity.Property(e => e.UpdatedOn).HasColumnType("datetime");

                entity.Property(e => e.Userdefined1)
                    .HasMaxLength(75)
                    .HasColumnName("USERDEFINED_1");

                entity.Property(e => e.Userdefined2)
                    .HasMaxLength(75)
                    .HasColumnName("USERDEFINED_2");

                entity.Property(e => e.Vclassid)
                    .HasMaxLength(75)
                    .HasColumnName("VCLASSID");

                entity.Property(e => e.VendorFiscyrAcct)
                    .HasMaxLength(250)
                    .HasColumnName("VENDOR_FISCYR_ACCT");

                entity.Property(e => e.YearSetupId).HasColumnName("YearSetupID");

                entity.HasOne(d => d.Lrpcompany)
                    .WithMany(p => p.Lrpgltransactions)
                    .HasForeignKey(d => d.LrpcompanyId)
                    .HasConstraintName("FK_LRPGLTransaction_LRPCompanyID_LRPCompany");

                entity.HasOne(d => d.SalesTaxYesNo)
                    .WithMany(p => p.Lrpgltransactions)
                    .HasForeignKey(d => d.SalesTaxYesNoId)
                    .HasConstraintName("FK_LRPGLTransaction_SalesTax_YesNoID_YesNo");
            });

            modelBuilder.Entity<Lrpgltransaction30Zero>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("lrpgltransaction_30_zero");

                entity.Property(e => e.Amount).HasColumnName("amount");

                entity.Property(e => e.CHeckno)
                    .HasMaxLength(75)
                    .HasColumnName("cHECKNO");

                entity.Property(e => e.Checkdate)
                    .HasColumnType("datetime")
                    .HasColumnName("CHECKDATE");

                entity.Property(e => e.Cpnyid)
                    .HasMaxLength(75)
                    .HasColumnName("cpnyid");

                entity.Property(e => e.FinalId)
                    .HasMaxLength(75)
                    .HasColumnName("FINAL_ID");

                entity.Property(e => e.Fiscyr)
                    .HasMaxLength(75)
                    .HasColumnName("FISCYR");

                entity.Property(e => e.Lm2Code)
                    .HasMaxLength(75)
                    .HasColumnName("LM2_CODE");
            });

            modelBuilder.Entity<LrpgltransactionA0001>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("lrpgltransaction_a0001");

                entity.Property(e => e.Acct)
                    .HasMaxLength(75)
                    .HasColumnName("ACCT");

                entity.Property(e => e.Amount).HasColumnName("AMOUNT");

                entity.Property(e => e.Auditnbr)
                    .HasMaxLength(75)
                    .HasColumnName("AUDITNBR");

                entity.Property(e => e.Batnbr)
                    .HasMaxLength(75)
                    .HasColumnName("BATNBR");

                entity.Property(e => e.BdgaccountGroup)
                    .HasMaxLength(50)
                    .HasColumnName("BDGAccountGroup");

                entity.Property(e => e.BdgaccountGroupSubGroup)
                    .HasMaxLength(50)
                    .HasColumnName("BDGAccountGroup_SubGroup");

                entity.Property(e => e.BdgaccountGroupSubGroupSubGroup)
                    .HasMaxLength(50)
                    .HasColumnName("BDGAccountGroup_SubGroup_SubGroup");

                entity.Property(e => e.BdgaccountGroupSubGroupSubGroupSubGroup)
                    .HasMaxLength(50)
                    .HasColumnName("BDGAccountGroup_SubGroup_SubGroup_SubGroup");

                entity.Property(e => e.Bdgdepartment)
                    .HasMaxLength(50)
                    .HasColumnName("BDGDepartment");

                entity.Property(e => e.Checkdate)
                    .HasColumnType("datetime")
                    .HasColumnName("CHECKDATE");

                entity.Property(e => e.Checkdate2)
                    .HasColumnType("datetime")
                    .HasColumnName("CHECKDATE2");

                entity.Property(e => e.Checkdate3)
                    .HasColumnType("datetime")
                    .HasColumnName("CHECKDATE3");

                entity.Property(e => e.Checkno)
                    .HasMaxLength(75)
                    .HasColumnName("CHECKNO");

                entity.Property(e => e.Checkno2)
                    .HasMaxLength(75)
                    .HasColumnName("CHECKNO2");

                entity.Property(e => e.Checkno3)
                    .HasMaxLength(75)
                    .HasColumnName("CHECKNO3");

                entity.Property(e => e.Classid)
                    .HasMaxLength(75)
                    .HasColumnName("CLASSID");

                entity.Property(e => e.Cpnyid)
                    .HasMaxLength(75)
                    .HasColumnName("CPNYID");

                entity.Property(e => e.CreatedBy).HasMaxLength(50);

                entity.Property(e => e.CreatedOn).HasColumnType("datetime");

                entity.Property(e => e.CrtdDatetime)
                    .HasColumnType("datetime")
                    .HasColumnName("CRTD_DATETIME");

                entity.Property(e => e.CrtdUser)
                    .HasMaxLength(75)
                    .HasColumnName("CRTD_USER");

                entity.Property(e => e.CssLink)
                    .HasMaxLength(255)
                    .HasColumnName("css_link")
                    .IsFixedLength(true);

                entity.Property(e => e.CssLinkLines)
                    .HasMaxLength(255)
                    .HasColumnName("css_link_lines")
                    .IsFixedLength(true);

                entity.Property(e => e.Curyid)
                    .HasMaxLength(75)
                    .HasColumnName("CURYID");

                entity.Property(e => e.Curyrate).HasColumnName("CURYRATE");

                entity.Property(e => e.Descr)
                    .HasMaxLength(75)
                    .HasColumnName("DESCR");

                entity.Property(e => e.Description).HasMaxLength(2000);

                entity.Property(e => e.Display).HasMaxLength(100);

                entity.Property(e => e.Docnbr)
                    .HasMaxLength(75)
                    .HasColumnName("DOCNBR");

                entity.Property(e => e.EmpFiscyrAcct)
                    .HasMaxLength(250)
                    .HasColumnName("EMP_FISCYR_ACCT");

                entity.Property(e => e.EmployeeCode)
                    .HasMaxLength(75)
                    .HasColumnName("EMPLOYEE_CODE");

                entity.Property(e => e.FinalId)
                    .HasMaxLength(75)
                    .HasColumnName("FINAL_ID");

                entity.Property(e => e.Fiscyr)
                    .HasMaxLength(75)
                    .HasColumnName("FISCYR");

                entity.Property(e => e.FiscyrAcct)
                    .HasMaxLength(50)
                    .HasColumnName("FISCYR_ACCT");

                entity.Property(e => e.GrantNo).HasMaxLength(75);

                entity.Property(e => e.IcDistribution).HasColumnName("IC_DISTRIBUTION");

                entity.Property(e => e.Id)
                    .HasMaxLength(75)
                    .HasColumnName("ID");

                entity.Property(e => e.IdField)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("ID_FIELD");

                entity.Property(e => e.ImportedObjectUid)
                    .HasMaxLength(50)
                    .HasColumnName("ImportedObjectUID");

                entity.Property(e => e.InstallationUid).HasColumnName("InstallationUID");

                entity.Property(e => e.Jrnltype)
                    .HasMaxLength(75)
                    .HasColumnName("JRNLTYPE");

                entity.Property(e => e.Ledgerid)
                    .HasMaxLength(75)
                    .HasColumnName("LEDGERID");

                entity.Property(e => e.Lineid).HasColumnName("LINEID");

                entity.Property(e => e.Linenbr).HasColumnName("LINENBR");

                entity.Property(e => e.Lineref)
                    .HasMaxLength(75)
                    .HasColumnName("LINEREF");

                entity.Property(e => e.Lm2Code)
                    .HasMaxLength(75)
                    .HasColumnName("LM2_CODE");

                entity.Property(e => e.Lm2Description)
                    .HasMaxLength(75)
                    .HasColumnName("LM2 DESCRIPTION");

                entity.Property(e => e.Lm2Fiscyr)
                    .HasMaxLength(250)
                    .HasColumnName("LM2_FISCYR");

                entity.Property(e => e.Lm2FiscyrAcct)
                    .HasMaxLength(250)
                    .HasColumnName("LM2_FISCYR_ACCT");

                entity.Property(e => e.Lm2FiscyrEmpAcct)
                    .HasMaxLength(250)
                    .HasColumnName("LM2_FISCYR_EMP_ACCT");

                entity.Property(e => e.LrpcompanyId).HasColumnName("LRPCompanyID");

                entity.Property(e => e.LupdDatetime)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("LUPD_DATETIME");

                entity.Property(e => e.LupdUser)
                    .HasMaxLength(75)
                    .HasColumnName("LUPD_USER");

                entity.Property(e => e.Masterid)
                    .HasMaxLength(75)
                    .HasColumnName("MASTERID");

                entity.Property(e => e.Module)
                    .HasMaxLength(75)
                    .HasColumnName("MODULE");

                entity.Property(e => e.Multiplechecks1)
                    .HasMaxLength(75)
                    .HasColumnName("MULTIPLECHECKS_1");

                entity.Property(e => e.Multiplechecks2)
                    .HasMaxLength(75)
                    .HasColumnName("MULTIPLECHECKS_2");

                entity.Property(e => e.Name).HasMaxLength(100);

                entity.Property(e => e.NameAlias).HasMaxLength(100);

                entity.Property(e => e.Noteid).HasColumnName("NOTEID");

                entity.Property(e => e.ObjectUid).HasColumnName("ObjectUID");

                entity.Property(e => e.OldRecordId).HasColumnName("OldRecordID");

                entity.Property(e => e.Perent)
                    .HasMaxLength(75)
                    .HasColumnName("PERENT");

                entity.Property(e => e.Perpost)
                    .HasMaxLength(75)
                    .HasColumnName("PERPOST");

                entity.Property(e => e.Posted)
                    .HasMaxLength(75)
                    .HasColumnName("POSTED");

                entity.Property(e => e.RecordId)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("RecordID");

                entity.Property(e => e.Refnbr)
                    .HasMaxLength(75)
                    .HasColumnName("REFNBR");

                entity.Property(e => e.SalesTaxAmount).HasColumnType("money");

                entity.Property(e => e.SalesTaxYesNoId).HasColumnName("SalesTax_YesNoID");

                entity.Property(e => e.Seg1)
                    .HasMaxLength(75)
                    .HasColumnName("SEG1");

                entity.Property(e => e.Seg10)
                    .HasMaxLength(75)
                    .HasColumnName("SEG10");

                entity.Property(e => e.Seg2)
                    .HasMaxLength(75)
                    .HasColumnName("SEG2");

                entity.Property(e => e.Seg3)
                    .HasMaxLength(75)
                    .HasColumnName("SEG3");

                entity.Property(e => e.Seg4)
                    .HasMaxLength(75)
                    .HasColumnName("SEG4");

                entity.Property(e => e.Seg5)
                    .HasMaxLength(75)
                    .HasColumnName("SEG5");

                entity.Property(e => e.Seg6)
                    .HasMaxLength(75)
                    .HasColumnName("SEG6");

                entity.Property(e => e.Seg7)
                    .HasMaxLength(75)
                    .HasColumnName("SEG7");

                entity.Property(e => e.Seg8)
                    .HasMaxLength(75)
                    .HasColumnName("SEG8");

                entity.Property(e => e.Seg9)
                    .HasMaxLength(75)
                    .HasColumnName("SEG9");

                entity.Property(e => e.Sub)
                    .HasMaxLength(75)
                    .HasColumnName("SUB");

                entity.Property(e => e.Trandate)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("TRANDATE");

                entity.Property(e => e.Trandesc)
                    .HasMaxLength(75)
                    .HasColumnName("TRANDESC");

                entity.Property(e => e.Trantype)
                    .HasMaxLength(75)
                    .HasColumnName("TRANTYPE");

                entity.Property(e => e.Tstamp)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("TSTAMP");

                entity.Property(e => e.UpdatedBy).HasMaxLength(50);

                entity.Property(e => e.UpdatedOn).HasColumnType("datetime");

                entity.Property(e => e.Userdefined1)
                    .HasMaxLength(75)
                    .HasColumnName("USERDEFINED_1");

                entity.Property(e => e.Userdefined2)
                    .HasMaxLength(75)
                    .HasColumnName("USERDEFINED_2");

                entity.Property(e => e.Vclassid)
                    .HasMaxLength(75)
                    .HasColumnName("VCLASSID");

                entity.Property(e => e.VendorFiscyrAcct)
                    .HasMaxLength(250)
                    .HasColumnName("VENDOR_FISCYR_ACCT");
            });

            modelBuilder.Entity<LrpgltransactionBalance>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("lrpgltransaction_balance");

                entity.Property(e => e.Amount).HasColumnName("amount");

                entity.Property(e => e.Cpnyid)
                    .HasMaxLength(75)
                    .HasColumnName("CPNYID");

                entity.Property(e => e.Fiscyr)
                    .HasMaxLength(75)
                    .HasColumnName("FISCYR");

                entity.Property(e => e.Refnbr)
                    .HasMaxLength(75)
                    .HasColumnName("REFNBR");
            });

            modelBuilder.Entity<LrpgltransactionGrid>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("LRPGLTransactionGrid");

                entity.Property(e => e.AccountGroup).HasMaxLength(50);

                entity.Property(e => e.AcctDescription).HasMaxLength(75);

                entity.Property(e => e.AcctNoFull).HasMaxLength(75);

                entity.Property(e => e.Amount).HasColumnName("AMOUNT");

                entity.Property(e => e.AuditNo).HasMaxLength(75);

                entity.Property(e => e.BatchNo).HasMaxLength(75);

                entity.Property(e => e.Checkdate)
                    .HasColumnType("datetime")
                    .HasColumnName("CHECKDATE");

                entity.Property(e => e.Checkno)
                    .HasMaxLength(75)
                    .HasColumnName("CHECKNO");

                entity.Property(e => e.Company).HasMaxLength(50);

                entity.Property(e => e.CostCenter).HasMaxLength(75);

                entity.Property(e => e.DocNumber).HasMaxLength(75);

                entity.Property(e => e.FiscalYearEnded).HasMaxLength(75);

                entity.Property(e => e.Fsdepartment)
                    .HasMaxLength(50)
                    .HasColumnName("FSDepartment");

                entity.Property(e => e.Fsline)
                    .HasMaxLength(75)
                    .HasColumnName("FSLine");

                entity.Property(e => e.Fund).HasMaxLength(75);

                entity.Property(e => e.GlpostingDate)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("GLPostingDate");

                entity.Property(e => e.IdField)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("ID_FIELD");

                entity.Property(e => e.JeNo)
                    .HasMaxLength(75)
                    .HasColumnName("JE_No");

                entity.Property(e => e.LrpcompanyId).HasColumnName("LRPCompanyID");

                entity.Property(e => e.Main).HasMaxLength(75);

                entity.Property(e => e.Module)
                    .HasMaxLength(75)
                    .HasColumnName("MODULE");

                entity.Property(e => e.ObjectUid).HasColumnName("ObjectUID");

                entity.Property(e => e.TransDescription).HasMaxLength(75);

                entity.Property(e => e.VendorClass).HasMaxLength(75);

                entity.Property(e => e.VendorName).HasMaxLength(100);

                entity.Property(e => e.VendorNo).HasMaxLength(75);
            });

            modelBuilder.Entity<LrpgltransactionLimitedDrillDownGrid>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("LRPGLTransactionLimitedDrillDownGrid");

                entity.Property(e => e.AccountGroup).HasMaxLength(50);

                entity.Property(e => e.AcctDescription).HasMaxLength(75);

                entity.Property(e => e.AcctNoFull).HasMaxLength(75);

                entity.Property(e => e.BatchNo).HasMaxLength(75);

                entity.Property(e => e.Bdgdepartmentid2).HasColumnName("bdgdepartmentid2");

                entity.Property(e => e.Checkdate)
                    .HasColumnType("datetime")
                    .HasColumnName("CHECKDATE");

                entity.Property(e => e.Checkno)
                    .HasMaxLength(75)
                    .HasColumnName("CHECKNO");

                entity.Property(e => e.Company).HasMaxLength(50);

                entity.Property(e => e.DocNumber).HasMaxLength(75);

                entity.Property(e => e.Fsdepartment)
                    .HasMaxLength(50)
                    .HasColumnName("FSDepartment");

                entity.Property(e => e.GlpostingDate)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("GLPostingDate");

                entity.Property(e => e.JeNo)
                    .HasMaxLength(75)
                    .HasColumnName("JE_No");

                entity.Property(e => e.LineDescription).HasMaxLength(75);

                entity.Property(e => e.Lrpcompanyid).HasColumnName("lrpcompanyid");

                entity.Property(e => e.ObjectUid).HasColumnName("ObjectUID");

                entity.Property(e => e.TransDescription).HasMaxLength(75);

                entity.Property(e => e.VendorName).HasMaxLength(100);

                entity.Property(e => e.VendorNo).HasMaxLength(75);

                entity.Property(e => e.Yearsetupid).HasColumnName("yearsetupid");
            });

            modelBuilder.Entity<LrpgltransactionLimitedGrid>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("LRPGLTransactionLimitedGrid");

                entity.Property(e => e.AccountGroup).HasMaxLength(50);

                entity.Property(e => e.AcctDescription).HasMaxLength(75);

                entity.Property(e => e.AcctNoFull).HasMaxLength(75);

                entity.Property(e => e.Amount).HasColumnName("AMOUNT");

                entity.Property(e => e.AuditNo).HasMaxLength(75);

                entity.Property(e => e.BatchNo).HasMaxLength(75);

                entity.Property(e => e.BdgdepartmentId2).HasColumnName("BDGDepartmentID2");

                entity.Property(e => e.Checkdate)
                    .HasColumnType("datetime")
                    .HasColumnName("CHECKDATE");

                entity.Property(e => e.Checkno)
                    .HasMaxLength(75)
                    .HasColumnName("CHECKNO");

                entity.Property(e => e.Company)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.CostCenter).HasMaxLength(75);

                entity.Property(e => e.DocNumber).HasMaxLength(75);

                entity.Property(e => e.FiscalYearEnded).HasMaxLength(75);

                entity.Property(e => e.Fsdepartment)
                    .HasMaxLength(50)
                    .HasColumnName("FSDepartment");

                entity.Property(e => e.Fund).HasMaxLength(75);

                entity.Property(e => e.GlpostingDate)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("GLPostingDate");

                entity.Property(e => e.GrantNo).HasMaxLength(75);

                entity.Property(e => e.JeNo)
                    .HasMaxLength(75)
                    .HasColumnName("JE_No");

                entity.Property(e => e.LineDescription).HasMaxLength(75);

                entity.Property(e => e.LrpcompanyId).HasColumnName("LRPCompanyID");

                entity.Property(e => e.Main).HasMaxLength(75);

                entity.Property(e => e.ObjectUid).HasColumnName("ObjectUID");

                entity.Property(e => e.RecordId).HasColumnName("RecordID");

                entity.Property(e => e.TransDescription).HasMaxLength(75);

                entity.Property(e => e.VendorName).HasMaxLength(100);

                entity.Property(e => e.VendorNo).HasMaxLength(75);

                entity.Property(e => e.YearSetupId).HasColumnName("YearSetupID");
            });

            modelBuilder.Entity<LrpgltransactionLimitedGridOriginal>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("LRPGLTransactionLimitedGrid_original");

                entity.Property(e => e.AccountGroup).HasMaxLength(50);

                entity.Property(e => e.AcctDescription).HasMaxLength(75);

                entity.Property(e => e.AcctNoFull).HasMaxLength(75);

                entity.Property(e => e.AuditNo).HasMaxLength(75);

                entity.Property(e => e.BatchNo).HasMaxLength(75);

                entity.Property(e => e.Checkdate)
                    .HasColumnType("datetime")
                    .HasColumnName("CHECKDATE");

                entity.Property(e => e.Checkno)
                    .HasMaxLength(75)
                    .HasColumnName("CHECKNO");

                entity.Property(e => e.Company).HasMaxLength(50);

                entity.Property(e => e.Dept).HasMaxLength(75);

                entity.Property(e => e.DocNumber).HasMaxLength(75);

                entity.Property(e => e.Employee).HasMaxLength(75);

                entity.Property(e => e.FiscalYearEnded).HasMaxLength(75);

                entity.Property(e => e.Fsdepartment)
                    .HasMaxLength(50)
                    .HasColumnName("FSDepartment");

                entity.Property(e => e.Fund).HasMaxLength(75);

                entity.Property(e => e.GlpostingDate)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("GLPostingDate");

                entity.Property(e => e.GrantNo).HasMaxLength(75);

                entity.Property(e => e.JeNo)
                    .HasMaxLength(75)
                    .HasColumnName("JE_No");

                entity.Property(e => e.LineDescription).HasMaxLength(75);

                entity.Property(e => e.Lm2description)
                    .HasMaxLength(75)
                    .HasColumnName("LM2Description");

                entity.Property(e => e.LrpcompanyId).HasColumnName("LRPCompanyID");

                entity.Property(e => e.Main).HasMaxLength(75);

                entity.Property(e => e.ObjectUid).HasColumnName("ObjectUID");

                entity.Property(e => e.Project).HasMaxLength(75);

                entity.Property(e => e.TransDescription).HasMaxLength(75);

                entity.Property(e => e.VendorName).HasMaxLength(100);

                entity.Property(e => e.VendorNo).HasMaxLength(75);
            });

            modelBuilder.Entity<LrpgltransactionLimitedGridpm>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("LRPGLTransactionLimitedGridpm");

                entity.Property(e => e.AccountGroup).HasMaxLength(50);

                entity.Property(e => e.AcctDescription).HasMaxLength(75);

                entity.Property(e => e.AcctNoFull).HasMaxLength(75);

                entity.Property(e => e.Amount).HasColumnName("AMOUNT");

                entity.Property(e => e.AuditNo).HasMaxLength(75);

                entity.Property(e => e.BatchNo).HasMaxLength(75);

                entity.Property(e => e.BdgdepartmentId2).HasColumnName("BDGDepartmentID2");

                entity.Property(e => e.Checkdate)
                    .HasColumnType("datetime")
                    .HasColumnName("CHECKDATE");

                entity.Property(e => e.Checkno)
                    .HasMaxLength(75)
                    .HasColumnName("CHECKNO");

                entity.Property(e => e.Company)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.CostCenter).HasMaxLength(75);

                entity.Property(e => e.DocNumber).HasMaxLength(75);

                entity.Property(e => e.FiscalYearEnded).HasMaxLength(75);

                entity.Property(e => e.Fsdepartment)
                    .HasMaxLength(50)
                    .HasColumnName("FSDepartment");

                entity.Property(e => e.Fund).HasMaxLength(75);

                entity.Property(e => e.GlpostingDate)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("GLPostingDate");

                entity.Property(e => e.GrantNo).HasMaxLength(75);

                entity.Property(e => e.JeNo)
                    .HasMaxLength(75)
                    .HasColumnName("JE_No");

                entity.Property(e => e.LineDescription).HasMaxLength(75);

                entity.Property(e => e.LrpcompanyId).HasColumnName("LRPCompanyID");

                entity.Property(e => e.Main).HasMaxLength(75);

                entity.Property(e => e.ObjectUid).HasColumnName("ObjectUID");

                entity.Property(e => e.RecordId).HasColumnName("RecordID");

                entity.Property(e => e.TransDescription).HasMaxLength(75);

                entity.Property(e => e.VendorName).HasMaxLength(100);

                entity.Property(e => e.VendorNo).HasMaxLength(75);

                entity.Property(e => e.YearSetupId).HasColumnName("YearSetupID");
            });

            modelBuilder.Entity<LrpgltransactionLimitedGridv2>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("LRPGLTransactionLimitedGridv2");

                entity.Property(e => e.AccountGroup).HasMaxLength(50);

                entity.Property(e => e.AcctDescription).HasMaxLength(75);

                entity.Property(e => e.AcctNoFull).HasMaxLength(75);

                entity.Property(e => e.AuditNo).HasMaxLength(75);

                entity.Property(e => e.BatchNo).HasMaxLength(75);

                entity.Property(e => e.Bdgdepartmentid2).HasColumnName("bdgdepartmentid2");

                entity.Property(e => e.Checkdate)
                    .HasColumnType("datetime")
                    .HasColumnName("CHECKDATE");

                entity.Property(e => e.Checkno)
                    .HasMaxLength(75)
                    .HasColumnName("CHECKNO");

                entity.Property(e => e.Company).HasMaxLength(50);

                entity.Property(e => e.Dept).HasMaxLength(75);

                entity.Property(e => e.DocNumber).HasMaxLength(75);

                entity.Property(e => e.Employee).HasMaxLength(75);

                entity.Property(e => e.FiscalYearEnded).HasMaxLength(75);

                entity.Property(e => e.Fsdepartment)
                    .HasMaxLength(50)
                    .HasColumnName("FSDepartment");

                entity.Property(e => e.Fsline)
                    .HasMaxLength(75)
                    .HasColumnName("FSLine");

                entity.Property(e => e.Fund).HasMaxLength(75);

                entity.Property(e => e.GlpostingDate)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("GLPostingDate");

                entity.Property(e => e.GrantNo).HasMaxLength(75);

                entity.Property(e => e.IdField)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("ID_FIELD");

                entity.Property(e => e.JeNo)
                    .HasMaxLength(75)
                    .HasColumnName("JE_No");

                entity.Property(e => e.LineDescription).HasMaxLength(75);

                entity.Property(e => e.Lm2Code)
                    .HasMaxLength(75)
                    .HasColumnName("LM2_CODE");

                entity.Property(e => e.Lm2description)
                    .HasMaxLength(75)
                    .HasColumnName("LM2Description");

                entity.Property(e => e.Lm2empNo)
                    .HasMaxLength(75)
                    .HasColumnName("LM2EmpNo");

                entity.Property(e => e.LrpcompanyId).HasColumnName("LRPCompanyID");

                entity.Property(e => e.Main).HasMaxLength(75);

                entity.Property(e => e.Module)
                    .HasMaxLength(75)
                    .HasColumnName("MODULE");

                entity.Property(e => e.ObjectUid).HasColumnName("ObjectUID");

                entity.Property(e => e.Project).HasMaxLength(75);

                entity.Property(e => e.SubGroup).HasMaxLength(50);

                entity.Property(e => e.SubSubGroup).HasMaxLength(50);

                entity.Property(e => e.SubSubSubGroup).HasMaxLength(50);

                entity.Property(e => e.TransDescription).HasMaxLength(75);

                entity.Property(e => e.VendorClass).HasMaxLength(75);

                entity.Property(e => e.VendorName).HasMaxLength(100);

                entity.Property(e => e.VendorNo).HasMaxLength(75);

                entity.Property(e => e.Yearsetupid).HasColumnName("yearsetupid");
            });

            modelBuilder.Entity<LrpgltransactionLimitedHistory>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("LRPGltransactionLimited_History");

                entity.Property(e => e.Test)
                    .IsRequired()
                    .HasMaxLength(4)
                    .IsUnicode(false)
                    .HasColumnName("test");
            });

            modelBuilder.Entity<LrpgltransactionLimitedHistoryGrid>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("LRPGLTransactionLimited_HistoryGrid");

                entity.Property(e => e.Acct)
                    .HasMaxLength(75)
                    .HasColumnName("ACCT");

                entity.Property(e => e.Amount).HasColumnName("AMOUNT");

                entity.Property(e => e.Auditnbr)
                    .HasMaxLength(75)
                    .HasColumnName("AUDITNBR");

                entity.Property(e => e.Batnbr)
                    .HasMaxLength(75)
                    .HasColumnName("BATNBR");

                entity.Property(e => e.BdgaccountGroup)
                    .HasMaxLength(50)
                    .HasColumnName("BDGAccountGroup");

                entity.Property(e => e.BdgaccountGroupId).HasColumnName("BDGAccountGroupID");

                entity.Property(e => e.BdgaccountGroupSubGroup)
                    .HasMaxLength(50)
                    .HasColumnName("BDGAccountGroup_SubGroup");

                entity.Property(e => e.BdgaccountGroupSubGroupSubGroup)
                    .HasMaxLength(50)
                    .HasColumnName("BDGAccountGroup_SubGroup_SubGroup");

                entity.Property(e => e.BdgaccountGroupSubGroupSubGroupSubGroup)
                    .HasMaxLength(50)
                    .HasColumnName("BDGAccountGroup_SubGroup_SubGroup_SubGroup");

                entity.Property(e => e.Bdgdepartment)
                    .HasMaxLength(50)
                    .HasColumnName("BDGDepartment");

                entity.Property(e => e.BdgdepartmentId2).HasColumnName("BDGDepartmentID2");

                entity.Property(e => e.Checkdate)
                    .HasColumnType("datetime")
                    .HasColumnName("CHECKDATE");

                entity.Property(e => e.Checkdate2)
                    .HasColumnType("datetime")
                    .HasColumnName("CHECKDATE2");

                entity.Property(e => e.Checkdate3)
                    .HasColumnType("datetime")
                    .HasColumnName("CHECKDATE3");

                entity.Property(e => e.Checkno)
                    .HasMaxLength(75)
                    .HasColumnName("CHECKNO");

                entity.Property(e => e.Checkno2)
                    .HasMaxLength(75)
                    .HasColumnName("CHECKNO2");

                entity.Property(e => e.Checkno3)
                    .HasMaxLength(75)
                    .HasColumnName("CHECKNO3");

                entity.Property(e => e.Classid)
                    .HasMaxLength(75)
                    .HasColumnName("CLASSID");

                entity.Property(e => e.Cpnyid)
                    .HasMaxLength(75)
                    .HasColumnName("CPNYID");

                entity.Property(e => e.CreatedBy).HasMaxLength(50);

                entity.Property(e => e.CreatedOn).HasColumnType("datetime");

                entity.Property(e => e.CrtdDatetime)
                    .HasColumnType("datetime")
                    .HasColumnName("CRTD_DATETIME");

                entity.Property(e => e.CrtdUser)
                    .HasMaxLength(75)
                    .HasColumnName("CRTD_USER");

                entity.Property(e => e.CssLink)
                    .HasMaxLength(255)
                    .HasColumnName("css_link")
                    .IsFixedLength(true);

                entity.Property(e => e.CssLinkLines)
                    .HasMaxLength(255)
                    .HasColumnName("css_link_lines")
                    .IsFixedLength(true);

                entity.Property(e => e.Curyid)
                    .HasMaxLength(75)
                    .HasColumnName("CURYID");

                entity.Property(e => e.Curyrate).HasColumnName("CURYRATE");

                entity.Property(e => e.Descr)
                    .HasMaxLength(75)
                    .HasColumnName("DESCR");

                entity.Property(e => e.Description).HasMaxLength(2000);

                entity.Property(e => e.Display).HasMaxLength(100);

                entity.Property(e => e.Docnbr)
                    .HasMaxLength(75)
                    .HasColumnName("DOCNBR");

                entity.Property(e => e.EmpFiscyrAcct)
                    .HasMaxLength(250)
                    .HasColumnName("EMP_FISCYR_ACCT");

                entity.Property(e => e.EmployeeCode)
                    .HasMaxLength(75)
                    .HasColumnName("EMPLOYEE_CODE");

                entity.Property(e => e.FinalId)
                    .HasMaxLength(75)
                    .HasColumnName("FINAL_ID");

                entity.Property(e => e.Fiscyr)
                    .HasMaxLength(75)
                    .HasColumnName("FISCYR");

                entity.Property(e => e.FiscyrAcct)
                    .HasMaxLength(50)
                    .HasColumnName("FISCYR_ACCT");

                entity.Property(e => e.GrantNo).HasMaxLength(75);

                entity.Property(e => e.IcDistribution).HasColumnName("IC_DISTRIBUTION");

                entity.Property(e => e.Id)
                    .HasMaxLength(75)
                    .HasColumnName("ID");

                entity.Property(e => e.IdField)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("ID_FIELD");

                entity.Property(e => e.ImportedObjectUid)
                    .HasMaxLength(50)
                    .HasColumnName("ImportedObjectUID");

                entity.Property(e => e.InstallationUid).HasColumnName("InstallationUID");

                entity.Property(e => e.Jrnltype)
                    .HasMaxLength(75)
                    .HasColumnName("JRNLTYPE");

                entity.Property(e => e.Ledgerid)
                    .HasMaxLength(75)
                    .HasColumnName("LEDGERID");

                entity.Property(e => e.Lineid).HasColumnName("LINEID");

                entity.Property(e => e.Linenbr).HasColumnName("LINENBR");

                entity.Property(e => e.Lineref)
                    .HasMaxLength(75)
                    .HasColumnName("LINEREF");

                entity.Property(e => e.Lm2Code)
                    .HasMaxLength(75)
                    .HasColumnName("LM2_CODE");

                entity.Property(e => e.Lm2Description)
                    .HasMaxLength(75)
                    .HasColumnName("LM2 DESCRIPTION");

                entity.Property(e => e.Lm2Fiscyr)
                    .HasMaxLength(250)
                    .HasColumnName("LM2_FISCYR");

                entity.Property(e => e.Lm2FiscyrAcct)
                    .HasMaxLength(250)
                    .HasColumnName("LM2_FISCYR_ACCT");

                entity.Property(e => e.Lm2FiscyrEmpAcct)
                    .HasMaxLength(250)
                    .HasColumnName("LM2_FISCYR_EMP_ACCT");

                entity.Property(e => e.LrpcompanyId).HasColumnName("LRPCompanyID");

                entity.Property(e => e.LupdDatetime)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("LUPD_DATETIME");

                entity.Property(e => e.LupdUser)
                    .HasMaxLength(75)
                    .HasColumnName("LUPD_USER");

                entity.Property(e => e.Masterid)
                    .HasMaxLength(75)
                    .HasColumnName("MASTERID");

                entity.Property(e => e.Module)
                    .HasMaxLength(75)
                    .HasColumnName("MODULE");

                entity.Property(e => e.Multiplechecks1)
                    .HasMaxLength(75)
                    .HasColumnName("MULTIPLECHECKS_1");

                entity.Property(e => e.Multiplechecks2)
                    .HasMaxLength(75)
                    .HasColumnName("MULTIPLECHECKS_2");

                entity.Property(e => e.Name).HasMaxLength(100);

                entity.Property(e => e.NameAlias).HasMaxLength(100);

                entity.Property(e => e.Noteid).HasColumnName("NOTEID");

                entity.Property(e => e.ObjectUid).HasColumnName("ObjectUID");

                entity.Property(e => e.OldRecordId).HasColumnName("OldRecordID");

                entity.Property(e => e.Perent)
                    .HasMaxLength(75)
                    .HasColumnName("PERENT");

                entity.Property(e => e.Perpost)
                    .HasMaxLength(75)
                    .HasColumnName("PERPOST");

                entity.Property(e => e.Posted)
                    .HasMaxLength(75)
                    .HasColumnName("POSTED");

                entity.Property(e => e.RecordId)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("RecordID");

                entity.Property(e => e.Refnbr)
                    .HasMaxLength(75)
                    .HasColumnName("REFNBR");

                entity.Property(e => e.SalesTaxAmount).HasColumnType("money");

                entity.Property(e => e.SalesTaxYesNoId).HasColumnName("SalesTax_YesNoID");

                entity.Property(e => e.Seg1)
                    .HasMaxLength(75)
                    .HasColumnName("SEG1");

                entity.Property(e => e.Seg10)
                    .HasMaxLength(75)
                    .HasColumnName("SEG10");

                entity.Property(e => e.Seg2)
                    .HasMaxLength(75)
                    .HasColumnName("SEG2");

                entity.Property(e => e.Seg3)
                    .HasMaxLength(75)
                    .HasColumnName("SEG3");

                entity.Property(e => e.Seg4)
                    .HasMaxLength(75)
                    .HasColumnName("SEG4");

                entity.Property(e => e.Seg5)
                    .HasMaxLength(75)
                    .HasColumnName("SEG5");

                entity.Property(e => e.Seg6)
                    .HasMaxLength(75)
                    .HasColumnName("SEG6");

                entity.Property(e => e.Seg7)
                    .HasMaxLength(75)
                    .HasColumnName("SEG7");

                entity.Property(e => e.Seg8)
                    .HasMaxLength(75)
                    .HasColumnName("SEG8");

                entity.Property(e => e.Seg9)
                    .HasMaxLength(75)
                    .HasColumnName("SEG9");

                entity.Property(e => e.Sub)
                    .HasMaxLength(75)
                    .HasColumnName("SUB");

                entity.Property(e => e.Trandate)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("TRANDATE");

                entity.Property(e => e.Trandesc)
                    .HasMaxLength(75)
                    .HasColumnName("TRANDESC");

                entity.Property(e => e.Trantype)
                    .HasMaxLength(75)
                    .HasColumnName("TRANTYPE");

                entity.Property(e => e.Tstamp)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("TSTAMP");

                entity.Property(e => e.UpdatedBy).HasMaxLength(50);

                entity.Property(e => e.UpdatedOn).HasColumnType("datetime");

                entity.Property(e => e.Userdefined1)
                    .HasMaxLength(75)
                    .HasColumnName("USERDEFINED_1");

                entity.Property(e => e.Userdefined2)
                    .HasMaxLength(75)
                    .HasColumnName("USERDEFINED_2");

                entity.Property(e => e.Vclassid)
                    .HasMaxLength(75)
                    .HasColumnName("VCLASSID");

                entity.Property(e => e.VendorFiscyrAcct)
                    .HasMaxLength(250)
                    .HasColumnName("VENDOR_FISCYR_ACCT");

                entity.Property(e => e.YearSetupId).HasColumnName("YearSetupID");
            });

            modelBuilder.Entity<LrpgltransactionLimitedLinqGrid>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("LRPGLTransactionLimitedLinqGrid");

                entity.Property(e => e.AcctDescription).HasMaxLength(75);

                entity.Property(e => e.AcctNoFull).HasMaxLength(75);

                entity.Property(e => e.Amount).HasColumnName("AMOUNT");

                entity.Property(e => e.AuditNo).HasMaxLength(75);

                entity.Property(e => e.BatchNo).HasMaxLength(75);

                entity.Property(e => e.Checkdate)
                    .HasColumnType("datetime")
                    .HasColumnName("CHECKDATE");

                entity.Property(e => e.Checkno)
                    .HasMaxLength(75)
                    .HasColumnName("CHECKNO");

                entity.Property(e => e.Dept).HasMaxLength(75);

                entity.Property(e => e.DocNumber).HasMaxLength(75);

                entity.Property(e => e.Employee).HasMaxLength(75);

                entity.Property(e => e.FiscalYearEnded).HasMaxLength(75);

                entity.Property(e => e.Fund).HasMaxLength(75);

                entity.Property(e => e.GlpostingDate)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("GLPostingDate");

                entity.Property(e => e.JeNo)
                    .HasMaxLength(75)
                    .HasColumnName("JE_No");

                entity.Property(e => e.LineDescription).HasMaxLength(75);

                entity.Property(e => e.Main).HasMaxLength(75);

                entity.Property(e => e.Module)
                    .HasMaxLength(75)
                    .HasColumnName("MODULE");

                entity.Property(e => e.ObjectUid).HasColumnName("ObjectUID");

                entity.Property(e => e.Project).HasMaxLength(75);

                entity.Property(e => e.TransDescription).HasMaxLength(75);

                entity.Property(e => e.VendorName1)
                    .HasMaxLength(100)
                    .HasColumnName("Vendor Name1");

                entity.Property(e => e.VendorNo).HasMaxLength(176);
            });

            modelBuilder.Entity<LrpgltransactionLimitedpm>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("LRPGLTransactionLimitedpm");

                entity.Property(e => e.AccountGroup).HasMaxLength(50);

                entity.Property(e => e.AcctDescription).HasMaxLength(75);

                entity.Property(e => e.AcctNoFull).HasMaxLength(75);

                entity.Property(e => e.AuditNo).HasMaxLength(75);

                entity.Property(e => e.BatchNo).HasMaxLength(75);

                entity.Property(e => e.Checkdate)
                    .HasColumnType("datetime")
                    .HasColumnName("CHECKDATE");

                entity.Property(e => e.Checkno)
                    .HasMaxLength(75)
                    .HasColumnName("CHECKNO");

                entity.Property(e => e.Company).HasMaxLength(50);

                entity.Property(e => e.Dept).HasMaxLength(75);

                entity.Property(e => e.DocNumber).HasMaxLength(75);

                entity.Property(e => e.Employee).HasMaxLength(75);

                entity.Property(e => e.FiscalYearEnded).HasMaxLength(75);

                entity.Property(e => e.Fsdepartment)
                    .HasMaxLength(50)
                    .HasColumnName("FSDepartment");

                entity.Property(e => e.Fsline)
                    .HasMaxLength(75)
                    .HasColumnName("FSLine");

                entity.Property(e => e.Fund).HasMaxLength(75);

                entity.Property(e => e.GlpostingDate)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("GLPostingDate");

                entity.Property(e => e.GrantNo).HasMaxLength(75);

                entity.Property(e => e.IdField)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("ID_FIELD");

                entity.Property(e => e.JeNo)
                    .HasMaxLength(75)
                    .HasColumnName("JE_No");

                entity.Property(e => e.LineDescription).HasMaxLength(75);

                entity.Property(e => e.Lm2Code)
                    .HasMaxLength(75)
                    .HasColumnName("LM2_CODE");

                entity.Property(e => e.Lm2description)
                    .HasMaxLength(75)
                    .HasColumnName("LM2Description");

                entity.Property(e => e.Lm2empNo)
                    .HasMaxLength(75)
                    .HasColumnName("LM2EmpNo");

                entity.Property(e => e.LrpcompanyId).HasColumnName("LRPCompanyID");

                entity.Property(e => e.Main).HasMaxLength(75);

                entity.Property(e => e.Module)
                    .HasMaxLength(75)
                    .HasColumnName("MODULE");

                entity.Property(e => e.ObjectUid).HasColumnName("ObjectUID");

                entity.Property(e => e.Project).HasMaxLength(75);

                entity.Property(e => e.SubGroup).HasMaxLength(50);

                entity.Property(e => e.SubSubGroup).HasMaxLength(50);

                entity.Property(e => e.SubSubSubGroup).HasMaxLength(50);

                entity.Property(e => e.TransDescription).HasMaxLength(75);

                entity.Property(e => e.VendorClass).HasMaxLength(75);

                entity.Property(e => e.VendorName).HasMaxLength(100);

                entity.Property(e => e.VendorNo).HasMaxLength(75);
            });

            modelBuilder.Entity<LrpgltransactionLineGreaterThan5Kgrid>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("LRPGLTransactionLineGreaterThan5KGrid");

                entity.Property(e => e.Test)
                    .IsRequired()
                    .HasMaxLength(4)
                    .IsUnicode(false)
                    .HasColumnName("test");
            });

            modelBuilder.Entity<LrpgltransactionLineLessThan5Kgrid>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("LRPGLTransactionLineLessThan5KGrid");

                entity.Property(e => e.Test)
                    .IsRequired()
                    .HasMaxLength(4)
                    .IsUnicode(false)
                    .HasColumnName("test");
            });

            modelBuilder.Entity<LrpgltransactionLinqGrid>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("LRPGLTransactionLinqGrid");

                entity.Property(e => e.AcctDescription).HasMaxLength(75);

                entity.Property(e => e.AcctNoFull).HasMaxLength(75);

                entity.Property(e => e.Amount).HasColumnName("AMOUNT");

                entity.Property(e => e.AuditNo).HasMaxLength(75);

                entity.Property(e => e.BatchNo).HasMaxLength(75);

                entity.Property(e => e.Checkdate)
                    .HasColumnType("datetime")
                    .HasColumnName("CHECKDATE");

                entity.Property(e => e.Checkno)
                    .HasMaxLength(75)
                    .HasColumnName("CHECKNO");

                entity.Property(e => e.Company).HasMaxLength(50);

                entity.Property(e => e.Dept).HasMaxLength(75);

                entity.Property(e => e.DocNumber).HasMaxLength(75);

                entity.Property(e => e.Employee).HasMaxLength(75);

                entity.Property(e => e.EmployeeNo).HasMaxLength(75);

                entity.Property(e => e.FiscalYearEnded).HasMaxLength(75);

                entity.Property(e => e.Fsline)
                    .HasMaxLength(75)
                    .HasColumnName("FSLine");

                entity.Property(e => e.Fund).HasMaxLength(75);

                entity.Property(e => e.GlpostingDate)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("GLPostingDate");

                entity.Property(e => e.IdField)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("ID_FIELD");

                entity.Property(e => e.JeNo)
                    .HasMaxLength(75)
                    .HasColumnName("JE_No");

                entity.Property(e => e.LineDescription).HasMaxLength(75);

                entity.Property(e => e.Lm2Code)
                    .HasMaxLength(75)
                    .HasColumnName("LM2_CODE");

                entity.Property(e => e.Lm2description)
                    .HasMaxLength(75)
                    .HasColumnName("LM2Description");

                entity.Property(e => e.LrpcompanyId).HasColumnName("LRPCompanyID");

                entity.Property(e => e.Main).HasMaxLength(75);

                entity.Property(e => e.Module)
                    .HasMaxLength(75)
                    .HasColumnName("MODULE");

                entity.Property(e => e.ObjectUid).HasColumnName("ObjectUID");

                entity.Property(e => e.Project).HasMaxLength(75);

                entity.Property(e => e.TransDescription).HasMaxLength(75);

                entity.Property(e => e.VendorClass).HasMaxLength(75);

                entity.Property(e => e.VendorName1)
                    .HasMaxLength(100)
                    .HasColumnName("Vendor Name1");

                entity.Property(e => e.VendorNo).HasMaxLength(176);
            });

            modelBuilder.Entity<LrpgltransactionLinqGrid2>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("LRPGLTransactionLinqGrid2");

                entity.Property(e => e.AcctDescription).HasMaxLength(75);

                entity.Property(e => e.AcctNoFull).HasMaxLength(75);

                entity.Property(e => e.Amount).HasColumnName("AMOUNT");

                entity.Property(e => e.AuditNo).HasMaxLength(75);

                entity.Property(e => e.BatchNo).HasMaxLength(75);

                entity.Property(e => e.Checkdate)
                    .HasColumnType("datetime")
                    .HasColumnName("CHECKDATE");

                entity.Property(e => e.Checkno)
                    .HasMaxLength(75)
                    .HasColumnName("CHECKNO");

                entity.Property(e => e.Company).HasMaxLength(50);

                entity.Property(e => e.Dept).HasMaxLength(75);

                entity.Property(e => e.DocNumber).HasMaxLength(75);

                entity.Property(e => e.Employee).HasMaxLength(75);

                entity.Property(e => e.EmployeeNo).HasMaxLength(75);

                entity.Property(e => e.FiscalYearEnded).HasMaxLength(75);

                entity.Property(e => e.Fsline)
                    .HasMaxLength(75)
                    .HasColumnName("FSLine");

                entity.Property(e => e.Fund).HasMaxLength(75);

                entity.Property(e => e.GlpostingDate)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("GLPostingDate");

                entity.Property(e => e.IdField)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("ID_FIELD");

                entity.Property(e => e.JeNo)
                    .HasMaxLength(75)
                    .HasColumnName("JE_No");

                entity.Property(e => e.LineDescription).HasMaxLength(75);

                entity.Property(e => e.Lm2Code)
                    .HasMaxLength(75)
                    .HasColumnName("LM2_CODE");

                entity.Property(e => e.Lm2description)
                    .HasMaxLength(75)
                    .HasColumnName("LM2Description");

                entity.Property(e => e.LrpcompanyId).HasColumnName("LRPCompanyID");

                entity.Property(e => e.Main).HasMaxLength(75);

                entity.Property(e => e.Module)
                    .HasMaxLength(75)
                    .HasColumnName("MODULE");

                entity.Property(e => e.ObjectUid).HasColumnName("ObjectUID");

                entity.Property(e => e.Project).HasMaxLength(75);

                entity.Property(e => e.TransDescription).HasMaxLength(75);

                entity.Property(e => e.Trantype)
                    .HasMaxLength(75)
                    .HasColumnName("TRANTYPE");

                entity.Property(e => e.VendorClass).HasMaxLength(75);

                entity.Property(e => e.VendorNo).HasMaxLength(176);
            });

            modelBuilder.Entity<LrpgltransactionLm2Sum>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("lrpgltransaction_lm2_sum");

                entity.Property(e => e.Amount).HasColumnName("amount");

                entity.Property(e => e.Cpnyid)
                    .HasMaxLength(75)
                    .HasColumnName("CPNYID");

                entity.Property(e => e.FinalId)
                    .HasMaxLength(75)
                    .HasColumnName("final_id");

                entity.Property(e => e.Fiscyr)
                    .HasMaxLength(75)
                    .HasColumnName("FISCYR");

                entity.Property(e => e.Lm2Code)
                    .HasMaxLength(75)
                    .HasColumnName("LM2_CODE");
            });

            modelBuilder.Entity<LrpgltransactionLm2SumCheckno>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("lrpgltransaction_lm2_sum_checkno");

                entity.Property(e => e.Amount).HasColumnName("amount");

                entity.Property(e => e.Checkno)
                    .HasMaxLength(75)
                    .HasColumnName("checkno");

                entity.Property(e => e.Cpnyid)
                    .HasMaxLength(75)
                    .HasColumnName("CPNYID");

                entity.Property(e => e.FinalId)
                    .HasMaxLength(75)
                    .HasColumnName("final_id");

                entity.Property(e => e.Fiscyr)
                    .HasMaxLength(75)
                    .HasColumnName("FISCYR");

                entity.Property(e => e.Lm2Code)
                    .HasMaxLength(75)
                    .HasColumnName("LM2_CODE");
            });

            modelBuilder.Entity<LrpgltransactionSummaryGreaterThan5Kgrid>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("LRPGLTransactionSummaryGreaterThan5KGrid");

                entity.Property(e => e.Test)
                    .IsRequired()
                    .HasMaxLength(4)
                    .IsUnicode(false)
                    .HasColumnName("test");
            });

            modelBuilder.Entity<LrpgltransactionSummaryGrid>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("LRPGLTransactionSummaryGrid");

                entity.Property(e => e.Test)
                    .IsRequired()
                    .HasMaxLength(4)
                    .IsUnicode(false)
                    .HasColumnName("test");
            });

            modelBuilder.Entity<LrpgltransactionTax>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("LRPGLtransaction_tax");

                entity.Property(e => e.Acct)
                    .HasMaxLength(75)
                    .HasColumnName("ACCT");

                entity.Property(e => e.Amount).HasColumnName("AMOUNT");

                entity.Property(e => e.Auditnbr)
                    .HasMaxLength(75)
                    .HasColumnName("AUDITNBR");

                entity.Property(e => e.Batnbr)
                    .HasMaxLength(75)
                    .HasColumnName("BATNBR");

                entity.Property(e => e.BdgaccountGroup)
                    .HasMaxLength(50)
                    .HasColumnName("BDGAccountGroup");

                entity.Property(e => e.BdgaccountGroupSubGroup)
                    .HasMaxLength(50)
                    .HasColumnName("BDGAccountGroup_SubGroup");

                entity.Property(e => e.BdgaccountGroupSubGroupSubGroup)
                    .HasMaxLength(50)
                    .HasColumnName("BDGAccountGroup_SubGroup_SubGroup");

                entity.Property(e => e.BdgaccountGroupSubGroupSubGroupSubGroup)
                    .HasMaxLength(50)
                    .HasColumnName("BDGAccountGroup_SubGroup_SubGroup_SubGroup");

                entity.Property(e => e.Bdgdepartment)
                    .HasMaxLength(50)
                    .HasColumnName("BDGDepartment");

                entity.Property(e => e.Checkdate)
                    .HasColumnType("datetime")
                    .HasColumnName("CHECKDATE");

                entity.Property(e => e.Checkdate2)
                    .HasColumnType("datetime")
                    .HasColumnName("CHECKDATE2");

                entity.Property(e => e.Checkdate3)
                    .HasColumnType("datetime")
                    .HasColumnName("CHECKDATE3");

                entity.Property(e => e.Checkno)
                    .HasMaxLength(75)
                    .HasColumnName("CHECKNO");

                entity.Property(e => e.Checkno2)
                    .HasMaxLength(75)
                    .HasColumnName("CHECKNO2");

                entity.Property(e => e.Checkno3)
                    .HasMaxLength(75)
                    .HasColumnName("CHECKNO3");

                entity.Property(e => e.Classid)
                    .HasMaxLength(75)
                    .HasColumnName("CLASSID");

                entity.Property(e => e.Cpnyid)
                    .HasMaxLength(75)
                    .HasColumnName("CPNYID");

                entity.Property(e => e.CreatedBy).HasMaxLength(50);

                entity.Property(e => e.CreatedOn).HasColumnType("datetime");

                entity.Property(e => e.CrtdDatetime)
                    .HasColumnType("datetime")
                    .HasColumnName("CRTD_DATETIME");

                entity.Property(e => e.CrtdUser)
                    .HasMaxLength(75)
                    .HasColumnName("CRTD_USER");

                entity.Property(e => e.CssLink)
                    .HasMaxLength(255)
                    .HasColumnName("css_link")
                    .IsFixedLength(true);

                entity.Property(e => e.CssLinkLines)
                    .HasMaxLength(255)
                    .HasColumnName("css_link_lines")
                    .IsFixedLength(true);

                entity.Property(e => e.Curyid)
                    .HasMaxLength(75)
                    .HasColumnName("CURYID");

                entity.Property(e => e.Curyrate).HasColumnName("CURYRATE");

                entity.Property(e => e.Descr)
                    .HasMaxLength(75)
                    .HasColumnName("DESCR");

                entity.Property(e => e.Description).HasMaxLength(2000);

                entity.Property(e => e.Display).HasMaxLength(100);

                entity.Property(e => e.Docnbr)
                    .HasMaxLength(75)
                    .HasColumnName("DOCNBR");

                entity.Property(e => e.EmpFiscyrAcct)
                    .HasMaxLength(250)
                    .HasColumnName("EMP_FISCYR_ACCT");

                entity.Property(e => e.EmployeeCode)
                    .HasMaxLength(75)
                    .HasColumnName("EMPLOYEE_CODE");

                entity.Property(e => e.FinalId)
                    .HasMaxLength(75)
                    .HasColumnName("FINAL_ID");

                entity.Property(e => e.Fiscyr)
                    .HasMaxLength(75)
                    .HasColumnName("FISCYR");

                entity.Property(e => e.FiscyrAcct)
                    .HasMaxLength(50)
                    .HasColumnName("FISCYR_ACCT");

                entity.Property(e => e.GrantNo).HasMaxLength(75);

                entity.Property(e => e.IcDistribution).HasColumnName("IC_DISTRIBUTION");

                entity.Property(e => e.Id)
                    .HasMaxLength(75)
                    .HasColumnName("ID");

                entity.Property(e => e.IdField)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("ID_FIELD");

                entity.Property(e => e.ImportedObjectUid)
                    .HasMaxLength(50)
                    .HasColumnName("ImportedObjectUID");

                entity.Property(e => e.InstallationUid).HasColumnName("InstallationUID");

                entity.Property(e => e.Jrnltype)
                    .HasMaxLength(75)
                    .HasColumnName("JRNLTYPE");

                entity.Property(e => e.Ledgerid)
                    .HasMaxLength(75)
                    .HasColumnName("LEDGERID");

                entity.Property(e => e.Lineid).HasColumnName("LINEID");

                entity.Property(e => e.Linenbr).HasColumnName("LINENBR");

                entity.Property(e => e.Lineref)
                    .HasMaxLength(75)
                    .HasColumnName("LINEREF");

                entity.Property(e => e.Lm2Code)
                    .HasMaxLength(75)
                    .HasColumnName("LM2_CODE");

                entity.Property(e => e.Lm2Description)
                    .HasMaxLength(75)
                    .HasColumnName("LM2 DESCRIPTION");

                entity.Property(e => e.Lm2Fiscyr)
                    .HasMaxLength(250)
                    .HasColumnName("LM2_FISCYR");

                entity.Property(e => e.Lm2FiscyrAcct)
                    .HasMaxLength(250)
                    .HasColumnName("LM2_FISCYR_ACCT");

                entity.Property(e => e.Lm2FiscyrEmpAcct)
                    .HasMaxLength(250)
                    .HasColumnName("LM2_FISCYR_EMP_ACCT");

                entity.Property(e => e.LrpcompanyId).HasColumnName("LRPCompanyID");

                entity.Property(e => e.LupdDatetime)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("LUPD_DATETIME");

                entity.Property(e => e.LupdUser)
                    .HasMaxLength(75)
                    .HasColumnName("LUPD_USER");

                entity.Property(e => e.Masterid)
                    .HasMaxLength(75)
                    .HasColumnName("MASTERID");

                entity.Property(e => e.Module)
                    .HasMaxLength(75)
                    .HasColumnName("MODULE");

                entity.Property(e => e.Multiplechecks1)
                    .HasMaxLength(75)
                    .HasColumnName("MULTIPLECHECKS_1");

                entity.Property(e => e.Multiplechecks2)
                    .HasMaxLength(75)
                    .HasColumnName("MULTIPLECHECKS_2");

                entity.Property(e => e.Name).HasMaxLength(100);

                entity.Property(e => e.NameAlias).HasMaxLength(100);

                entity.Property(e => e.Noteid).HasColumnName("NOTEID");

                entity.Property(e => e.ObjectUid).HasColumnName("ObjectUID");

                entity.Property(e => e.OldRecordId).HasColumnName("OldRecordID");

                entity.Property(e => e.Perent)
                    .HasMaxLength(75)
                    .HasColumnName("PERENT");

                entity.Property(e => e.Perpost)
                    .HasMaxLength(75)
                    .HasColumnName("PERPOST");

                entity.Property(e => e.Posted)
                    .HasMaxLength(75)
                    .HasColumnName("POSTED");

                entity.Property(e => e.RecordId).HasColumnName("RecordID");

                entity.Property(e => e.Refnbr)
                    .HasMaxLength(75)
                    .HasColumnName("REFNBR");

                entity.Property(e => e.SalesTaxAmount).HasColumnType("money");

                entity.Property(e => e.SalesTaxYesNoId).HasColumnName("SalesTax_YesNoID");

                entity.Property(e => e.Seg1)
                    .HasMaxLength(75)
                    .HasColumnName("SEG1");

                entity.Property(e => e.Seg10)
                    .HasMaxLength(75)
                    .HasColumnName("SEG10");

                entity.Property(e => e.Seg2)
                    .HasMaxLength(75)
                    .HasColumnName("SEG2");

                entity.Property(e => e.Seg3)
                    .HasMaxLength(75)
                    .HasColumnName("SEG3");

                entity.Property(e => e.Seg4)
                    .HasMaxLength(75)
                    .HasColumnName("SEG4");

                entity.Property(e => e.Seg5)
                    .HasMaxLength(75)
                    .HasColumnName("SEG5");

                entity.Property(e => e.Seg6)
                    .HasMaxLength(75)
                    .HasColumnName("SEG6");

                entity.Property(e => e.Seg7)
                    .HasMaxLength(75)
                    .HasColumnName("SEG7");

                entity.Property(e => e.Seg8)
                    .HasMaxLength(75)
                    .HasColumnName("SEG8");

                entity.Property(e => e.Seg9)
                    .HasMaxLength(75)
                    .HasColumnName("SEG9");

                entity.Property(e => e.Sub)
                    .HasMaxLength(75)
                    .HasColumnName("SUB");

                entity.Property(e => e.Trandate)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("TRANDATE");

                entity.Property(e => e.Trandesc)
                    .HasMaxLength(75)
                    .HasColumnName("TRANDESC");

                entity.Property(e => e.Trantype)
                    .HasMaxLength(75)
                    .HasColumnName("TRANTYPE");

                entity.Property(e => e.Tstamp)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("TSTAMP");

                entity.Property(e => e.UpdatedBy).HasMaxLength(50);

                entity.Property(e => e.UpdatedOn).HasColumnType("datetime");

                entity.Property(e => e.Userdefined1)
                    .HasMaxLength(75)
                    .HasColumnName("USERDEFINED_1");

                entity.Property(e => e.Userdefined2)
                    .HasMaxLength(75)
                    .HasColumnName("USERDEFINED_2");

                entity.Property(e => e.Vclassid)
                    .HasMaxLength(75)
                    .HasColumnName("VCLASSID");

                entity.Property(e => e.VendorFiscyrAcct)
                    .HasMaxLength(250)
                    .HasColumnName("VENDOR_FISCYR_ACCT");

                entity.Property(e => e.Yesnoname)
                    .HasMaxLength(10)
                    .HasColumnName("yesnoname");
            });

            modelBuilder.Entity<LrpgltransactionUpdateGrid>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("LRPGLTransactionUpdateGrid");

                entity.Property(e => e.AccountGroup).HasMaxLength(50);

                entity.Property(e => e.AcctDescription).HasMaxLength(75);

                entity.Property(e => e.AcctNoFull).HasMaxLength(75);

                entity.Property(e => e.Amount).HasColumnName("AMOUNT");

                entity.Property(e => e.AuditNo).HasMaxLength(75);

                entity.Property(e => e.BatchNo).HasMaxLength(75);

                entity.Property(e => e.Checkdate)
                    .HasColumnType("datetime")
                    .HasColumnName("CHECKDATE");

                entity.Property(e => e.Checkno)
                    .HasMaxLength(75)
                    .HasColumnName("CHECKNO");

                entity.Property(e => e.Company).HasMaxLength(50);

                entity.Property(e => e.Dept).HasMaxLength(75);

                entity.Property(e => e.DocNumber).HasMaxLength(75);

                entity.Property(e => e.Employee).HasMaxLength(75);

                entity.Property(e => e.FinalId)
                    .HasMaxLength(75)
                    .HasColumnName("FINAL_ID");

                entity.Property(e => e.FiscalYearEnded).HasMaxLength(75);

                entity.Property(e => e.Fsdepartment)
                    .HasMaxLength(50)
                    .HasColumnName("FSDepartment");

                entity.Property(e => e.Fsline)
                    .HasMaxLength(75)
                    .HasColumnName("FSLine");

                entity.Property(e => e.Fund).HasMaxLength(75);

                entity.Property(e => e.GlpostingDate)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("GLPostingDate");

                entity.Property(e => e.GrantNo).HasMaxLength(75);

                entity.Property(e => e.IdField)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("ID_FIELD");

                entity.Property(e => e.JeNo)
                    .HasMaxLength(75)
                    .HasColumnName("JE_No");

                entity.Property(e => e.LineDescription).HasMaxLength(75);

                entity.Property(e => e.Lm2Code)
                    .HasMaxLength(75)
                    .HasColumnName("LM2_CODE");

                entity.Property(e => e.Lm2description)
                    .HasMaxLength(75)
                    .HasColumnName("LM2Description");

                entity.Property(e => e.Lm2empNo)
                    .HasMaxLength(75)
                    .HasColumnName("LM2EmpNo");

                entity.Property(e => e.LrpcompanyId).HasColumnName("LRPCompanyID");

                entity.Property(e => e.Main).HasMaxLength(75);

                entity.Property(e => e.Module)
                    .HasMaxLength(75)
                    .HasColumnName("MODULE");

                entity.Property(e => e.ObjectUid).HasColumnName("ObjectUID");

                entity.Property(e => e.Project).HasMaxLength(75);

                entity.Property(e => e.SalesTax).HasMaxLength(10);

                entity.Property(e => e.SalesTaxAmount).HasColumnType("money");

                entity.Property(e => e.SubGroup).HasMaxLength(50);

                entity.Property(e => e.SubSubGroup).HasMaxLength(50);

                entity.Property(e => e.SubSubSubGroup).HasMaxLength(50);

                entity.Property(e => e.VendorName).HasMaxLength(100);

                entity.Property(e => e.VendorNo).HasMaxLength(75);

                entity.Property(e => e._99Clearout)
                    .HasMaxLength(250)
                    .HasColumnName("99 Clearout");
            });

            modelBuilder.Entity<LrpgltransactionUpdateLinqGrid>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("LRPGLTransactionUpdateLinqGrid");

                entity.Property(e => e.AcctDescription).HasMaxLength(75);

                entity.Property(e => e.AcctNoFull).HasMaxLength(75);

                entity.Property(e => e.Amount).HasColumnName("AMOUNT");

                entity.Property(e => e.AuditNo).HasMaxLength(75);

                entity.Property(e => e.BatchNo).HasMaxLength(75);

                entity.Property(e => e.Checkdate)
                    .HasColumnType("datetime")
                    .HasColumnName("CHECKDATE");

                entity.Property(e => e.Checkno)
                    .HasMaxLength(75)
                    .HasColumnName("CHECKNO");

                entity.Property(e => e.Company).HasMaxLength(50);

                entity.Property(e => e.Dept).HasMaxLength(75);

                entity.Property(e => e.DocNumber).HasMaxLength(75);

                entity.Property(e => e.Employee).HasMaxLength(75);

                entity.Property(e => e.FinalId)
                    .HasMaxLength(75)
                    .HasColumnName("FINAL_ID");

                entity.Property(e => e.FiscalYearEnded).HasMaxLength(75);

                entity.Property(e => e.Fsline)
                    .HasMaxLength(75)
                    .HasColumnName("FSLine");

                entity.Property(e => e.Fund).HasMaxLength(75);

                entity.Property(e => e.GlpostingDate)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("GLPostingDate");

                entity.Property(e => e.IdField)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("ID_FIELD");

                entity.Property(e => e.JeNo)
                    .HasMaxLength(75)
                    .HasColumnName("JE_No");

                entity.Property(e => e.LineDescription).HasMaxLength(75);

                entity.Property(e => e.Lm2Code)
                    .HasMaxLength(75)
                    .HasColumnName("LM2_CODE");

                entity.Property(e => e.Lm2description)
                    .HasMaxLength(75)
                    .HasColumnName("LM2Description");

                entity.Property(e => e.LrpcompanyId).HasColumnName("LRPCompanyID");

                entity.Property(e => e.Main).HasMaxLength(75);

                entity.Property(e => e.Module)
                    .HasMaxLength(75)
                    .HasColumnName("MODULE");

                entity.Property(e => e.ObjectUid).HasColumnName("ObjectUID");

                entity.Property(e => e.Project).HasMaxLength(75);

                entity.Property(e => e.SalesTax).HasMaxLength(10);

                entity.Property(e => e.SalesTaxAmount).HasColumnType("money");

                entity.Property(e => e.VendorNo).HasMaxLength(176);

                entity.Property(e => e._99Clearout)
                    .HasMaxLength(250)
                    .HasColumnName("99 Clearout");
            });

            modelBuilder.Entity<LrpgltransactionV2grid>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("lrpgltransaction_v2grid");

                entity.Property(e => e.Test)
                    .IsRequired()
                    .HasMaxLength(4)
                    .IsUnicode(false)
                    .HasColumnName("test");
            });

            modelBuilder.Entity<LrpgltransactionView>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("lrpgltransaction_view");

                entity.Property(e => e.Test).HasColumnName("test");
            });

            modelBuilder.Entity<LrpgltransactionsGridDum>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("LRPGLTransactionsGRID_DA");

                entity.Property(e => e.AccountGroup).HasMaxLength(50);

                entity.Property(e => e.AcctDescription).HasMaxLength(75);

                entity.Property(e => e.AcctNoFull).HasMaxLength(75);

                entity.Property(e => e.Amount).HasColumnType("money");

                entity.Property(e => e.AuditNo).HasMaxLength(75);

                entity.Property(e => e.BatchNo).HasMaxLength(75);

                entity.Property(e => e.Checkdate)
                    .HasColumnType("datetime")
                    .HasColumnName("checkdate");

                entity.Property(e => e.Checkno)
                    .HasMaxLength(75)
                    .HasColumnName("checkno");

                entity.Property(e => e.Company).HasMaxLength(50);

                entity.Property(e => e.Dept).HasMaxLength(75);

                entity.Property(e => e.DocNumber).HasMaxLength(75);

                entity.Property(e => e.Employee).HasMaxLength(75);

                entity.Property(e => e.FiscalYearEnded).HasMaxLength(75);

                entity.Property(e => e.Fsdepartment)
                    .HasMaxLength(50)
                    .HasColumnName("FSDepartment");

                entity.Property(e => e.Fund).HasMaxLength(75);

                entity.Property(e => e.GlpostingDate)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("GLPostingDate");

                entity.Property(e => e.GrantNo).HasMaxLength(75);

                entity.Property(e => e.JeNo)
                    .HasMaxLength(75)
                    .HasColumnName("JE_No");

                entity.Property(e => e.LineDescription).HasMaxLength(75);

                entity.Property(e => e.Lm2description)
                    .HasMaxLength(75)
                    .HasColumnName("LM2Description");

                entity.Property(e => e.Lrpcompanyid).HasColumnName("LRPCOMPANYID");

                entity.Property(e => e.Main).HasMaxLength(75);

                entity.Property(e => e.Objectuid).HasColumnName("objectuid");

                entity.Property(e => e.Project).HasMaxLength(75);

                entity.Property(e => e.Recordid).HasColumnName("recordid");

                entity.Property(e => e.SubGroup).HasMaxLength(50);

                entity.Property(e => e.SubSubGroup).HasMaxLength(50);

                entity.Property(e => e.SubSubSubGroup).HasMaxLength(50);

                entity.Property(e => e.TransDescription).HasMaxLength(75);

                entity.Property(e => e.VendorName).HasMaxLength(100);

                entity.Property(e => e.VendorNo).HasMaxLength(75);
            });

            modelBuilder.Entity<LrpgltransactionsLimitedGridDum>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("LRPGLTransactionsLimitedGRID_DA");

                entity.Property(e => e.Acct)
                    .HasMaxLength(75)
                    .HasColumnName("ACCT");

                entity.Property(e => e.Amount).HasColumnName("AMOUNT");

                entity.Property(e => e.Auditnbr)
                    .HasMaxLength(75)
                    .HasColumnName("AUDITNBR");

                entity.Property(e => e.Batnbr)
                    .HasMaxLength(75)
                    .HasColumnName("BATNBR");

                entity.Property(e => e.BdgaccountGroup)
                    .HasMaxLength(50)
                    .HasColumnName("BDGAccountGroup");

                entity.Property(e => e.BdgaccountGroupId).HasColumnName("BDGAccountGroupID");

                entity.Property(e => e.BdgaccountGroupSubGroup)
                    .HasMaxLength(50)
                    .HasColumnName("BDGAccountGroup_SubGroup");

                entity.Property(e => e.BdgaccountGroupSubGroupSubGroup)
                    .HasMaxLength(50)
                    .HasColumnName("BDGAccountGroup_SubGroup_SubGroup");

                entity.Property(e => e.BdgaccountGroupSubGroupSubGroupSubGroup)
                    .HasMaxLength(50)
                    .HasColumnName("BDGAccountGroup_SubGroup_SubGroup_SubGroup");

                entity.Property(e => e.Bdgdepartment)
                    .HasMaxLength(50)
                    .HasColumnName("BDGDepartment");

                entity.Property(e => e.BdgdepartmentId2).HasColumnName("BDGDepartmentID2");

                entity.Property(e => e.Checkdate)
                    .HasColumnType("datetime")
                    .HasColumnName("CHECKDATE");

                entity.Property(e => e.Checkdate2)
                    .HasColumnType("datetime")
                    .HasColumnName("CHECKDATE2");

                entity.Property(e => e.Checkdate3)
                    .HasColumnType("datetime")
                    .HasColumnName("CHECKDATE3");

                entity.Property(e => e.Checkno)
                    .HasMaxLength(75)
                    .HasColumnName("CHECKNO");

                entity.Property(e => e.Checkno2)
                    .HasMaxLength(75)
                    .HasColumnName("CHECKNO2");

                entity.Property(e => e.Checkno3)
                    .HasMaxLength(75)
                    .HasColumnName("CHECKNO3");

                entity.Property(e => e.Classid)
                    .HasMaxLength(75)
                    .HasColumnName("CLASSID");

                entity.Property(e => e.Cpnyid)
                    .HasMaxLength(75)
                    .HasColumnName("CPNYID");

                entity.Property(e => e.CreatedBy).HasMaxLength(50);

                entity.Property(e => e.CreatedOn).HasColumnType("datetime");

                entity.Property(e => e.CrtdDatetime)
                    .HasColumnType("datetime")
                    .HasColumnName("CRTD_DATETIME");

                entity.Property(e => e.CrtdUser)
                    .HasMaxLength(75)
                    .HasColumnName("CRTD_USER");

                entity.Property(e => e.CssLink)
                    .HasMaxLength(255)
                    .HasColumnName("css_link")
                    .IsFixedLength(true);

                entity.Property(e => e.CssLinkLines)
                    .HasMaxLength(255)
                    .HasColumnName("css_link_lines")
                    .IsFixedLength(true);

                entity.Property(e => e.Curyid)
                    .HasMaxLength(75)
                    .HasColumnName("CURYID");

                entity.Property(e => e.Curyrate).HasColumnName("CURYRATE");

                entity.Property(e => e.Descr)
                    .HasMaxLength(75)
                    .HasColumnName("DESCR");

                entity.Property(e => e.Description).HasMaxLength(2000);

                entity.Property(e => e.Display).HasMaxLength(100);

                entity.Property(e => e.Docnbr)
                    .HasMaxLength(75)
                    .HasColumnName("DOCNBR");

                entity.Property(e => e.EmpFiscyrAcct)
                    .HasMaxLength(250)
                    .HasColumnName("EMP_FISCYR_ACCT");

                entity.Property(e => e.EmployeeCode)
                    .HasMaxLength(75)
                    .HasColumnName("EMPLOYEE_CODE");

                entity.Property(e => e.FinalId)
                    .HasMaxLength(75)
                    .HasColumnName("FINAL_ID");

                entity.Property(e => e.Fiscyr)
                    .HasMaxLength(75)
                    .HasColumnName("FISCYR");

                entity.Property(e => e.FiscyrAcct)
                    .HasMaxLength(50)
                    .HasColumnName("FISCYR_ACCT");

                entity.Property(e => e.GrantNo).HasMaxLength(75);

                entity.Property(e => e.IcDistribution).HasColumnName("IC_DISTRIBUTION");

                entity.Property(e => e.Id)
                    .HasMaxLength(75)
                    .HasColumnName("ID");

                entity.Property(e => e.IdField)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("ID_FIELD");

                entity.Property(e => e.ImportedObjectUid)
                    .HasMaxLength(50)
                    .HasColumnName("ImportedObjectUID");

                entity.Property(e => e.InstallationUid).HasColumnName("InstallationUID");

                entity.Property(e => e.Jrnltype)
                    .HasMaxLength(75)
                    .HasColumnName("JRNLTYPE");

                entity.Property(e => e.Ledgerid)
                    .HasMaxLength(75)
                    .HasColumnName("LEDGERID");

                entity.Property(e => e.Lineid).HasColumnName("LINEID");

                entity.Property(e => e.Linenbr).HasColumnName("LINENBR");

                entity.Property(e => e.Lineref)
                    .HasMaxLength(75)
                    .HasColumnName("LINEREF");

                entity.Property(e => e.Lm2Code)
                    .HasMaxLength(75)
                    .HasColumnName("LM2_CODE");

                entity.Property(e => e.Lm2Description)
                    .HasMaxLength(75)
                    .HasColumnName("LM2 DESCRIPTION");

                entity.Property(e => e.Lm2Fiscyr)
                    .HasMaxLength(250)
                    .HasColumnName("LM2_FISCYR");

                entity.Property(e => e.Lm2FiscyrAcct)
                    .HasMaxLength(250)
                    .HasColumnName("LM2_FISCYR_ACCT");

                entity.Property(e => e.Lm2FiscyrEmpAcct)
                    .HasMaxLength(250)
                    .HasColumnName("LM2_FISCYR_EMP_ACCT");

                entity.Property(e => e.LrpcompanyId).HasColumnName("LRPCompanyID");

                entity.Property(e => e.LupdDatetime)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("LUPD_DATETIME");

                entity.Property(e => e.LupdUser)
                    .HasMaxLength(75)
                    .HasColumnName("LUPD_USER");

                entity.Property(e => e.Masterid)
                    .HasMaxLength(75)
                    .HasColumnName("MASTERID");

                entity.Property(e => e.Module)
                    .HasMaxLength(75)
                    .HasColumnName("MODULE");

                entity.Property(e => e.Multiplechecks1)
                    .HasMaxLength(75)
                    .HasColumnName("MULTIPLECHECKS_1");

                entity.Property(e => e.Multiplechecks2)
                    .HasMaxLength(75)
                    .HasColumnName("MULTIPLECHECKS_2");

                entity.Property(e => e.Name).HasMaxLength(100);

                entity.Property(e => e.NameAlias).HasMaxLength(100);

                entity.Property(e => e.Noteid).HasColumnName("NOTEID");

                entity.Property(e => e.ObjectUid).HasColumnName("ObjectUID");

                entity.Property(e => e.OldRecordId).HasColumnName("OldRecordID");

                entity.Property(e => e.Perent)
                    .HasMaxLength(75)
                    .HasColumnName("PERENT");

                entity.Property(e => e.Perpost)
                    .HasMaxLength(75)
                    .HasColumnName("PERPOST");

                entity.Property(e => e.Posted)
                    .HasMaxLength(75)
                    .HasColumnName("POSTED");

                entity.Property(e => e.RecordId)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("RecordID");

                entity.Property(e => e.Refnbr)
                    .HasMaxLength(75)
                    .HasColumnName("REFNBR");

                entity.Property(e => e.SalesTaxAmount).HasColumnType("money");

                entity.Property(e => e.SalesTaxYesNoId).HasColumnName("SalesTax_YesNoID");

                entity.Property(e => e.Seg1)
                    .HasMaxLength(75)
                    .HasColumnName("SEG1");

                entity.Property(e => e.Seg10)
                    .HasMaxLength(75)
                    .HasColumnName("SEG10");

                entity.Property(e => e.Seg2)
                    .HasMaxLength(75)
                    .HasColumnName("SEG2");

                entity.Property(e => e.Seg3)
                    .HasMaxLength(75)
                    .HasColumnName("SEG3");

                entity.Property(e => e.Seg4)
                    .HasMaxLength(75)
                    .HasColumnName("SEG4");

                entity.Property(e => e.Seg5)
                    .HasMaxLength(75)
                    .HasColumnName("SEG5");

                entity.Property(e => e.Seg6)
                    .HasMaxLength(75)
                    .HasColumnName("SEG6");

                entity.Property(e => e.Seg7)
                    .HasMaxLength(75)
                    .HasColumnName("SEG7");

                entity.Property(e => e.Seg8)
                    .HasMaxLength(75)
                    .HasColumnName("SEG8");

                entity.Property(e => e.Seg9)
                    .HasMaxLength(75)
                    .HasColumnName("SEG9");

                entity.Property(e => e.Sub)
                    .HasMaxLength(75)
                    .HasColumnName("SUB");

                entity.Property(e => e.Trandate)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("TRANDATE");

                entity.Property(e => e.Trandesc)
                    .HasMaxLength(75)
                    .HasColumnName("TRANDESC");

                entity.Property(e => e.Trantype)
                    .HasMaxLength(75)
                    .HasColumnName("TRANTYPE");

                entity.Property(e => e.Tstamp)
                    .IsRowVersion()
                    .IsConcurrencyToken()
                    .HasColumnName("TSTAMP");

                entity.Property(e => e.UpdatedBy).HasMaxLength(50);

                entity.Property(e => e.UpdatedOn).HasColumnType("datetime");

                entity.Property(e => e.Userdefined1)
                    .HasMaxLength(75)
                    .HasColumnName("USERDEFINED_1");

                entity.Property(e => e.Userdefined2)
                    .HasMaxLength(75)
                    .HasColumnName("USERDEFINED_2");

                entity.Property(e => e.Vclassid)
                    .HasMaxLength(75)
                    .HasColumnName("VCLASSID");

                entity.Property(e => e.VendorFiscyrAcct)
                    .HasMaxLength(250)
                    .HasColumnName("VENDOR_FISCYR_ACCT");

                entity.Property(e => e.YearSetupId).HasColumnName("YearSetupID");
            });

            modelBuilder.Entity<LrpgltranstionBudgetsumBdgaccountGroupSubGroupSubGroupIdView>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("lrpgltranstion_budgetsum_BDGAccountGroup_SubGroup_SubGroupID_view");

                entity.Property(e => e.Test)
                    .IsRequired()
                    .HasMaxLength(4)
                    .IsUnicode(false)
                    .HasColumnName("test");
            });

            modelBuilder.Entity<LrpgltranstionBudgetsumBdgaccountGroupSubGroupSubGroupSubGroupidView>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("lrpgltranstion_budgetsum_BDGAccountGroup_SubGroup_SubGroup_SubGroupid_view");

                entity.Property(e => e.Test)
                    .IsRequired()
                    .HasMaxLength(4)
                    .IsUnicode(false)
                    .HasColumnName("test");
            });

            modelBuilder.Entity<LrpgltranstionBudgetsumBdgaccountGroupSubGroupidView>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("lrpgltranstion_budgetsum_BDGAccountGroup_SubGroupid_view");

                entity.Property(e => e.Test)
                    .IsRequired()
                    .HasMaxLength(4)
                    .IsUnicode(false)
                    .HasColumnName("test");
            });

            modelBuilder.Entity<LrpgltranstionBudgetsumBdgbudgetinfoDetailView>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("lrpgltranstion_budgetsum_BDGBUDGETINFO_DETAIL_view");

                entity.Property(e => e.Test)
                    .IsRequired()
                    .HasMaxLength(4)
                    .IsUnicode(false)
                    .HasColumnName("TEST");
            });

            modelBuilder.Entity<LrpgltranstionBudgetsumDetailView>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("lrpgltranstion_budgetsum_detail_view");

                entity.Property(e => e.Test)
                    .IsRequired()
                    .HasMaxLength(4)
                    .IsUnicode(false)
                    .HasColumnName("test");
            });

            modelBuilder.Entity<LrpgltranstionBudgetsumView>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("lrpgltranstion_budgetsum_view");

                entity.Property(e => e.Test)
                    .IsRequired()
                    .HasMaxLength(4)
                    .IsUnicode(false)
                    .HasColumnName("test");
            });

            modelBuilder.Entity<LrpgltranstionBudgetsumViewStep2>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("lrpgltranstion_budgetsum_view_step2");

                entity.Property(e => e.Test)
                    .IsRequired()
                    .HasMaxLength(4)
                    .IsUnicode(false)
                    .HasColumnName("test");
            });

            modelBuilder.Entity<LrpglyearCode>(entity =>
            {
                entity.HasKey(e => e.ObjectUid);

                entity.ToTable("LRPGLYearCode");

                entity.Property(e => e.ObjectUid)
                    .HasColumnName("ObjectUID")
                    .HasDefaultValueSql("(newid())");

                entity.Property(e => e.CreatedBy).HasMaxLength(50);

                entity.Property(e => e.CreatedOn)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Description).HasMaxLength(2000);

                entity.Property(e => e.Display)
                    .HasMaxLength(50)
                    .HasComputedColumnSql("([Name])", false);

                entity.Property(e => e.ImportedObjectUid)
                    .HasMaxLength(50)
                    .HasColumnName("ImportedObjectUID");

                entity.Property(e => e.InstallationUid).HasColumnName("InstallationUID");

                entity.Property(e => e.ItemizedAmount).HasColumnType("money");

                entity.Property(e => e.LrpcodeId).HasColumnName("LRPCodeID");

                entity.Property(e => e.LrpreportId).HasColumnName("LRPReportID");

                entity.Property(e => e.Name).HasMaxLength(50);

                entity.Property(e => e.NameAlias).HasMaxLength(50);

                entity.Property(e => e.NonItemizedAmount).HasColumnType("money");

                entity.Property(e => e.OldRecordId).HasColumnName("OldRecordID");

                entity.Property(e => e.RecordId)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("RecordID");

                entity.Property(e => e.SortOrder).HasDefaultValueSql("((100))");

                entity.Property(e => e.TotalAmount).HasColumnType("money");

                entity.Property(e => e.UpdatedBy).HasMaxLength(50);

                entity.Property(e => e.UpdatedOn).HasColumnType("datetime");

                entity.Property(e => e.YearSetupId).HasColumnName("YearSetupID");

                entity.HasOne(d => d.Lrpcode)
                    .WithMany(p => p.LrpglyearCodes)
                    .HasForeignKey(d => d.LrpcodeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_LRPGLYearCode_LRPCodeID_LRPCode");

                entity.HasOne(d => d.Lrpreport)
                    .WithMany(p => p.LrpglyearCodes)
                    .HasForeignKey(d => d.LrpreportId)
                    .HasConstraintName("FK_LRPGLYearCode_LRPReportID_LRPReport");

                entity.HasOne(d => d.YearSetup)
                    .WithMany(p => p.LrpglyearCodes)
                    .HasForeignKey(d => d.YearSetupId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_LRPGLYearCode_YearSetupID_YearSetup");
            });

            modelBuilder.Entity<LrpglyearCodeGrid>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("LRPGLYearCodeGrid");

                entity.Property(e => e.Code)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.ItemizedAmount).HasColumnType("money");

                entity.Property(e => e.NonItemizedAmount).HasColumnType("money");

                entity.Property(e => e.ObjectUid).HasColumnName("ObjectUID");

                entity.Property(e => e.Report).HasMaxLength(50);

                entity.Property(e => e.TotalAmount).HasColumnType("money");

                entity.Property(e => e.YearSetup)
                    .IsRequired()
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<LrplineSummary>(entity =>
            {
                entity.HasKey(e => e.ObjectUid);

                entity.ToTable("LRPLineSummary");

                entity.Property(e => e.ObjectUid)
                    .HasColumnName("ObjectUID")
                    .HasDefaultValueSql("(newid())");

                entity.Property(e => e.Address).HasMaxLength(50);

                entity.Property(e => e.CheckNo).HasMaxLength(50);

                entity.Property(e => e.City).HasMaxLength(50);

                entity.Property(e => e.CreatedBy).HasMaxLength(50);

                entity.Property(e => e.CreatedOn)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Description).HasMaxLength(2000);

                entity.Property(e => e.DexRowId).HasColumnName("dex_row_id");

                entity.Property(e => e.Display)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasComputedColumnSql("([Name])", false);

                entity.Property(e => e.EmployeeId)
                    .HasMaxLength(50)
                    .HasColumnName("employee_id");

                entity.Property(e => e.Id)
                    .HasMaxLength(50)
                    .HasColumnName("id");

                entity.Property(e => e.IdField)
                    .HasMaxLength(100)
                    .HasColumnName("ID_FIELD");

                entity.Property(e => e.ImportedObjectUid)
                    .HasMaxLength(50)
                    .HasColumnName("ImportedObjectUID");

                entity.Property(e => e.InstallationUid).HasColumnName("InstallationUID");

                entity.Property(e => e.ItemizedAmount).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.LrpcodeId).HasColumnName("LRPCodeID");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.NameAlias)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.NonItemized).HasColumnType("numeric(18, 2)");

                entity.Property(e => e.OldRecordId).HasColumnName("OldRecordID");

                entity.Property(e => e.PaymentDate).HasColumnType("datetime");

                entity.Property(e => e.PostalCode).HasMaxLength(50);

                entity.Property(e => e.Purpose).HasMaxLength(50);

                entity.Property(e => e.RecordId)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("RecordID");

                entity.Property(e => e.RoomOrBox)
                    .HasMaxLength(50)
                    .HasColumnName("room-or-box");

                entity.Property(e => e.SortOrder).HasDefaultValueSql("((100))");

                entity.Property(e => e.State).HasMaxLength(50);

                entity.Property(e => e.Type).HasMaxLength(50);

                entity.Property(e => e.UpdatedBy).HasMaxLength(50);

                entity.Property(e => e.UpdatedOn).HasColumnType("datetime");

                entity.HasOne(d => d.Lrpcode)
                    .WithMany(p => p.LrplineSummaries)
                    .HasForeignKey(d => d.LrpcodeId)
                    .HasConstraintName("FK_LRPLineSummary_LRPCodeID_LRPCode");
            });

            modelBuilder.Entity<Lrplm2disbursementCode>(entity =>
            {
                entity.HasKey(e => e.ObjectUid);

                entity.ToTable("LRPLM2DisbursementCode");

                entity.Property(e => e.ObjectUid)
                    .HasColumnName("ObjectUID")
                    .HasDefaultValueSql("(newid())");

                entity.Property(e => e.CreatedBy).HasMaxLength(50);

                entity.Property(e => e.CreatedOn)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Description).HasMaxLength(2000);

                entity.Property(e => e.Display)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasComputedColumnSql("([Name])", false);

                entity.Property(e => e.ImportedObjectUid)
                    .HasMaxLength(50)
                    .HasColumnName("ImportedObjectUID");

                entity.Property(e => e.InstallationUid).HasColumnName("InstallationUID");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.NameAlias)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.OldRecordId).HasColumnName("OldRecordID");

                entity.Property(e => e.RecordId)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("RecordID");

                entity.Property(e => e.SortOrder).HasDefaultValueSql("((100))");

                entity.Property(e => e.UpdatedBy).HasMaxLength(50);

                entity.Property(e => e.UpdatedOn).HasColumnType("datetime");
            });

            modelBuilder.Entity<Lrplm2receiptCode>(entity =>
            {
                entity.HasKey(e => e.ObjectUid);

                entity.ToTable("LRPLM2ReceiptCode");

                entity.Property(e => e.ObjectUid)
                    .HasColumnName("ObjectUID")
                    .HasDefaultValueSql("(newid())");

                entity.Property(e => e.CreatedBy).HasMaxLength(50);

                entity.Property(e => e.CreatedOn)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Description).HasMaxLength(2000);

                entity.Property(e => e.Display)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasComputedColumnSql("([Name])", false);

                entity.Property(e => e.ImportedObjectUid)
                    .HasMaxLength(50)
                    .HasColumnName("ImportedObjectUID");

                entity.Property(e => e.InstallationUid).HasColumnName("InstallationUID");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.NameAlias)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.OldRecordId).HasColumnName("OldRecordID");

                entity.Property(e => e.RecordId)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("RecordID");

                entity.Property(e => e.SortOrder).HasDefaultValueSql("((100))");

                entity.Property(e => e.UpdatedBy).HasMaxLength(50);

                entity.Property(e => e.UpdatedOn).HasColumnType("datetime");
            });

            modelBuilder.Entity<Lrplm2status>(entity =>
            {
                entity.HasKey(e => e.ObjectUid);

                entity.ToTable("LRPLM2Status");

                entity.Property(e => e.ObjectUid)
                    .HasColumnName("ObjectUID")
                    .HasDefaultValueSql("(newid())");

                entity.Property(e => e.CreatedBy).HasMaxLength(50);

                entity.Property(e => e.CreatedOn)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Description).HasMaxLength(2000);

                entity.Property(e => e.Display)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasComputedColumnSql("([Name])", false);

                entity.Property(e => e.ImportedObjectUid)
                    .HasMaxLength(50)
                    .HasColumnName("ImportedObjectUID");

                entity.Property(e => e.InstallationUid).HasColumnName("InstallationUID");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.NameAlias)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.OldRecordId).HasColumnName("OldRecordID");

                entity.Property(e => e.RecordId)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("RecordID");

                entity.Property(e => e.SortOrder).HasDefaultValueSql("((100))");

                entity.Property(e => e.UpdatedBy).HasMaxLength(50);

                entity.Property(e => e.UpdatedOn).HasColumnType("datetime");
            });

            modelBuilder.Entity<Lrpproject>(entity =>
            {
                entity.HasKey(e => e.ObjectUid);

                entity.ToTable("LRPProject");

                entity.Property(e => e.ObjectUid)
                    .HasColumnName("ObjectUID")
                    .HasDefaultValueSql("(newid())");

                entity.Property(e => e.CreatedBy).HasMaxLength(50);

                entity.Property(e => e.CreatedOn)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Description).HasMaxLength(2000);

                entity.Property(e => e.Display)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasComputedColumnSql("([Name])", false);

                entity.Property(e => e.GrantNo).HasMaxLength(50);

                entity.Property(e => e.ImportedObjectUid)
                    .HasMaxLength(50)
                    .HasColumnName("ImportedObjectUID");

                entity.Property(e => e.InactiveComment).HasMaxLength(500);

                entity.Property(e => e.InactiveDate).HasColumnType("datetime");

                entity.Property(e => e.InstallationUid).HasColumnName("InstallationUID");

                entity.Property(e => e.LrpcostCenterId).HasColumnName("LRPCostCenterID");

                entity.Property(e => e.Lrplm2disbursementCodeId).HasColumnName("LRPLM2DisbursementCodeID");

                entity.Property(e => e.Lrplm2receiptCodeId).HasColumnName("LRPLM2ReceiptCodeID");

                entity.Property(e => e.LrpprojectTypeId).HasColumnName("LRPProjectTypeID");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.NameAlias)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.OldRecordId).HasColumnName("OldRecordID");

                entity.Property(e => e.ProjectCode).HasMaxLength(50);

                entity.Property(e => e.ProjectNo)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.RecordId)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("RecordID");

                entity.Property(e => e.ScheduledEndDate).HasColumnType("datetime");

                entity.Property(e => e.SortOrder).HasDefaultValueSql("((100))");

                entity.Property(e => e.StartDate).HasColumnType("datetime");

                entity.Property(e => e.UpdatedBy).HasMaxLength(50);

                entity.Property(e => e.UpdatedOn).HasColumnType("datetime");

                entity.HasOne(d => d.LrpcostCenter)
                    .WithMany(p => p.Lrpprojects)
                    .HasForeignKey(d => d.LrpcostCenterId)
                    .HasConstraintName("FK_LRPProject_LRPCostCenterID_LRPCostCenter");

                entity.HasOne(d => d.Lrplm2disbursementCode)
                    .WithMany(p => p.Lrpprojects)
                    .HasForeignKey(d => d.Lrplm2disbursementCodeId)
                    .HasConstraintName("FK_LRPProject_LRPLM2DisbursementCodeID_LRPLM2DisbursementCode");

                entity.HasOne(d => d.Lrplm2receiptCode)
                    .WithMany(p => p.Lrpprojects)
                    .HasForeignKey(d => d.Lrplm2receiptCodeId)
                    .HasConstraintName("FK_LRPProject_LRPLM2ReceiptCodeID_LRPLM2ReceiptCode");

                entity.HasOne(d => d.LrpprojectType)
                    .WithMany(p => p.Lrpprojects)
                    .HasForeignKey(d => d.LrpprojectTypeId)
                    .HasConstraintName("FK_LRPProject_LRPProjectTypeID_LRPProjectType");
            });

            modelBuilder.Entity<LrpprojectType>(entity =>
            {
                entity.HasKey(e => e.ObjectUid);

                entity.ToTable("LRPProjectType");

                entity.Property(e => e.ObjectUid)
                    .HasColumnName("ObjectUID")
                    .HasDefaultValueSql("(newid())");

                entity.Property(e => e.CreatedBy).HasMaxLength(50);

                entity.Property(e => e.CreatedOn)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Description).HasMaxLength(2000);

                entity.Property(e => e.Display)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasComputedColumnSql("([Name])", false);

                entity.Property(e => e.ImportedObjectUid)
                    .HasMaxLength(50)
                    .HasColumnName("ImportedObjectUID");

                entity.Property(e => e.InstallationUid).HasColumnName("InstallationUID");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.NameAlias)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.OldRecordId).HasColumnName("OldRecordID");

                entity.Property(e => e.ProjectTypeNo).HasMaxLength(50);

                entity.Property(e => e.RecordId)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("RecordID");

                entity.Property(e => e.SortOrder).HasDefaultValueSql("((100))");

                entity.Property(e => e.UpdatedBy).HasMaxLength(50);

                entity.Property(e => e.UpdatedOn).HasColumnType("datetime");
            });

            modelBuilder.Entity<Lrpreport>(entity =>
            {
                entity.HasKey(e => e.ObjectUid);

                entity.ToTable("LRPReport");

                entity.Property(e => e.ObjectUid)
                    .HasColumnName("ObjectUID")
                    .HasDefaultValueSql("(newid())");

                entity.Property(e => e.CreatedBy).HasMaxLength(50);

                entity.Property(e => e.CreatedOn)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Dbname)
                    .HasMaxLength(50)
                    .HasColumnName("DBName");

                entity.Property(e => e.Description).HasMaxLength(2000);

                entity.Property(e => e.Display)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasComputedColumnSql("([Name])", false);

                entity.Property(e => e.ImportedObjectUid)
                    .HasMaxLength(50)
                    .HasColumnName("ImportedObjectUID");

                entity.Property(e => e.InstallationUid).HasColumnName("InstallationUID");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.NameAlias)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.OldRecordId).HasColumnName("OldRecordID");

                entity.Property(e => e.Password).HasMaxLength(50);

                entity.Property(e => e.RecordId)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("RecordID");

                entity.Property(e => e.ReportFile)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.ServerName).HasMaxLength(50);

                entity.Property(e => e.SortOrder).HasDefaultValueSql("((100))");

                entity.Property(e => e.UpdatedBy).HasMaxLength(50);

                entity.Property(e => e.UpdatedOn).HasColumnType("datetime");

                entity.Property(e => e.Username).HasMaxLength(50);
            });

            modelBuilder.Entity<LrpreportGrid>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("LRPReportGrid");

                entity.Property(e => e.Dbname)
                    .HasMaxLength(50)
                    .HasColumnName("DBName");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.ObjectUid).HasColumnName("ObjectUID");

                entity.Property(e => e.Password).HasMaxLength(50);

                entity.Property(e => e.ReportFile)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.ServerName).HasMaxLength(50);

                entity.Property(e => e.Username).HasMaxLength(50);
            });

            modelBuilder.Entity<Lrpten99BoxNo>(entity =>
            {
                entity.HasKey(e => e.ObjectUid);

                entity.ToTable("LRPTen99BoxNo");

                entity.Property(e => e.ObjectUid)
                    .HasColumnName("ObjectUID")
                    .HasDefaultValueSql("(newid())");

                entity.Property(e => e.CreatedBy).HasMaxLength(50);

                entity.Property(e => e.CreatedOn)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Description).HasMaxLength(2000);

                entity.Property(e => e.Display)
                    .HasMaxLength(2051)
                    .HasComputedColumnSql("(([Ten99BoxText]+'-')+coalesce([Description],''))", false);

                entity.Property(e => e.Dolramnt)
                    .HasColumnType("money")
                    .HasColumnName("DOLRAMNT");

                entity.Property(e => e.ImportedObjectUid)
                    .HasMaxLength(50)
                    .HasColumnName("ImportedObjectUID");

                entity.Property(e => e.InstallationUid).HasColumnName("InstallationUID");

                entity.Property(e => e.Lrpten99TaxTypeId).HasColumnName("LRPTen99TaxTypeID");

                entity.Property(e => e.Name).HasMaxLength(50);

                entity.Property(e => e.NameAlias).HasMaxLength(50);

                entity.Property(e => e.OldRecordId).HasColumnName("OldRecordID");

                entity.Property(e => e.RecordId)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("RecordID");

                entity.Property(e => e.SortOrder).HasDefaultValueSql("((100))");

                entity.Property(e => e.Ten99BoxText)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.UpdatedBy).HasMaxLength(50);

                entity.Property(e => e.UpdatedOn).HasColumnType("datetime");

                entity.HasOne(d => d.Lrpten99TaxType)
                    .WithMany(p => p.Lrpten99BoxNos)
                    .HasForeignKey(d => d.Lrpten99TaxTypeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_LRPTen99BoxNo_LRPTen99TaxType");
            });

            modelBuilder.Entity<Lrpten99BoxNoGrid>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("LRPTen99BoxNoGrid");

                entity.Property(e => e.Dolramnt)
                    .HasColumnType("money")
                    .HasColumnName("DOLRAMNT($)");

                entity.Property(e => e.ObjectUid).HasColumnName("ObjectUID");

                entity.Property(e => e._1099BoxNo).HasColumnName("1099 Box No");

                entity.Property(e => e._1099BoxText)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnName("1099 Box Text");

                entity.Property(e => e._1099TaxType)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnName("1099 Tax Type");
            });

            modelBuilder.Entity<Lrpten99TaxType>(entity =>
            {
                entity.HasKey(e => e.ObjectUid);

                entity.ToTable("LRPTen99TaxType");

                entity.Property(e => e.ObjectUid)
                    .HasColumnName("ObjectUID")
                    .HasDefaultValueSql("(newid())");

                entity.Property(e => e.CreatedBy).HasMaxLength(50);

                entity.Property(e => e.CreatedOn)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Description).HasMaxLength(2000);

                entity.Property(e => e.DescriptionBp)
                    .HasMaxLength(2000)
                    .HasColumnName("Description_BP");

                entity.Property(e => e.Display)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasComputedColumnSql("([Name])", false);

                entity.Property(e => e.ImportedObjectUid)
                    .HasMaxLength(50)
                    .HasColumnName("ImportedObjectUID");

                entity.Property(e => e.InstallationUid).HasColumnName("InstallationUID");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.NameAlias)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.OldRecordId).HasColumnName("OldRecordID");

                entity.Property(e => e.RecordId)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("RecordID");

                entity.Property(e => e.SortOrder).HasDefaultValueSql("((100))");

                entity.Property(e => e.UpdatedBy).HasMaxLength(50);

                entity.Property(e => e.UpdatedOn).HasColumnType("datetime");

                entity.Property(e => e.ValueGp)
                    .HasMaxLength(50)
                    .HasColumnName("Value_GP");
            });

            modelBuilder.Entity<Lrpten99TaxTypeGrid>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("LRPTen99TaxTypeGrid");

                entity.Property(e => e.DescriptionBp)
                    .HasMaxLength(2000)
                    .HasColumnName("Description_BP");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.ObjectUid).HasColumnName("ObjectUID");

                entity.Property(e => e.ValueGp)
                    .HasMaxLength(50)
                    .HasColumnName("Value_GP");
            });

            modelBuilder.Entity<LrptimeEntry>(entity =>
            {
                entity.HasKey(e => e.ObjectUid);

                entity.ToTable("LRPTimeEntry");

                entity.Property(e => e.ObjectUid)
                    .HasColumnName("ObjectUID")
                    .HasDefaultValueSql("(newid())");

                entity.Property(e => e.CreatedBy).HasMaxLength(50);

                entity.Property(e => e.CreatedOn)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Description).HasMaxLength(2000);

                entity.Property(e => e.Display)
                    .HasMaxLength(50)
                    .HasComputedColumnSql("([Name])", false);

                entity.Property(e => e.ImportedObjectUid)
                    .HasMaxLength(50)
                    .HasColumnName("ImportedObjectUID");

                entity.Property(e => e.InstallationUid).HasColumnName("InstallationUID");

                entity.Property(e => e.LrpDateEnd)
                    .HasColumnType("datetime")
                    .HasColumnName("LRP_DATE_END");

                entity.Property(e => e.LrpDateStart)
                    .HasColumnType("datetime")
                    .HasColumnName("LRP_DATE_START");

                entity.Property(e => e.LrpcodeId).HasColumnName("LRPCodeID");

                entity.Property(e => e.LrpemployeeId).HasColumnName("LRPEmployeeID");

                entity.Property(e => e.Name).HasMaxLength(50);

                entity.Property(e => e.NameAlias).HasMaxLength(50);

                entity.Property(e => e.OldRecordId).HasColumnName("OldRecordID");

                entity.Property(e => e.Percentage).HasColumnType("numeric(19, 5)");

                entity.Property(e => e.RecordId)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("RecordID");

                entity.Property(e => e.SortOrder).HasDefaultValueSql("((100))");

                entity.Property(e => e.UpdatedBy).HasMaxLength(50);

                entity.Property(e => e.UpdatedOn).HasColumnType("datetime");

                entity.HasOne(d => d.Lrpcode)
                    .WithMany(p => p.LrptimeEntries)
                    .HasForeignKey(d => d.LrpcodeId)
                    .HasConstraintName("FK_LRPTimeEntry_LRPCodeID_LRPCode");

                entity.HasOne(d => d.Lrpemployee)
                    .WithMany(p => p.LrptimeEntries)
                    .HasForeignKey(d => d.LrpemployeeId)
                    .HasConstraintName("FK_LRPTimeEntry_LRPEmployeeID_LRPEmployee");
            });

            modelBuilder.Entity<LrptimeEntryGrid>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("LRPTimeEntryGrid");

                entity.Property(e => e.Code).HasMaxLength(50);

                entity.Property(e => e.Employee).HasMaxLength(50);

                entity.Property(e => e.EndDate).HasColumnType("datetime");

                entity.Property(e => e.Name).HasMaxLength(50);

                entity.Property(e => e.ObjectUid).HasColumnName("ObjectUID");

                entity.Property(e => e.Percentage).HasColumnType("numeric(19, 5)");

                entity.Property(e => e.StartDate).HasColumnType("datetime");
            });

            modelBuilder.Entity<Lrpvendor>(entity =>
            {
                entity.HasKey(e => e.ObjectUid);

                entity.ToTable("LRPVendor");

                entity.HasIndex(e => e.LrpcompanyId, "iLRPCompanyID_LRPVendor");

                entity.HasIndex(e => e.LrpdepartmentId, "iLRPDepartmentID_LRPVendor");

                entity.HasIndex(e => e.LrpvendorMasterId, "iLRPVendorMasterID_LRPVendor");

                entity.Property(e => e.ObjectUid)
                    .HasColumnName("ObjectUID")
                    .HasDefaultValueSql("(newid())");

                entity.Property(e => e.AddressI).HasMaxLength(100);

                entity.Property(e => e.AddressIi)
                    .HasMaxLength(100)
                    .HasColumnName("AddressII");

                entity.Property(e => e.AddressIii)
                    .HasMaxLength(100)
                    .HasColumnName("AddressIII");

                entity.Property(e => e.City).HasMaxLength(50);

                entity.Property(e => e.ContactName).HasMaxLength(100);

                entity.Property(e => e.CountryId).HasColumnName("CountryID");

                entity.Property(e => e.CountryStateId).HasColumnName("Country_StateID");

                entity.Property(e => e.CreatedBy).HasMaxLength(50);

                entity.Property(e => e.CreatedOn)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Description).HasMaxLength(2000);

                entity.Property(e => e.Display)
                    .IsRequired()
                    .HasMaxLength(151)
                    .HasComputedColumnSql("(([VendorNo]+'-')+[Name])", false);

                entity.Property(e => e.ImportedObjectUid)
                    .HasMaxLength(50)
                    .HasColumnName("ImportedObjectUID");

                entity.Property(e => e.InstallationUid).HasColumnName("InstallationUID");

                entity.Property(e => e.LastUpdateGpdate)
                    .HasColumnType("datetime")
                    .HasColumnName("LastUpdateGPDate");

                entity.Property(e => e.LastUpdateGpuserId)
                    .HasMaxLength(50)
                    .HasColumnName("LastUpdateGPUserID");

                entity.Property(e => e.LrpcompanyId).HasColumnName("LRPCompanyID");

                entity.Property(e => e.LrpdepartmentId).HasColumnName("LRPDepartmentID");

                entity.Property(e => e.LrpvendorClassId).HasColumnName("LRPVendorClassID");

                entity.Property(e => e.LrpvendorMasterId).HasColumnName("LRPVendorMasterID");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.NameAlias)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.OldRecordId).HasColumnName("OldRecordID");

                entity.Property(e => e.PostalCode).HasMaxLength(50);

                entity.Property(e => e.RecordId)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("RecordID");

                entity.Property(e => e.SortOrder).HasDefaultValueSql("((100))");

                entity.Property(e => e.UpdatedBy).HasMaxLength(50);

                entity.Property(e => e.UpdatedOn).HasColumnType("datetime");

                entity.Property(e => e.Userdef1)
                    .HasMaxLength(50)
                    .HasColumnName("userdef1");

                entity.Property(e => e.Userdef2)
                    .HasMaxLength(50)
                    .HasColumnName("userdef2");

                entity.Property(e => e.VendorNo)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.HasOne(d => d.Country)
                    .WithMany(p => p.Lrpvendors)
                    .HasForeignKey(d => d.CountryId)
                    .HasConstraintName("FK_LRPVendor_CountryID_Country");

                entity.HasOne(d => d.CountryState)
                    .WithMany(p => p.Lrpvendors)
                    .HasForeignKey(d => d.CountryStateId)
                    .HasConstraintName("FK_LRPVendor_Country_StateID_Country_State");

                entity.HasOne(d => d.Lrpcompany)
                    .WithMany(p => p.Lrpvendors)
                    .HasForeignKey(d => d.LrpcompanyId)
                    .HasConstraintName("FK_LRPVendor_LRPCompanyID_LRPCompany");

                entity.HasOne(d => d.Lrpdepartment)
                    .WithMany(p => p.Lrpvendors)
                    .HasForeignKey(d => d.LrpdepartmentId)
                    .HasConstraintName("FK_LRPVendor_LRPDepartment");

                entity.HasOne(d => d.LrpvendorClass)
                    .WithMany(p => p.Lrpvendors)
                    .HasForeignKey(d => d.LrpvendorClassId)
                    .HasConstraintName("FK_LRPVendor_LRPVendorClassID_LRPVendorClass");

                entity.HasOne(d => d.LrpvendorMaster)
                    .WithMany(p => p.Lrpvendors)
                    .HasForeignKey(d => d.LrpvendorMasterId)
                    .HasConstraintName("FK_LRPVendor_LRPVendorMasterID_LRPVendorMaster");
            });

            modelBuilder.Entity<LrpvendorClass>(entity =>
            {
                entity.HasKey(e => e.ObjectUid);

                entity.ToTable("LRPVendorClass");

                entity.Property(e => e.ObjectUid)
                    .HasColumnName("ObjectUID")
                    .HasDefaultValueSql("(newid())");

                entity.Property(e => e.CreatedBy).HasMaxLength(50);

                entity.Property(e => e.CreatedOn)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Description).HasMaxLength(2000);

                entity.Property(e => e.Display)
                    .HasMaxLength(100)
                    .HasComputedColumnSql("([vendorclassno]+[Name])", false);

                entity.Property(e => e.ImportedObjectUid)
                    .HasMaxLength(50)
                    .HasColumnName("ImportedObjectUID");

                entity.Property(e => e.InstallationUid).HasColumnName("InstallationUID");

                entity.Property(e => e.Name).HasMaxLength(50);

                entity.Property(e => e.NameAlias).HasMaxLength(50);

                entity.Property(e => e.OldRecordId).HasColumnName("OldRecordID");

                entity.Property(e => e.RecordId)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("RecordID");

                entity.Property(e => e.SortOrder).HasDefaultValueSql("((100))");

                entity.Property(e => e.UpdatedBy).HasMaxLength(50);

                entity.Property(e => e.UpdatedOn).HasColumnType("datetime");

                entity.Property(e => e.VendorClassNo)
                    .IsRequired()
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<LrpvendorClassGrid>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("LRPVendorClassGrid");

                entity.Property(e => e.Display).HasMaxLength(100);

                entity.Property(e => e.Name).HasMaxLength(50);

                entity.Property(e => e.ObjectUid).HasColumnName("ObjectUID");

                entity.Property(e => e.VendorClassNo)
                    .IsRequired()
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<LrpvendorCreate>(entity =>
            {
                entity.HasKey(e => e.ObjectUid)
                    .HasName("PK_LRPVendorcreate");

                entity.ToTable("LRPVendor_create");

                entity.Property(e => e.ObjectUid)
                    .HasColumnName("ObjectUID")
                    .HasDefaultValueSql("(newid())");

                entity.Property(e => e.AddressI).HasMaxLength(100);

                entity.Property(e => e.AddressIi)
                    .HasMaxLength(100)
                    .HasColumnName("AddressII");

                entity.Property(e => e.AddressIii)
                    .HasMaxLength(100)
                    .HasColumnName("AddressIII");

                entity.Property(e => e.City).HasMaxLength(50);

                entity.Property(e => e.ContactName).HasMaxLength(100);

                entity.Property(e => e.CountryId).HasColumnName("CountryID");

                entity.Property(e => e.CountryStateId).HasColumnName("Country_StateID");

                entity.Property(e => e.CreatedBy).HasMaxLength(50);

                entity.Property(e => e.CreatedOn).HasColumnType("datetime");

                entity.Property(e => e.Description).HasMaxLength(2000);

                entity.Property(e => e.Display)
                    .IsRequired()
                    .HasMaxLength(151)
                    .HasComputedColumnSql("(([VendorNo]+'-')+[Name])", false);

                entity.Property(e => e.ImportedObjectUid)
                    .HasMaxLength(50)
                    .HasColumnName("ImportedObjectUID");

                entity.Property(e => e.InstallationUid).HasColumnName("InstallationUID");

                entity.Property(e => e.LastUpdateGpdate)
                    .HasColumnType("datetime")
                    .HasColumnName("LastUpdateGPDate");

                entity.Property(e => e.LastUpdateGpuserId)
                    .HasMaxLength(50)
                    .HasColumnName("LastUpdateGPUserID");

                entity.Property(e => e.LrpcompanyId).HasColumnName("LRPCompanyID");

                entity.Property(e => e.LrpvendorClassId).HasColumnName("LRPVendorClassID");

                entity.Property(e => e.LrpvendorMasterId).HasColumnName("LRPVendorMasterID");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.NameAlias)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.OldRecordId).HasColumnName("OldRecordID");

                entity.Property(e => e.PostalCode).HasMaxLength(50);

                entity.Property(e => e.RecordId)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("RecordID");

                entity.Property(e => e.UpdatedBy).HasMaxLength(50);

                entity.Property(e => e.UpdatedOn).HasColumnType("datetime");

                entity.Property(e => e.Userdef1)
                    .HasMaxLength(50)
                    .HasColumnName("userdef1");

                entity.Property(e => e.Userdef2)
                    .HasMaxLength(50)
                    .HasColumnName("userdef2");

                entity.Property(e => e.VendorNo)
                    .IsRequired()
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<LrpvendorGrid>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("LRPVendorGrid");

                entity.Property(e => e.AddressI).HasMaxLength(100);

                entity.Property(e => e.AddressIi)
                    .HasMaxLength(100)
                    .HasColumnName("AddressII");

                entity.Property(e => e.City).HasMaxLength(50);

                entity.Property(e => e.Company).HasMaxLength(50);

                entity.Property(e => e.ContactName).HasMaxLength(100);

                entity.Property(e => e.Country).HasMaxLength(50);

                entity.Property(e => e.Department).HasMaxLength(50);

                entity.Property(e => e.EmployeeNo).HasMaxLength(50);

                entity.Property(e => e.LrpcompanyId).HasColumnName("LRPCompanyID");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.ObjectUid).HasColumnName("ObjectUID");

                entity.Property(e => e.PayrollNo)
                    .HasMaxLength(50)
                    .HasColumnName("PayrollNO");

                entity.Property(e => e.PostalCode).HasMaxLength(50);

                entity.Property(e => e.State).HasMaxLength(50);

                entity.Property(e => e.VendorClass).HasMaxLength(100);

                entity.Property(e => e.VendorMaster).HasMaxLength(50);

                entity.Property(e => e.VendorNo)
                    .IsRequired()
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<LrpvendorMaster>(entity =>
            {
                entity.HasKey(e => e.ObjectUid);

                entity.ToTable("LRPVendorMaster");

                entity.Property(e => e.ObjectUid)
                    .HasColumnName("ObjectUID")
                    .HasDefaultValueSql("(newid())");

                entity.Property(e => e.CreatedBy).HasMaxLength(50);

                entity.Property(e => e.CreatedOn)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Description).HasMaxLength(2000);

                entity.Property(e => e.Display)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasComputedColumnSql("([Name])", false);

                entity.Property(e => e.ImportedObjectUid)
                    .HasMaxLength(50)
                    .HasColumnName("ImportedObjectUID");

                entity.Property(e => e.InstallationUid).HasColumnName("InstallationUID");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.NameAlias)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.OldRecordId).HasColumnName("OldRecordID");

                entity.Property(e => e.RecordId)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("RecordID");

                entity.Property(e => e.SortOrder).HasDefaultValueSql("((100))");

                entity.Property(e => e.UpdatedBy).HasMaxLength(50);

                entity.Property(e => e.UpdatedOn).HasColumnType("datetime");
            });

            modelBuilder.Entity<LrpvendorMasterGrid>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("LRPVendorMasterGrid");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.ObjectUid).HasColumnName("ObjectUID");
            });

            modelBuilder.Entity<LrpvendorUpdate>(entity =>
            {
                entity.HasKey(e => e.ObjectUid)
                    .HasName("PK_LRPVendorcreateupdate");

                entity.ToTable("LRPVendor_update");

                entity.Property(e => e.ObjectUid)
                    .HasColumnName("ObjectUID")
                    .HasDefaultValueSql("(newid())");

                entity.Property(e => e.AddressI).HasMaxLength(100);

                entity.Property(e => e.AddressIi)
                    .HasMaxLength(100)
                    .HasColumnName("AddressII");

                entity.Property(e => e.AddressIii)
                    .HasMaxLength(100)
                    .HasColumnName("AddressIII");

                entity.Property(e => e.City).HasMaxLength(50);

                entity.Property(e => e.ContactName).HasMaxLength(100);

                entity.Property(e => e.CountryId).HasColumnName("CountryID");

                entity.Property(e => e.CountryStateId).HasColumnName("Country_StateID");

                entity.Property(e => e.CreatedBy).HasMaxLength(50);

                entity.Property(e => e.CreatedOn).HasColumnType("datetime");

                entity.Property(e => e.Description).HasMaxLength(2000);

                entity.Property(e => e.Display)
                    .IsRequired()
                    .HasMaxLength(151)
                    .HasComputedColumnSql("(([VendorNo]+'-')+[Name])", false);

                entity.Property(e => e.ImportedObjectUid)
                    .HasMaxLength(50)
                    .HasColumnName("ImportedObjectUID");

                entity.Property(e => e.InstallationUid).HasColumnName("InstallationUID");

                entity.Property(e => e.LastUpdateGpdate)
                    .HasColumnType("datetime")
                    .HasColumnName("LastUpdateGPDate");

                entity.Property(e => e.LastUpdateGpuserId)
                    .HasMaxLength(50)
                    .HasColumnName("LastUpdateGPUserID");

                entity.Property(e => e.LrpcompanyId).HasColumnName("LRPCompanyID");

                entity.Property(e => e.LrpvendorClassId).HasColumnName("LRPVendorClassID");

                entity.Property(e => e.LrpvendorMasterId).HasColumnName("LRPVendorMasterID");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.NameAlias)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.OldRecordId).HasColumnName("OldRecordID");

                entity.Property(e => e.PostalCode).HasMaxLength(50);

                entity.Property(e => e.RecordId)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("RecordID");

                entity.Property(e => e.UpdatedBy).HasMaxLength(50);

                entity.Property(e => e.UpdatedOn).HasColumnType("datetime");

                entity.Property(e => e.Userdef1)
                    .HasMaxLength(50)
                    .HasColumnName("userdef1");

                entity.Property(e => e.Userdef2)
                    .HasMaxLength(50)
                    .HasColumnName("userdef2");

                entity.Property(e => e.VendorNo)
                    .IsRequired()
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<LrpvendorVoucher>(entity =>
            {
                entity.HasKey(e => e.ObjectUid);

                entity.ToTable("LRPVendor_Voucher");

                entity.Property(e => e.ObjectUid)
                    .HasColumnName("ObjectUID")
                    .HasDefaultValueSql("(newid())");

                entity.Property(e => e.Company).HasMaxLength(50);

                entity.Property(e => e.CreatedBy).HasMaxLength(50);

                entity.Property(e => e.CreatedOn)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.CssLink)
                    .HasMaxLength(100)
                    .HasColumnName("CSS_Link");

                entity.Property(e => e.CssLinkLines)
                    .HasMaxLength(100)
                    .HasColumnName("CSS_Link_Lines");

                entity.Property(e => e.CurrentBalanceAmount).HasColumnType("money");

                entity.Property(e => e.Description).HasMaxLength(2000);

                entity.Property(e => e.Display)
                    .HasMaxLength(103)
                    .HasComputedColumnSql("(([VoucherNo]+' - ')+[dbo].[GetDocumentTypeName]([LRPDocumentTypeID]))", false);

                entity.Property(e => e.DocumentAmount).HasColumnType("money");

                entity.Property(e => e.DocumentNo).HasMaxLength(50);

                entity.Property(e => e.Iddate)
                    .HasColumnType("datetime")
                    .HasColumnName("IDDate");

                entity.Property(e => e.ImportedObjectUid)
                    .HasMaxLength(50)
                    .HasColumnName("ImportedObjectUID");

                entity.Property(e => e.InstallationUid).HasColumnName("InstallationUID");

                entity.Property(e => e.InvoiceDate).HasColumnType("datetime");

                entity.Property(e => e.LrpdocumentTypeId).HasColumnName("LRPDocumentTypeID");

                entity.Property(e => e.Lrpten99BoxNoId).HasColumnName("LRPTen99BoxNoID");

                entity.Property(e => e.Lrpten99TaxTypeId).HasColumnName("LRPTen99TaxTypeID");

                entity.Property(e => e.LrpvendorId).HasColumnName("LRPVendorID");

                entity.Property(e => e.LrpvoucherStatusId).HasColumnName("LRPVoucherStatusID");

                entity.Property(e => e.Name).HasMaxLength(50);

                entity.Property(e => e.NameAlias).HasMaxLength(50);

                entity.Property(e => e.OldRecordId).HasColumnName("OldRecordID");

                entity.Property(e => e.Pono)
                    .HasMaxLength(50)
                    .HasColumnName("PONo");

                entity.Property(e => e.Pstgdate)
                    .HasColumnType("datetime")
                    .HasColumnName("PSTGDate");

                entity.Property(e => e.RecordId)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("RecordID");

                entity.Property(e => e.SortOrder).HasDefaultValueSql("((100))");

                entity.Property(e => e.Ten99amnt)
                    .HasColumnType("money")
                    .HasColumnName("TEN99AMNT");

                entity.Property(e => e.TrxDescription).HasMaxLength(50);

                entity.Property(e => e.UpdatedBy).HasMaxLength(50);

                entity.Property(e => e.UpdatedOn).HasColumnType("datetime");

                entity.Property(e => e.VoucherNo)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.HasOne(d => d.LrpdocumentType)
                    .WithMany(p => p.LrpvendorVouchers)
                    .HasForeignKey(d => d.LrpdocumentTypeId)
                    .HasConstraintName("FK_LRPVendor_Voucher_LRPDocumentTypeID_LRPDocumentType");

                entity.HasOne(d => d.Lrpten99BoxNo)
                    .WithMany(p => p.LrpvendorVouchers)
                    .HasForeignKey(d => d.Lrpten99BoxNoId)
                    .HasConstraintName("FK_LRPVendor_Voucher_LRPTen99BoxNoID_LRPTen99BoxNo");

                entity.HasOne(d => d.Lrpten99TaxType)
                    .WithMany(p => p.LrpvendorVouchers)
                    .HasForeignKey(d => d.Lrpten99TaxTypeId)
                    .HasConstraintName("FK_LRPVendor_Voucher_LRPTen99TaxTypeID_LRPTen99TaxType");

                entity.HasOne(d => d.Lrpvendor)
                    .WithMany(p => p.LrpvendorVouchers)
                    .HasForeignKey(d => d.LrpvendorId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_LRPVendor_Voucher_LRPVendorID_LRPVendor");

                entity.HasOne(d => d.LrpvoucherStatus)
                    .WithMany(p => p.LrpvendorVouchers)
                    .HasForeignKey(d => d.LrpvoucherStatusId)
                    .HasConstraintName("FK_LRPVendor_Voucher_LRPVoucherStatusID_LRPVoucherStatus");
            });

            modelBuilder.Entity<LrpvendorVoucherAllGrid>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("LRPVendor_VoucherAllGrid");

                entity.Property(e => e.CheckNo)
                    .HasMaxLength(50)
                    .HasColumnName("Check No");

                entity.Property(e => e.Company).HasMaxLength(50);

                entity.Property(e => e.CssLink)
                    .HasMaxLength(100)
                    .HasColumnName("CSS_Link");

                entity.Property(e => e.CssLinkLines)
                    .HasMaxLength(100)
                    .HasColumnName("CSS_Link_Lines");

                entity.Property(e => e.CurrentBalanceAmount).HasColumnType("money");

                entity.Property(e => e.DocumentAmount).HasColumnType("money");

                entity.Property(e => e.DocumentNoInvoice)
                    .HasMaxLength(50)
                    .HasColumnName("Document No(Invoice)");

                entity.Property(e => e.DocumentType)
                    .HasMaxLength(50)
                    .HasColumnName("Document Type");

                entity.Property(e => e.GlpostingDate)
                    .HasColumnType("datetime")
                    .HasColumnName("GLPostingDate");

                entity.Property(e => e.Iddate)
                    .HasColumnType("datetime")
                    .HasColumnName("IDDate");

                entity.Property(e => e.InvoicePaymentDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Invoice/Payment Date");

                entity.Property(e => e.LrpdocumentType)
                    .HasMaxLength(50)
                    .HasColumnName("LRPDocumentType");

                entity.Property(e => e.LrpvendorId).HasColumnName("LRPVendorID");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.ObjectUid).HasColumnName("ObjectUID");

                entity.Property(e => e.Pono)
                    .HasMaxLength(50)
                    .HasColumnName("PONo");

                entity.Property(e => e.Status).HasMaxLength(50);

                entity.Property(e => e.TrxDescription).HasMaxLength(50);

                entity.Property(e => e.VoucherNo)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e._1099Amount)
                    .HasColumnType("money")
                    .HasColumnName("1099 AMOUNT");
            });

            modelBuilder.Entity<LrpvendorVoucherApplicability>(entity =>
            {
                entity.HasKey(e => e.ObjectUid);

                entity.ToTable("LRPVendor_Voucher_Applicability");

                entity.Property(e => e.ObjectUid)
                    .HasColumnName("ObjectUID")
                    .HasDefaultValueSql("(newid())");

                entity.Property(e => e.AppliedAmount).HasColumnType("money");

                entity.Property(e => e.AppliedToDocumentNo)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.CreatedBy).HasMaxLength(50);

                entity.Property(e => e.CreatedOn)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.CssLink)
                    .HasMaxLength(100)
                    .HasColumnName("CSS_Link");

                entity.Property(e => e.Description).HasMaxLength(2000);

                entity.Property(e => e.Display)
                    .HasColumnType("money")
                    .HasComputedColumnSql("([AppliedAmount])", false);

                entity.Property(e => e.DocumentDate).HasColumnType("datetime");

                entity.Property(e => e.ImportedObjectUid)
                    .HasMaxLength(50)
                    .HasColumnName("ImportedObjectUID");

                entity.Property(e => e.InstallationUid).HasColumnName("InstallationUID");

                entity.Property(e => e.LrpdocumentTypeId).HasColumnName("LRPDocumentTypeID");

                entity.Property(e => e.LrpvendorVoucherId).HasColumnName("LRPVendor_VoucherID");

                entity.Property(e => e.Name).HasMaxLength(50);

                entity.Property(e => e.NameAlias).HasMaxLength(50);

                entity.Property(e => e.OldRecordId).HasColumnName("OldRecordID");

                entity.Property(e => e.RecordId)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("RecordID");

                entity.Property(e => e.SortOrder).HasDefaultValueSql("((100))");

                entity.Property(e => e.UpdatedBy).HasMaxLength(50);

                entity.Property(e => e.UpdatedOn).HasColumnType("datetime");

                entity.Property(e => e.VoucherNo).HasMaxLength(50);

                entity.HasOne(d => d.LrpdocumentType)
                    .WithMany(p => p.LrpvendorVoucherApplicabilities)
                    .HasForeignKey(d => d.LrpdocumentTypeId)
                    .HasConstraintName("FK_LRPVendor_Voucher_Applicability_LRPDocumentTypeID_LRPDocumentType");

                entity.HasOne(d => d.LrpvendorVoucher)
                    .WithMany(p => p.LrpvendorVoucherApplicabilities)
                    .HasForeignKey(d => d.LrpvendorVoucherId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_LRPVendor_Voucher_Applicability_LRPVendor_VoucherID_LRPVendor_Voucher");
            });

            modelBuilder.Entity<LrpvendorVoucherApplicabilityGrid>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("LRPVendor_Voucher_ApplicabilityGrid");

                entity.Property(e => e.AppliedAmount).HasColumnType("money");

                entity.Property(e => e.AppliedToDocumentNo)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.CssLink)
                    .HasMaxLength(100)
                    .HasColumnName("CSS_Link");

                entity.Property(e => e.DocumentDate).HasColumnType("datetime");

                entity.Property(e => e.DocumentType).HasMaxLength(50);

                entity.Property(e => e.LrpvendorVoucherId).HasColumnName("LRPVendor_VoucherID");

                entity.Property(e => e.ObjectUid).HasColumnName("ObjectUID");

                entity.Property(e => e.RelatedVendorVoucherId).HasColumnName("RelatedVendor_VoucherID");

                entity.Property(e => e.VoucherNo).HasMaxLength(50);
            });

            modelBuilder.Entity<LrpvendorVoucherChangeLog>(entity =>
            {
                entity.HasKey(e => e.ObjectUid);

                entity.ToTable("LRPVendor_Voucher_ChangeLog");

                entity.Property(e => e.ObjectUid)
                    .HasColumnName("ObjectUID")
                    .HasDefaultValueSql("(newid())");

                entity.Property(e => e.CreatedBy).HasMaxLength(50);

                entity.Property(e => e.CreatedOn)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.CssLink)
                    .HasMaxLength(100)
                    .HasColumnName("CSS_Link");

                entity.Property(e => e.Description).HasMaxLength(2000);

                entity.Property(e => e.Display)
                    .HasMaxLength(50)
                    .HasComputedColumnSql("([Name])", false);

                entity.Property(e => e.ImportedObjectUid)
                    .HasMaxLength(50)
                    .HasColumnName("ImportedObjectUID");

                entity.Property(e => e.InstallationUid).HasColumnName("InstallationUID");

                entity.Property(e => e.InvoiceDate).HasColumnType("datetime");

                entity.Property(e => e.InvoiceDateOld).HasColumnType("datetime");

                entity.Property(e => e.Lrpten99BoxNoId).HasColumnName("LRPTen99BoxNoID");

                entity.Property(e => e.Lrpten99BoxNoIdold).HasColumnName("LRPTen99BoxNoIDOld");

                entity.Property(e => e.Lrpten99TaxTypeId).HasColumnName("LRPTen99TaxTypeID");

                entity.Property(e => e.Lrpten99TaxTypeIdold).HasColumnName("LRPTen99TaxTypeIDOld");

                entity.Property(e => e.LrpvendorVoucherId).HasColumnName("LRPVendor_VoucherID");

                entity.Property(e => e.Name).HasMaxLength(50);

                entity.Property(e => e.NameAlias).HasMaxLength(50);

                entity.Property(e => e.OldRecordId).HasColumnName("OldRecordID");

                entity.Property(e => e.RecordId)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("RecordID");

                entity.Property(e => e.SortOrder).HasDefaultValueSql("((100))");

                entity.Property(e => e.Ten99amnt)
                    .HasColumnType("money")
                    .HasColumnName("TEN99AMNT");

                entity.Property(e => e.Ten99amntold)
                    .HasColumnType("money")
                    .HasColumnName("TEN99AMNTOld");

                entity.Property(e => e.TrxDescription).HasMaxLength(50);

                entity.Property(e => e.TrxDescriptionOld).HasMaxLength(50);

                entity.Property(e => e.UpdatedBy).HasMaxLength(50);

                entity.Property(e => e.UpdatedOn).HasColumnType("datetime");

                entity.HasOne(d => d.Lrpten99BoxNo)
                    .WithMany(p => p.LrpvendorVoucherChangeLogs)
                    .HasForeignKey(d => d.Lrpten99BoxNoId)
                    .HasConstraintName("FK_LRPVendor_Voucher_ChangeLog_LRPTen99BoxNoID_LRPTen99BoxNo");

                entity.HasOne(d => d.Lrpten99TaxType)
                    .WithMany(p => p.LrpvendorVoucherChangeLogs)
                    .HasForeignKey(d => d.Lrpten99TaxTypeId)
                    .HasConstraintName("FK_LRPVendor_Voucher_ChangeLog_LRPTen99TaxTypeID_LRPTen99TaxType");

                entity.HasOne(d => d.LrpvendorVoucher)
                    .WithMany(p => p.LrpvendorVoucherChangeLogs)
                    .HasForeignKey(d => d.LrpvendorVoucherId)
                    .HasConstraintName("FK_LRPVendor_Voucher_ChangeLog_LRPVendor_VoucherID_LRPVendor_Voucher");
            });

            modelBuilder.Entity<LrpvendorVoucherChangeLogGrid>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("LRPVendor_Voucher_ChangeLogGrid");

                entity.Property(e => e.ChangedBy).HasMaxLength(50);

                entity.Property(e => e.ChangedOn).HasColumnType("datetime");

                entity.Property(e => e.CssLink)
                    .HasMaxLength(100)
                    .HasColumnName("CSS_Link");

                entity.Property(e => e.InvoiceDate).HasColumnType("datetime");

                entity.Property(e => e.InvoiceDateOld).HasColumnType("datetime");

                entity.Property(e => e.ObjectUid).HasColumnName("ObjectUID");

                entity.Property(e => e.RecordId).HasColumnName("RecordID.");

                entity.Property(e => e.TrxDescription).HasMaxLength(50);

                entity.Property(e => e.TrxDescriptionOld).HasMaxLength(50);

                entity.Property(e => e._1099Amount)
                    .HasColumnType("money")
                    .HasColumnName("1099 Amount");

                entity.Property(e => e._1099AmountOld)
                    .HasColumnType("money")
                    .HasColumnName("1099 Amount Old");

                entity.Property(e => e._1099BoxNo)
                    .HasMaxLength(2051)
                    .HasColumnName("1099 Box No");

                entity.Property(e => e._1099BoxNoOld)
                    .HasMaxLength(2051)
                    .HasColumnName("1099 Box No Old");

                entity.Property(e => e._1099TaxType)
                    .HasMaxLength(50)
                    .HasColumnName("1099 Tax Type");

                entity.Property(e => e._1099TaxTypeOld)
                    .HasMaxLength(50)
                    .HasColumnName("1099 Tax Type Old");
            });

            modelBuilder.Entity<LrpvendorVoucherCreditGrid>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("LRPVendor_VoucherCreditGrid");

                entity.Property(e => e.Company).HasMaxLength(50);

                entity.Property(e => e.CssLink)
                    .HasMaxLength(100)
                    .HasColumnName("CSS_Link");

                entity.Property(e => e.CssLinkLines)
                    .HasMaxLength(100)
                    .HasColumnName("CSS_Link_Lines");

                entity.Property(e => e.CurrentBalanceAmount).HasColumnType("money");

                entity.Property(e => e.DocumentAmount).HasColumnType("money");

                entity.Property(e => e.DocumentNo).HasMaxLength(50);

                entity.Property(e => e.GlpostingDate)
                    .HasColumnType("datetime")
                    .HasColumnName("GLPostingDate");

                entity.Property(e => e.Iddate)
                    .HasColumnType("datetime")
                    .HasColumnName("IDDate");

                entity.Property(e => e.InvoiceDate).HasColumnType("datetime");

                entity.Property(e => e.LrpdocumentType)
                    .HasMaxLength(50)
                    .HasColumnName("LRPDocumentType");

                entity.Property(e => e.LrpvendorId).HasColumnName("LRPVendorID");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.ObjectUid).HasColumnName("ObjectUID");

                entity.Property(e => e.Pono)
                    .HasMaxLength(50)
                    .HasColumnName("PONo");

                entity.Property(e => e.Status).HasMaxLength(50);

                entity.Property(e => e.TrxDescription).HasMaxLength(50);

                entity.Property(e => e.VoucherNo)
                    .IsRequired()
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<LrpvendorVoucherDistribution>(entity =>
            {
                entity.HasKey(e => e.ObjectUid);

                entity.ToTable("LRPVendor_Voucher_Distribution");

                entity.Property(e => e.ObjectUid)
                    .HasColumnName("ObjectUID")
                    .HasDefaultValueSql("(newid())");

                entity.Property(e => e.AccountDescription).HasMaxLength(500);

                entity.Property(e => e.AccountNo).HasMaxLength(50);

                entity.Property(e => e.CreatedBy).HasMaxLength(50);

                entity.Property(e => e.CreatedOn)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.CreditAmount).HasColumnType("money");

                entity.Property(e => e.CssLinkLines)
                    .HasMaxLength(100)
                    .HasColumnName("CSS_Link_Lines");

                entity.Property(e => e.DebitAmount).HasColumnType("money");

                entity.Property(e => e.Description).HasMaxLength(2000);

                entity.Property(e => e.Display)
                    .HasMaxLength(50)
                    .HasComputedColumnSql("([Name])", false);

                entity.Property(e => e.ImportedObjectUid)
                    .HasMaxLength(50)
                    .HasColumnName("ImportedObjectUID");

                entity.Property(e => e.InstallationUid).HasColumnName("InstallationUID");

                entity.Property(e => e.LrpvendorVoucherId).HasColumnName("LRPVendor_VoucherID");

                entity.Property(e => e.Name).HasMaxLength(50);

                entity.Property(e => e.NameAlias).HasMaxLength(50);

                entity.Property(e => e.OldRecordId).HasColumnName("OldRecordID");

                entity.Property(e => e.RecordId)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("RecordID");

                entity.Property(e => e.SortOrder).HasDefaultValueSql("((100))");

                entity.Property(e => e.UpdatedBy).HasMaxLength(50);

                entity.Property(e => e.UpdatedOn).HasColumnType("datetime");

                entity.HasOne(d => d.LrpvendorVoucher)
                    .WithMany(p => p.LrpvendorVoucherDistributions)
                    .HasForeignKey(d => d.LrpvendorVoucherId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_LRPVendor_Voucher_Distribution_LRPVendor_VoucherID_LRPVendor_Voucher");
            });

            modelBuilder.Entity<LrpvendorVoucherDistribution10992year>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("LRPVendor_voucher_distribution_1099_2years");

                entity.Property(e => e.AccountDescription).HasMaxLength(500);

                entity.Property(e => e.AccountNo).HasMaxLength(50);

                entity.Property(e => e.CreatedBy).HasMaxLength(50);

                entity.Property(e => e.CreatedOn).HasColumnType("datetime");

                entity.Property(e => e.CreditAmount).HasColumnType("money");

                entity.Property(e => e.CssLinkLines)
                    .HasMaxLength(100)
                    .HasColumnName("CSS_Link_Lines");

                entity.Property(e => e.DebitAmount).HasColumnType("money");

                entity.Property(e => e.Description).HasMaxLength(2000);

                entity.Property(e => e.Display).HasMaxLength(50);

                entity.Property(e => e.ImportedObjectUid)
                    .HasMaxLength(50)
                    .HasColumnName("ImportedObjectUID");

                entity.Property(e => e.InstallationUid).HasColumnName("InstallationUID");

                entity.Property(e => e.LrpvendorVoucherId).HasColumnName("LRPVendor_VoucherID");

                entity.Property(e => e.Name).HasMaxLength(50);

                entity.Property(e => e.NameAlias).HasMaxLength(50);

                entity.Property(e => e.ObjectUid).HasColumnName("ObjectUID");

                entity.Property(e => e.OldRecordId).HasColumnName("OldRecordID");

                entity.Property(e => e.RecordId).HasColumnName("RecordID");

                entity.Property(e => e.UpdatedBy).HasMaxLength(50);

                entity.Property(e => e.UpdatedOn).HasColumnType("datetime");
            });

            modelBuilder.Entity<LrpvendorVoucherDistributionGrid>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("LRPVendor_Voucher_DistributionGrid");

                entity.Property(e => e.AccountDescription).HasMaxLength(500);

                entity.Property(e => e.AccountNo).HasMaxLength(50);

                entity.Property(e => e.CreditAmount).HasColumnType("money");

                entity.Property(e => e.CssLinkLines)
                    .HasMaxLength(100)
                    .HasColumnName("CSS_Link_Lines");

                entity.Property(e => e.DebitAmount).HasColumnType("money");

                entity.Property(e => e.LrpvendorVoucherId).HasColumnName("LRPVendor_VoucherID");

                entity.Property(e => e.ObjectUid).HasColumnName("ObjectUID");
            });

            modelBuilder.Entity<LrpvendorVoucherGrid>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("LRPVendor_VoucherGrid");

                entity.Property(e => e.Company).HasMaxLength(50);

                entity.Property(e => e.CssLink)
                    .HasMaxLength(100)
                    .HasColumnName("CSS_Link");

                entity.Property(e => e.CssLinkLines)
                    .HasMaxLength(100)
                    .HasColumnName("CSS_Link_Lines");

                entity.Property(e => e.CurrentBalanceAmount).HasColumnType("money");

                entity.Property(e => e.DocumentAmount).HasColumnType("money");

                entity.Property(e => e.DocumentNo).HasMaxLength(50);

                entity.Property(e => e.DocumentType).HasMaxLength(50);

                entity.Property(e => e.Iddate)
                    .HasColumnType("datetime")
                    .HasColumnName("IDDate");

                entity.Property(e => e.InvoiceDate).HasColumnType("datetime");

                entity.Property(e => e.LrpvendorId).HasColumnName("LRPVendorID");

                entity.Property(e => e.ObjectUid).HasColumnName("ObjectUID");

                entity.Property(e => e.Pono)
                    .HasMaxLength(50)
                    .HasColumnName("PONo");

                entity.Property(e => e.Pstgdate)
                    .HasColumnType("datetime")
                    .HasColumnName("PSTGDate");

                entity.Property(e => e.Ten99amnt)
                    .HasColumnType("money")
                    .HasColumnName("TEN99AMNT");

                entity.Property(e => e.TrxDescription).HasMaxLength(50);

                entity.Property(e => e.VoucherNo)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.VoucherStatus).HasMaxLength(50);
            });

            modelBuilder.Entity<LrpvendorVoucherInvoiceGrid>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("LRPVendor_VoucherInvoiceGrid");

                entity.Property(e => e.Company).HasMaxLength(50);

                entity.Property(e => e.CssLink)
                    .HasMaxLength(100)
                    .HasColumnName("CSS_Link");

                entity.Property(e => e.CssLinkLines)
                    .HasMaxLength(100)
                    .HasColumnName("CSS_Link_Lines");

                entity.Property(e => e.CurrentBalanceAmount).HasColumnType("money");

                entity.Property(e => e.DocumentAmount).HasColumnType("money");

                entity.Property(e => e.GlpostingDate)
                    .HasColumnType("datetime")
                    .HasColumnName("GLPostingDate");

                entity.Property(e => e.Iddate)
                    .HasColumnType("datetime")
                    .HasColumnName("IDDate");

                entity.Property(e => e.InvoiceDate).HasColumnType("datetime");

                entity.Property(e => e.InvoiceNo)
                    .HasMaxLength(50)
                    .HasColumnName("Invoice No");

                entity.Property(e => e.LrpdocumentType)
                    .HasMaxLength(50)
                    .HasColumnName("LRPDocumentType");

                entity.Property(e => e.LrpvendorId).HasColumnName("LRPVendorID");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.ObjectUid).HasColumnName("ObjectUID");

                entity.Property(e => e.Pono)
                    .HasMaxLength(50)
                    .HasColumnName("PONo");

                entity.Property(e => e.Status).HasMaxLength(50);

                entity.Property(e => e.TrxDescription).HasMaxLength(50);

                entity.Property(e => e.VoucherNo)
                    .IsRequired()
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<LrpvendorVoucherOtherGrid>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("LRPVendor_VoucherOtherGrid");

                entity.Property(e => e.Company).HasMaxLength(50);

                entity.Property(e => e.CssLink)
                    .HasMaxLength(100)
                    .HasColumnName("CSS_Link");

                entity.Property(e => e.CssLinkLines)
                    .HasMaxLength(100)
                    .HasColumnName("CSS_Link_Lines");

                entity.Property(e => e.CurrentBalanceAmount).HasColumnType("money");

                entity.Property(e => e.DocumentAmount).HasColumnType("money");

                entity.Property(e => e.DocumentNo).HasMaxLength(50);

                entity.Property(e => e.GlpostingDate)
                    .HasColumnType("datetime")
                    .HasColumnName("GLPostingDate");

                entity.Property(e => e.Iddate)
                    .HasColumnType("datetime")
                    .HasColumnName("IDDate");

                entity.Property(e => e.InvoiceDate).HasColumnType("datetime");

                entity.Property(e => e.LrpdocumentType)
                    .HasMaxLength(50)
                    .HasColumnName("LRPDocumentType");

                entity.Property(e => e.LrpvendorId).HasColumnName("LRPVendorID");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.ObjectUid).HasColumnName("ObjectUID");

                entity.Property(e => e.Pono)
                    .HasMaxLength(50)
                    .HasColumnName("PONo");

                entity.Property(e => e.Status).HasMaxLength(50);

                entity.Property(e => e.TrxDescription).HasMaxLength(50);

                entity.Property(e => e.VoucherNo)
                    .IsRequired()
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<LrpvendorVoucherPaymentGrid>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("LRPVendor_VoucherPaymentGrid");

                entity.Property(e => e.CheckAmount)
                    .HasColumnType("money")
                    .HasColumnName("Check Amount");

                entity.Property(e => e.CheckDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Check Date");

                entity.Property(e => e.CheckNo)
                    .HasMaxLength(50)
                    .HasColumnName("Check No");

                entity.Property(e => e.Company).HasMaxLength(50);

                entity.Property(e => e.CssLink)
                    .HasMaxLength(100)
                    .HasColumnName("CSS_Link");

                entity.Property(e => e.CssLinkLines)
                    .HasMaxLength(100)
                    .HasColumnName("CSS_Link_Lines");

                entity.Property(e => e.CurrentBalanceAmount).HasColumnType("money");

                entity.Property(e => e.GlpostingDate)
                    .HasColumnType("datetime")
                    .HasColumnName("GLPostingDate");

                entity.Property(e => e.Iddate)
                    .HasColumnType("datetime")
                    .HasColumnName("IDDate");

                entity.Property(e => e.LrpdocumentType)
                    .HasMaxLength(50)
                    .HasColumnName("LRPDocumentType");

                entity.Property(e => e.LrpvendorId).HasColumnName("LRPVendorID");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.ObjectUid).HasColumnName("ObjectUID");

                entity.Property(e => e.Pono)
                    .HasMaxLength(50)
                    .HasColumnName("PONo");

                entity.Property(e => e.Status).HasMaxLength(50);

                entity.Property(e => e.TrxDescription).HasMaxLength(50);

                entity.Property(e => e.VoucherNo)
                    .IsRequired()
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<LrpvendorVoucherTempDuplicate>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("LRPVendor_Voucher_temp_duplicate");

                entity.Property(e => e.Objectuid).HasColumnName("objectuid");
            });

            modelBuilder.Entity<LrpvoucherStatus>(entity =>
            {
                entity.HasKey(e => e.ObjectUid);

                entity.ToTable("LRPVoucherStatus");

                entity.Property(e => e.ObjectUid)
                    .HasColumnName("ObjectUID")
                    .HasDefaultValueSql("(newid())");

                entity.Property(e => e.CreatedBy).HasMaxLength(50);

                entity.Property(e => e.CreatedOn)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Description).HasMaxLength(2000);

                entity.Property(e => e.Display)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasComputedColumnSql("([Name])", false);

                entity.Property(e => e.ImportedObjectUid)
                    .HasMaxLength(50)
                    .HasColumnName("ImportedObjectUID");

                entity.Property(e => e.InstallationUid).HasColumnName("InstallationUID");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.NameAlias)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.OldRecordId).HasColumnName("OldRecordID");

                entity.Property(e => e.RecordId)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("RecordID");

                entity.Property(e => e.SortOrder).HasDefaultValueSql("((100))");

                entity.Property(e => e.UpdatedBy).HasMaxLength(50);

                entity.Property(e => e.UpdatedOn).HasColumnType("datetime");
            });

            modelBuilder.Entity<LrpvoucherStatusGrid>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("LRPVoucherStatusGrid");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.ObjectUid).HasColumnName("ObjectUID");
            });

            modelBuilder.Entity<Main>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Main");

                entity.Property(e => e.AccountCategory)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("Account_Category");

                entity.Property(e => e.AccountGroup)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("Account_group");

                entity.Property(e => e.Company)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsFixedLength(true);

                entity.Property(e => e.CreatedBy).HasMaxLength(50);

                entity.Property(e => e.CreatedOn).HasColumnType("datetime");

                entity.Property(e => e.Description).HasMaxLength(2000);

                entity.Property(e => e.Display).HasMaxLength(50);

                entity.Property(e => e.DisplayValue)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("Display_value");

                entity.Property(e => e.EndDate)
                    .HasColumnType("datetime")
                    .HasColumnName("end_date");

                entity.Property(e => e.GpStatus)
                    .HasMaxLength(50)
                    .HasColumnName("gp_status");

                entity.Property(e => e.ImportedObjectUid)
                    .HasMaxLength(50)
                    .HasColumnName("ImportedObjectUID");

                entity.Property(e => e.InstallationUid).HasColumnName("InstallationUID");

                entity.Property(e => e.Lm2disbursementCodeId).HasColumnName("LM2DisbursementCodeID");

                entity.Property(e => e.Lm2receiptCodeId).HasColumnName("LM2ReceiptCodeID");

                entity.Property(e => e.MainNo)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Name).HasMaxLength(50);

                entity.Property(e => e.NameAlias).HasMaxLength(50);

                entity.Property(e => e.OaStatus)
                    .HasMaxLength(50)
                    .HasColumnName("oa_status");

                entity.Property(e => e.ObjectUid).HasColumnName("ObjectUID");

                entity.Property(e => e.OldRecordId).HasColumnName("OldRecordID");

                entity.Property(e => e.RecordId)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("RecordID");

                entity.Property(e => e.StartDate)
                    .HasColumnType("datetime")
                    .HasColumnName("start_date");

                entity.Property(e => e.UpdatedBy).HasMaxLength(50);

                entity.Property(e => e.UpdatedOn).HasColumnType("datetime");

                entity.Property(e => e._1099Flag)
                    .HasMaxLength(10)
                    .HasColumnName("1099_flag")
                    .IsFixedLength(true);
            });

            modelBuilder.Entity<MainLrp>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("main_lrp");

                entity.Property(e => e.AccountCategory)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("Account_Category");

                entity.Property(e => e.AccountGroup)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("Account_group");

                entity.Property(e => e.Company)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsFixedLength(true);

                entity.Property(e => e.CreatedBy).HasMaxLength(50);

                entity.Property(e => e.CreatedOn).HasColumnType("datetime");

                entity.Property(e => e.Description).HasMaxLength(2000);

                entity.Property(e => e.Display).HasMaxLength(50);

                entity.Property(e => e.DisplayValue)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("Display_value");

                entity.Property(e => e.EndDate)
                    .HasColumnType("datetime")
                    .HasColumnName("end_date");

                entity.Property(e => e.GpStatus)
                    .HasMaxLength(50)
                    .HasColumnName("gp_status");

                entity.Property(e => e.ImportedObjectUid)
                    .HasMaxLength(50)
                    .HasColumnName("ImportedObjectUID");

                entity.Property(e => e.InstallationUid).HasColumnName("InstallationUID");

                entity.Property(e => e.Lm2disbursementCodeId).HasColumnName("LM2DisbursementCodeID");

                entity.Property(e => e.Lm2receiptCodeId).HasColumnName("LM2ReceiptCodeID");

                entity.Property(e => e.MainNo)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Name).HasMaxLength(50);

                entity.Property(e => e.NameAlias).HasMaxLength(50);

                entity.Property(e => e.OaStatus)
                    .HasMaxLength(50)
                    .HasColumnName("oa_status");

                entity.Property(e => e.ObjectUid).HasColumnName("ObjectUID");

                entity.Property(e => e.OldRecordId).HasColumnName("OldRecordID");

                entity.Property(e => e.RecordId)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("RecordID");

                entity.Property(e => e.StartDate)
                    .HasColumnType("datetime")
                    .HasColumnName("start_date");

                entity.Property(e => e.UpdatedBy).HasMaxLength(50);

                entity.Property(e => e.UpdatedOn).HasColumnType("datetime");

                entity.Property(e => e._1099Flag)
                    .HasMaxLength(10)
                    .HasColumnName("1099_flag")
                    .IsFixedLength(true);
            });

            modelBuilder.Entity<MeetingBdgbudgetInfoDetailGrid>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("MeetingBDGBudgetInfo_DetailGrid");

                entity.Property(e => e.BdgaccountSubGroup)
                    .HasMaxLength(50)
                    .HasColumnName("BDGAccountSubGroup");

                entity.Property(e => e.BdgaccountSubGroupSubGroup)
                    .HasMaxLength(50)
                    .HasColumnName("BDGAccountSubGroupSubGroup");

                entity.Property(e => e.BdgbudgetInfoId).HasColumnName("BDGBudgetInfoID");

                entity.Property(e => e.BudgetAmount)
                    .HasColumnType("money")
                    .HasColumnName("Budget Amount($)");

                entity.Property(e => e.CurrentYearBudgetAmount)
                    .HasColumnType("money")
                    .HasColumnName("Current Year Budget Amount($)");

                entity.Property(e => e.MeetingLocation).HasMaxLength(50);

                entity.Property(e => e.MeetingStartDate).HasMaxLength(50);

                entity.Property(e => e.NextYearBudgetAmount)
                    .HasColumnType("money")
                    .HasColumnName("Next Year Budget Amount($)");

                entity.Property(e => e.ObjectUid).HasColumnName("ObjectUID");

                entity.Property(e => e.Subject).HasMaxLength(250);

                entity.Property(e => e.YtdActuals)
                    .HasColumnType("money")
                    .HasColumnName("YTD Actuals($)");
            });

            modelBuilder.Entity<MemberExpenseBdgbudgetInfoDetailGrid>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("MemberExpenseBDGBudgetInfo_DetailGrid");

                entity.Property(e => e.BdgbudgetInfoId).HasColumnName("BDGBudgetInfoID");

                entity.Property(e => e.BudgetAmount)
                    .HasColumnType("money")
                    .HasColumnName("Budget Amount($)");

                entity.Property(e => e.CurrentYearBudgetAmount)
                    .HasColumnType("money")
                    .HasColumnName("Current Year Budget Amount($)");

                entity.Property(e => e.NextYearBudgetAmount)
                    .HasColumnType("money")
                    .HasColumnName("Next Year Budget Amount($)");

                entity.Property(e => e.ObjectUid).HasColumnName("ObjectUID");

                entity.Property(e => e.Subject).HasMaxLength(250);
            });

            modelBuilder.Entity<MembershipBdgbudgetInfoDetailGrid>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("MembershipBDGBudgetInfo_DetailGrid");

                entity.Property(e => e.BdgbudgetInfoId).HasColumnName("BDGBudgetInfoID");

                entity.Property(e => e.BudgetAmount)
                    .HasColumnType("money")
                    .HasColumnName("Budget Amount($)");

                entity.Property(e => e.CurrentYearBudgetAmount)
                    .HasColumnType("money")
                    .HasColumnName("Current Year Budget Amount($)");

                entity.Property(e => e.NextYearBudgetAmount)
                    .HasColumnType("money")
                    .HasColumnName("Next Year Budget Amount($)");

                entity.Property(e => e.ObjectUid).HasColumnName("ObjectUID");

                entity.Property(e => e.Subject).HasMaxLength(250);
            });

            modelBuilder.Entity<Menu>(entity =>
            {
                entity.HasKey(e => e.ObjectUid);

                entity.ToTable("Menu");

                entity.Property(e => e.ObjectUid)
                    .HasColumnName("ObjectUID")
                    .HasDefaultValueSql("(newid())");

                entity.Property(e => e.CreatedBy).HasMaxLength(50);

                entity.Property(e => e.CreatedOn)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Description).HasMaxLength(2000);

                entity.Property(e => e.Display)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasComputedColumnSql("([Name])", false);

                entity.Property(e => e.ImportedObjectUid)
                    .HasMaxLength(50)
                    .HasColumnName("ImportedObjectUID");

                entity.Property(e => e.InstallationUid).HasColumnName("InstallationUID");

                entity.Property(e => e.MenuIconLink).HasMaxLength(250);

                entity.Property(e => e.MenuLink).HasMaxLength(250);

                entity.Property(e => e.ModuleId).HasColumnName("ModuleID");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.NameAlias)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.OldRecordId).HasColumnName("OldRecordID");

                entity.Property(e => e.ParentMenuId).HasColumnName("Parent_MenuID");

                entity.Property(e => e.PortalId).HasColumnName("PortalID");

                entity.Property(e => e.RecordId)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("RecordID");

                entity.Property(e => e.SortOrder).HasDefaultValueSql("((100))");

                entity.Property(e => e.UpdatedBy).HasMaxLength(50);

                entity.Property(e => e.UpdatedOn).HasColumnType("datetime");

                entity.HasOne(d => d.Module)
                    .WithMany(p => p.Menus)
                    .HasForeignKey(d => d.ModuleId)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("FK_Menu_Module");

                entity.HasOne(d => d.ParentMenu)
                    .WithMany(p => p.InverseParentMenu)
                    .HasForeignKey(d => d.ParentMenuId)
                    .HasConstraintName("FK_Menu_Parent_MenuID_Menu");

                entity.HasOne(d => d.Portal)
                    .WithMany(p => p.Menus)
                    .HasForeignKey(d => d.PortalId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Menu_PortalID_Portal");
            });

            modelBuilder.Entity<MenuGrid>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("MenuGrid");

                entity.Property(e => e.MenuIconLink).HasMaxLength(250);

                entity.Property(e => e.MenuLink).HasMaxLength(250);

                entity.Property(e => e.Module).HasMaxLength(100);

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.ObjectUid).HasColumnName("ObjectUID");

                entity.Property(e => e.Parent).HasMaxLength(50);

                entity.Property(e => e.Portal)
                    .IsRequired()
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<MenuParameterType>(entity =>
            {
                entity.HasKey(e => e.ObjectUid);

                entity.ToTable("Menu_ParameterType");

                entity.Property(e => e.ObjectUid)
                    .HasColumnName("ObjectUID")
                    .HasDefaultValueSql("(newid())");

                entity.Property(e => e.CreatedBy).HasMaxLength(50);

                entity.Property(e => e.CreatedOn)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Description).HasMaxLength(2000);

                entity.Property(e => e.Display)
                    .HasMaxLength(50)
                    .HasComputedColumnSql("([Name])", false);

                entity.Property(e => e.ImportedObjectUid)
                    .HasMaxLength(50)
                    .HasColumnName("ImportedObjectUID");

                entity.Property(e => e.InstallationUid).HasColumnName("InstallationUID");

                entity.Property(e => e.MenuId).HasColumnName("MenuID");

                entity.Property(e => e.Name).HasMaxLength(50);

                entity.Property(e => e.NameAlias).HasMaxLength(50);

                entity.Property(e => e.OldRecordId).HasColumnName("OldRecordID");

                entity.Property(e => e.ParameterTypeId).HasColumnName("ParameterTypeID");

                entity.Property(e => e.ParameterValue).HasMaxLength(2000);

                entity.Property(e => e.RecordId)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("RecordID");

                entity.Property(e => e.SortOrder).HasDefaultValueSql("((100))");

                entity.Property(e => e.UpdatedBy).HasMaxLength(50);

                entity.Property(e => e.UpdatedOn).HasColumnType("datetime");

                entity.HasOne(d => d.Menu)
                    .WithMany(p => p.MenuParameterTypes)
                    .HasForeignKey(d => d.MenuId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Menu_ParameterType_MenuID_Menu");

                entity.HasOne(d => d.ParameterType)
                    .WithMany(p => p.MenuParameterTypes)
                    .HasForeignKey(d => d.ParameterTypeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Menu_ParameterType_ParameterTypeID_ParameterType");
            });

            modelBuilder.Entity<MenuParameterTypeGrid>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Menu_ParameterTypeGrid");

                entity.Property(e => e.MenuId).HasColumnName("MenuID");

                entity.Property(e => e.ObjectUid).HasColumnName("ObjectUID");

                entity.Property(e => e.ParameterType)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.ParameterValue).HasMaxLength(2000);
            });

            modelBuilder.Entity<MenuPortalGrid>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("MenuPortalGrid");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.ObjectUid).HasColumnName("ObjectUID");

                entity.Property(e => e.Portal)
                    .IsRequired()
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<MiscellaneousBdgbudgetInfoDetailGrid>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("MiscellaneousBDGBudgetInfo_DetailGrid");

                entity.Property(e => e.BdgbudgetInfoId).HasColumnName("BDGBudgetInfoID");

                entity.Property(e => e.BudgetAmount)
                    .HasColumnType("money")
                    .HasColumnName("Budget Amount($)");

                entity.Property(e => e.CurrentYearBudgetAmount)
                    .HasColumnType("money")
                    .HasColumnName("Current Year Budget Amount($)");

                entity.Property(e => e.NextYearBudgetAmount)
                    .HasColumnType("money")
                    .HasColumnName("Next Year Budget Amount($)");

                entity.Property(e => e.ObjectUid).HasColumnName("ObjectUID");

                entity.Property(e => e.Subject).HasMaxLength(250);
            });

            modelBuilder.Entity<MissingMaskingDetailGrid>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("MissingMaskingDetailGrid");

                entity.Property(e => e.AccountNo)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Acct)
                    .HasMaxLength(75)
                    .HasColumnName("ACCT");

                entity.Property(e => e.Amount).HasColumnName("AMOUNT");

                entity.Property(e => e.BdgreportGroupId).HasColumnName("BDGReportGroupID");

                entity.Property(e => e.BdgreportGroupMissingMaskingId).HasColumnName("BDGReportGroup_MissingMaskingID");

                entity.Property(e => e.ObjectUid).HasColumnName("ObjectUID");

                entity.Property(e => e.Trandate)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("TRANDATE");

                entity.Property(e => e.Trandesc)
                    .HasMaxLength(75)
                    .HasColumnName("TRANDESC");

                entity.Property(e => e.Trantype)
                    .HasMaxLength(75)
                    .HasColumnName("TRANTYPE");
            });

            modelBuilder.Entity<MissingMaskingGrid>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("MissingMaskingGrid");

                entity.Property(e => e.Acct)
                    .HasMaxLength(50)
                    .HasColumnName("ACCT");

                entity.Property(e => e.ObjectUid).HasColumnName("ObjectUID");
            });

            modelBuilder.Entity<Module>(entity =>
            {
                entity.HasKey(e => e.ObjectUid);

                entity.ToTable("Module");

                entity.Property(e => e.ObjectUid)
                    .HasColumnName("ObjectUID")
                    .HasDefaultValueSql("(newid())");

                entity.Property(e => e.CreatedBy).HasMaxLength(50);

                entity.Property(e => e.CreatedOn)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Description).HasMaxLength(2000);

                entity.Property(e => e.Display)
                    .IsRequired()
                    .HasMaxLength(100)
                    .HasComputedColumnSql("([Name])", false);

                entity.Property(e => e.HelpCardId).HasColumnName("HelpCardID");

                entity.Property(e => e.ImportedObjectUid)
                    .HasMaxLength(50)
                    .HasColumnName("ImportedObjectUID");

                entity.Property(e => e.InstallationUid).HasColumnName("InstallationUID");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.NameAlias)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.OldRecordId).HasColumnName("OldRecordID");

                entity.Property(e => e.RecordId)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("RecordID");

                entity.Property(e => e.SortOrder).HasDefaultValueSql("((100))");

                entity.Property(e => e.UpdatedBy).HasMaxLength(50);

                entity.Property(e => e.UpdatedOn).HasColumnType("datetime");

                entity.HasOne(d => d.HelpCard)
                    .WithMany(p => p.Modules)
                    .HasForeignKey(d => d.HelpCardId)
                    .OnDelete(DeleteBehavior.SetNull)
                    .HasConstraintName("FK_Module_HelpCard");
            });

            modelBuilder.Entity<ModuleGrid>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ModuleGrid");

                entity.Property(e => e.HelpCard).HasMaxLength(100);

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.ObjectUid).HasColumnName("ObjectUID");
            });

            modelBuilder.Entity<Month>(entity =>
            {
                entity.HasKey(e => e.ObjectUid);

                entity.ToTable("Month");

                entity.Property(e => e.ObjectUid)
                    .HasColumnName("ObjectUID")
                    .HasDefaultValueSql("(newid())");

                entity.Property(e => e.CreatedBy).HasMaxLength(50);

                entity.Property(e => e.CreatedOn)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Description).HasMaxLength(2000);

                entity.Property(e => e.Display)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasComputedColumnSql("([Name])", false);

                entity.Property(e => e.ImportedObjectUid)
                    .HasMaxLength(50)
                    .HasColumnName("ImportedObjectUID");

                entity.Property(e => e.InstallationUid).HasColumnName("InstallationUID");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.NameAlias)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.OldRecordId).HasColumnName("OldRecordID");

                entity.Property(e => e.RecordId)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("RecordID");

                entity.Property(e => e.SortOrder).HasDefaultValueSql("((100))");

                entity.Property(e => e.UpdatedBy).HasMaxLength(50);

                entity.Property(e => e.UpdatedOn).HasColumnType("datetime");
            });

            modelBuilder.Entity<MonthGrid>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("MonthGrid");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.ObjectUid).HasColumnName("ObjectUID");
            });

            modelBuilder.Entity<NotificationTemplate>(entity =>
            {
                entity.HasKey(e => e.ObjectUid);

                entity.ToTable("NotificationTemplate");

                entity.Property(e => e.ObjectUid)
                    .HasColumnName("ObjectUID")
                    .HasDefaultValueSql("(newid())");

                entity.Property(e => e.Bcc)
                    .HasMaxLength(2000)
                    .HasColumnName("BCC");

                entity.Property(e => e.Cc)
                    .HasMaxLength(2000)
                    .HasColumnName("CC");

                entity.Property(e => e.CreatedBy).HasMaxLength(50);

                entity.Property(e => e.CreatedOn)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Description).HasMaxLength(2000);

                entity.Property(e => e.Display)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasComputedColumnSql("([Name])", false);

                entity.Property(e => e.ImportedObjectUid)
                    .HasMaxLength(50)
                    .HasColumnName("ImportedObjectUID");

                entity.Property(e => e.InstallationUid).HasColumnName("InstallationUID");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.NameAlias)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.NotificaitonTemplateViewId).HasColumnName("NotificaitonTemplateViewID");

                entity.Property(e => e.OldRecordId).HasColumnName("OldRecordID");

                entity.Property(e => e.RecordId)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("RecordID");

                entity.Property(e => e.SortOrder).HasDefaultValueSql("((100))");

                entity.Property(e => e.Subject).HasMaxLength(2000);

                entity.Property(e => e.UpdatedBy).HasMaxLength(50);

                entity.Property(e => e.UpdatedOn).HasColumnType("datetime");
            });

            modelBuilder.Entity<NotificationTemplateGrid>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("NotificationTemplateGrid");

                entity.Property(e => e.Bcc)
                    .HasMaxLength(2000)
                    .HasColumnName("BCC");

                entity.Property(e => e.Cc)
                    .HasMaxLength(2000)
                    .HasColumnName("CC");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.ObjectUid).HasColumnName("ObjectUID");

                entity.Property(e => e.Subject).HasMaxLength(2000);
            });

            modelBuilder.Entity<NotificationTemplateView>(entity =>
            {
                entity.HasKey(e => e.ObjectUid);

                entity.ToTable("NotificationTemplateView");

                entity.Property(e => e.ObjectUid)
                    .HasColumnName("ObjectUID")
                    .HasDefaultValueSql("(newid())");

                entity.Property(e => e.CreatedBy).HasMaxLength(50);

                entity.Property(e => e.CreatedOn)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Description).HasMaxLength(2000);

                entity.Property(e => e.Display)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasComputedColumnSql("([Name])", false);

                entity.Property(e => e.ImportedObjectUid)
                    .HasMaxLength(50)
                    .HasColumnName("ImportedObjectUID");

                entity.Property(e => e.InstallationUid).HasColumnName("InstallationUID");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.NameAlias)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.OldRecordId).HasColumnName("OldRecordID");

                entity.Property(e => e.RecordId)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("RecordID");

                entity.Property(e => e.SortOrder).HasDefaultValueSql("((100))");

                entity.Property(e => e.UpdatedBy).HasMaxLength(50);

                entity.Property(e => e.UpdatedOn).HasColumnType("datetime");

                entity.Property(e => e.ViewName).HasMaxLength(50);
            });

            modelBuilder.Entity<NotificationTemplateViewGrid>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("NotificationTemplateViewGrid");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.ObjectUid).HasColumnName("ObjectUID");

                entity.Property(e => e.ViewName).HasMaxLength(50);
            });

            modelBuilder.Entity<NotificationType>(entity =>
            {
                entity.HasKey(e => e.ObjectUid);

                entity.ToTable("NotificationType");

                entity.Property(e => e.ObjectUid)
                    .HasColumnName("ObjectUID")
                    .HasDefaultValueSql("(newid())");

                entity.Property(e => e.CreatedBy).HasMaxLength(50);

                entity.Property(e => e.CreatedOn)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Description).HasMaxLength(2000);

                entity.Property(e => e.Display)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasComputedColumnSql("([Name])", false);

                entity.Property(e => e.ImportedObjectUid)
                    .HasMaxLength(50)
                    .HasColumnName("ImportedObjectUID");

                entity.Property(e => e.InstallationUid).HasColumnName("InstallationUID");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.NameAlias)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.OldRecordId).HasColumnName("OldRecordID");

                entity.Property(e => e.RecordId)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("RecordID");

                entity.Property(e => e.SortOrder).HasDefaultValueSql("((100))");

                entity.Property(e => e.UpdatedBy).HasMaxLength(50);

                entity.Property(e => e.UpdatedOn).HasColumnType("datetime");
            });

            modelBuilder.Entity<NotificationTypeGrid>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("NotificationTypeGrid");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.ObjectUid).HasColumnName("ObjectUID");
            });

            modelBuilder.Entity<OtherBdgbudgetInfoDetailGrid>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("OtherBDGBudgetInfo_DetailGrid");

                entity.Property(e => e.BdgaccountGroupSubGroup)
                    .HasMaxLength(50)
                    .HasColumnName("BDGAccountGroupSubGroup");

                entity.Property(e => e.BdgaccountGroupSubGroupSubGroup)
                    .HasMaxLength(50)
                    .HasColumnName("BDGAccountGroupSubGroupSubGroup");

                entity.Property(e => e.BdgbudgetInfoId).HasColumnName("BDGBudgetInfoID");

                entity.Property(e => e.BudgetAmount)
                    .HasColumnType("money")
                    .HasColumnName("Budget Amount($)");

                entity.Property(e => e.CurrentYearBudgetAmount)
                    .HasColumnType("money")
                    .HasColumnName("Current Year Budget Amount($)");

                entity.Property(e => e.NextYearBudgetAmount)
                    .HasColumnType("money")
                    .HasColumnName("Next Year Budget Amount($)");

                entity.Property(e => e.ObjectUid).HasColumnName("ObjectUID");

                entity.Property(e => e.Subject).HasMaxLength(250);

                entity.Property(e => e.YtdActuals)
                    .HasColumnType("money")
                    .HasColumnName("YTD Actuals($)");
            });

            modelBuilder.Entity<Page>(entity =>
            {
                entity.HasKey(e => e.ObjectUid);

                entity.ToTable("Page");

                entity.Property(e => e.ObjectUid)
                    .HasColumnName("ObjectUID")
                    .HasDefaultValueSql("(newid())");

                entity.Property(e => e.ColumnToDisplay)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.CreatedBy).HasMaxLength(50);

                entity.Property(e => e.CreatedOn)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Description).HasMaxLength(2000);

                entity.Property(e => e.Display)
                    .IsRequired()
                    .HasMaxLength(100)
                    .HasComputedColumnSql("([PageHeading])", false);

                entity.Property(e => e.HelpCardId).HasColumnName("HelpCardID");

                entity.Property(e => e.ImportedObjectUid)
                    .HasMaxLength(50)
                    .HasColumnName("ImportedObjectUID");

                entity.Property(e => e.InstallationUid).HasColumnName("InstallationUID");

                entity.Property(e => e.ModuleId).HasColumnName("ModuleID");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.NameAlias)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.OldRecordId).HasColumnName("OldRecordID");

                entity.Property(e => e.PageHeading)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.PageLink).HasMaxLength(200);

                entity.Property(e => e.RecordId)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("RecordID");

                entity.Property(e => e.SortOrder).HasDefaultValueSql("((100))");

                entity.Property(e => e.TableOrViewDisplayName)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.TableOrViewName)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.UpdateStoredProcedure).HasMaxLength(100);

                entity.Property(e => e.UpdatedBy).HasMaxLength(50);

                entity.Property(e => e.UpdatedOn).HasColumnType("datetime");

                entity.HasOne(d => d.HelpCard)
                    .WithMany(p => p.Pages)
                    .HasForeignKey(d => d.HelpCardId)
                    .HasConstraintName("FK_Page_HelpCard");

                entity.HasOne(d => d.Module)
                    .WithMany(p => p.Pages)
                    .HasForeignKey(d => d.ModuleId)
                    .HasConstraintName("FK_Page_Module");
            });

            modelBuilder.Entity<PageGrid>(entity =>
            {
                entity.HasKey(e => e.ObjectUid);

                entity.ToTable("Page_Grid");

                entity.Property(e => e.ObjectUid)
                    .HasColumnName("ObjectUID")
                    .HasDefaultValueSql("(newid())");

                entity.Property(e => e.AddPageLink).HasMaxLength(250);

                entity.Property(e => e.AddPagePopup)
                    .IsRequired()
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.ComparisonOperatorI).HasMaxLength(10);

                entity.Property(e => e.ComparisonOperatorIi)
                    .HasMaxLength(10)
                    .HasColumnName("ComparisonOperatorII");

                entity.Property(e => e.ComparisonOperatorIii)
                    .HasMaxLength(10)
                    .HasColumnName("ComparisonOperatorIII");

                entity.Property(e => e.CopyPageLink).HasMaxLength(250);

                entity.Property(e => e.CreatedBy).HasMaxLength(50);

                entity.Property(e => e.CreatedOn)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Description).HasMaxLength(2000);

                entity.Property(e => e.Display)
                    .IsRequired()
                    .HasMaxLength(100)
                    .HasComputedColumnSql("([ViewName])", false);

                entity.Property(e => e.EditPageLink).HasMaxLength(250);

                entity.Property(e => e.FilterColumnI).HasMaxLength(100);

                entity.Property(e => e.FilterColumnIi)
                    .HasMaxLength(100)
                    .HasColumnName("FilterColumnII");

                entity.Property(e => e.FilterColumnIii)
                    .HasMaxLength(100)
                    .HasColumnName("FilterColumnIII");

                entity.Property(e => e.FilterValueIi).HasColumnName("FilterValueII");

                entity.Property(e => e.FilterValueIii).HasColumnName("FilterValueIII");

                entity.Property(e => e.FilterValueLocationI).HasMaxLength(20);

                entity.Property(e => e.FilterValueLocationIi)
                    .HasMaxLength(20)
                    .HasColumnName("FilterValueLocationII");

                entity.Property(e => e.FilterValueLocationIii)
                    .HasMaxLength(20)
                    .HasColumnName("FilterValueLocationIII");

                entity.Property(e => e.ImportedObjectUid)
                    .HasMaxLength(50)
                    .HasColumnName("ImportedObjectUID");

                entity.Property(e => e.InitialDisplayField)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.InstallationUid).HasColumnName("InstallationUID");

                entity.Property(e => e.LogicalOperatorI).HasMaxLength(10);

                entity.Property(e => e.LogicalOperatorIi)
                    .HasMaxLength(10)
                    .HasColumnName("LogicalOperatorII");

                entity.Property(e => e.Name).HasMaxLength(50);

                entity.Property(e => e.NameAlias).HasMaxLength(50);

                entity.Property(e => e.OldRecordId).HasColumnName("OldRecordID");

                entity.Property(e => e.PageId).HasColumnName("PageID");

                entity.Property(e => e.ParentPrimaryKeyName).HasMaxLength(100);

                entity.Property(e => e.PrimaryKeyName)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.RecordId)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("RecordID");

                entity.Property(e => e.SortOrder).HasDefaultValueSql("((100))");

                entity.Property(e => e.Spcommand)
                    .HasMaxLength(2000)
                    .HasColumnName("SPCommand");

                entity.Property(e => e.TableName).HasMaxLength(100);

                entity.Property(e => e.UpdatedBy).HasMaxLength(50);

                entity.Property(e => e.UpdatedOn).HasColumnType("datetime");

                entity.Property(e => e.ViewName)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.ViewPageLink).HasMaxLength(250);

                entity.HasOne(d => d.Page)
                    .WithMany(p => p.PageGrids)
                    .HasForeignKey(d => d.PageId)
                    .HasConstraintName("FK_Page_Grid_Page");
            });

            modelBuilder.Entity<PageGrid1>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("PageGrid");

                entity.Property(e => e.ColumnToDisplay)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.HelpCard).HasMaxLength(100);

                entity.Property(e => e.Module)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.ObjectUid).HasColumnName("ObjectUID");

                entity.Property(e => e.PageHeading)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.PageLink).HasMaxLength(200);

                entity.Property(e => e.TableOrViewDisplayName)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.TableOrViewName)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.UpdateStoredProcedure).HasMaxLength(100);
            });

            modelBuilder.Entity<PageGridEditField>(entity =>
            {
                entity.HasKey(e => e.ObjectUid);

                entity.ToTable("Page_Grid_EditField");

                entity.Property(e => e.ObjectUid)
                    .HasColumnName("ObjectUID")
                    .HasDefaultValueSql("(newid())");

                entity.Property(e => e.CreatedBy).HasMaxLength(50);

                entity.Property(e => e.CreatedOn)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Description).HasMaxLength(2000);

                entity.Property(e => e.Display)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasComputedColumnSql("([Name])", false);

                entity.Property(e => e.DropDownDisplayColumn).HasMaxLength(50);

                entity.Property(e => e.DropDownParentColumnName).HasMaxLength(50);

                entity.Property(e => e.DropDownTable).HasMaxLength(50);

                entity.Property(e => e.ExtendedAttributes).HasMaxLength(2000);

                entity.Property(e => e.FieldType)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.ImportedObjectUid)
                    .HasMaxLength(50)
                    .HasColumnName("ImportedObjectUID");

                entity.Property(e => e.InstallationUid).HasColumnName("InstallationUID");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.NameAlias)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.OldRecordId).HasColumnName("OldRecordID");

                entity.Property(e => e.PageGridId).HasColumnName("Page_GridID");

                entity.Property(e => e.RecordId)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("RecordID");

                entity.Property(e => e.SortOrder).HasDefaultValueSql("((100))");

                entity.Property(e => e.TableField)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.UpdatedBy).HasMaxLength(50);

                entity.Property(e => e.UpdatedOn).HasColumnType("datetime");

                entity.Property(e => e.ViewField)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.HasOne(d => d.PageGrid)
                    .WithMany(p => p.PageGridEditFields)
                    .HasForeignKey(d => d.PageGridId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Page_Grid_EditField_Page_GridID_Page_Grid");
            });

            modelBuilder.Entity<PageGridEditFieldGrid>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Page_Grid_EditFieldGrid");

                entity.Property(e => e.DropDownDisplayColumn).HasMaxLength(50);

                entity.Property(e => e.DropDownParentColumnName).HasMaxLength(50);

                entity.Property(e => e.DropDownTable).HasMaxLength(50);

                entity.Property(e => e.ExtendedAttributes).HasMaxLength(2000);

                entity.Property(e => e.FieldType)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.ObjectUid).HasColumnName("ObjectUID");

                entity.Property(e => e.PageGridId).HasColumnName("Page_GridID");

                entity.Property(e => e.TableField)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.ViewField)
                    .IsRequired()
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<PageGridGrid>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Page_GridGrid");

                entity.Property(e => e.AddPageLink).HasMaxLength(250);

                entity.Property(e => e.ComparisonOperatorI).HasMaxLength(10);

                entity.Property(e => e.ComparisonOperatorIi)
                    .HasMaxLength(10)
                    .HasColumnName("ComparisonOperatorII");

                entity.Property(e => e.ComparisonOperatorIii)
                    .HasMaxLength(10)
                    .HasColumnName("ComparisonOperatorIII");

                entity.Property(e => e.CopyPageLink).HasMaxLength(250);

                entity.Property(e => e.EditPageLink).HasMaxLength(250);

                entity.Property(e => e.FilterColumnI).HasMaxLength(100);

                entity.Property(e => e.FilterColumnIi)
                    .HasMaxLength(100)
                    .HasColumnName("FilterColumnII");

                entity.Property(e => e.FilterColumnIii)
                    .HasMaxLength(100)
                    .HasColumnName("FilterColumnIII");

                entity.Property(e => e.FilterValueIi).HasColumnName("FilterValueII");

                entity.Property(e => e.FilterValueIii).HasColumnName("FilterValueIII");

                entity.Property(e => e.FilterValueLocationI).HasMaxLength(20);

                entity.Property(e => e.FilterValueLocationIi)
                    .HasMaxLength(20)
                    .HasColumnName("FilterValueLocationII");

                entity.Property(e => e.FilterValueLocationIii)
                    .HasMaxLength(20)
                    .HasColumnName("FilterValueLocationIII");

                entity.Property(e => e.InitialDisplayField)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.LogicalOperatorI).HasMaxLength(10);

                entity.Property(e => e.LogicalOperatorIi)
                    .HasMaxLength(10)
                    .HasColumnName("LogicalOperatorII");

                entity.Property(e => e.ObjectUid).HasColumnName("ObjectUID");

                entity.Property(e => e.PageId).HasColumnName("PageID");

                entity.Property(e => e.ParentPrimaryKeyName).HasMaxLength(100);

                entity.Property(e => e.PrimaryKeyName)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.Spcommand)
                    .HasMaxLength(2000)
                    .HasColumnName("SPCommand");

                entity.Property(e => e.TableName).HasMaxLength(100);

                entity.Property(e => e.ViewName)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.ViewPageLink).HasMaxLength(250);
            });

            modelBuilder.Entity<PageQuickAdd>(entity =>
            {
                entity.HasKey(e => e.ObjectUid);

                entity.ToTable("Page_QuickAdd");

                entity.Property(e => e.ObjectUid)
                    .HasColumnName("ObjectUID")
                    .HasDefaultValueSql("(newid())");

                entity.Property(e => e.CreatedBy).HasMaxLength(50);

                entity.Property(e => e.CreatedOn)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Description).HasMaxLength(2000);

                entity.Property(e => e.Display)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasComputedColumnSql("([Name])", false);

                entity.Property(e => e.ImportedObjectUid)
                    .HasMaxLength(50)
                    .HasColumnName("ImportedObjectUID");

                entity.Property(e => e.InstallationUid).HasColumnName("InstallationUID");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.NameAlias)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.OldRecordId).HasColumnName("OldRecordID");

                entity.Property(e => e.PageId).HasColumnName("PageID");

                entity.Property(e => e.QuickAddPageLink).HasMaxLength(250);

                entity.Property(e => e.RecordId)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("RecordID");

                entity.Property(e => e.SortOrder)
                    .HasColumnType("money")
                    .HasDefaultValueSql("((100))");

                entity.Property(e => e.UpdatedBy).HasMaxLength(50);

                entity.Property(e => e.UpdatedOn).HasColumnType("datetime");

                entity.HasOne(d => d.Page)
                    .WithMany(p => p.PageQuickAdds)
                    .HasForeignKey(d => d.PageId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Page_QuickAdd_Page");
            });

            modelBuilder.Entity<PageQuickAddGrid>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Page_QuickAddGrid");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.ObjectUid).HasColumnName("ObjectUID");

                entity.Property(e => e.PageId).HasColumnName("PageID");

                entity.Property(e => e.QuickAddPageLink).HasMaxLength(250);
            });

            modelBuilder.Entity<PageTab>(entity =>
            {
                entity.HasKey(e => e.ObjectUid);

                entity.ToTable("Page_Tab");

                entity.Property(e => e.ObjectUid)
                    .HasColumnName("ObjectUID")
                    .HasDefaultValueSql("(newid())");

                entity.Property(e => e.ControlPageId).HasColumnName("Control_PageID");

                entity.Property(e => e.CreatedBy).HasMaxLength(50);

                entity.Property(e => e.CreatedOn)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Description).HasMaxLength(2000);

                entity.Property(e => e.Display)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasComputedColumnSql("([Name])", false);

                entity.Property(e => e.HeaderControlPageId).HasColumnName("HeaderControl_PageID");

                entity.Property(e => e.ImportedObjectUid)
                    .HasMaxLength(50)
                    .HasColumnName("ImportedObjectUID");

                entity.Property(e => e.InstallationUid).HasColumnName("InstallationUID");

                entity.Property(e => e.ModuleId).HasColumnName("ModuleID");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.NameAlias)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.OldRecordId).HasColumnName("OldRecordID");

                entity.Property(e => e.PageId).HasColumnName("PageID");

                entity.Property(e => e.RecordId)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("RecordID");

                entity.Property(e => e.SortOrder).HasDefaultValueSql("((100))");

                entity.Property(e => e.UpdatedBy).HasMaxLength(50);

                entity.Property(e => e.UpdatedOn).HasColumnType("datetime");

                entity.HasOne(d => d.ControlPage)
                    .WithMany(p => p.PageTabControlPages)
                    .HasForeignKey(d => d.ControlPageId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Page_Tab_Control_PageID_Page");

                entity.HasOne(d => d.HeaderControlPage)
                    .WithMany(p => p.PageTabHeaderControlPages)
                    .HasForeignKey(d => d.HeaderControlPageId)
                    .HasConstraintName("FK_Page_Tab_Page1");

                entity.HasOne(d => d.Module)
                    .WithMany(p => p.PageTabs)
                    .HasForeignKey(d => d.ModuleId)
                    .HasConstraintName("FK_Page_Tab_Module");

                entity.HasOne(d => d.Page)
                    .WithMany(p => p.PageTabPages)
                    .HasForeignKey(d => d.PageId)
                    .HasConstraintName("FK_Page_Tab_Page");
            });

            modelBuilder.Entity<PageTabGrid>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Page_TabGrid");

                entity.Property(e => e.Control)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.Header).HasMaxLength(100);

                entity.Property(e => e.Module).HasMaxLength(100);

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.ObjectUid).HasColumnName("ObjectUID");

                entity.Property(e => e.PageId).HasColumnName("PageID");
            });

            modelBuilder.Entity<ParameterType>(entity =>
            {
                entity.HasKey(e => e.ObjectUid);

                entity.ToTable("ParameterType");

                entity.Property(e => e.ObjectUid)
                    .HasColumnName("ObjectUID")
                    .HasDefaultValueSql("(newid())");

                entity.Property(e => e.CreatedBy).HasMaxLength(50);

                entity.Property(e => e.CreatedOn)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Description).HasMaxLength(2000);

                entity.Property(e => e.Display)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasComputedColumnSql("([Name])", false);

                entity.Property(e => e.ImportedObjectUid)
                    .HasMaxLength(50)
                    .HasColumnName("ImportedObjectUID");

                entity.Property(e => e.InstallationUid).HasColumnName("InstallationUID");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.NameAlias)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.OldRecordId).HasColumnName("OldRecordID");

                entity.Property(e => e.RecordId)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("RecordID");

                entity.Property(e => e.SortOrder).HasDefaultValueSql("((100))");

                entity.Property(e => e.UpdatedBy).HasMaxLength(50);

                entity.Property(e => e.UpdatedOn).HasColumnType("datetime");
            });

            modelBuilder.Entity<ParameterTypeGrid>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ParameterTypeGrid");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.ObjectUid).HasColumnName("ObjectUID");
            });

            modelBuilder.Entity<PhoneBdgbudgetInfoDetailGrid>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("PhoneBDGBudgetInfo_DetailGrid");

                entity.Property(e => e.BdgbudgetInfoId).HasColumnName("BDGBudgetInfoID");

                entity.Property(e => e.BudgetAmount)
                    .HasColumnType("money")
                    .HasColumnName("Budget Amount($)");

                entity.Property(e => e.CurrentYearBudgetAmount)
                    .HasColumnType("money")
                    .HasColumnName("Current Year Budget Amount($)");

                entity.Property(e => e.NextYearBudgetAmount)
                    .HasColumnType("money")
                    .HasColumnName("Next Year Budget Amount($)");

                entity.Property(e => e.ObjectUid).HasColumnName("ObjectUID");

                entity.Property(e => e.Subject).HasMaxLength(250);
            });

            modelBuilder.Entity<Portal>(entity =>
            {
                entity.HasKey(e => e.ObjectUid);

                entity.ToTable("Portal");

                entity.Property(e => e.ObjectUid)
                    .HasColumnName("ObjectUID")
                    .HasDefaultValueSql("(newid())");

                entity.Property(e => e.CreatedBy).HasMaxLength(50);

                entity.Property(e => e.CreatedOn)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Description).HasMaxLength(2000);

                entity.Property(e => e.Display)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasComputedColumnSql("([Name])", false);

                entity.Property(e => e.ImportedObjectUid)
                    .HasMaxLength(50)
                    .HasColumnName("ImportedObjectUID");

                entity.Property(e => e.InstallationUid).HasColumnName("InstallationUID");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.NameAlias)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.OldRecordId).HasColumnName("OldRecordID");

                entity.Property(e => e.RecordId)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("RecordID");

                entity.Property(e => e.SortOrder).HasDefaultValueSql("((100))");

                entity.Property(e => e.UpdatedBy).HasMaxLength(50);

                entity.Property(e => e.UpdatedOn).HasColumnType("datetime");
            });

            modelBuilder.Entity<PortalGrid>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("PortalGrid");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.ObjectUid).HasColumnName("ObjectUID");
            });

            modelBuilder.Entity<PostageOvernightMailBdgbudgetInfoDetailGrid>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("PostageOvernightMailBDGBudgetInfo_DetailGrid");

                entity.Property(e => e.BdgbudgetInfoId).HasColumnName("BDGBudgetInfoID");

                entity.Property(e => e.BudgetAmount)
                    .HasColumnType("money")
                    .HasColumnName("Budget Amount($)");

                entity.Property(e => e.CurrentYearBudgetAmount)
                    .HasColumnType("money")
                    .HasColumnName("Current Year Budget Amount($)");

                entity.Property(e => e.NextYearBudgetAmount)
                    .HasColumnType("money")
                    .HasColumnName("Next Year Budget Amount($)");

                entity.Property(e => e.ObjectUid).HasColumnName("ObjectUID");

                entity.Property(e => e.Subject).HasMaxLength(250);
            });

            modelBuilder.Entity<PrintingCopyBdgbudgetInfoDetailGrid>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("PrintingCopyBDGBudgetInfo_DetailGrid");

                entity.Property(e => e.BdgbudgetInfoId).HasColumnName("BDGBudgetInfoID");

                entity.Property(e => e.BudgetAmount)
                    .HasColumnType("money")
                    .HasColumnName("Budget Amount($)");

                entity.Property(e => e.CurrentYearBudgetAmount)
                    .HasColumnType("money")
                    .HasColumnName("Current Year Budget Amount($)");

                entity.Property(e => e.NextYearBudgetAmount)
                    .HasColumnType("money")
                    .HasColumnName("Next Year Budget Amount($)");

                entity.Property(e => e.ObjectUid).HasColumnName("ObjectUID");

                entity.Property(e => e.Subject).HasMaxLength(250);
            });

            modelBuilder.Entity<ProfessionalServiceBdgbudgetInfoDetailGrid>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ProfessionalServiceBDGBudgetInfo_DetailGrid");

                entity.Property(e => e.BdgbudgetInfoId).HasColumnName("BDGBudgetInfoID");

                entity.Property(e => e.BudgetAmount)
                    .HasColumnType("money")
                    .HasColumnName("Budget Amount($)");

                entity.Property(e => e.CurrentYearBudgetAmount)
                    .HasColumnType("money")
                    .HasColumnName("Current Year Budget Amount($)");

                entity.Property(e => e.NextYearBudgetAmount)
                    .HasColumnType("money")
                    .HasColumnName("Next Year Budget Amount($)");

                entity.Property(e => e.ObjectUid).HasColumnName("ObjectUID");

                entity.Property(e => e.Subject).HasMaxLength(250);
            });

            modelBuilder.Entity<Project>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("project");

                entity.Property(e => e.Company)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsFixedLength(true);

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CreatedOn).HasColumnType("datetime");

                entity.Property(e => e.DefaultFsLine).HasColumnName("Default_FS_Line");

                entity.Property(e => e.Description)
                    .HasMaxLength(2000)
                    .IsUnicode(false);

                entity.Property(e => e.Display)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.GpStatus)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("gp_status");

                entity.Property(e => e.ImportedObjectUid)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ImportedObjectUID");

                entity.Property(e => e.InstallationUid).HasColumnName("InstallationUID");

                entity.Property(e => e.Lm2disbursementCodeId).HasColumnName("LM2DisbursementCodeID");

                entity.Property(e => e.Lm2receiptCodeId).HasColumnName("LM2ReceiptCodeID");

                entity.Property(e => e.Name)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.NameAlias)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.OaStatus)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("oa_status");

                entity.Property(e => e.ObjectUid).HasColumnName("ObjectUID");

                entity.Property(e => e.OldRecordId).HasColumnName("OldRecordID");

                entity.Property(e => e.ProjectNo)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.RecordId)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("RecordID");

                entity.Property(e => e.RollToAll)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("Roll_to_ALL");

                entity.Property(e => e.Seg1Matrix)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("SEG1_MATRIX");

                entity.Property(e => e.Seg2Matrix)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("SEG2_MATRIX");

                entity.Property(e => e.Seg3Matrix)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("SEG3_MATRIX");

                entity.Property(e => e.Seg4Matrix)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("SEG4_MATRIX");

                entity.Property(e => e.UpdatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UpdatedOn).HasColumnType("datetime");
            });

            modelBuilder.Entity<ProjectBdgbudgetInfoDetailGrid>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ProjectBDGBudgetInfo_DetailGrid");

                entity.Property(e => e.BdgaccountGroupSubGroup)
                    .HasMaxLength(50)
                    .HasColumnName("BDGAccountGroupSubGroup");

                entity.Property(e => e.BdgaccountGroupSubGroupSubGroup)
                    .HasMaxLength(50)
                    .HasColumnName("BDGAccountGroupSubGroupSubGroup");

                entity.Property(e => e.BdgbudgetInfoId).HasColumnName("BDGBudgetInfoID");

                entity.Property(e => e.BudgetAmount)
                    .HasColumnType("money")
                    .HasColumnName("Budget Amount($)");

                entity.Property(e => e.CurrentYearBudgetAmount)
                    .HasColumnType("money")
                    .HasColumnName("Current Year Budget Amount($)");

                entity.Property(e => e.NextYearBudgetAmount)
                    .HasColumnType("money")
                    .HasColumnName("Next Year Budget Amount($)");

                entity.Property(e => e.ObjectUid).HasColumnName("ObjectUID");

                entity.Property(e => e.ProjectType).HasMaxLength(50);

                entity.Property(e => e.Subject).HasMaxLength(250);

                entity.Property(e => e.YtdActuals)
                    .HasColumnType("money")
                    .HasColumnName("YTD Actuals($)");
            });

            modelBuilder.Entity<ProjectLrp>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("project_lrp");

                entity.Property(e => e.Company)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsFixedLength(true);

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CreatedOn).HasColumnType("datetime");

                entity.Property(e => e.DefaultFsLine).HasColumnName("Default_FS_Line");

                entity.Property(e => e.Description)
                    .HasMaxLength(2000)
                    .IsUnicode(false);

                entity.Property(e => e.Display)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.GpStatus)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("gp_status");

                entity.Property(e => e.ImportedObjectUid)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ImportedObjectUID");

                entity.Property(e => e.InstallationUid).HasColumnName("InstallationUID");

                entity.Property(e => e.Lm2disbursementCodeId).HasColumnName("LM2DisbursementCodeID");

                entity.Property(e => e.Lm2receiptCodeId).HasColumnName("LM2ReceiptCodeID");

                entity.Property(e => e.Name)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.NameAlias)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.OaStatus)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("oa_status");

                entity.Property(e => e.ObjectUid).HasColumnName("ObjectUID");

                entity.Property(e => e.OldRecordId).HasColumnName("OldRecordID");

                entity.Property(e => e.ProjectNo)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.RecordId)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("RecordID");

                entity.Property(e => e.RollToAll)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("Roll_to_ALL");

                entity.Property(e => e.Seg1Matrix)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("SEG1_MATRIX");

                entity.Property(e => e.Seg2Matrix)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("SEG2_MATRIX");

                entity.Property(e => e.Seg3Matrix)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("SEG3_MATRIX");

                entity.Property(e => e.Seg4Matrix)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("SEG4_MATRIX");

                entity.Property(e => e.UpdatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UpdatedOn).HasColumnType("datetime");
            });

            modelBuilder.Entity<PublicationBdgbudgetInfoDetailGrid>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("PublicationBDGBudgetInfo_DetailGrid");

                entity.Property(e => e.BdgaccountGroupSubGroup)
                    .HasMaxLength(50)
                    .HasColumnName("BDGAccountGroupSubGroup");

                entity.Property(e => e.BdgaccountGroupSubGroupSubGroup)
                    .HasMaxLength(50)
                    .HasColumnName("BDGAccountGroupSubGroupSubGroup");

                entity.Property(e => e.BdgbudgetInfoId).HasColumnName("BDGBudgetInfoID");

                entity.Property(e => e.BudgetAmount)
                    .HasColumnType("money")
                    .HasColumnName("Budget Amount($)");

                entity.Property(e => e.CurrentYearBudgetAmount)
                    .HasColumnType("money")
                    .HasColumnName("Current Year Budget Amount($)");

                entity.Property(e => e.NextYearBudgetAmount)
                    .HasColumnType("money")
                    .HasColumnName("Next Year Budget Amount($)");

                entity.Property(e => e.ObjectUid).HasColumnName("ObjectUID");

                entity.Property(e => e.Subject).HasMaxLength(250);

                entity.Property(e => e.YtdActuals)
                    .HasColumnType("money")
                    .HasColumnName("YTD Actuals($)");
            });

            modelBuilder.Entity<QuickAddSetting>(entity =>
            {
                entity.HasKey(e => e.ObjectUid)
                    .HasName("PK_QuickAdd");

                entity.ToTable("QuickAddSetting");

                entity.Property(e => e.ObjectUid)
                    .HasColumnName("ObjectUID")
                    .HasDefaultValueSql("(newid())");

                entity.Property(e => e.CreatedBy).HasMaxLength(50);

                entity.Property(e => e.CreatedOn)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Description).HasMaxLength(2000);

                entity.Property(e => e.Display)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasComputedColumnSql("([Name])", false);

                entity.Property(e => e.ImportedObjectUid)
                    .HasMaxLength(50)
                    .HasColumnName("ImportedObjectUID");

                entity.Property(e => e.InstallationUid).HasColumnName("InstallationUID");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.NameAlias)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.OldRecordId).HasColumnName("OldRecordID");

                entity.Property(e => e.PageTableNames).HasMaxLength(2000);

                entity.Property(e => e.QuickAddLink).HasMaxLength(250);

                entity.Property(e => e.QuickAddNames).HasMaxLength(2000);

                entity.Property(e => e.QuickAddTableNames).HasMaxLength(2000);

                entity.Property(e => e.RecordId)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("RecordID");

                entity.Property(e => e.SortOrder)
                    .HasColumnType("money")
                    .HasDefaultValueSql("((100))");

                entity.Property(e => e.UpdatedBy).HasMaxLength(50);

                entity.Property(e => e.UpdatedOn).HasColumnType("datetime");
            });

            modelBuilder.Entity<QuickAddSettingGrid>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("QuickAddSettingGrid");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.ObjectUid).HasColumnName("ObjectUID");

                entity.Property(e => e.PageTableNames).HasMaxLength(2000);

                entity.Property(e => e.QuickAddLink).HasMaxLength(250);

                entity.Property(e => e.QuickAddNames).HasMaxLength(2000);

                entity.Property(e => e.QuickAddTableNames).HasMaxLength(2000);
            });

            modelBuilder.Entity<ReferenceAttachment>(entity =>
            {
                entity.HasKey(e => e.ObjectUid);

                entity.ToTable("Reference_Attachment");

                entity.Property(e => e.ObjectUid)
                    .HasColumnName("ObjectUID")
                    .HasDefaultValueSql("(newid())");

                entity.Property(e => e.Attachment).HasColumnType("image");

                entity.Property(e => e.AttachmentId).HasColumnName("AttachmentID");

                entity.Property(e => e.AttachmentToModuleId).HasColumnName("AttachmentTo_ModuleID");

                entity.Property(e => e.AttachmentTypeId).HasColumnName("AttachmentTypeID");

                entity.Property(e => e.CreatedBy).HasMaxLength(50);

                entity.Property(e => e.CreatedOn)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Description).HasMaxLength(2000);

                entity.Property(e => e.Display)
                    .IsRequired()
                    .HasMaxLength(100)
                    .HasComputedColumnSql("([Name])", false);

                entity.Property(e => e.ImportedObjectUid)
                    .HasMaxLength(50)
                    .HasColumnName("ImportedObjectUID");

                entity.Property(e => e.InstallationUid).HasColumnName("InstallationUID");

                entity.Property(e => e.Location).HasMaxLength(50);

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.NameAlias)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.OldRecordId).HasColumnName("OldRecordID");

                entity.Property(e => e.PortalId).HasColumnName("PortalID");

                entity.Property(e => e.RecordId)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("RecordID");

                entity.Property(e => e.ReferenceId).HasColumnName("ReferenceID");

                entity.Property(e => e.SortOrder).HasDefaultValueSql("((100))");

                entity.Property(e => e.Source).HasMaxLength(50);

                entity.Property(e => e.UpdatedBy).HasMaxLength(50);

                entity.Property(e => e.UpdatedOn).HasColumnType("datetime");

                entity.HasOne(d => d.AttachmentNavigation)
                    .WithMany(p => p.ReferenceAttachments)
                    .HasForeignKey(d => d.AttachmentId)
                    .HasConstraintName("FK_Reference_Attachment_Attachment");

                entity.HasOne(d => d.AttachmentToModule)
                    .WithMany(p => p.ReferenceAttachments)
                    .HasForeignKey(d => d.AttachmentToModuleId)
                    .HasConstraintName("FK_Reference_Attachment_AttachmentTo_ModuleID_Module");

                entity.HasOne(d => d.AttachmentType)
                    .WithMany(p => p.ReferenceAttachments)
                    .HasForeignKey(d => d.AttachmentTypeId)
                    .HasConstraintName("FK_Reference_Attachment_AttachmentTypeID_AttachmentType");

                entity.HasOne(d => d.Portal)
                    .WithMany(p => p.ReferenceAttachments)
                    .HasForeignKey(d => d.PortalId)
                    .HasConstraintName("FK_Reference_Attachment_PortalID_Portal");
            });

            modelBuilder.Entity<ReferenceAttachmentGrid>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Reference_AttachmentGrid");

                entity.Property(e => e.CreatedBy).HasMaxLength(50);

                entity.Property(e => e.CreatedOn).HasColumnType("datetime");

                entity.Property(e => e.Description).HasMaxLength(2000);

                entity.Property(e => e.Download)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.NoMin).HasColumnName("No Min");

                entity.Property(e => e.ObjectUid).HasColumnName("ObjectUID");

                entity.Property(e => e.PortalId).HasColumnName("PortalID");

                entity.Property(e => e.ReferenceId).HasColumnName("ReferenceID");

                entity.Property(e => e.Source).HasMaxLength(50);

                entity.Property(e => e.Type).HasMaxLength(50);

                entity.Property(e => e.UpdatedBy).HasMaxLength(50);

                entity.Property(e => e.UpdatedOn).HasColumnType("datetime");
            });

            modelBuilder.Entity<ReferenceAttachmentUserAccount>(entity =>
            {
                entity.HasKey(e => e.ObjectUid);

                entity.ToTable("Reference_Attachment_UserAccount");

                entity.Property(e => e.ObjectUid)
                    .HasColumnName("ObjectUID")
                    .HasDefaultValueSql("(newid())");

                entity.Property(e => e.CreatedBy).HasMaxLength(50);

                entity.Property(e => e.CreatedOn)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Description).HasMaxLength(2000);

                entity.Property(e => e.Display)
                    .HasMaxLength(50)
                    .HasComputedColumnSql("([Name])", false);

                entity.Property(e => e.ImportedObjectUid)
                    .HasMaxLength(50)
                    .HasColumnName("ImportedObjectUID");

                entity.Property(e => e.InstallationUid).HasColumnName("InstallationUID");

                entity.Property(e => e.Name).HasMaxLength(50);

                entity.Property(e => e.NameAlias).HasMaxLength(50);

                entity.Property(e => e.OldRecordId).HasColumnName("OldRecordID");

                entity.Property(e => e.RecordId)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("RecordID");

                entity.Property(e => e.ReferenceAttachmentId).HasColumnName("Reference_AttachmentID");

                entity.Property(e => e.SortOrder).HasDefaultValueSql("((100))");

                entity.Property(e => e.UpdatedBy).HasMaxLength(50);

                entity.Property(e => e.UpdatedOn).HasColumnType("datetime");

                entity.Property(e => e.UserAccountId).HasColumnName("UserAccountID");

                entity.HasOne(d => d.ReferenceAttachment)
                    .WithMany(p => p.ReferenceAttachmentUserAccounts)
                    .HasForeignKey(d => d.ReferenceAttachmentId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Reference_Attachment_UserAccount_Reference_AttachmentID_Reference_Attachment");

                entity.HasOne(d => d.UserAccount)
                    .WithMany(p => p.ReferenceAttachmentUserAccounts)
                    .HasForeignKey(d => d.UserAccountId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Reference_Attachment_UserAccount_UserAccountID_UserAccount");
            });

            modelBuilder.Entity<ReferenceAttachmentUserAccountGrid>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Reference_Attachment_UserAccountGrid");

                entity.Property(e => e.ObjectUid).HasColumnName("ObjectUID");

                entity.Property(e => e.ReferenceAttachmentId).HasColumnName("Reference_AttachmentID");

                entity.Property(e => e.UserAccount)
                    .IsRequired()
                    .HasMaxLength(100);
            });

            modelBuilder.Entity<ReferenceNote>(entity =>
            {
                entity.HasKey(e => e.ObjectUid);

                entity.ToTable("Reference_Note");

                entity.Property(e => e.ObjectUid)
                    .HasColumnName("ObjectUID")
                    .HasDefaultValueSql("(newid())");

                entity.Property(e => e.CreatedBy).HasMaxLength(50);

                entity.Property(e => e.CreatedOn)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Description).HasMaxLength(4000);

                entity.Property(e => e.Display)
                    .IsRequired()
                    .HasMaxLength(100)
                    .HasComputedColumnSql("([Name])", false);

                entity.Property(e => e.ImportedObjectUid)
                    .HasMaxLength(50)
                    .HasColumnName("ImportedObjectUID");

                entity.Property(e => e.InstallationUid).HasColumnName("InstallationUID");

                entity.Property(e => e.ModuleId).HasColumnName("ModuleID");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.NameAlias)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.OldRecordId).HasColumnName("OldRecordID");

                entity.Property(e => e.RecordId)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("RecordID");

                entity.Property(e => e.ReferenceId).HasColumnName("ReferenceID");

                entity.Property(e => e.SortOrder).HasDefaultValueSql("((100))");

                entity.Property(e => e.UpdatedBy).HasMaxLength(50);

                entity.Property(e => e.UpdatedOn).HasColumnType("datetime");

                entity.HasOne(d => d.Module)
                    .WithMany(p => p.ReferenceNotes)
                    .HasForeignKey(d => d.ModuleId)
                    .HasConstraintName("FK_Reference_Note_ModuleID_Module");
            });

            modelBuilder.Entity<ReferenceNoteGrid>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Reference_NoteGrid");

                entity.Property(e => e.Module).HasMaxLength(100);

                entity.Property(e => e.Note).HasMaxLength(4000);

                entity.Property(e => e.NoteDate).HasColumnType("datetime");

                entity.Property(e => e.ObjectUid).HasColumnName("ObjectUID");

                entity.Property(e => e.ReferenceId).HasColumnName("ReferenceID");

                entity.Property(e => e.Subject)
                    .IsRequired()
                    .HasMaxLength(100);
            });

            modelBuilder.Entity<ReferenceUserAccount>(entity =>
            {
                entity.HasKey(e => e.ObjectUid);

                entity.ToTable("Reference_UserAccount");

                entity.Property(e => e.ObjectUid)
                    .HasColumnName("ObjectUID")
                    .HasDefaultValueSql("(newid())");

                entity.Property(e => e.CreatedBy).HasMaxLength(50);

                entity.Property(e => e.CreatedOn)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Description).HasMaxLength(2000);

                entity.Property(e => e.Display)
                    .HasMaxLength(50)
                    .HasComputedColumnSql("([dbo].[GetUserAccountName]([UserAccountID]))", false);

                entity.Property(e => e.ImportedObjectUid)
                    .HasMaxLength(50)
                    .HasColumnName("ImportedObjectUID");

                entity.Property(e => e.InstallationUid).HasColumnName("InstallationUID");

                entity.Property(e => e.ModuleId).HasColumnName("ModuleID");

                entity.Property(e => e.Name).HasMaxLength(50);

                entity.Property(e => e.NameAlias).HasMaxLength(50);

                entity.Property(e => e.OldRecordId).HasColumnName("OldRecordID");

                entity.Property(e => e.RecordId)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("RecordID");

                entity.Property(e => e.ReferenceId).HasColumnName("ReferenceID");

                entity.Property(e => e.SortOrder).HasDefaultValueSql("((100))");

                entity.Property(e => e.UpdatedBy).HasMaxLength(50);

                entity.Property(e => e.UpdatedOn).HasColumnType("datetime");

                entity.Property(e => e.UserAccountId).HasColumnName("UserAccountID");

                entity.HasOne(d => d.Module)
                    .WithMany(p => p.ReferenceUserAccounts)
                    .HasForeignKey(d => d.ModuleId)
                    .HasConstraintName("FK_Reference_UserAccount_ModuleID_Module");

                entity.HasOne(d => d.UserAccount)
                    .WithMany(p => p.ReferenceUserAccounts)
                    .HasForeignKey(d => d.UserAccountId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Reference_UserAccount_UserAccount");
            });

            modelBuilder.Entity<Resource>(entity =>
            {
                entity.HasKey(e => e.ObjectUid);

                entity.ToTable("Resource");

                entity.Property(e => e.ObjectUid)
                    .HasColumnName("ObjectUID")
                    .HasDefaultValueSql("(newid())");

                entity.Property(e => e.CreatedBy).HasMaxLength(50);

                entity.Property(e => e.CreatedOn)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Description).HasMaxLength(2000);

                entity.Property(e => e.Display)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasComputedColumnSql("([Name])", false);

                entity.Property(e => e.ImportedObjectUid)
                    .HasMaxLength(50)
                    .HasColumnName("ImportedObjectUID");

                entity.Property(e => e.InstallationUid).HasColumnName("InstallationUID");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.NameAlias)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.OldRecordId).HasColumnName("OldRecordID");

                entity.Property(e => e.RecordId)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("RecordID");

                entity.Property(e => e.SortOrder).HasDefaultValueSql("((100))");

                entity.Property(e => e.UpdatedBy).HasMaxLength(50);

                entity.Property(e => e.UpdatedOn).HasColumnType("datetime");
            });

            modelBuilder.Entity<ResourceGrid>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ResourceGrid");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.ObjectUid).HasColumnName("ObjectUID");
            });

            modelBuilder.Entity<ResourceLocalisationList>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Resource_LocalisationList");

                entity.Property(e => e.Localisation)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.LocalisationId).HasColumnName("LocalisationID");

                entity.Property(e => e.ModuleId).HasColumnName("ModuleID");

                entity.Property(e => e.Resource)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Translation)
                    .IsRequired()
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<ResourceTranslation>(entity =>
            {
                entity.HasKey(e => e.ObjectUid);

                entity.ToTable("Resource_Translation");

                entity.Property(e => e.ObjectUid)
                    .HasColumnName("ObjectUID")
                    .HasDefaultValueSql("(newid())");

                entity.Property(e => e.CreatedBy).HasMaxLength(50);

                entity.Property(e => e.CreatedOn)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Description).HasMaxLength(2000);

                entity.Property(e => e.Display)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasComputedColumnSql("([Name])", false);

                entity.Property(e => e.ImportedObjectUid)
                    .HasMaxLength(50)
                    .HasColumnName("ImportedObjectUID");

                entity.Property(e => e.InstallationUid).HasColumnName("InstallationUID");

                entity.Property(e => e.LocalisationId).HasColumnName("LocalisationID");

                entity.Property(e => e.ModuleId).HasColumnName("ModuleID");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.NameAlias)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.OldRecordId).HasColumnName("OldRecordID");

                entity.Property(e => e.RecordId)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("RecordID");

                entity.Property(e => e.ResourceId).HasColumnName("ResourceID");

                entity.Property(e => e.SortOrder).HasDefaultValueSql("((100))");

                entity.Property(e => e.UpdatedBy).HasMaxLength(50);

                entity.Property(e => e.UpdatedOn).HasColumnType("datetime");

                entity.HasOne(d => d.Localisation)
                    .WithMany(p => p.ResourceTranslations)
                    .HasForeignKey(d => d.LocalisationId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Resource_Translation_Localisation");

                entity.HasOne(d => d.Module)
                    .WithMany(p => p.ResourceTranslations)
                    .HasForeignKey(d => d.ModuleId)
                    .HasConstraintName("FK_Resource_Translation_Module");

                entity.HasOne(d => d.Resource)
                    .WithMany(p => p.ResourceTranslations)
                    .HasForeignKey(d => d.ResourceId)
                    .HasConstraintName("FK_Resource_Translation_Resource");
            });

            modelBuilder.Entity<ResourceTranslationGrid>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Resource_TranslationGrid");

                entity.Property(e => e.Localisation)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Module).HasMaxLength(100);

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.ObjectUid).HasColumnName("ObjectUID");

                entity.Property(e => e.ResourceId).HasColumnName("ResourceID");
            });

            modelBuilder.Entity<Role>(entity =>
            {
                entity.HasKey(e => e.ObjectUid);

                entity.ToTable("Role");

                entity.Property(e => e.ObjectUid)
                    .HasColumnName("ObjectUID")
                    .HasDefaultValueSql("(newid())");

                entity.Property(e => e.CreatedBy).HasMaxLength(50);

                entity.Property(e => e.CreatedOn)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Description).HasMaxLength(2000);

                entity.Property(e => e.Display)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasComputedColumnSql("([Name])", false);

                entity.Property(e => e.ImportedObjectUid)
                    .HasMaxLength(50)
                    .HasColumnName("ImportedObjectUID");

                entity.Property(e => e.InstallationUid).HasColumnName("InstallationUID");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.NameAlias)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.OldRecordId).HasColumnName("OldRecordID");

                entity.Property(e => e.RecordId)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("RecordID");

                entity.Property(e => e.SortOrder).HasDefaultValueSql("((100))");

                entity.Property(e => e.UpdatedBy).HasMaxLength(50);

                entity.Property(e => e.UpdatedOn).HasColumnType("datetime");
            });

            modelBuilder.Entity<RoleGrid>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("RoleGrid");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.ObjectUid).HasColumnName("ObjectUID");
            });

            modelBuilder.Entity<RoleModule>(entity =>
            {
                entity.HasKey(e => e.ObjectUid);

                entity.ToTable("Role_Module");

                entity.Property(e => e.ObjectUid)
                    .HasColumnName("ObjectUID")
                    .HasDefaultValueSql("(newid())");

                entity.Property(e => e.CreatedBy).HasMaxLength(50);

                entity.Property(e => e.CreatedOn)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Description).HasMaxLength(2000);

                entity.Property(e => e.Display)
                    .HasMaxLength(50)
                    .HasComputedColumnSql("([dbo].[GetModuleName]([ModuleID]))", false);

                entity.Property(e => e.ImportedObjectUid)
                    .HasMaxLength(50)
                    .HasColumnName("ImportedObjectUID");

                entity.Property(e => e.InstallationUid).HasColumnName("InstallationUID");

                entity.Property(e => e.ModuleId).HasColumnName("ModuleID");

                entity.Property(e => e.Name).HasMaxLength(50);

                entity.Property(e => e.NameAlias).HasMaxLength(50);

                entity.Property(e => e.OldRecordId).HasColumnName("OldRecordID");

                entity.Property(e => e.RecordId)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("RecordID");

                entity.Property(e => e.RoleId).HasColumnName("RoleID");

                entity.Property(e => e.SortOrder).HasDefaultValueSql("((100))");

                entity.Property(e => e.TableCsv).HasColumnName("TableCSV");

                entity.Property(e => e.TablePdf).HasColumnName("TablePDF");

                entity.Property(e => e.UpdatedBy).HasMaxLength(50);

                entity.Property(e => e.UpdatedOn).HasColumnType("datetime");

                entity.HasOne(d => d.Module)
                    .WithMany(p => p.RoleModules)
                    .HasForeignKey(d => d.ModuleId)
                    .HasConstraintName("FK_Role_Module_Module");

                entity.HasOne(d => d.Role)
                    .WithMany(p => p.RoleModules)
                    .HasForeignKey(d => d.RoleId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Role_Module_Role");
            });

            modelBuilder.Entity<RoleModuleGrid>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Role_ModuleGrid");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.ObjectUid).HasColumnName("ObjectUID");

                entity.Property(e => e.RoleId).HasColumnName("RoleID");

                entity.Property(e => e.TableCsv).HasColumnName("TableCSV");

                entity.Property(e => e.TablePdf).HasColumnName("TablePDF");
            });

            modelBuilder.Entity<SalaryAdjustmentBdgbudgetInfoDetailGrid>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("SalaryAdjustmentBDGBudgetInfo_DetailGrid");

                entity.Property(e => e.BdgbudgetInfoId).HasColumnName("BDGBudgetInfoID");

                entity.Property(e => e.BudgetAmount)
                    .HasColumnType("money")
                    .HasColumnName("Budget Amount($)");

                entity.Property(e => e.CurrentYearBudgetAmount)
                    .HasColumnType("money")
                    .HasColumnName("Current Year Budget Amount($)");

                entity.Property(e => e.NextYearBudgetAmount)
                    .HasColumnType("money")
                    .HasColumnName("Next Year Budget Amount($)");

                entity.Property(e => e.ObjectUid).HasColumnName("ObjectUID");

                entity.Property(e => e.Subject).HasMaxLength(250);
            });

            modelBuilder.Entity<SalaryBdgbudgetInfoDetailGrid>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("SalaryBDGBudgetInfo_DetailGrid");

                entity.Property(e => e.AccountGroup).HasMaxLength(50);

                entity.Property(e => e.BdgbudgetInfoId).HasColumnName("BDGBudgetInfoID");

                entity.Property(e => e.BudgetAmount)
                    .HasColumnType("money")
                    .HasColumnName("Budget Amount($)");

                entity.Property(e => e.CurrentYearBudgetAmount)
                    .HasColumnType("money")
                    .HasColumnName("Current Year Budget Amount($)");

                entity.Property(e => e.DetailAmount)
                    .HasColumnType("money")
                    .HasColumnName("Detail Amount($)");

                entity.Property(e => e.LineNumber).HasMaxLength(50);

                entity.Property(e => e.Name).HasMaxLength(50);

                entity.Property(e => e.ObjectUid).HasColumnName("ObjectUID");

                entity.Property(e => e.Position).HasMaxLength(50);

                entity.Property(e => e.Salary)
                    .HasColumnType("money")
                    .HasColumnName("Salary($)");

                entity.Property(e => e.Status).HasMaxLength(50);

                entity.Property(e => e.SubGroup).HasMaxLength(50);

                entity.Property(e => e.Subject).HasMaxLength(250);

                entity.Property(e => e.TotalAmount)
                    .HasColumnType("money")
                    .HasColumnName("Total Amount($)");

                entity.Property(e => e.Type).HasMaxLength(50);

                entity.Property(e => e.Unit).HasMaxLength(50);
            });

            modelBuilder.Entity<SalaryEmployeeBdgbudgetInfoDetailGrid>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("SalaryEmployeeBDGBudgetInfo_DetailGrid");

                entity.Property(e => e.BdgbudgetInfoId).HasColumnName("BDGBudgetInfoID");

                entity.Property(e => e.BudgetAmount)
                    .HasColumnType("money")
                    .HasColumnName("Budget Amount($)");

                entity.Property(e => e.CurrentYearBudgetAmount)
                    .HasColumnType("money")
                    .HasColumnName("Current Year Budget Amount($)");

                entity.Property(e => e.Name).HasMaxLength(50);

                entity.Property(e => e.NextYearBudgetAmount)
                    .HasColumnType("money")
                    .HasColumnName("Next Year Budget Amount($)");

                entity.Property(e => e.ObjectUid).HasColumnName("ObjectUID");

                entity.Property(e => e.Position).HasMaxLength(50);

                entity.Property(e => e.Salary)
                    .HasColumnType("money")
                    .HasColumnName("Salary($)");

                entity.Property(e => e.Status).HasMaxLength(50);

                entity.Property(e => e.Unit).HasMaxLength(50);
            });

            modelBuilder.Entity<SalaryInternBdgbudgetInfoDetailGrid>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("SalaryInternBDGBudgetInfo_DetailGrid");

                entity.Property(e => e.BdgbudgetInfoId).HasColumnName("BDGBudgetInfoID");

                entity.Property(e => e.BudgetAmount)
                    .HasColumnType("money")
                    .HasColumnName("Budget Amount($)");

                entity.Property(e => e.CurrentYearBudgetAmount)
                    .HasColumnType("money")
                    .HasColumnName("Current Year Budget Amount($)");

                entity.Property(e => e.NextYearBudgetAmount)
                    .HasColumnType("money")
                    .HasColumnName("Next Year Budget Amount($)");

                entity.Property(e => e.ObjectUid).HasColumnName("ObjectUID");

                entity.Property(e => e.OfWeeks).HasColumnName("#OfWeeks");

                entity.Property(e => e.OfWeeksInNextYear).HasColumnName("#OfWeeksInNextYear");

                entity.Property(e => e.Subject).HasMaxLength(250);

                entity.Property(e => e.WeeklySalary)
                    .HasColumnType("money")
                    .HasColumnName("Weekly Salary($)");
            });

            modelBuilder.Entity<SalaryOpenPositionBdgbudgetInfoDetailGrid>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("SalaryOpenPositionBDGBudgetInfo_DetailGrid");

                entity.Property(e => e.AnticipatedStartingMonth).HasMaxLength(50);

                entity.Property(e => e.BdgbudgetInfoId).HasColumnName("BDGBudgetInfoID");

                entity.Property(e => e.BudgetAmount)
                    .HasColumnType("money")
                    .HasColumnName("Budget Amount($)");

                entity.Property(e => e.CurrentYearBudgetAmount)
                    .HasColumnType("money")
                    .HasColumnName("Current Year Budget Amount($)");

                entity.Property(e => e.NextYearBudgetAmount)
                    .HasColumnType("money")
                    .HasColumnName("Next Year Budget Amount($)");

                entity.Property(e => e.ObjectUid).HasColumnName("ObjectUID");

                entity.Property(e => e.PositionType).HasMaxLength(50);

                entity.Property(e => e.Salary)
                    .HasColumnType("money")
                    .HasColumnName("Salary($)");

                entity.Property(e => e.Step).HasMaxLength(50);

                entity.Property(e => e.Unit).HasMaxLength(50);

                entity.Property(e => e.UnitPosition).HasMaxLength(50);
            });

            modelBuilder.Entity<SalaryOvertimeBdgbudgetInfoDetailGrid>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("SalaryOvertimeBDGBudgetInfo_DetailGrid");

                entity.Property(e => e.BdgbudgetInfoId).HasColumnName("BDGBudgetInfoID");

                entity.Property(e => e.BudgetAmount)
                    .HasColumnType("money")
                    .HasColumnName("Budget Amount($)");

                entity.Property(e => e.CurrentYearBudgetAmount)
                    .HasColumnType("money")
                    .HasColumnName("Current Year Budget Amount($)");

                entity.Property(e => e.NextYearBudgetAmount)
                    .HasColumnType("money")
                    .HasColumnName("Next Year Budget Amount($)");

                entity.Property(e => e.ObjectUid).HasColumnName("ObjectUID");

                entity.Property(e => e.Subject).HasMaxLength(250);
            });

            modelBuilder.Entity<SalarySabbaticalBdgbudgetInfoDetailGrid>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("SalarySabbaticalBDGBudgetInfo_DetailGrid");

                entity.Property(e => e.BdgbudgetInfoId).HasColumnName("BDGBudgetInfoID");

                entity.Property(e => e.BudgetAmount)
                    .HasColumnType("money")
                    .HasColumnName("Budget Amount($)");

                entity.Property(e => e.CurrentYearBudgetAmount)
                    .HasColumnType("money")
                    .HasColumnName("Current Year Budget Amount($)");

                entity.Property(e => e.Employee).HasMaxLength(50);

                entity.Property(e => e.NextYearBudgetAmount)
                    .HasColumnType("money")
                    .HasColumnName("Next Year Budget Amount($)");

                entity.Property(e => e.ObjectUid).HasColumnName("ObjectUID");

                entity.Property(e => e.OfMonths).HasColumnName("#OfMonths");

                entity.Property(e => e.OfMonthsInNextYear).HasColumnName("#OfMonthsInNextYear");

                entity.Property(e => e.Salary)
                    .HasColumnType("money")
                    .HasColumnName("Salary($)");
            });

            modelBuilder.Entity<Salutation>(entity =>
            {
                entity.HasKey(e => e.ObjectUid);

                entity.ToTable("Salutation");

                entity.Property(e => e.ObjectUid)
                    .HasColumnName("ObjectUID")
                    .HasDefaultValueSql("(newid())");

                entity.Property(e => e.CreatedBy).HasMaxLength(50);

                entity.Property(e => e.CreatedOn)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Description).HasMaxLength(2000);

                entity.Property(e => e.Display)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasComputedColumnSql("([Name])", false);

                entity.Property(e => e.ImportedObjectUid)
                    .HasMaxLength(50)
                    .HasColumnName("ImportedObjectUID");

                entity.Property(e => e.InstallationUid).HasColumnName("InstallationUID");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.NameAlias)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.OldRecordId).HasColumnName("OldRecordID");

                entity.Property(e => e.RecordId)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("RecordID");

                entity.Property(e => e.SortOrder).HasDefaultValueSql("((100))");

                entity.Property(e => e.UpdatedBy).HasMaxLength(50);

                entity.Property(e => e.UpdatedOn).HasColumnType("datetime");
            });

            modelBuilder.Entity<Setting>(entity =>
            {
                entity.HasKey(e => e.ObjectUid);

                entity.ToTable("Setting");

                entity.Property(e => e.ObjectUid)
                    .HasColumnName("ObjectUID")
                    .HasDefaultValueSql("(newid())");

                entity.Property(e => e.CreatedBy).HasMaxLength(50);

                entity.Property(e => e.CreatedOn)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Description).HasMaxLength(2000);

                entity.Property(e => e.Display)
                    .IsRequired()
                    .HasMaxLength(200)
                    .HasComputedColumnSql("([Name])", false);

                entity.Property(e => e.ImportedObjectUid)
                    .HasMaxLength(50)
                    .HasColumnName("ImportedObjectUID");

                entity.Property(e => e.InstallationUid).HasColumnName("InstallationUID");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(200);

                entity.Property(e => e.NameAlias)
                    .IsRequired()
                    .HasMaxLength(200);

                entity.Property(e => e.OldRecordId).HasColumnName("OldRecordID");

                entity.Property(e => e.RecordId)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("RecordID");

                entity.Property(e => e.SortOrder).HasDefaultValueSql("((100))");

                entity.Property(e => e.UpdatedBy).HasMaxLength(50);

                entity.Property(e => e.UpdatedOn).HasColumnType("datetime");

                entity.Property(e => e.Value)
                    .IsRequired()
                    .HasMaxLength(100);
            });

            modelBuilder.Entity<StaffTrainingConferenceBdgbudgetInfoDetailGrid>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("StaffTrainingConferenceBDGBudgetInfo_DetailGrid");

                entity.Property(e => e.BdgbudgetInfoId).HasColumnName("BDGBudgetInfoID");

                entity.Property(e => e.BudgetAmount)
                    .HasColumnType("money")
                    .HasColumnName("Budget Amount($)");

                entity.Property(e => e.CurrentYearBudgetAmount)
                    .HasColumnType("money")
                    .HasColumnName("Current Year Budget Amount($)");

                entity.Property(e => e.NextYearBudgetAmount)
                    .HasColumnType("money")
                    .HasColumnName("Next Year Budget Amount($)");

                entity.Property(e => e.ObjectUid).HasColumnName("ObjectUID");

                entity.Property(e => e.Subject).HasMaxLength(250);
            });

            modelBuilder.Entity<StatusUpdate>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("status_update");

                entity.Property(e => e.StatusValue)
                    .IsRequired()
                    .HasMaxLength(24)
                    .IsUnicode(false)
                    .HasColumnName("status_value");
            });

            modelBuilder.Entity<SubscriptionBdgbudgetInfoDetailGrid>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("SubscriptionBDGBudgetInfo_DetailGrid");

                entity.Property(e => e.BdgbudgetInfoId).HasColumnName("BDGBudgetInfoID");

                entity.Property(e => e.BudgetAmount)
                    .HasColumnType("money")
                    .HasColumnName("Budget Amount($)");

                entity.Property(e => e.CurrentYearBudgetAmount)
                    .HasColumnType("money")
                    .HasColumnName("Current Year Budget Amount($)");

                entity.Property(e => e.NextYearBudgetAmount)
                    .HasColumnType("money")
                    .HasColumnName("Next Year Budget Amount($)");

                entity.Property(e => e.ObjectUid).HasColumnName("ObjectUID");

                entity.Property(e => e.Subject).HasMaxLength(250);

                entity.Property(e => e.YtdActuals)
                    .HasColumnType("money")
                    .HasColumnName("YTD Actuals");
            });

            modelBuilder.Entity<SupplyEquipmentUnder1000BdgbudgetInfoDetailGrid>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("SupplyEquipmentUnder1000BDGBudgetInfo_DetailGrid");

                entity.Property(e => e.BdgbudgetInfoId).HasColumnName("BDGBudgetInfoID");

                entity.Property(e => e.BudgetAmount)
                    .HasColumnType("money")
                    .HasColumnName("Budget Amount($)");

                entity.Property(e => e.CurrentYearBudgetAmount)
                    .HasColumnType("money")
                    .HasColumnName("Current Year Budget Amount($)");

                entity.Property(e => e.NextYearBudgetAmount)
                    .HasColumnType("money")
                    .HasColumnName("Next Year Budget Amount($)");

                entity.Property(e => e.ObjectUid).HasColumnName("ObjectUID");

                entity.Property(e => e.Subject).HasMaxLength(250);
            });

            modelBuilder.Entity<TempCss>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("temp_css");

                entity.Property(e => e.Bdgdepartmentidlist)
                    .IsRequired()
                    .HasMaxLength(77)
                    .IsUnicode(false)
                    .HasColumnName("bdgdepartmentidlist");

                entity.Property(e => e.Bdgreportgroupid)
                    .IsRequired()
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasColumnName("bdgreportgroupid");

                entity.Property(e => e.Company)
                    .IsRequired()
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("company");

                entity.Property(e => e.Debug).HasColumnName("debug");

                entity.Property(e => e.Enddate)
                    .IsRequired()
                    .HasMaxLength(19)
                    .IsUnicode(false)
                    .HasColumnName("enddate");

                entity.Property(e => e.Startdate)
                    .IsRequired()
                    .HasMaxLength(19)
                    .IsUnicode(false)
                    .HasColumnName("startdate");
            });

            modelBuilder.Entity<TempCss1>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("temp_css1");

                entity.Property(e => e.Bdgdepartmentidlist)
                    .IsRequired()
                    .HasMaxLength(77)
                    .IsUnicode(false)
                    .HasColumnName("bdgdepartmentidlist");

                entity.Property(e => e.Company)
                    .IsRequired()
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("company");

                entity.Property(e => e.Debug).HasColumnName("debug");

                entity.Property(e => e.Enddate)
                    .IsRequired()
                    .HasMaxLength(19)
                    .IsUnicode(false)
                    .HasColumnName("enddate");

                entity.Property(e => e.Startdate)
                    .IsRequired()
                    .HasMaxLength(19)
                    .IsUnicode(false)
                    .HasColumnName("startdate");
            });

            modelBuilder.Entity<TempEmployee>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Temp_EMPLOYEE");

                entity.Property(e => e.Accountgroup).HasMaxLength(100);

                entity.Property(e => e.Accountgroup1).HasMaxLength(100);

                entity.Property(e => e.Accountgroup2).HasMaxLength(100);

                entity.Property(e => e.Accountgroup3).HasMaxLength(100);

                entity.Property(e => e.DeptMoveFrom)
                    .HasMaxLength(50)
                    .HasColumnName("Dept_MoveFrom");

                entity.Property(e => e.DeptMoveTo)
                    .HasMaxLength(50)
                    .HasColumnName("Dept_MoveTo");

                entity.Property(e => e.Employeeid).HasColumnName("EMPLOYEEID");

                entity.Property(e => e.Recordid)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("recordid");

                entity.Property(e => e.Year)
                    .HasMaxLength(15)
                    .HasColumnName("year");
            });

            modelBuilder.Entity<TempHelpBdgbudgetInfoDetailGrid>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("TempHelpBDGBudgetInfo_DetailGrid");

                entity.Property(e => e.BdgbudgetInfoId).HasColumnName("BDGBudgetInfoID");

                entity.Property(e => e.BudgetAmount)
                    .HasColumnType("money")
                    .HasColumnName("Budget Amount($)");

                entity.Property(e => e.CurrentYearBudgetAmount)
                    .HasColumnType("money")
                    .HasColumnName("Current Year Budget Amount($)");

                entity.Property(e => e.NextYearBudgetAmount)
                    .HasColumnType("money")
                    .HasColumnName("Next Year Budget Amount($)");

                entity.Property(e => e.ObjectUid).HasColumnName("ObjectUID");

                entity.Property(e => e.Subject).HasMaxLength(250);
            });

            modelBuilder.Entity<TempProceduresList>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("temp_procedures_list");

                entity.Property(e => e.CreateDate)
                    .HasColumnType("datetime")
                    .HasColumnName("create_date");

                entity.Property(e => e.Date1)
                    .HasColumnType("datetime")
                    .HasColumnName("date1");

                entity.Property(e => e.Date2)
                    .HasColumnType("datetime")
                    .HasColumnName("date2");

                entity.Property(e => e.IsAutoExecuted).HasColumnName("is_auto_executed");

                entity.Property(e => e.IsExecutionReplicated).HasColumnName("is_execution_replicated");

                entity.Property(e => e.IsMsShipped).HasColumnName("is_ms_shipped");

                entity.Property(e => e.IsPublished).HasColumnName("is_published");

                entity.Property(e => e.IsReplSerializableOnly).HasColumnName("is_repl_serializable_only");

                entity.Property(e => e.IsSchemaPublished).HasColumnName("is_schema_published");

                entity.Property(e => e.ModifyDate)
                    .HasColumnType("datetime")
                    .HasColumnName("modify_date");

                entity.Property(e => e.Name)
                    .HasMaxLength(128)
                    .HasColumnName("name");

                entity.Property(e => e.Namevalue)
                    .HasMaxLength(128)
                    .HasColumnName("namevalue");

                entity.Property(e => e.ObjectId).HasColumnName("object_id");

                entity.Property(e => e.ParentObjectId).HasColumnName("parent_object_id");

                entity.Property(e => e.PrincipalId).HasColumnName("principal_id");

                entity.Property(e => e.SchemaId).HasColumnName("schema_id");

                entity.Property(e => e.SkipsReplConstraints).HasColumnName("skips_repl_constraints");

                entity.Property(e => e.Source1)
                    .IsRequired()
                    .HasMaxLength(19)
                    .IsUnicode(false)
                    .HasColumnName("source1");

                entity.Property(e => e.Type)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasColumnName("type")
                    .IsFixedLength(true)
                    .UseCollation("Latin1_General_CI_AS_KS_WS");

                entity.Property(e => e.TypeDesc)
                    .HasMaxLength(60)
                    .HasColumnName("type_desc")
                    .UseCollation("Latin1_General_CI_AS_KS_WS");
            });

            modelBuilder.Entity<TempTableList>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("temp_table_list");

                entity.Property(e => e.CreateDate)
                    .HasColumnType("datetime")
                    .HasColumnName("create_date");

                entity.Property(e => e.Date1)
                    .HasColumnType("datetime")
                    .HasColumnName("date1");

                entity.Property(e => e.Date2)
                    .HasColumnType("datetime")
                    .HasColumnName("date2");

                entity.Property(e => e.FilestreamDataSpaceId).HasColumnName("filestream_data_space_id");

                entity.Property(e => e.HasReplicationFilter).HasColumnName("has_replication_filter");

                entity.Property(e => e.HasUncheckedAssemblyData).HasColumnName("has_unchecked_assembly_data");

                entity.Property(e => e.IsMergePublished).HasColumnName("is_merge_published");

                entity.Property(e => e.IsMsShipped).HasColumnName("is_ms_shipped");

                entity.Property(e => e.IsPublished).HasColumnName("is_published");

                entity.Property(e => e.IsReplicated).HasColumnName("is_replicated");

                entity.Property(e => e.IsSchemaPublished).HasColumnName("is_schema_published");

                entity.Property(e => e.IsSyncTranSubscribed).HasColumnName("is_sync_tran_subscribed");

                entity.Property(e => e.IsTrackedByCdc).HasColumnName("is_tracked_by_cdc");

                entity.Property(e => e.LargeValueTypesOutOfRow).HasColumnName("large_value_types_out_of_row");

                entity.Property(e => e.LobDataSpaceId).HasColumnName("lob_data_space_id");

                entity.Property(e => e.LockEscalation).HasColumnName("lock_escalation");

                entity.Property(e => e.LockEscalationDesc)
                    .HasMaxLength(60)
                    .HasColumnName("lock_escalation_desc")
                    .UseCollation("Latin1_General_CI_AS_KS_WS");

                entity.Property(e => e.LockOnBulkLoad).HasColumnName("lock_on_bulk_load");

                entity.Property(e => e.MaxColumnIdUsed).HasColumnName("max_column_id_used");

                entity.Property(e => e.ModifyDate)
                    .HasColumnType("datetime")
                    .HasColumnName("modify_date");

                entity.Property(e => e.Name)
                    .HasMaxLength(128)
                    .HasColumnName("name");

                entity.Property(e => e.Namevalue)
                    .HasMaxLength(128)
                    .HasColumnName("namevalue");

                entity.Property(e => e.ObjectId).HasColumnName("object_id");

                entity.Property(e => e.ParentObjectId).HasColumnName("parent_object_id");

                entity.Property(e => e.PrincipalId).HasColumnName("principal_id");

                entity.Property(e => e.SchemaId).HasColumnName("schema_id");

                entity.Property(e => e.Source1)
                    .IsRequired()
                    .HasMaxLength(19)
                    .IsUnicode(false)
                    .HasColumnName("source1");

                entity.Property(e => e.TextInRowLimit).HasColumnName("text_in_row_limit");

                entity.Property(e => e.Type)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasColumnName("type")
                    .IsFixedLength(true)
                    .UseCollation("Latin1_General_CI_AS_KS_WS");

                entity.Property(e => e.TypeDesc)
                    .HasMaxLength(60)
                    .HasColumnName("type_desc")
                    .UseCollation("Latin1_General_CI_AS_KS_WS");

                entity.Property(e => e.UsesAnsiNulls).HasColumnName("uses_ansi_nulls");
            });

            modelBuilder.Entity<TempTriggersList>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("temp_triggers_list");

                entity.Property(e => e.CreateDate)
                    .HasColumnType("datetime")
                    .HasColumnName("create_date");

                entity.Property(e => e.Date1)
                    .HasColumnType("datetime")
                    .HasColumnName("date1");

                entity.Property(e => e.Date2)
                    .HasColumnType("datetime")
                    .HasColumnName("date2");

                entity.Property(e => e.IsDisabled).HasColumnName("is_disabled");

                entity.Property(e => e.IsInsteadOfTrigger).HasColumnName("is_instead_of_trigger");

                entity.Property(e => e.IsMsShipped).HasColumnName("is_ms_shipped");

                entity.Property(e => e.IsNotForReplication).HasColumnName("is_not_for_replication");

                entity.Property(e => e.ModifyDate)
                    .HasColumnType("datetime")
                    .HasColumnName("modify_date");

                entity.Property(e => e.Name)
                    .HasMaxLength(128)
                    .HasColumnName("name");

                entity.Property(e => e.Namevalue)
                    .HasMaxLength(128)
                    .HasColumnName("namevalue");

                entity.Property(e => e.ObjectId).HasColumnName("object_id");

                entity.Property(e => e.ParentClass).HasColumnName("parent_class");

                entity.Property(e => e.ParentClassDesc)
                    .HasMaxLength(60)
                    .HasColumnName("parent_class_desc")
                    .UseCollation("Latin1_General_CI_AS_KS_WS");

                entity.Property(e => e.ParentId).HasColumnName("parent_id");

                entity.Property(e => e.Source1)
                    .IsRequired()
                    .HasMaxLength(19)
                    .IsUnicode(false)
                    .HasColumnName("source1");

                entity.Property(e => e.Type)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasColumnName("type")
                    .IsFixedLength(true)
                    .UseCollation("Latin1_General_CI_AS_KS_WS");

                entity.Property(e => e.TypeDesc)
                    .HasMaxLength(60)
                    .HasColumnName("type_desc")
                    .UseCollation("Latin1_General_CI_AS_KS_WS");
            });

            modelBuilder.Entity<TempViewList>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("temp_view_list");

                entity.Property(e => e.CreateDate)
                    .HasColumnType("datetime")
                    .HasColumnName("create_date");

                entity.Property(e => e.Date1)
                    .HasColumnType("datetime")
                    .HasColumnName("date1");

                entity.Property(e => e.Date2)
                    .HasColumnType("datetime")
                    .HasColumnName("date2");

                entity.Property(e => e.HasOpaqueMetadata).HasColumnName("has_opaque_metadata");

                entity.Property(e => e.HasReplicationFilter).HasColumnName("has_replication_filter");

                entity.Property(e => e.HasUncheckedAssemblyData).HasColumnName("has_unchecked_assembly_data");

                entity.Property(e => e.IsDateCorrelationView).HasColumnName("is_date_correlation_view");

                entity.Property(e => e.IsMsShipped).HasColumnName("is_ms_shipped");

                entity.Property(e => e.IsPublished).HasColumnName("is_published");

                entity.Property(e => e.IsReplicated).HasColumnName("is_replicated");

                entity.Property(e => e.IsSchemaPublished).HasColumnName("is_schema_published");

                entity.Property(e => e.IsTrackedByCdc).HasColumnName("is_tracked_by_cdc");

                entity.Property(e => e.ModifyDate)
                    .HasColumnType("datetime")
                    .HasColumnName("modify_date");

                entity.Property(e => e.Name)
                    .HasMaxLength(128)
                    .HasColumnName("name");

                entity.Property(e => e.Namevalue)
                    .HasMaxLength(128)
                    .HasColumnName("namevalue");

                entity.Property(e => e.ObjectId).HasColumnName("object_id");

                entity.Property(e => e.ParentObjectId).HasColumnName("parent_object_id");

                entity.Property(e => e.PrincipalId).HasColumnName("principal_id");

                entity.Property(e => e.SchemaId).HasColumnName("schema_id");

                entity.Property(e => e.Source1)
                    .IsRequired()
                    .HasMaxLength(19)
                    .IsUnicode(false)
                    .HasColumnName("source1");

                entity.Property(e => e.Type)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .HasColumnName("type")
                    .IsFixedLength(true)
                    .UseCollation("Latin1_General_CI_AS_KS_WS");

                entity.Property(e => e.TypeDesc)
                    .HasMaxLength(60)
                    .HasColumnName("type_desc")
                    .UseCollation("Latin1_General_CI_AS_KS_WS");

                entity.Property(e => e.WithCheckOption).HasColumnName("with_check_option");
            });

            modelBuilder.Entity<Tempdatabase>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tempdatabase");

                entity.Property(e => e.Test)
                    .IsRequired()
                    .HasMaxLength(4)
                    .IsUnicode(false)
                    .HasColumnName("test");
            });

            modelBuilder.Entity<Tempjam>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tempjam");

                entity.Property(e => e.Gl).HasColumnName("gl");

                entity.Property(e => e.Lrp)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("lrp");

                entity.Property(e => e.Refnbr)
                    .HasMaxLength(75)
                    .HasColumnName("refnbr");
            });

            modelBuilder.Entity<ToolTip>(entity =>
            {
                entity.HasKey(e => e.ObjectUid);

                entity.ToTable("ToolTip");

                entity.Property(e => e.ObjectUid)
                    .HasColumnName("ObjectUID")
                    .HasDefaultValueSql("(newid())");

                entity.Property(e => e.CreatedBy).HasMaxLength(50);

                entity.Property(e => e.CreatedOn)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Description).HasMaxLength(2000);

                entity.Property(e => e.Display)
                    .HasMaxLength(104)
                    .HasComputedColumnSql("(([TableName]+' -  ')+[FieldName])", false);

                entity.Property(e => e.FieldName)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.ImportedObjectUid)
                    .HasMaxLength(50)
                    .HasColumnName("ImportedObjectUID");

                entity.Property(e => e.InstallationUid).HasColumnName("InstallationUID");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasComputedColumnSql("([FieldName])", false);

                entity.Property(e => e.NameAlias).HasMaxLength(50);

                entity.Property(e => e.OldRecordId).HasColumnName("OldRecordID");

                entity.Property(e => e.RecordId)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("RecordID");

                entity.Property(e => e.SortOrder).HasDefaultValueSql("((100))");

                entity.Property(e => e.TableName).HasMaxLength(50);

                entity.Property(e => e.UpdatedBy).HasMaxLength(50);

                entity.Property(e => e.UpdatedOn).HasColumnType("datetime");
            });

            modelBuilder.Entity<ToolTipGrid>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ToolTipGrid");

                entity.Property(e => e.Description).HasMaxLength(2000);

                entity.Property(e => e.FieldName)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.ObjectUid).HasColumnName("ObjectUID");

                entity.Property(e => e.TableName).HasMaxLength(50);
            });

            modelBuilder.Entity<Translation>(entity =>
            {
                entity.HasKey(e => e.ObjectUid);

                entity.ToTable("Translation");

                entity.Property(e => e.ObjectUid)
                    .HasColumnName("ObjectUID")
                    .HasDefaultValueSql("(newid())");

                entity.Property(e => e.CreatedBy).HasMaxLength(50);

                entity.Property(e => e.CreatedOn)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Description).HasMaxLength(2000);

                entity.Property(e => e.Display)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasComputedColumnSql("([Name])", false);

                entity.Property(e => e.ImportedObjectUid)
                    .HasMaxLength(50)
                    .HasColumnName("ImportedObjectUID");

                entity.Property(e => e.InstallationUid).HasColumnName("InstallationUID");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.NameAlias)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.OldRecordId).HasColumnName("OldRecordID");

                entity.Property(e => e.RecordId)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("RecordID");

                entity.Property(e => e.SortOrder).HasDefaultValueSql("((100))");

                entity.Property(e => e.UpdatedBy).HasMaxLength(50);

                entity.Property(e => e.UpdatedOn).HasColumnType("datetime");
            });

            modelBuilder.Entity<UserAccount>(entity =>
            {
                entity.HasKey(e => e.ObjectUid);

                entity.ToTable("UserAccount");

                entity.Property(e => e.ObjectUid)
                    .HasColumnName("ObjectUID")
                    .HasDefaultValueSql("(newid())");

                entity.Property(e => e.AddressLineI).HasMaxLength(100);

                entity.Property(e => e.AddressLineIi)
                    .HasMaxLength(100)
                    .HasColumnName("AddressLineII");

                entity.Property(e => e.AddressLineIii)
                    .HasMaxLength(100)
                    .HasColumnName("AddressLineIII");

                entity.Property(e => e.City).HasMaxLength(40);

                entity.Property(e => e.ConfirmPassword)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.CountryId).HasColumnName("CountryID");

                entity.Property(e => e.CountryStateId).HasColumnName("Country_StateID");

                entity.Property(e => e.CreatedBy).HasMaxLength(50);

                entity.Property(e => e.CreatedOn)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DefaultPageSize).HasDefaultValueSql("((10))");

                entity.Property(e => e.Description).HasMaxLength(2000);

                entity.Property(e => e.Display)
                    .IsRequired()
                    .HasMaxLength(100)
                    .HasComputedColumnSql("([Name])", false);

                entity.Property(e => e.Email).HasMaxLength(100);

                entity.Property(e => e.ImportedObjectUid)
                    .HasMaxLength(50)
                    .HasColumnName("ImportedObjectUID");

                entity.Property(e => e.InitialRoleId).HasColumnName("Initial_RoleID");

                entity.Property(e => e.InstallationUid).HasColumnName("InstallationUID");

                entity.Property(e => e.LocalisationId).HasColumnName("LocalisationID");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.NameAlias)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.OldRecordId).HasColumnName("OldRecordID");

                entity.Property(e => e.Password)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.PasswordExpirationDate).HasColumnType("datetime");

                entity.Property(e => e.Phone).HasMaxLength(40);

                entity.Property(e => e.PostalCode).HasMaxLength(20);

                entity.Property(e => e.RecordId)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("RecordID");

                entity.Property(e => e.SortOrder).HasDefaultValueSql("((100))");

                entity.Property(e => e.StartupMenuId).HasColumnName("Startup_MenuID");

                entity.Property(e => e.UpdatedBy).HasMaxLength(50);

                entity.Property(e => e.UpdatedOn).HasColumnType("datetime");

                entity.Property(e => e.Username)
                    .IsRequired()
                    .HasMaxLength(20);

                entity.HasOne(d => d.Country)
                    .WithMany(p => p.UserAccounts)
                    .HasForeignKey(d => d.CountryId)
                    .HasConstraintName("FK_UserAccount_Country");

                entity.HasOne(d => d.CountryState)
                    .WithMany(p => p.UserAccounts)
                    .HasForeignKey(d => d.CountryStateId)
                    .HasConstraintName("FK_UserAccount_Country_StateID_Country_State");

                entity.HasOne(d => d.InitialRole)
                    .WithMany(p => p.UserAccounts)
                    .HasForeignKey(d => d.InitialRoleId)
                    .HasConstraintName("FK_UserAccount_Initial_RoleID_Role");

                entity.HasOne(d => d.Localisation)
                    .WithMany(p => p.UserAccounts)
                    .HasForeignKey(d => d.LocalisationId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_UserAccount_Localisation");

                entity.HasOne(d => d.StartupMenu)
                    .WithMany(p => p.UserAccounts)
                    .HasForeignKey(d => d.StartupMenuId)
                    .HasConstraintName("FK_UserAccount_Startup_MenuID_Menu");
            });

            modelBuilder.Entity<UserAccountBdgcompany>(entity =>
            {
                entity.HasKey(e => e.ObjectUid);

                entity.ToTable("UserAccount_BDGCompany");

                entity.Property(e => e.ObjectUid)
                    .HasColumnName("ObjectUID")
                    .HasDefaultValueSql("(newid())");

                entity.Property(e => e.BdgcompanyId).HasColumnName("BDGCompanyID");

                entity.Property(e => e.CreatedBy).HasMaxLength(50);

                entity.Property(e => e.CreatedOn)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Description).HasMaxLength(2000);

                entity.Property(e => e.Display)
                    .HasMaxLength(50)
                    .HasComputedColumnSql("([Name])", false);

                entity.Property(e => e.ImportedObjectUid)
                    .HasMaxLength(50)
                    .HasColumnName("ImportedObjectUID");

                entity.Property(e => e.InstallationUid).HasColumnName("InstallationUID");

                entity.Property(e => e.Name).HasMaxLength(50);

                entity.Property(e => e.NameAlias).HasMaxLength(50);

                entity.Property(e => e.OldRecordId).HasColumnName("OldRecordID");

                entity.Property(e => e.RecordId)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("RecordID");

                entity.Property(e => e.SortOrder).HasDefaultValueSql("((100))");

                entity.Property(e => e.UpdatedBy).HasMaxLength(50);

                entity.Property(e => e.UpdatedOn).HasColumnType("datetime");

                entity.Property(e => e.UserAccountId).HasColumnName("UserAccountID");

                entity.HasOne(d => d.Bdgcompany)
                    .WithMany(p => p.UserAccountBdgcompanies)
                    .HasForeignKey(d => d.BdgcompanyId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_UserAccount_BDGCompany_BDGCompanyID_BDGCompany");

                entity.HasOne(d => d.UserAccount)
                    .WithMany(p => p.UserAccountBdgcompanies)
                    .HasForeignKey(d => d.UserAccountId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_UserAccount_BDGCompany_UserAccountID_UserAccount");
            });

            modelBuilder.Entity<UserAccountBdgcompanyGrid>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("UserAccount_BDGCompanyGrid");

                entity.Property(e => e.Bdgcompany)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnName("BDGCompany");

                entity.Property(e => e.ObjectUid).HasColumnName("ObjectUID");

                entity.Property(e => e.UserAccountId).HasColumnName("UserAccountID");
            });

            modelBuilder.Entity<UserAccountBdgdepartment>(entity =>
            {
                entity.HasKey(e => e.ObjectUid);

                entity.ToTable("UserAccount_BDGDepartment");

                entity.Property(e => e.ObjectUid)
                    .HasColumnName("ObjectUID")
                    .HasDefaultValueSql("(newid())");

                entity.Property(e => e.BdgdepartmentId).HasColumnName("BDGDepartmentID");

                entity.Property(e => e.CreatedBy).HasMaxLength(50);

                entity.Property(e => e.CreatedOn)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Description).HasMaxLength(2000);

                entity.Property(e => e.Display)
                    .HasMaxLength(50)
                    .HasComputedColumnSql("([Name])", false);

                entity.Property(e => e.ImportedObjectUid)
                    .HasMaxLength(50)
                    .HasColumnName("ImportedObjectUID");

                entity.Property(e => e.InstallationUid).HasColumnName("InstallationUID");

                entity.Property(e => e.Name).HasMaxLength(50);

                entity.Property(e => e.NameAlias).HasMaxLength(50);

                entity.Property(e => e.OldRecordId).HasColumnName("OldRecordID");

                entity.Property(e => e.RecordId)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("RecordID");

                entity.Property(e => e.SortOrder).HasDefaultValueSql("((100))");

                entity.Property(e => e.UpdatedBy).HasMaxLength(50);

                entity.Property(e => e.UpdatedOn).HasColumnType("datetime");

                entity.Property(e => e.UserAccountId).HasColumnName("UserAccountID");

                entity.HasOne(d => d.Bdgdepartment)
                    .WithMany(p => p.UserAccountBdgdepartments)
                    .HasForeignKey(d => d.BdgdepartmentId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_UserAccount_BDGDepartment_BDGDepartmentID_BDGDepartment");

                entity.HasOne(d => d.UserAccount)
                    .WithMany(p => p.UserAccountBdgdepartments)
                    .HasForeignKey(d => d.UserAccountId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_UserAccount_BDGDepartment_UserAccountID_UserAccount");
            });

            modelBuilder.Entity<UserAccountBdgdepartmentGrid>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("UserAccount_BDGDepartmentGrid");

                entity.Property(e => e.Department)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Number).HasMaxLength(50);

                entity.Property(e => e.ObjectUid).HasColumnName("ObjectUID");

                entity.Property(e => e.UserAccountId).HasColumnName("UserAccountID");
            });

            modelBuilder.Entity<UserAccountBdgreport>(entity =>
            {
                entity.HasKey(e => e.ObjectUid);

                entity.ToTable("UserAccount_BDGReport");

                entity.Property(e => e.ObjectUid)
                    .HasColumnName("ObjectUID")
                    .HasDefaultValueSql("(newid())");

                entity.Property(e => e.BdgreportId).HasColumnName("BDGReportID");

                entity.Property(e => e.CreatedBy).HasMaxLength(50);

                entity.Property(e => e.CreatedOn)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Description).HasMaxLength(2000);

                entity.Property(e => e.Display)
                    .HasMaxLength(50)
                    .HasComputedColumnSql("([Name])", false);

                entity.Property(e => e.ImportedObjectUid)
                    .HasMaxLength(50)
                    .HasColumnName("ImportedObjectUID");

                entity.Property(e => e.InstallationUid).HasColumnName("InstallationUID");

                entity.Property(e => e.Name).HasMaxLength(50);

                entity.Property(e => e.NameAlias).HasMaxLength(50);

                entity.Property(e => e.OldRecordId).HasColumnName("OldRecordID");

                entity.Property(e => e.RecordId)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("RecordID");

                entity.Property(e => e.SortOrder).HasDefaultValueSql("((100))");

                entity.Property(e => e.UpdatedBy).HasMaxLength(50);

                entity.Property(e => e.UpdatedOn).HasColumnType("datetime");

                entity.Property(e => e.UserAccountId).HasColumnName("UserAccountID");

                entity.HasOne(d => d.Bdgreport)
                    .WithMany(p => p.UserAccountBdgreports)
                    .HasForeignKey(d => d.BdgreportId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_UserAccount_BDGReport_BDGReportID_BDGReport");

                entity.HasOne(d => d.UserAccount)
                    .WithMany(p => p.UserAccountBdgreports)
                    .HasForeignKey(d => d.UserAccountId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_UserAccount_BDGReport_UserAccountID_UserAccount");
            });

            modelBuilder.Entity<UserAccountBdgreportGrid>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("UserAccount_BDGReportGrid");

                entity.Property(e => e.Bdgreport)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnName("BDGReport");

                entity.Property(e => e.ObjectUid).HasColumnName("ObjectUID");

                entity.Property(e => e.UserAccountId).HasColumnName("UserAccountID");
            });

            modelBuilder.Entity<UserAccountBookmark>(entity =>
            {
                entity.HasKey(e => e.ObjectUid);

                entity.ToTable("UserAccount_Bookmark");

                entity.Property(e => e.ObjectUid)
                    .HasColumnName("ObjectUID")
                    .HasDefaultValueSql("(newid())");

                entity.Property(e => e.CreatedBy).HasMaxLength(50);

                entity.Property(e => e.CreatedOn)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Description).HasMaxLength(2000);

                entity.Property(e => e.Display)
                    .IsRequired()
                    .HasMaxLength(100)
                    .HasComputedColumnSql("([Name])", false);

                entity.Property(e => e.ImportedObjectUid)
                    .HasMaxLength(50)
                    .HasColumnName("ImportedObjectUID");

                entity.Property(e => e.InstallationUid).HasColumnName("InstallationUID");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.NameAlias)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.OldRecordId).HasColumnName("OldRecordID");

                entity.Property(e => e.PageLink).HasMaxLength(250);

                entity.Property(e => e.RecordId)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("RecordID");

                entity.Property(e => e.Sequence).HasDefaultValueSql("((100))");

                entity.Property(e => e.UpdatedBy).HasMaxLength(50);

                entity.Property(e => e.UpdatedOn).HasColumnType("datetime");

                entity.Property(e => e.UserAccountId).HasColumnName("UserAccountID");

                entity.HasOne(d => d.UserAccount)
                    .WithMany(p => p.UserAccountBookmarks)
                    .HasForeignKey(d => d.UserAccountId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_UserAccount_Bookmark_UserAccount");
            });

            modelBuilder.Entity<UserAccountBookmarkGrid>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("UserAccount_BookmarkGrid");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.ObjectUid).HasColumnName("ObjectUID");

                entity.Property(e => e.PageLink).HasMaxLength(250);

                entity.Property(e => e.UserAccountId).HasColumnName("UserAccountID");
            });

            modelBuilder.Entity<UserAccountFeccompany>(entity =>
            {
                entity.HasKey(e => e.ObjectUid);

                entity.ToTable("UserAccount_FECCompany");

                entity.Property(e => e.ObjectUid)
                    .HasColumnName("ObjectUID")
                    .HasDefaultValueSql("(newid())");

                entity.Property(e => e.CreatedBy).HasMaxLength(50);

                entity.Property(e => e.CreatedOn)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Description).HasMaxLength(2000);

                entity.Property(e => e.Display)
                    .HasMaxLength(50)
                    .HasComputedColumnSql("([Name])", false);

                entity.Property(e => e.FeccompanyId).HasColumnName("FECCompanyID");

                entity.Property(e => e.ImportedObjectUid)
                    .HasMaxLength(50)
                    .HasColumnName("ImportedObjectUID");

                entity.Property(e => e.InstallationUid).HasColumnName("InstallationUID");

                entity.Property(e => e.Name).HasMaxLength(50);

                entity.Property(e => e.NameAlias).HasMaxLength(50);

                entity.Property(e => e.OldRecordId).HasColumnName("OldRecordID");

                entity.Property(e => e.RecordId)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("RecordID");

                entity.Property(e => e.SortOrder).HasDefaultValueSql("((100))");

                entity.Property(e => e.UpdatedBy).HasMaxLength(50);

                entity.Property(e => e.UpdatedOn).HasColumnType("datetime");

                entity.Property(e => e.UserAccountId).HasColumnName("UserAccountID");

                entity.HasOne(d => d.Feccompany)
                    .WithMany(p => p.UserAccountFeccompanies)
                    .HasForeignKey(d => d.FeccompanyId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_UserAccount_FECCompany_FECCompanyID_FECCompany");

                entity.HasOne(d => d.UserAccount)
                    .WithMany(p => p.UserAccountFeccompanies)
                    .HasForeignKey(d => d.UserAccountId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_UserAccount_FECCompany_UserAccountID_UserAccount");
            });

            modelBuilder.Entity<UserAccountFeccompanyGrid>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("UserAccount_FECCompanyGrid");

                entity.Property(e => e.Feccompany)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnName("FECCompany");

                entity.Property(e => e.ObjectUid).HasColumnName("ObjectUID");

                entity.Property(e => e.UserAccountId).HasColumnName("UserAccountID");
            });

            modelBuilder.Entity<UserAccountFeclocalUnion>(entity =>
            {
                entity.HasKey(e => e.ObjectUid);

                entity.ToTable("UserAccount_FECLocalUnion");

                entity.Property(e => e.ObjectUid)
                    .HasColumnName("ObjectUID")
                    .HasDefaultValueSql("(newid())");

                entity.Property(e => e.CreatedBy).HasMaxLength(50);

                entity.Property(e => e.CreatedOn)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Description).HasMaxLength(2000);

                entity.Property(e => e.Display)
                    .HasMaxLength(50)
                    .HasComputedColumnSql("([Name])", false);

                entity.Property(e => e.FeclocalUnionId).HasColumnName("FECLocalUnionID");

                entity.Property(e => e.ImportedObjectUid)
                    .HasMaxLength(50)
                    .HasColumnName("ImportedObjectUID");

                entity.Property(e => e.InstallationUid).HasColumnName("InstallationUID");

                entity.Property(e => e.Name).HasMaxLength(50);

                entity.Property(e => e.NameAlias).HasMaxLength(50);

                entity.Property(e => e.OldRecordId).HasColumnName("OldRecordID");

                entity.Property(e => e.RecordId)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("RecordID");

                entity.Property(e => e.SortOrder).HasDefaultValueSql("((100))");

                entity.Property(e => e.UpdatedBy).HasMaxLength(50);

                entity.Property(e => e.UpdatedOn).HasColumnType("datetime");

                entity.Property(e => e.UserAccountId).HasColumnName("UserAccountID");

                entity.HasOne(d => d.FeclocalUnion)
                    .WithMany(p => p.UserAccountFeclocalUnions)
                    .HasForeignKey(d => d.FeclocalUnionId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_UserAccount_FECLocalUnion_FECLocalUnionID_FECLocalUnion");

                entity.HasOne(d => d.UserAccount)
                    .WithMany(p => p.UserAccountFeclocalUnions)
                    .HasForeignKey(d => d.UserAccountId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_UserAccount_FECLocalUnion_UserAccountID_UserAccount");
            });

            modelBuilder.Entity<UserAccountFeclocalUnionGrid>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("UserAccount_FECLocalUnionGrid");

                entity.Property(e => e.FeclocalUnion)
                    .IsRequired()
                    .HasMaxLength(10)
                    .HasColumnName("FECLocalUnion");

                entity.Property(e => e.ObjectUid).HasColumnName("ObjectUID");

                entity.Property(e => e.UserAccountId).HasColumnName("UserAccountID");
            });

            modelBuilder.Entity<UserAccountGrid>(entity =>
            {
                entity.HasKey(e => e.ObjectUid);

                entity.ToTable("UserAccount_Grid");

                entity.Property(e => e.ObjectUid)
                    .HasColumnName("ObjectUID")
                    .HasDefaultValueSql("(newid())");

                entity.Property(e => e.CreatedBy).HasMaxLength(50);

                entity.Property(e => e.CreatedOn)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Display)
                    .HasMaxLength(100)
                    .HasComputedColumnSql("([Name])", false);

                entity.Property(e => e.ImportedObjectUid)
                    .HasMaxLength(50)
                    .HasColumnName("ImportedObjectUID");

                entity.Property(e => e.InstallationUid).HasColumnName("InstallationUID");

                entity.Property(e => e.Name).HasMaxLength(100);

                entity.Property(e => e.NameAlias).HasMaxLength(100);

                entity.Property(e => e.OldRecordId).HasColumnName("OldRecordID");

                entity.Property(e => e.PageLink).HasMaxLength(200);

                entity.Property(e => e.RecordId)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("RecordID");

                entity.Property(e => e.SortOrder).HasDefaultValueSql("((100))");

                entity.Property(e => e.UpdatedBy).HasMaxLength(50);

                entity.Property(e => e.UpdatedOn).HasColumnType("datetime");

                entity.Property(e => e.UserAccountId).HasColumnName("UserAccountID");

                entity.HasOne(d => d.UserAccount)
                    .WithMany(p => p.UserAccountGrids)
                    .HasForeignKey(d => d.UserAccountId)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("FK_UserAccount_Grid_UserAccount");
            });

            modelBuilder.Entity<UserAccountGrid03282018>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("UserAccount_Grid_03282018");

                entity.Property(e => e.CreatedBy).HasMaxLength(50);

                entity.Property(e => e.CreatedOn).HasColumnType("datetime");

                entity.Property(e => e.Display).HasMaxLength(100);

                entity.Property(e => e.ImportedObjectUid)
                    .HasMaxLength(50)
                    .HasColumnName("ImportedObjectUID");

                entity.Property(e => e.InstallationUid).HasColumnName("InstallationUID");

                entity.Property(e => e.Name).HasMaxLength(100);

                entity.Property(e => e.NameAlias).HasMaxLength(100);

                entity.Property(e => e.ObjectUid).HasColumnName("ObjectUID");

                entity.Property(e => e.OldRecordId).HasColumnName("OldRecordID");

                entity.Property(e => e.PageLink).HasMaxLength(200);

                entity.Property(e => e.RecordId)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("RecordID");

                entity.Property(e => e.UpdatedBy).HasMaxLength(50);

                entity.Property(e => e.UpdatedOn).HasColumnType("datetime");

                entity.Property(e => e.UserAccountId).HasColumnName("UserAccountID");
            });

            modelBuilder.Entity<UserAccountGrid1>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("UserAccountGrid");

                entity.Property(e => e.Address).HasMaxLength(100);

                entity.Property(e => e.City).HasMaxLength(40);

                entity.Property(e => e.Country).HasMaxLength(50);

                entity.Property(e => e.Email).HasMaxLength(100);

                entity.Property(e => e.InitialRole).HasMaxLength(50);

                entity.Property(e => e.Localisation)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.ObjectUid).HasColumnName("ObjectUID");

                entity.Property(e => e.PasswordExpirationDate).HasColumnType("datetime");

                entity.Property(e => e.Phone).HasMaxLength(40);

                entity.Property(e => e.PostalCode).HasMaxLength(20);

                entity.Property(e => e.StartUpMenu).HasMaxLength(50);

                entity.Property(e => e.State).HasMaxLength(50);

                entity.Property(e => e.Username)
                    .IsRequired()
                    .HasMaxLength(20);
            });

            modelBuilder.Entity<UserAccountGridCore>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("UserAccount_Grid_core");

                entity.Property(e => e.CreatedBy).HasMaxLength(50);

                entity.Property(e => e.CreatedOn).HasColumnType("datetime");

                entity.Property(e => e.Display).HasMaxLength(100);

                entity.Property(e => e.ImportedObjectUid)
                    .HasMaxLength(50)
                    .HasColumnName("ImportedObjectUID");

                entity.Property(e => e.InstallationUid).HasColumnName("InstallationUID");

                entity.Property(e => e.Name).HasMaxLength(100);

                entity.Property(e => e.NameAlias).HasMaxLength(100);

                entity.Property(e => e.ObjectUid).HasColumnName("ObjectUID");

                entity.Property(e => e.OldRecordId).HasColumnName("OldRecordID");

                entity.Property(e => e.PageLink).HasMaxLength(200);

                entity.Property(e => e.RecordId)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("RecordID");

                entity.Property(e => e.UpdatedBy).HasMaxLength(50);

                entity.Property(e => e.UpdatedOn).HasColumnType("datetime");

                entity.Property(e => e.UserAccountId).HasColumnName("UserAccountID");
            });

            modelBuilder.Entity<UserAccountLrpcompany>(entity =>
            {
                entity.HasKey(e => e.ObjectUid);

                entity.ToTable("UserAccount_LRPCompany");

                entity.Property(e => e.ObjectUid)
                    .HasColumnName("ObjectUID")
                    .HasDefaultValueSql("(newid())");

                entity.Property(e => e.CreatedBy).HasMaxLength(50);

                entity.Property(e => e.CreatedOn)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Description).HasMaxLength(2000);

                entity.Property(e => e.Display)
                    .HasMaxLength(50)
                    .HasComputedColumnSql("([Name])", false);

                entity.Property(e => e.ImportedObjectUid)
                    .HasMaxLength(50)
                    .HasColumnName("ImportedObjectUID");

                entity.Property(e => e.InstallationUid).HasColumnName("InstallationUID");

                entity.Property(e => e.LrpcompanyId).HasColumnName("LRPCompanyID");

                entity.Property(e => e.Name).HasMaxLength(50);

                entity.Property(e => e.NameAlias).HasMaxLength(50);

                entity.Property(e => e.OldRecordId).HasColumnName("OldRecordID");

                entity.Property(e => e.RecordId)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("RecordID");

                entity.Property(e => e.SortOrder).HasDefaultValueSql("((100))");

                entity.Property(e => e.UpdatedBy).HasMaxLength(50);

                entity.Property(e => e.UpdatedOn).HasColumnType("datetime");

                entity.Property(e => e.UserAccountId).HasColumnName("UserAccountID");

                entity.HasOne(d => d.Lrpcompany)
                    .WithMany(p => p.UserAccountLrpcompanies)
                    .HasForeignKey(d => d.LrpcompanyId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_UserAccount_LRPCompany_LRPCompanyID_LRPCompany");

                entity.HasOne(d => d.UserAccount)
                    .WithMany(p => p.UserAccountLrpcompanies)
                    .HasForeignKey(d => d.UserAccountId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_UserAccount_LRPCompany_UserAccountID_UserAccount");
            });

            modelBuilder.Entity<UserAccountLrpcompanyGrid>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("UserAccount_LRPCompanyGrid");

                entity.Property(e => e.Lrpcompany)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnName("LRPCompany");

                entity.Property(e => e.ObjectUid).HasColumnName("ObjectUID");

                entity.Property(e => e.UserAccountId).HasColumnName("UserAccountID");
            });

            modelBuilder.Entity<UserAccountMenuList>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("UserAccount_MenuList");

                entity.Property(e => e.Display)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.MenuIconLink).HasMaxLength(250);

                entity.Property(e => e.MenuId).HasColumnName("MenuID");

                entity.Property(e => e.MenuLink).HasMaxLength(250);

                entity.Property(e => e.MenuName)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.ModuleId).HasColumnName("ModuleID");

                entity.Property(e => e.ParentMenuId).HasColumnName("Parent_MenuID");

                entity.Property(e => e.Portal)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.UserAccountId).HasColumnName("UserAccountID");
            });

            modelBuilder.Entity<UserAccountModule>(entity =>
            {
                entity.HasKey(e => e.ObjectUid);

                entity.ToTable("UserAccount_Module");

                entity.Property(e => e.ObjectUid)
                    .HasColumnName("ObjectUID")
                    .HasDefaultValueSql("(newid())");

                entity.Property(e => e.CreatedBy).HasMaxLength(50);

                entity.Property(e => e.CreatedOn)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Description).HasMaxLength(2000);

                entity.Property(e => e.Display)
                    .HasMaxLength(50)
                    .HasComputedColumnSql("([dbo].[GetModuleName]([ModuleID]))", false);

                entity.Property(e => e.ImportedObjectUid)
                    .HasMaxLength(50)
                    .HasColumnName("ImportedObjectUID");

                entity.Property(e => e.InstallationUid).HasColumnName("InstallationUID");

                entity.Property(e => e.ModuleId).HasColumnName("ModuleID");

                entity.Property(e => e.Name).HasMaxLength(50);

                entity.Property(e => e.NameAlias).HasMaxLength(50);

                entity.Property(e => e.OldRecordId).HasColumnName("OldRecordID");

                entity.Property(e => e.RecordId)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("RecordID");

                entity.Property(e => e.SortOrder).HasDefaultValueSql("((100))");

                entity.Property(e => e.TableCsv).HasColumnName("TableCSV");

                entity.Property(e => e.TablePdf).HasColumnName("TablePDF");

                entity.Property(e => e.UpdatedBy).HasMaxLength(50);

                entity.Property(e => e.UpdatedOn).HasColumnType("datetime");

                entity.Property(e => e.UserAccountId).HasColumnName("UserAccountID");

                entity.HasOne(d => d.Module)
                    .WithMany(p => p.UserAccountModules)
                    .HasForeignKey(d => d.ModuleId)
                    .HasConstraintName("FK_UserAccount_Module_Module");

                entity.HasOne(d => d.UserAccount)
                    .WithMany(p => p.UserAccountModules)
                    .HasForeignKey(d => d.UserAccountId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_UserAccount_Module_UserAccount");
            });

            modelBuilder.Entity<UserAccountModuleGrid>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("UserAccount_ModuleGrid");

                entity.Property(e => e.Module)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.ObjectUid).HasColumnName("ObjectUID");

                entity.Property(e => e.TableCsv).HasColumnName("TableCSV");

                entity.Property(e => e.TablePdf).HasColumnName("TablePDF");

                entity.Property(e => e.UserAccountId).HasColumnName("UserAccountID");
            });

            modelBuilder.Entity<UserAccountModuleList>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("UserAccount_ModuleList");

                entity.Property(e => e.ModuleId).HasColumnName("ModuleID");

                entity.Property(e => e.UserAccountId).HasColumnName("UserAccountID");
            });

            modelBuilder.Entity<UserAccountNotificationType>(entity =>
            {
                entity.HasKey(e => e.ObjectUid);

                entity.ToTable("UserAccount_NotificationType");

                entity.Property(e => e.ObjectUid)
                    .HasColumnName("ObjectUID")
                    .HasDefaultValueSql("(newid())");

                entity.Property(e => e.CreatedBy).HasMaxLength(50);

                entity.Property(e => e.CreatedOn)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Description).HasMaxLength(2000);

                entity.Property(e => e.Display)
                    .HasMaxLength(50)
                    .HasComputedColumnSql("([dbo].[GetNotificationTypeName]([NotificationTypeID]))", false);

                entity.Property(e => e.ImportedObjectUid)
                    .HasMaxLength(50)
                    .HasColumnName("ImportedObjectUID");

                entity.Property(e => e.InstallationUid).HasColumnName("InstallationUID");

                entity.Property(e => e.Name).HasMaxLength(50);

                entity.Property(e => e.NameAlias).HasMaxLength(50);

                entity.Property(e => e.NotificationTypeId).HasColumnName("NotificationTypeID");

                entity.Property(e => e.OldRecordId).HasColumnName("OldRecordID");

                entity.Property(e => e.RecordId)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("RecordID");

                entity.Property(e => e.SortOrder).HasDefaultValueSql("((100))");

                entity.Property(e => e.UpdatedBy).HasMaxLength(50);

                entity.Property(e => e.UpdatedOn).HasColumnType("datetime");

                entity.Property(e => e.UserAccountId).HasColumnName("UserAccountID");

                entity.HasOne(d => d.NotificationType)
                    .WithMany(p => p.UserAccountNotificationTypes)
                    .HasForeignKey(d => d.NotificationTypeId)
                    .HasConstraintName("FK_UserAccount_NotificationType_NotificationType");

                entity.HasOne(d => d.UserAccount)
                    .WithMany(p => p.UserAccountNotificationTypes)
                    .HasForeignKey(d => d.UserAccountId)
                    .HasConstraintName("FK_UserAccount_NotificationType_UserAccount");
            });

            modelBuilder.Entity<UserAccountNotificationTypeGrid>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("UserAccount_NotificationTypeGrid");

                entity.Property(e => e.NotificationType)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.ObjectUid).HasColumnName("ObjectUID");

                entity.Property(e => e.UserAccountId).HasColumnName("UserAccountID");
            });

            modelBuilder.Entity<UserAccountPasswordList>(entity =>
            {
                entity.HasKey(e => e.ObjectUid);

                entity.ToTable("UserAccount_PasswordList");

                entity.Property(e => e.ObjectUid)
                    .HasColumnName("ObjectUID")
                    .HasDefaultValueSql("(newid())");

                entity.Property(e => e.CreatedBy).HasMaxLength(50);

                entity.Property(e => e.CreatedOn)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Description).HasMaxLength(250);

                entity.Property(e => e.Display)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasComputedColumnSql("([Name])", false);

                entity.Property(e => e.ImportedObjectUid)
                    .HasMaxLength(50)
                    .HasColumnName("ImportedObjectUID");

                entity.Property(e => e.InstallationUid).HasColumnName("InstallationUID");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.NameAlias)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.OldRecordId).HasColumnName("OldRecordID");

                entity.Property(e => e.RecordId)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("RecordID");

                entity.Property(e => e.SortOrder).HasDefaultValueSql("((100))");

                entity.Property(e => e.UpdatedBy).HasMaxLength(50);

                entity.Property(e => e.UpdatedOn).HasColumnType("datetime");

                entity.Property(e => e.UserAccountId).HasColumnName("UserAccountID");

                entity.HasOne(d => d.UserAccount)
                    .WithMany(p => p.UserAccountPasswordLists)
                    .HasForeignKey(d => d.UserAccountId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_UserAccount_PasswordList_UserAccount");
            });

            modelBuilder.Entity<UserAccountRole>(entity =>
            {
                entity.HasKey(e => e.ObjectUid);

                entity.ToTable("UserAccount_Role");

                entity.Property(e => e.ObjectUid)
                    .HasColumnName("ObjectUID")
                    .HasDefaultValueSql("(newid())");

                entity.Property(e => e.CreatedBy).HasMaxLength(50);

                entity.Property(e => e.CreatedOn)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Description).HasMaxLength(2000);

                entity.Property(e => e.Display)
                    .HasMaxLength(50)
                    .HasComputedColumnSql("([dbo].[GetRoleName]([RoleID]))", false);

                entity.Property(e => e.ImportedObjectUid)
                    .HasMaxLength(50)
                    .HasColumnName("ImportedObjectUID");

                entity.Property(e => e.InstallationUid).HasColumnName("InstallationUID");

                entity.Property(e => e.Name).HasMaxLength(50);

                entity.Property(e => e.NameAlias).HasMaxLength(50);

                entity.Property(e => e.OldRecordId).HasColumnName("OldRecordID");

                entity.Property(e => e.RecordId)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("RecordID");

                entity.Property(e => e.RoleId).HasColumnName("RoleID");

                entity.Property(e => e.SortOrder).HasDefaultValueSql("((100))");

                entity.Property(e => e.UpdatedBy).HasMaxLength(50);

                entity.Property(e => e.UpdatedOn).HasColumnType("datetime");

                entity.Property(e => e.UserAccountId).HasColumnName("UserAccountID");

                entity.HasOne(d => d.Role)
                    .WithMany(p => p.UserAccountRoles)
                    .HasForeignKey(d => d.RoleId)
                    .HasConstraintName("FK_UserAccount_Role_Role");

                entity.HasOne(d => d.UserAccount)
                    .WithMany(p => p.UserAccountRoles)
                    .HasForeignKey(d => d.UserAccountId)
                    .HasConstraintName("FK_UserAccount_Role_UserAccount");
            });

            modelBuilder.Entity<UserAccountRoleGrid>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("UserAccount_RoleGrid");

                entity.Property(e => e.ObjectUid).HasColumnName("ObjectUID");

                entity.Property(e => e.Role)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.UserAccountId).HasColumnName("UserAccountID");
            });

            modelBuilder.Entity<UserAccountRolePermissionList>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("UserAccount_RolePermissionList");

                entity.Property(e => e.ModuleId).HasColumnName("ModuleID");

                entity.Property(e => e.TableCsv).HasColumnName("TableCSV");

                entity.Property(e => e.TablePdf).HasColumnName("TablePDF");

                entity.Property(e => e.UserAccountId).HasColumnName("UserAccountID");
            });

            modelBuilder.Entity<UserAccountTabList>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("UserAccount_TabList");

                entity.Property(e => e.ControlPageId).HasColumnName("Control_PageID");

                entity.Property(e => e.HeaderControlPageId).HasColumnName("HeaderControl_PageID");

                entity.Property(e => e.ModuleId).HasColumnName("ModuleID");

                entity.Property(e => e.PageId).HasColumnName("PageID");

                entity.Property(e => e.PageTabId).HasColumnName("PageTabID");

                entity.Property(e => e.PageTabName)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.UserAccountId).HasColumnName("UserAccountID");
            });

            modelBuilder.Entity<UseraccountGridTemp>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("useraccount_grid_temp");

                entity.Property(e => e.Description).HasColumnName("description");
            });

            modelBuilder.Entity<Validation>(entity =>
            {
                entity.HasKey(e => e.ObjectUid);

                entity.ToTable("Validation");

                entity.Property(e => e.ObjectUid)
                    .HasColumnName("ObjectUID")
                    .HasDefaultValueSql("(newid())");

                entity.Property(e => e.ControlName)
                    .IsRequired()
                    .HasMaxLength(250);

                entity.Property(e => e.CreatedBy).HasMaxLength(50);

                entity.Property(e => e.CreatedOn)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Description).HasMaxLength(2000);

                entity.Property(e => e.Display)
                    .IsRequired()
                    .HasMaxLength(550)
                    .HasComputedColumnSql("([Name])", false);

                entity.Property(e => e.ImportedObjectUid)
                    .HasMaxLength(50)
                    .HasColumnName("ImportedObjectUID");

                entity.Property(e => e.InstallationUid).HasColumnName("InstallationUID");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(550);

                entity.Property(e => e.NameAlias)
                    .IsRequired()
                    .HasMaxLength(550);

                entity.Property(e => e.OldRecordId).HasColumnName("OldRecordID");

                entity.Property(e => e.Operator)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.RecordId)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("RecordID");

                entity.Property(e => e.SortOrder).HasDefaultValueSql("((100))");

                entity.Property(e => e.TableName).HasMaxLength(250);

                entity.Property(e => e.UpdatedBy).HasMaxLength(50);

                entity.Property(e => e.UpdatedOn).HasColumnType("datetime");
            });

            modelBuilder.Entity<ValidationGrid>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ValidationGrid");

                entity.Property(e => e.ControlName)
                    .IsRequired()
                    .HasMaxLength(250);

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(550);

                entity.Property(e => e.ObjectUid).HasColumnName("ObjectUID");

                entity.Property(e => e.Operator)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.TableName).HasMaxLength(250);
            });

            modelBuilder.Entity<VendorVoucherCreate>(entity =>
            {
                entity.HasKey(e => e.ObjectUid);

                entity.ToTable("Vendor_Voucher_Create");

                entity.Property(e => e.ObjectUid)
                    .HasColumnName("ObjectUID")
                    .HasDefaultValueSql("(newid())");

                entity.Property(e => e.Company).HasMaxLength(50);

                entity.Property(e => e.CreatedBy).HasMaxLength(50);

                entity.Property(e => e.CreatedOn)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.CssLink)
                    .HasMaxLength(100)
                    .HasColumnName("CSS_Link");

                entity.Property(e => e.CssLinkLines)
                    .HasMaxLength(100)
                    .HasColumnName("CSS_Link_Lines");

                entity.Property(e => e.CurrentBalanceAmount).HasColumnType("money");

                entity.Property(e => e.Description).HasMaxLength(2000);

                entity.Property(e => e.Display)
                    .HasMaxLength(103)
                    .HasComputedColumnSql("(([VoucherNo]+' - ')+[dbo].[GetDocumentTypeName]([DocumentTypeID]))", false);

                entity.Property(e => e.DocumentAmount).HasColumnType("money");

                entity.Property(e => e.DocumentNo).HasMaxLength(50);

                entity.Property(e => e.DocumentTypeId).HasColumnName("DocumentTypeID");

                entity.Property(e => e.Iddate)
                    .HasColumnType("date")
                    .HasColumnName("IDDate");

                entity.Property(e => e.ImportedObjectUid)
                    .HasMaxLength(50)
                    .HasColumnName("ImportedObjectUID");

                entity.Property(e => e.InstallationUid).HasColumnName("InstallationUID");

                entity.Property(e => e.InvoiceDate).HasColumnType("date");

                entity.Property(e => e.Name).HasMaxLength(50);

                entity.Property(e => e.NameAlias).HasMaxLength(50);

                entity.Property(e => e.OldRecordId).HasColumnName("OldRecordID");

                entity.Property(e => e.OriginalNo).HasMaxLength(50);

                entity.Property(e => e.Pono)
                    .HasMaxLength(50)
                    .HasColumnName("PONo");

                entity.Property(e => e.Pstgdate)
                    .HasColumnType("date")
                    .HasColumnName("PSTGDate");

                entity.Property(e => e.RecordId)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("RecordID");

                entity.Property(e => e.SortOrder).HasDefaultValueSql("((100))");

                entity.Property(e => e.Status)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("status");

                entity.Property(e => e.Ten99amnt)
                    .HasColumnType("numeric(18, 3)")
                    .HasColumnName("TEN99AMNT");

                entity.Property(e => e.Ten99boxnumber)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("TEN99BOXNUMBER");

                entity.Property(e => e.Ten99type)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("TEN99TYPE");

                entity.Property(e => e.TrxDescription).HasMaxLength(50);

                entity.Property(e => e.UpdatedBy).HasMaxLength(50);

                entity.Property(e => e.UpdatedOn).HasColumnType("datetime");

                entity.Property(e => e.VendorId).HasColumnName("VendorID");

                entity.Property(e => e.VoucherNo)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.VoucherStatusId).HasColumnName("VoucherStatusID");
            });

            modelBuilder.Entity<VendorVoucherUpdateCreate>(entity =>
            {
                entity.HasKey(e => e.ObjectUid);

                entity.ToTable("Vendor_Voucher_Update_create");

                entity.Property(e => e.ObjectUid)
                    .HasColumnName("ObjectUID")
                    .HasDefaultValueSql("(newid())");

                entity.Property(e => e.Company).HasMaxLength(50);

                entity.Property(e => e.CreatedBy).HasMaxLength(50);

                entity.Property(e => e.CreatedOn)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.CssLink)
                    .HasMaxLength(100)
                    .HasColumnName("CSS_Link");

                entity.Property(e => e.CssLinkLines)
                    .HasMaxLength(100)
                    .HasColumnName("CSS_Link_Lines");

                entity.Property(e => e.CurrentBalanceAmount).HasColumnType("money");

                entity.Property(e => e.Description).HasMaxLength(2000);

                entity.Property(e => e.Display)
                    .HasMaxLength(103)
                    .HasComputedColumnSql("(([VoucherNo]+' - ')+[dbo].[GetDocumentTypeName]([DocumentTypeID]))", false);

                entity.Property(e => e.DocumentAmount).HasColumnType("money");

                entity.Property(e => e.DocumentNo).HasMaxLength(50);

                entity.Property(e => e.DocumentTypeId).HasColumnName("DocumentTypeID");

                entity.Property(e => e.Iddate)
                    .HasColumnType("date")
                    .HasColumnName("IDDate");

                entity.Property(e => e.ImportedObjectUid)
                    .HasMaxLength(50)
                    .HasColumnName("ImportedObjectUID");

                entity.Property(e => e.InstallationUid).HasColumnName("InstallationUID");

                entity.Property(e => e.InvoiceDate).HasColumnType("date");

                entity.Property(e => e.Name).HasMaxLength(50);

                entity.Property(e => e.NameAlias).HasMaxLength(50);

                entity.Property(e => e.OldRecordId).HasColumnName("OldRecordID");

                entity.Property(e => e.OriginalNo).HasMaxLength(50);

                entity.Property(e => e.Pono)
                    .HasMaxLength(50)
                    .HasColumnName("PONo");

                entity.Property(e => e.Pstgdate)
                    .HasColumnType("date")
                    .HasColumnName("PSTGDate");

                entity.Property(e => e.RecordId)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("RecordID");

                entity.Property(e => e.SortOrder).HasDefaultValueSql("((100))");

                entity.Property(e => e.Status)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("status");

                entity.Property(e => e.Ten99amnt)
                    .HasColumnType("numeric(18, 3)")
                    .HasColumnName("TEN99AMNT");

                entity.Property(e => e.Ten99boxnumber)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("TEN99BOXNUMBER");

                entity.Property(e => e.Ten99type)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("TEN99TYPE");

                entity.Property(e => e.TrxDescription).HasMaxLength(50);

                entity.Property(e => e.UpdatedBy).HasMaxLength(50);

                entity.Property(e => e.UpdatedOn).HasColumnType("datetime");

                entity.Property(e => e.VendorId).HasColumnName("VendorID");

                entity.Property(e => e.VoucherNo)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.VoucherStatusId).HasColumnName("VoucherStatusID");
            });

            modelBuilder.Entity<View1>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_1");

                entity.Property(e => e.Acct)
                    .HasMaxLength(75)
                    .HasColumnName("ACCT");

                entity.Property(e => e.MaskedAccountNo).HasMaxLength(50);
            });

            modelBuilder.Entity<View2>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_2");

                entity.Property(e => e.BdgaccountGroupId).HasColumnName("BDGAccountGroupID");

                entity.Property(e => e.BdgaccountGroupSubGroupId).HasColumnName("BDGAccountGroup_SubGroupID");

                entity.Property(e => e.BdgaccountGroupSubGroupSubGroupId).HasColumnName("BDGAccountGroup_SubGroup_SubGroupID");

                entity.Property(e => e.BdgaccountGroupSubGroupSubGroupSubGroupId).HasColumnName("BDGAccountGroup_SubGroup_SubGroup_SubGroupID");

                entity.Property(e => e.BdgdepartmentId).HasColumnName("BDGDepartmentID");

                entity.Property(e => e.MaskedAccountNo)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.ObjectUid).HasColumnName("ObjectUID");
            });

            modelBuilder.Entity<View4>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("View_4");

                entity.Property(e => e.Acct)
                    .HasMaxLength(75)
                    .HasColumnName("ACCT");
            });

            modelBuilder.Entity<YearSetup>(entity =>
            {
                entity.HasKey(e => e.ObjectUid);

                entity.ToTable("YearSetup");

                entity.Property(e => e.ObjectUid)
                    .HasColumnName("ObjectUID")
                    .HasDefaultValueSql("(newid())");

                entity.Property(e => e.ActualEndDate).HasColumnType("datetime");

                entity.Property(e => e.ActualStartDate).HasColumnType("datetime");

                entity.Property(e => e.BdgbudgetCopyOptionId).HasColumnName("BDGBudgetCopyOptionID");

                entity.Property(e => e.CopyYearSetupId).HasColumnName("Copy_YearSetupID");

                entity.Property(e => e.CreatedBy).HasMaxLength(50);

                entity.Property(e => e.CreatedOn)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Description).HasMaxLength(2000);

                entity.Property(e => e.Display)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasComputedColumnSql("([Name])", false);

                entity.Property(e => e.EndDate).HasColumnType("datetime");

                entity.Property(e => e.ImportedObjectUid)
                    .HasMaxLength(50)
                    .HasColumnName("ImportedObjectUID");

                entity.Property(e => e.InstallationUid).HasColumnName("InstallationUID");

                entity.Property(e => e.MonthId).HasColumnName("MonthID");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.NameAlias)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.NextyearSetupId).HasColumnName("NextyearSetupID");

                entity.Property(e => e.OldRecordId).HasColumnName("OldRecordID");

                entity.Property(e => e.PreviousYearSetupId).HasColumnName("Previous_YearSetupID");

                entity.Property(e => e.RecordId)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("RecordID");

                entity.Property(e => e.Softlock).HasColumnName("softlock");

                entity.Property(e => e.SortOrder).HasDefaultValueSql("((100))");

                entity.Property(e => e.StartDate).HasColumnType("datetime");

                entity.Property(e => e.TwoMoreYearsSetupId).HasColumnName("TwoMoreYearsSetupID");

                entity.Property(e => e.UpdatedBy).HasMaxLength(50);

                entity.Property(e => e.UpdatedOn).HasColumnType("datetime");

                entity.Property(e => e.YearCode).HasMaxLength(50);

                entity.Property(e => e.YearStatusId).HasColumnName("YearStatusID");

                entity.HasOne(d => d.BdgbudgetCopyOption)
                    .WithMany(p => p.YearSetups)
                    .HasForeignKey(d => d.BdgbudgetCopyOptionId)
                    .HasConstraintName("FK_YearSetup_BDGBudgetCopyOptionID_BDGBudgetCopyOption");

                entity.HasOne(d => d.CopyYearSetup)
                    .WithMany(p => p.InverseCopyYearSetup)
                    .HasForeignKey(d => d.CopyYearSetupId)
                    .HasConstraintName("FK_YearSetup_Copy_YearSetupID_YearSetup");

                entity.HasOne(d => d.PreviousYearSetup)
                    .WithMany(p => p.InversePreviousYearSetup)
                    .HasForeignKey(d => d.PreviousYearSetupId)
                    .HasConstraintName("FK_YearSetup_YearSetup");

                entity.HasOne(d => d.YearStatus)
                    .WithMany(p => p.YearSetups)
                    .HasForeignKey(d => d.YearStatusId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_YearSetup_YearStatus");
            });

            modelBuilder.Entity<YearSetupBdgaccountGroupFactor>(entity =>
            {
                entity.HasKey(e => e.ObjectUid);

                entity.ToTable("YearSetup_BDGAccountGroupFactor");

                entity.Property(e => e.ObjectUid)
                    .HasColumnName("ObjectUID")
                    .HasDefaultValueSql("(newid())");

                entity.Property(e => e.BdgaccountGroupId).HasColumnName("BDGAccountGroupID");

                entity.Property(e => e.CreatedBy).HasMaxLength(50);

                entity.Property(e => e.CreatedOn)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Description).HasMaxLength(2000);

                entity.Property(e => e.Display)
                    .HasMaxLength(50)
                    .HasComputedColumnSql("([Name])", false);

                entity.Property(e => e.Factor).HasColumnType("decimal(10, 2)");

                entity.Property(e => e.ImportedObjectUid)
                    .HasMaxLength(50)
                    .HasColumnName("ImportedObjectUID");

                entity.Property(e => e.InstallationUid).HasColumnName("InstallationUID");

                entity.Property(e => e.Name).HasMaxLength(50);

                entity.Property(e => e.NameAlias).HasMaxLength(50);

                entity.Property(e => e.OldRecordId).HasColumnName("OldRecordID");

                entity.Property(e => e.RecordId)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("RecordID");

                entity.Property(e => e.SortOrder).HasDefaultValueSql("((100))");

                entity.Property(e => e.UpdatedBy).HasMaxLength(50);

                entity.Property(e => e.UpdatedOn).HasColumnType("datetime");

                entity.Property(e => e.YearSetupId).HasColumnName("YearSetupID");

                entity.HasOne(d => d.BdgaccountGroup)
                    .WithMany(p => p.YearSetupBdgaccountGroupFactors)
                    .HasForeignKey(d => d.BdgaccountGroupId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_YearSetup_BDGAccountGroupFactor_BDGAccountGroupID_BDGAccountGroup");

                entity.HasOne(d => d.YearSetup)
                    .WithMany(p => p.YearSetupBdgaccountGroupFactors)
                    .HasForeignKey(d => d.YearSetupId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_YearSetup_BDGAccountGroupFactor_YearSetupID_YearSetup");
            });

            modelBuilder.Entity<YearSetupGrid>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("YearSetupGrid");

                entity.Property(e => e.ActualEndDate).HasColumnType("datetime");

                entity.Property(e => e.ActualStartDate).HasColumnType("datetime");

                entity.Property(e => e.EndDate).HasColumnType("datetime");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.ObjectUid).HasColumnName("ObjectUID");

                entity.Property(e => e.StartDate).HasColumnType("datetime");

                entity.Property(e => e.YearCode).HasMaxLength(50);

                entity.Property(e => e.YearStatus)
                    .IsRequired()
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<YearSetupTemp>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("YearSetup_temp");

                entity.Property(e => e.Dateprocess)
                    .HasColumnType("datetime")
                    .HasColumnName("dateprocess");

                entity.Property(e => e.Dateprocessend)
                    .HasColumnType("datetime")
                    .HasColumnName("dateprocessend");

                entity.Property(e => e.Objectuid).HasColumnName("objectuid");

                entity.Property(e => e.Statusvalue).HasColumnName("statusvalue");
            });

            modelBuilder.Entity<YearSetupTemp2>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("YearSetup_temp2");

                entity.Property(e => e.Dateprocess)
                    .HasColumnType("datetime")
                    .HasColumnName("dateprocess");

                entity.Property(e => e.Dateprocessend)
                    .HasColumnType("datetime")
                    .HasColumnName("dateprocessend");

                entity.Property(e => e.Objectuid).HasColumnName("objectuid");

                entity.Property(e => e.Statusvalue).HasColumnName("statusvalue");
            });

            modelBuilder.Entity<YearStatus>(entity =>
            {
                entity.HasKey(e => e.ObjectUid);

                entity.ToTable("YearStatus");

                entity.Property(e => e.ObjectUid)
                    .HasColumnName("ObjectUID")
                    .HasDefaultValueSql("(newid())");

                entity.Property(e => e.CreatedBy).HasMaxLength(50);

                entity.Property(e => e.CreatedOn)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Description).HasMaxLength(2000);

                entity.Property(e => e.Display)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasComputedColumnSql("([Name])", false);

                entity.Property(e => e.ImportedObjectUid)
                    .HasMaxLength(50)
                    .HasColumnName("ImportedObjectUID");

                entity.Property(e => e.InstallationUid).HasColumnName("InstallationUID");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.NameAlias)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.OldRecordId).HasColumnName("OldRecordID");

                entity.Property(e => e.RecordId)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("RecordID");

                entity.Property(e => e.SortOrder).HasDefaultValueSql("((100))");

                entity.Property(e => e.UpdatedBy).HasMaxLength(50);

                entity.Property(e => e.UpdatedOn).HasColumnType("datetime");
            });

            modelBuilder.Entity<YearStatusGrid>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("YearStatusGrid");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.ObjectUid).HasColumnName("ObjectUID");
            });

            modelBuilder.Entity<YearsetupidTemp>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("yearsetupid_temp");

                entity.Property(e => e.Enddate)
                    .HasColumnType("datetime")
                    .HasColumnName("enddate");

                entity.Property(e => e.Startdate)
                    .HasColumnType("datetime")
                    .HasColumnName("startdate");

                entity.Property(e => e.Yearsetupid).HasColumnName("yearsetupid");
            });

            modelBuilder.Entity<YearsetupidTemp1>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("yearsetupid_temp1");

                entity.Property(e => e.Enddate)
                    .HasColumnType("datetime")
                    .HasColumnName("enddate");

                entity.Property(e => e.Startdate)
                    .HasColumnType("datetime")
                    .HasColumnName("startdate");

                entity.Property(e => e.Yearsetupid).HasColumnName("yearsetupid");
            });

            modelBuilder.Entity<YesNo>(entity =>
            {
                entity.HasKey(e => e.ObjectUid);

                entity.ToTable("YesNo");

                entity.Property(e => e.ObjectUid)
                    .HasColumnName("ObjectUID")
                    .HasDefaultValueSql("(newid())");

                entity.Property(e => e.CreatedBy).HasMaxLength(50);

                entity.Property(e => e.CreatedOn)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Description).HasMaxLength(2000);

                entity.Property(e => e.Display)
                    .IsRequired()
                    .HasMaxLength(10)
                    .HasComputedColumnSql("([Name])", false);

                entity.Property(e => e.ImportedObjectUid)
                    .HasMaxLength(50)
                    .HasColumnName("ImportedObjectUID");

                entity.Property(e => e.InstallationUid).HasColumnName("InstallationUID");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(10);

                entity.Property(e => e.NameAlias)
                    .IsRequired()
                    .HasMaxLength(10);

                entity.Property(e => e.OldRecordId).HasColumnName("OldRecordID");

                entity.Property(e => e.RecordId)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("RecordID");

                entity.Property(e => e.SortOrder).HasDefaultValueSql("((100))");

                entity.Property(e => e.UpdatedBy).HasMaxLength(50);

                entity.Property(e => e.UpdatedOn).HasColumnType("datetime");
            });

            modelBuilder.Entity<YesNoGrid>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("YesNoGrid");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(10);

                entity.Property(e => e.ObjectUid).HasColumnName("ObjectUID");
            });

            OnModelCreatingPartial(modelBuilder);
        }

        partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
    }
}
